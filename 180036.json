{"path":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","commits":[{"id":"71946974c05b5dc4d3201f8abf4ecd2609bba400","date":1319655558,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","sourceNew":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","sourceOld":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1936b95f78af7bc57e67df5b0de3f21a54df10af","date":1420842770,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","sourceNew":"  private String getJSONWrap(String xmlResult) {  // maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","sourceOld":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b659435fdb2401d91fa87bb3df798ae41a8046cd","date":1600346713,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","sourceNew":null,"sourceOld":"  private String getJSONWrap(String xmlResult) {  // maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["1936b95f78af7bc57e67df5b0de3f21a54df10af"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b659435fdb2401d91fa87bb3df798ae41a8046cd"]},"commit2Childs":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["b659435fdb2401d91fa87bb3df798ae41a8046cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["1936b95f78af7bc57e67df5b0de3f21a54df10af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}