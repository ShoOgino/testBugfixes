{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readTermStateForField(int,DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,BlockTermState).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readTermStateForField(int,DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Reads a single {@link BlockTermState} for the provided field in the current block line of the provided input.\n     * @param termStatesInput Data input to read the {@link BlockTermState} from.\n     * @param blockHeader Current block header.\n     * @param reuse A previous {@link BlockTermState} to reuse; or null to create a new one.\n     * @return The {@link BlockTermState} corresponding to the provided field id; or null if the field\n     * does not occur in the line.\n     */\n    public static BlockTermState readTermStateForField(int fieldId, DataInput termStatesInput,\n                                                DeltaBaseTermStateSerializer termStateSerializer,\n                                                BlockHeader blockHeader, FieldInfos fieldInfos,\n                                                BlockTermState reuse) throws IOException {\n      assert fieldId >= 0;\n      int numFields = termStatesInput.readZInt();\n      if (numFields <= 0) {\n        int readFieldId = -numFields;\n        if (fieldId == readFieldId) {\n          return termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n              blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(readFieldId), reuse);\n        }\n        return null;\n      }\n\n      // There are multiple fields for the term.\n      // We have to read all the field ids (aka field numbers) sequentially.\n      // Then if the required field is in the list, we have to read all the TermState\n      // sequentially. This could be optimized with a jump-to-middle offset\n      // for example, but we don't need that currently.\n\n      boolean isFieldInList = false;\n      int[] readFieldIds = new int[numFields];\n      for (int i = 0; i < numFields; i++) {\n        int readFieldId = termStatesInput.readVInt();\n        if (!isFieldInList && readFieldId > fieldId) {\n          // As the list of fieldIds is sorted we can return early if we find fieldId greater than the seeked one.\n          // But if we found the seeked one, we have to read all the list to get to the term state part afterward (there is no jump offset).\n          return null;\n        }\n        isFieldInList |= readFieldId == fieldId;\n        readFieldIds[i] = readFieldId;\n      }\n      if (isFieldInList) {\n        for (int readFieldId : readFieldIds) {\n          BlockTermState termState = termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n              blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(readFieldId), reuse);\n          if (fieldId == readFieldId) {\n            return termState;\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d28da8a459f5f0c930da7185c56d0c25edd3fbd1","date":1577783695,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readTermStateForField(int,DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readTermStateForField(int,DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,BlockTermState).mjava","sourceNew":"    /**\n     * Reads a single {@link BlockTermState} for the provided field in the current block line of the provided input.\n     * @param termStatesInput Data input to read the {@link BlockTermState} from.\n     * @param blockHeader Current block header.\n     * @param reuse A previous {@link BlockTermState} to reuse; or null to create a new one.\n     * @return The {@link BlockTermState} corresponding to the provided field id; or null if the field\n     * does not occur in the line.\n     */\n    public BlockTermState readTermStateForField(int fieldId, DataInput termStatesInput,\n                                                DeltaBaseTermStateSerializer termStateSerializer,\n                                                BlockHeader blockHeader, FieldInfos fieldInfos,\n                                                BlockTermState reuse) throws IOException {\n      assert fieldId >= 0;\n      int numFields = termStatesInput.readZInt();\n      if (numFields <= 0) {\n        int readFieldId = -numFields;\n        if (fieldId == readFieldId) {\n          return termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n              blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(readFieldId), reuse);\n        }\n        return null;\n      }\n\n      // There are multiple fields for the term.\n      // We have to read all the field ids (aka field numbers) sequentially.\n      // Then if the required field is in the list, we have to read all the TermState\n      // sequentially. This could be optimized with a jump-to-middle offset\n      // for example, but we don't need that currently.\n\n      boolean isFieldInList = false;\n      int[] readFieldIds = new int[numFields];\n      for (int i = 0; i < numFields; i++) {\n        int readFieldId = termStatesInput.readVInt();\n        if (!isFieldInList && readFieldId > fieldId) {\n          // As the list of fieldIds is sorted we can return early if we find fieldId greater than the seeked one.\n          // But if we found the seeked one, we have to read all the list to get to the term state part afterward (there is no jump offset).\n          return null;\n        }\n        isFieldInList |= readFieldId == fieldId;\n        readFieldIds[i] = readFieldId;\n      }\n      if (isFieldInList) {\n        for (int readFieldId : readFieldIds) {\n          BlockTermState termState = termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n              blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(readFieldId), reuse);\n          if (fieldId == readFieldId) {\n            return termState;\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    /**\n     * Reads a single {@link BlockTermState} for the provided field in the current block line of the provided input.\n     * @param termStatesInput Data input to read the {@link BlockTermState} from.\n     * @param blockHeader Current block header.\n     * @param reuse A previous {@link BlockTermState} to reuse; or null to create a new one.\n     * @return The {@link BlockTermState} corresponding to the provided field id; or null if the field\n     * does not occur in the line.\n     */\n    public static BlockTermState readTermStateForField(int fieldId, DataInput termStatesInput,\n                                                DeltaBaseTermStateSerializer termStateSerializer,\n                                                BlockHeader blockHeader, FieldInfos fieldInfos,\n                                                BlockTermState reuse) throws IOException {\n      assert fieldId >= 0;\n      int numFields = termStatesInput.readZInt();\n      if (numFields <= 0) {\n        int readFieldId = -numFields;\n        if (fieldId == readFieldId) {\n          return termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n              blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(readFieldId), reuse);\n        }\n        return null;\n      }\n\n      // There are multiple fields for the term.\n      // We have to read all the field ids (aka field numbers) sequentially.\n      // Then if the required field is in the list, we have to read all the TermState\n      // sequentially. This could be optimized with a jump-to-middle offset\n      // for example, but we don't need that currently.\n\n      boolean isFieldInList = false;\n      int[] readFieldIds = new int[numFields];\n      for (int i = 0; i < numFields; i++) {\n        int readFieldId = termStatesInput.readVInt();\n        if (!isFieldInList && readFieldId > fieldId) {\n          // As the list of fieldIds is sorted we can return early if we find fieldId greater than the seeked one.\n          // But if we found the seeked one, we have to read all the list to get to the term state part afterward (there is no jump offset).\n          return null;\n        }\n        isFieldInList |= readFieldId == fieldId;\n        readFieldIds[i] = readFieldId;\n      }\n      if (isFieldInList) {\n        for (int readFieldId : readFieldIds) {\n          BlockTermState termState = termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n              blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(readFieldId), reuse);\n          if (fieldId == readFieldId) {\n            return termState;\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readTermStateForField(int,DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readTermStateForField(int,DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,BlockTermState).mjava","sourceNew":"    /**\n     * Reads a single {@link BlockTermState} for the provided field in the current block line of the provided input.\n     * @param termStatesInput Data input to read the {@link BlockTermState} from.\n     * @param blockHeader Current block header.\n     * @param reuse A previous {@link BlockTermState} to reuse; or null to create a new one.\n     * @return The {@link BlockTermState} corresponding to the provided field id; or null if the field\n     * does not occur in the line.\n     */\n    public BlockTermState readTermStateForField(int fieldId, DataInput termStatesInput,\n                                                DeltaBaseTermStateSerializer termStateSerializer,\n                                                BlockHeader blockHeader, FieldInfos fieldInfos,\n                                                BlockTermState reuse) throws IOException {\n      assert fieldId >= 0;\n      int numFields = termStatesInput.readZInt();\n      if (numFields <= 0) {\n        int readFieldId = -numFields;\n        if (fieldId == readFieldId) {\n          return termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n              blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(readFieldId), reuse);\n        }\n        return null;\n      }\n\n      // There are multiple fields for the term.\n      // We have to read all the field ids (aka field numbers) sequentially.\n      // Then if the required field is in the list, we have to read all the TermState\n      // sequentially. This could be optimized with a jump-to-middle offset\n      // for example, but we don't need that currently.\n\n      boolean isFieldInList = false;\n      int[] readFieldIds = new int[numFields];\n      for (int i = 0; i < numFields; i++) {\n        int readFieldId = termStatesInput.readVInt();\n        if (!isFieldInList && readFieldId > fieldId) {\n          // As the list of fieldIds is sorted we can return early if we find fieldId greater than the seeked one.\n          // But if we found the seeked one, we have to read all the list to get to the term state part afterward (there is no jump offset).\n          return null;\n        }\n        isFieldInList |= readFieldId == fieldId;\n        readFieldIds[i] = readFieldId;\n      }\n      if (isFieldInList) {\n        for (int readFieldId : readFieldIds) {\n          BlockTermState termState = termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n              blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(readFieldId), reuse);\n          if (fieldId == readFieldId) {\n            return termState;\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    /**\n     * Reads a single {@link BlockTermState} for the provided field in the current block line of the provided input.\n     * @param termStatesInput Data input to read the {@link BlockTermState} from.\n     * @param blockHeader Current block header.\n     * @param reuse A previous {@link BlockTermState} to reuse; or null to create a new one.\n     * @return The {@link BlockTermState} corresponding to the provided field id; or null if the field\n     * does not occur in the line.\n     */\n    public static BlockTermState readTermStateForField(int fieldId, DataInput termStatesInput,\n                                                DeltaBaseTermStateSerializer termStateSerializer,\n                                                BlockHeader blockHeader, FieldInfos fieldInfos,\n                                                BlockTermState reuse) throws IOException {\n      assert fieldId >= 0;\n      int numFields = termStatesInput.readZInt();\n      if (numFields <= 0) {\n        int readFieldId = -numFields;\n        if (fieldId == readFieldId) {\n          return termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n              blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(readFieldId), reuse);\n        }\n        return null;\n      }\n\n      // There are multiple fields for the term.\n      // We have to read all the field ids (aka field numbers) sequentially.\n      // Then if the required field is in the list, we have to read all the TermState\n      // sequentially. This could be optimized with a jump-to-middle offset\n      // for example, but we don't need that currently.\n\n      boolean isFieldInList = false;\n      int[] readFieldIds = new int[numFields];\n      for (int i = 0; i < numFields; i++) {\n        int readFieldId = termStatesInput.readVInt();\n        if (!isFieldInList && readFieldId > fieldId) {\n          // As the list of fieldIds is sorted we can return early if we find fieldId greater than the seeked one.\n          // But if we found the seeked one, we have to read all the list to get to the term state part afterward (there is no jump offset).\n          return null;\n        }\n        isFieldInList |= readFieldId == fieldId;\n        readFieldIds[i] = readFieldId;\n      }\n      if (isFieldInList) {\n        for (int readFieldId : readFieldIds) {\n          BlockTermState termState = termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n              blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(readFieldId), reuse);\n          if (fieldId == readFieldId) {\n            return termState;\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d28da8a459f5f0c930da7185c56d0c25edd3fbd1"]},"commit2Childs":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["c606b777c4250f3f3f6f66d659c7c4c403679b71","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}