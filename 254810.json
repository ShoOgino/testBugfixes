{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /** Register sub-objects such as caches\n   */\n  public void register() {\n    // register self\n    core.getInfoRegistry().put(\"searcher\", this);\n    core.getInfoRegistry().put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      core.getInfoRegistry().put(cache.name(), cache);\n    }\n    registerTime=System.currentTimeMillis();\n  }\n\n","sourceOld":"  /** Register sub-objects such as caches\n   */\n  public void register() {\n    // register self\n    core.getInfoRegistry().put(\"searcher\", this);\n    core.getInfoRegistry().put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      core.getInfoRegistry().put(cache.name(), cache);\n    }\n    registerTime=System.currentTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /** Register sub-objects such as caches\n   */\n  public void register() {\n    // register self\n    core.getInfoRegistry().put(\"searcher\", this);\n    core.getInfoRegistry().put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      core.getInfoRegistry().put(cache.name(), cache);\n    }\n    registerTime=System.currentTimeMillis();\n  }\n\n","sourceOld":"  /** Register sub-objects such as caches\n   */\n  public void register() {\n    // register self\n    core.getInfoRegistry().put(\"searcher\", this);\n    core.getInfoRegistry().put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      core.getInfoRegistry().put(cache.name(), cache);\n    }\n    registerTime=System.currentTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /** Register sub-objects such as caches\n   */\n  public void register() {\n    // register self\n    core.getInfoRegistry().put(\"searcher\", this);\n    core.getInfoRegistry().put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      core.getInfoRegistry().put(cache.name(), cache);\n    }\n    registerTime=System.currentTimeMillis();\n  }\n\n","sourceOld":"  /** Register sub-objects such as caches\n   */\n  public void register() {\n    // register self\n    core.getInfoRegistry().put(\"searcher\", this);\n    core.getInfoRegistry().put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      core.getInfoRegistry().put(cache.name(), cache);\n    }\n    registerTime=System.currentTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /** Register sub-objects such as caches\n   */\n  public void register() {\n    // register self\n    core.getInfoRegistry().put(\"searcher\", this);\n    core.getInfoRegistry().put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      core.getInfoRegistry().put(cache.name(), cache);\n    }\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /** Register sub-objects such as caches\n   */\n  public void register() {\n    // register self\n    core.getInfoRegistry().put(\"searcher\", this);\n    core.getInfoRegistry().put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      core.getInfoRegistry().put(cache.name(), cache);\n    }\n    registerTime=System.currentTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches\n   */\n  public void register() {\n    final Map<String,SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(\"searcher\", this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /** Register sub-objects such as caches\n   */\n  public void register() {\n    // register self\n    core.getInfoRegistry().put(\"searcher\", this);\n    core.getInfoRegistry().put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      core.getInfoRegistry().put(cache.name(), cache);\n    }\n    registerTime = new Date();\n  }\n\n","bugFix":null,"bugIntro":["462165462a7ae6ca998de69e7d2953022762c932"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"462165462a7ae6ca998de69e7d2953022762c932","date":1474606099,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches\n   */\n  public void register() {\n    final Map<String,SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /**\n   * Register sub-objects such as caches\n   */\n  public void register() {\n    final Map<String,SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(\"searcher\", this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    registerTime = new Date();\n  }\n\n","bugFix":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches\n   */\n  public void register() {\n    final Map<String,SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /**\n   * Register sub-objects such as caches\n   */\n  public void register() {\n    final Map<String,SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(\"searcher\", this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    registerTime = new Date();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches\n   */\n  public void register() {\n    final Map<String,SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /**\n   * Register sub-objects such as caches\n   */\n  public void register() {\n    final Map<String,SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(\"searcher\", this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    registerTime = new Date();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    SolrMetricManager manager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    for (SolrCache cache : cacheList) {\n      cache.initializeMetrics(manager, registry, SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(manager, registry, STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /**\n   * Register sub-objects such as caches\n   */\n  public void register() {\n    final Map<String,SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    registerTime = new Date();\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    for (SolrCache cache : cacheList) {\n      cache.initializeMetrics(manager, registry, SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(manager, registry, STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    SolrMetricManager manager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    for (SolrCache cache : cacheList) {\n      cache.initializeMetrics(manager, registry, SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(manager, registry, STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    for (SolrCache cache : cacheList) {\n      cache.initializeMetrics(manager, registry, SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(manager, registry, STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /**\n   * Register sub-objects such as caches\n   */\n  public void register() {\n    final Map<String,SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    registerTime = new Date();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    metricManager = core.getCoreContainer().getMetricManager();\n    registryName = core.getCoreMetricManager().getRegistryName();\n    for (SolrCache cache : cacheList) {\n      cache.initializeMetrics(metricManager, registryName, core.getMetricTag(), SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(metricManager, registryName, core.getMetricTag(), STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    for (SolrCache cache : cacheList) {\n      cache.initializeMetrics(manager, registry, SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(manager, registry, STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","bugFix":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    metricManager = core.getCoreContainer().getMetricManager();\n    registryName = core.getCoreMetricManager().getRegistryName();\n    for (SolrCache cache : cacheList) {\n      cache.initializeMetrics(metricManager, registryName, core.getMetricTag(), SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(metricManager, registryName, core.getMetricTag(), STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    SolrMetricManager manager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    for (SolrCache cache : cacheList) {\n      cache.initializeMetrics(manager, registry, SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(manager, registry, STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    this.solrMetricsContext = core.getSolrMetricsContext().getChildContext(this);\n    for (SolrCache cache : cacheList) {\n      // XXX use the deprecated method for back-compat. remove in 9.0\n      cache.initializeMetrics(solrMetricsContext.metricManager,\n          solrMetricsContext.registry, solrMetricsContext.tag, SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(solrMetricsContext, STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    metricManager = core.getCoreContainer().getMetricManager();\n    registryName = core.getCoreMetricManager().getRegistryName();\n    for (SolrCache cache : cacheList) {\n      cache.initializeMetrics(metricManager, registryName, core.getMetricTag(), SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(metricManager, registryName, core.getMetricTag(), STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    this.solrMetricsContext = core.getSolrMetricsContext().getChildContext(this);\n    for (SolrCache cache : cacheList) {\n      cache.initializeMetrics(solrMetricsContext, SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(solrMetricsContext, STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    this.solrMetricsContext = core.getSolrMetricsContext().getChildContext(this);\n    for (SolrCache cache : cacheList) {\n      // XXX use the deprecated method for back-compat. remove in 9.0\n      cache.initializeMetrics(solrMetricsContext.metricManager,\n          solrMetricsContext.registry, solrMetricsContext.tag, SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(solrMetricsContext, STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#register().mjava","sourceNew":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (@SuppressWarnings({\"rawtypes\"})SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    this.solrMetricsContext = core.getSolrMetricsContext().getChildContext(this);\n    for (@SuppressWarnings({\"rawtypes\"})SolrCache cache : cacheList) {\n      cache.initializeMetrics(solrMetricsContext, SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(solrMetricsContext, STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","sourceOld":"  /**\n   * Register sub-objects such as caches and our own metrics\n   */\n  public void register() {\n    final Map<String,SolrInfoBean> infoRegistry = core.getInfoRegistry();\n    // register self\n    infoRegistry.put(STATISTICS_KEY, this);\n    infoRegistry.put(name, this);\n    for (SolrCache cache : cacheList) {\n      cache.setState(SolrCache.State.LIVE);\n      infoRegistry.put(cache.name(), cache);\n    }\n    this.solrMetricsContext = core.getSolrMetricsContext().getChildContext(this);\n    for (SolrCache cache : cacheList) {\n      cache.initializeMetrics(solrMetricsContext, SolrMetricManager.mkName(cache.name(), STATISTICS_KEY));\n    }\n    initializeMetrics(solrMetricsContext, STATISTICS_KEY);\n    registerTime = new Date();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","bfc52860e6d13d034226a760813c59d984c6817a"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"462165462a7ae6ca998de69e7d2953022762c932":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ac9de183adbc9483681f275ac1e2d92ed19f52e1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bfc52860e6d13d034226a760813c59d984c6817a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ac9de183adbc9483681f275ac1e2d92ed19f52e1","462165462a7ae6ca998de69e7d2953022762c932"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"43564cbb30b064675027cfb569564e8531096e97":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"c26f00b574427b55127e869b935845554afde1fa":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"462165462a7ae6ca998de69e7d2953022762c932":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["462165462a7ae6ca998de69e7d2953022762c932","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"816521ebaad5add9cb96bb88c577394e2938c40b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}