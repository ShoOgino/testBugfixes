{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    log.info(\"Distrib commit to:\" + nodes);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1525b4dfbc0d413b8d7247da232009778e624836"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    log.info(\"Distrib commit to:\" + nodes);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1525b4dfbc0d413b8d7247da232009778e624836","date":1351101135,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // make sure we are ordered\n    flushAdds(1);\n    flushDeletes(1);\n\n    \n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    log.info(\"Distrib commit to:\" + nodes + \" params:\" + params);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    log.info(\"Distrib commit to:\" + nodes);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","bugFix":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"bugIntro":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // make sure we are ordered\n    flushAdds(1);\n    flushDeletes(1);\n\n    \n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    log.info(\"Distrib commit to:\" + nodes + \" params:\" + params);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    log.info(\"Distrib commit to:\" + nodes);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // make sure we are ordered\n    flushAdds(1);\n    flushDeletes(1);\n\n    \n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    log.info(\"Distrib commit to:\" + nodes + \" params:\" + params);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // make sure we are ordered\n    flushAdds(1);\n    flushDeletes(1);\n\n    \n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequestExt ureq = new UpdateRequestExt();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    log.info(\"Distrib commit to:\" + nodes + \" params:\" + params);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    servers.blockUntilFinished();\n    doRetriesIfNeeded();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to:\" + nodes + \" params:\" + params);\n    \n    for (Node node : nodes) {\n      submit(new Req(node, uReq, false));\n    }\n    \n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // make sure we are ordered\n    flushAdds(1);\n    flushDeletes(1);\n\n    \n    // Wait for all outstanding responses to make sure that a commit\n    // can't sneak in ahead of adds or deletes we already sent.\n    // We could do this on a per-server basis, but it's more complex\n    // and this solution will lead to commits happening closer together.\n    checkResponses(true);\n    \n    // currently, we dont try to piggy back on outstanding adds or deletes\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.setParams(params);\n    \n    addCommit(ureq, cmd);\n    \n    log.info(\"Distrib commit to:\" + nodes + \" params:\" + params);\n    \n    for (Node node : nodes) {\n      submit(ureq, node);\n    }\n    \n    // if the command wanted to block until everything was committed,\n    // then do that here.\n    \n    if (cmd.waitSearcher) {\n      checkResponses(true);\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1525b4dfbc0d413b8d7247da232009778e624836","d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"bugIntro":["e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68bccf37d3bf3d0924d55ab08d457d8045342a4e","date":1385580262,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    servers.blockUntilFinished();\n    doRetriesIfNeeded();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to:\" + nodes + \" params:\" + params);\n    \n    for (Node node : nodes) {\n      submit(new Req(cmd.toString(), node, uReq, false));\n    }\n    \n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    servers.blockUntilFinished();\n    doRetriesIfNeeded();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to:\" + nodes + \" params:\" + params);\n    \n    for (Node node : nodes) {\n      submit(new Req(node, uReq, false));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a51acc2e27bfb18091f9395494aebe82266f7ce7","date":1385611742,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    servers.blockUntilFinished();\n    doRetriesIfNeeded();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to: {} params: {}\", nodes, params);\n    \n    for (Node node : nodes) {\n      submit(new Req(cmd.toString(), node, uReq, false));\n    }\n    \n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    servers.blockUntilFinished();\n    doRetriesIfNeeded();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to:\" + nodes + \" params:\" + params);\n    \n    for (Node node : nodes) {\n      submit(new Req(cmd.toString(), node, uReq, false));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    servers.blockUntilFinished();\n    doRetriesIfNeeded();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to: {} params: {}\", nodes, params);\n    \n    for (Node node : nodes) {\n      submit(new Req(cmd.toString(), node, uReq, false));\n    }\n    \n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    servers.blockUntilFinished();\n    doRetriesIfNeeded();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to:\" + nodes + \" params:\" + params);\n    \n    for (Node node : nodes) {\n      submit(new Req(node, uReq, false));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b","date":1406573123,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    blockAndDoRetries();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to: {} params: {}\", nodes, params);\n    \n    for (Node node : nodes) {\n      submit(new Req(cmd.toString(), node, uReq, false), true);\n    }\n    \n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    servers.blockUntilFinished();\n    doRetriesIfNeeded();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to: {} params: {}\", nodes, params);\n    \n    for (Node node : nodes) {\n      submit(new Req(cmd.toString(), node, uReq, false));\n    }\n    \n  }\n\n","bugFix":["68bccf37d3bf3d0924d55ab08d457d8045342a4e","91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    blockAndDoRetries();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to: {} params: {}\", nodes, params);\n    \n    for (Node node : nodes) {\n      submit(new Req(cmd, node, uReq, false), true);\n    }\n    \n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    blockAndDoRetries();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to: {} params: {}\", nodes, params);\n    \n    for (Node node : nodes) {\n      submit(new Req(cmd.toString(), node, uReq, false), true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#distribCommit(CommitUpdateCommand,List[Node],ModifiableSolrParams).mjava","sourceNew":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    blockAndDoRetries();\n    log.debug(\"Distrib commit to: {} params: {}\", nodes, params);\n\n    for (Node node : nodes) {\n      UpdateRequest uReq = new UpdateRequest();\n      uReq.setParams(params);\n\n      addCommit(uReq, cmd);\n      submit(new Req(cmd, node, uReq, false), true);\n    }\n    \n  }\n\n","sourceOld":"  public void distribCommit(CommitUpdateCommand cmd, List<Node> nodes,\n      ModifiableSolrParams params) throws IOException {\n    \n    // we need to do any retries before commit...\n    blockAndDoRetries();\n    \n    UpdateRequest uReq = new UpdateRequest();\n    uReq.setParams(params);\n    \n    addCommit(uReq, cmd);\n    \n    log.debug(\"Distrib commit to: {} params: {}\", nodes, params);\n    \n    for (Node node : nodes) {\n      submit(new Req(cmd, node, uReq, false), true);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["1525b4dfbc0d413b8d7247da232009778e624836"],"e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b":["a51acc2e27bfb18091f9395494aebe82266f7ce7"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a51acc2e27bfb18091f9395494aebe82266f7ce7":["68bccf37d3bf3d0924d55ab08d457d8045342a4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68bccf37d3bf3d0924d55ab08d457d8045342a4e":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48","a51acc2e27bfb18091f9395494aebe82266f7ce7"],"f2126b84bd093fa3d921582a109a0ee578c28126":["6013b4c7388f1627659c8f96c44abd10a294d3a6","1525b4dfbc0d413b8d7247da232009778e624836"],"1525b4dfbc0d413b8d7247da232009778e624836":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["68bccf37d3bf3d0924d55ab08d457d8045342a4e","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["05a14b2611ead08655a2b2bdc61632eb31316e57","f2126b84bd093fa3d921582a109a0ee578c28126","1525b4dfbc0d413b8d7247da232009778e624836"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a51acc2e27bfb18091f9395494aebe82266f7ce7":["e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","05a14b2611ead08655a2b2bdc61632eb31316e57","6013b4c7388f1627659c8f96c44abd10a294d3a6","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"68bccf37d3bf3d0924d55ab08d457d8045342a4e":["a51acc2e27bfb18091f9395494aebe82266f7ce7"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"1525b4dfbc0d413b8d7247da232009778e624836":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","f2126b84bd093fa3d921582a109a0ee578c28126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","05a14b2611ead08655a2b2bdc61632eb31316e57","0d22ac6a4146774c1bc8400160fc0b6150294e92","74f45af4339b0daf7a95c820ab88c1aea74fbce0","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}