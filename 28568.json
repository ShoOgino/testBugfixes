{"path":"solr/core/src/test/org/apache/solr/response/RetrieveField[TestRetrieveFieldsOptimizer]#expectedValsAsStrings(FieldInfo,List[String]).mjava","commits":[{"id":"96ecd141e96e7a7a65822d7fada5ddc585b21149","date":1534786652,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/RetrieveField[TestRetrieveFieldsOptimizer]#expectedValsAsStrings(FieldInfo,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  void expectedValsAsStrings(final FieldInfo info, List<String> valsAsStrings) {\n    if (schemaField.stored() || schemaField.multiValued() == false) {\n      return ;\n    }\n\n    switch (info.getDocValuesType()) {\n      case NONE: // These three types are single values, just return.\n      case NUMERIC:\n      case BINARY: // here for completeness, really doesn't make sense.\n        return;\n\n      case SORTED_NUMERIC: // Can have multiple, identical values. This was a surprise to me.\n        break;\n\n      case SORTED_SET: // Obey set semantics.\n      case SORTED:\n        Set<String> uniq = new TreeSet<>(valsAsStrings);\n        valsAsStrings.clear();\n        valsAsStrings.addAll(uniq);\n        break;\n    }\n\n    // Now order them if string-based comparison isn't reasonable\n    switch (testFieldType.getSolrTypeClass()) {\n      case \"solr.TrieIntField\":\n      case \"solr.TrieLongField\":\n\n        Collections.sort(valsAsStrings, Comparator.comparingInt(Integer::parseInt));\n        break;\n      case \"solr.IntPointField\":\n      case \"solr.LongPointField\":\n        Collections.sort(valsAsStrings, Comparator.comparingLong(Long::parseLong));\n        break;\n\n      case \"solr.TrieFloatField\":\n      case \"solr.FloatPointField\":\n      case \"solr.TrieDoubleField\":\n      case \"solr.DoublePointField\":\n        Collections.sort(valsAsStrings, Comparator.comparingDouble(Double::parseDouble));\n        break;\n\n      case \"solr.TrieDateField\":\n      case \"solr.DatePointField\":\n      case \"solr.StrField\":\n      case \"solr.BoolField\":\n        Collections.sort(valsAsStrings);\n        break;\n\n      default:\n        fail(\"Found no case for field \" + name + \" type \" + type);\n        break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96ecd141e96e7a7a65822d7fada5ddc585b21149"]},"commit2Childs":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ecd141e96e7a7a65822d7fada5ddc585b21149"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}