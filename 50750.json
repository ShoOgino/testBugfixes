{"path":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","commits":[{"id":"f0c7cf7c5321e0d685b7ac1fce06922d12b16203","date":1094419649,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance();\n    cal.setTimeInMillis(round(time, resolution));\n\n    SimpleDateFormat sdf = new SimpleDateFormat();\n    String pattern = null;\n    if (resolution == Resolution.YEAR) {\n      pattern = \"yyyy\";\n    } else if (resolution == Resolution.MONTH) {\n      pattern = \"yyyyMM\";\n    } else if (resolution == Resolution.DAY) {\n      pattern = \"yyyyMMdd\";\n    } else if (resolution == Resolution.HOUR) {\n      pattern = \"yyyyMMddHH\";\n    } else if (resolution == Resolution.MINUTE) {\n      pattern = \"yyyyMMddHHmm\";\n    } else if (resolution == Resolution.SECOND) {\n      pattern = \"yyyyMMddHHmmss\";\n    } else if (resolution == Resolution.MILLISECOND) {\n      pattern = \"yyyyMMddHHmmssSSS\";\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    sdf.applyPattern(pattern);\n    return sdf.format(cal.getTime());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c207f4dd27c1ea23adc2a2c92fe287c68c908c","date":1100644074,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","pathOld":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance();\n\n    //protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(round(time, resolution));\n    \n    cal.setTime(new Date(round(time, resolution)));\n\n    SimpleDateFormat sdf = new SimpleDateFormat();\n    String pattern = null;\n    if (resolution == Resolution.YEAR) {\n      pattern = \"yyyy\";\n    } else if (resolution == Resolution.MONTH) {\n      pattern = \"yyyyMM\";\n    } else if (resolution == Resolution.DAY) {\n      pattern = \"yyyyMMdd\";\n    } else if (resolution == Resolution.HOUR) {\n      pattern = \"yyyyMMddHH\";\n    } else if (resolution == Resolution.MINUTE) {\n      pattern = \"yyyyMMddHHmm\";\n    } else if (resolution == Resolution.SECOND) {\n      pattern = \"yyyyMMddHHmmss\";\n    } else if (resolution == Resolution.MILLISECOND) {\n      pattern = \"yyyyMMddHHmmssSSS\";\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    sdf.applyPattern(pattern);\n    return sdf.format(cal.getTime());\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance();\n    cal.setTimeInMillis(round(time, resolution));\n\n    SimpleDateFormat sdf = new SimpleDateFormat();\n    String pattern = null;\n    if (resolution == Resolution.YEAR) {\n      pattern = \"yyyy\";\n    } else if (resolution == Resolution.MONTH) {\n      pattern = \"yyyyMM\";\n    } else if (resolution == Resolution.DAY) {\n      pattern = \"yyyyMMdd\";\n    } else if (resolution == Resolution.HOUR) {\n      pattern = \"yyyyMMddHH\";\n    } else if (resolution == Resolution.MINUTE) {\n      pattern = \"yyyyMMddHHmm\";\n    } else if (resolution == Resolution.SECOND) {\n      pattern = \"yyyyMMddHHmmss\";\n    } else if (resolution == Resolution.MILLISECOND) {\n      pattern = \"yyyyMMddHHmmssSSS\";\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    sdf.applyPattern(pattern);\n    return sdf.format(cal.getTime());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0","date":1139163422,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","pathOld":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>; using UTC as timezone\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance(GMT);\n\n    //protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(round(time, resolution));\n    \n    cal.setTime(new Date(round(time, resolution)));\n\n    SimpleDateFormat sdf = new SimpleDateFormat();\n    sdf.setTimeZone(GMT);\n    String pattern = null;\n    if (resolution == Resolution.YEAR) {\n      pattern = \"yyyy\";\n    } else if (resolution == Resolution.MONTH) {\n      pattern = \"yyyyMM\";\n    } else if (resolution == Resolution.DAY) {\n      pattern = \"yyyyMMdd\";\n    } else if (resolution == Resolution.HOUR) {\n      pattern = \"yyyyMMddHH\";\n    } else if (resolution == Resolution.MINUTE) {\n      pattern = \"yyyyMMddHHmm\";\n    } else if (resolution == Resolution.SECOND) {\n      pattern = \"yyyyMMddHHmmss\";\n    } else if (resolution == Resolution.MILLISECOND) {\n      pattern = \"yyyyMMddHHmmssSSS\";\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    sdf.applyPattern(pattern);\n    return sdf.format(cal.getTime());\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance();\n\n    //protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(round(time, resolution));\n    \n    cal.setTime(new Date(round(time, resolution)));\n\n    SimpleDateFormat sdf = new SimpleDateFormat();\n    String pattern = null;\n    if (resolution == Resolution.YEAR) {\n      pattern = \"yyyy\";\n    } else if (resolution == Resolution.MONTH) {\n      pattern = \"yyyyMM\";\n    } else if (resolution == Resolution.DAY) {\n      pattern = \"yyyyMMdd\";\n    } else if (resolution == Resolution.HOUR) {\n      pattern = \"yyyyMMddHH\";\n    } else if (resolution == Resolution.MINUTE) {\n      pattern = \"yyyyMMddHHmm\";\n    } else if (resolution == Resolution.SECOND) {\n      pattern = \"yyyyMMddHHmmss\";\n    } else if (resolution == Resolution.MILLISECOND) {\n      pattern = \"yyyyMMddHHmmssSSS\";\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    sdf.applyPattern(pattern);\n    return sdf.format(cal.getTime());\n  }\n\n","bugFix":["f0c7cf7c5321e0d685b7ac1fce06922d12b16203"],"bugIntro":["f6786d2653a8132c098ce0726e0a62fc0110dbf1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28017b5a799539c88697d8570c796d841accb25f","date":1153514303,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","pathOld":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>; using UTC as timezone\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance(GMT);\n\n    //protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(round(time, resolution));\n    \n    cal.setTime(new Date(round(time, resolution)));\n\n    String result;\n    if (resolution == Resolution.YEAR) {\n      synchronized (YEAR_FORMAT) {\n        result = YEAR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MONTH) {\n      synchronized (MONTH_FORMAT) {\n        result = MONTH_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.DAY) {\n      synchronized (DAY_FORMAT) {\n        result = DAY_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.HOUR) {\n      synchronized (HOUR_FORMAT) {\n        result = HOUR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MINUTE) {\n      synchronized (MINUTE_FORMAT) {\n        result = MINUTE_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.SECOND) {\n      synchronized (SECOND_FORMAT) {\n        result = SECOND_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MILLISECOND) {\n      synchronized (MILLISECOND_FORMAT) {\n        result = MILLISECOND_FORMAT.format(cal.getTime());\n      }\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>; using UTC as timezone\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance(GMT);\n\n    //protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(round(time, resolution));\n    \n    cal.setTime(new Date(round(time, resolution)));\n\n    SimpleDateFormat sdf = new SimpleDateFormat();\n    sdf.setTimeZone(GMT);\n    String pattern = null;\n    if (resolution == Resolution.YEAR) {\n      pattern = \"yyyy\";\n    } else if (resolution == Resolution.MONTH) {\n      pattern = \"yyyyMM\";\n    } else if (resolution == Resolution.DAY) {\n      pattern = \"yyyyMMdd\";\n    } else if (resolution == Resolution.HOUR) {\n      pattern = \"yyyyMMddHH\";\n    } else if (resolution == Resolution.MINUTE) {\n      pattern = \"yyyyMMddHHmm\";\n    } else if (resolution == Resolution.SECOND) {\n      pattern = \"yyyyMMddHHmmss\";\n    } else if (resolution == Resolution.MILLISECOND) {\n      pattern = \"yyyyMMddHHmmssSSS\";\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    sdf.applyPattern(pattern);\n    return sdf.format(cal.getTime());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6786d2653a8132c098ce0726e0a62fc0110dbf1","date":1201639593,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","pathOld":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>; using GMT as timezone\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance(GMT);\n\n    //protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(round(time, resolution));\n    \n    cal.setTime(new Date(round(time, resolution)));\n\n    String result;\n    if (resolution == Resolution.YEAR) {\n      synchronized (YEAR_FORMAT) {\n        result = YEAR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MONTH) {\n      synchronized (MONTH_FORMAT) {\n        result = MONTH_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.DAY) {\n      synchronized (DAY_FORMAT) {\n        result = DAY_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.HOUR) {\n      synchronized (HOUR_FORMAT) {\n        result = HOUR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MINUTE) {\n      synchronized (MINUTE_FORMAT) {\n        result = MINUTE_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.SECOND) {\n      synchronized (SECOND_FORMAT) {\n        result = SECOND_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MILLISECOND) {\n      synchronized (MILLISECOND_FORMAT) {\n        result = MILLISECOND_FORMAT.format(cal.getTime());\n      }\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>; using UTC as timezone\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance(GMT);\n\n    //protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(round(time, resolution));\n    \n    cal.setTime(new Date(round(time, resolution)));\n\n    String result;\n    if (resolution == Resolution.YEAR) {\n      synchronized (YEAR_FORMAT) {\n        result = YEAR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MONTH) {\n      synchronized (MONTH_FORMAT) {\n        result = MONTH_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.DAY) {\n      synchronized (DAY_FORMAT) {\n        result = DAY_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.HOUR) {\n      synchronized (HOUR_FORMAT) {\n        result = HOUR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MINUTE) {\n      synchronized (MINUTE_FORMAT) {\n        result = MINUTE_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.SECOND) {\n      synchronized (SECOND_FORMAT) {\n        result = SECOND_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MILLISECOND) {\n      synchronized (MILLISECOND_FORMAT) {\n        result = MILLISECOND_FORMAT.format(cal.getTime());\n      }\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return result;\n  }\n\n","bugFix":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d828a14d944c969b556a3d9a035d5822f118646","date":1243356632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","pathOld":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>; using GMT as timezone\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance(GMT);\n\n    cal.setTimeInMillis(round(time, resolution));\n\n    String result;\n    if (resolution == Resolution.YEAR) {\n      synchronized (YEAR_FORMAT) {\n        result = YEAR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MONTH) {\n      synchronized (MONTH_FORMAT) {\n        result = MONTH_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.DAY) {\n      synchronized (DAY_FORMAT) {\n        result = DAY_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.HOUR) {\n      synchronized (HOUR_FORMAT) {\n        result = HOUR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MINUTE) {\n      synchronized (MINUTE_FORMAT) {\n        result = MINUTE_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.SECOND) {\n      synchronized (SECOND_FORMAT) {\n        result = SECOND_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MILLISECOND) {\n      synchronized (MILLISECOND_FORMAT) {\n        result = MILLISECOND_FORMAT.format(cal.getTime());\n      }\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>; using GMT as timezone\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance(GMT);\n\n    //protected in JDK's prior to 1.4\n    //cal.setTimeInMillis(round(time, resolution));\n    \n    cal.setTime(new Date(round(time, resolution)));\n\n    String result;\n    if (resolution == Resolution.YEAR) {\n      synchronized (YEAR_FORMAT) {\n        result = YEAR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MONTH) {\n      synchronized (MONTH_FORMAT) {\n        result = MONTH_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.DAY) {\n      synchronized (DAY_FORMAT) {\n        result = DAY_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.HOUR) {\n      synchronized (HOUR_FORMAT) {\n        result = HOUR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MINUTE) {\n      synchronized (MINUTE_FORMAT) {\n        result = MINUTE_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.SECOND) {\n      synchronized (SECOND_FORMAT) {\n        result = SECOND_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MILLISECOND) {\n      synchronized (MILLISECOND_FORMAT) {\n        result = MILLISECOND_FORMAT.format(cal.getTime());\n      }\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea5e8d049564c69ae93ebb291c320fb586c02733","date":1243512095,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","pathOld":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>; using GMT as timezone\n   */\n  public static synchronized String timeToString(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(round(time, resolution));\n    Date date = calInstance.getTime();\n    \n    if (resolution == Resolution.YEAR) {\n      return YEAR_FORMAT.format(date);\n    } else if (resolution == Resolution.MONTH) {\n      return MONTH_FORMAT.format(date);\n    } else if (resolution == Resolution.DAY) {\n      return DAY_FORMAT.format(date);\n    } else if (resolution == Resolution.HOUR) {\n      return HOUR_FORMAT.format(date);\n    } else if (resolution == Resolution.MINUTE) {\n      return MINUTE_FORMAT.format(date);\n    } else if (resolution == Resolution.SECOND) {\n      return SECOND_FORMAT.format(date);\n    } else if (resolution == Resolution.MILLISECOND) {\n      return MILLISECOND_FORMAT.format(date);\n    }\n    \n    throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>; using GMT as timezone\n   */\n  public static String timeToString(long time, Resolution resolution) {\n    Calendar cal = Calendar.getInstance(GMT);\n\n    cal.setTimeInMillis(round(time, resolution));\n\n    String result;\n    if (resolution == Resolution.YEAR) {\n      synchronized (YEAR_FORMAT) {\n        result = YEAR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MONTH) {\n      synchronized (MONTH_FORMAT) {\n        result = MONTH_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.DAY) {\n      synchronized (DAY_FORMAT) {\n        result = DAY_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.HOUR) {\n      synchronized (HOUR_FORMAT) {\n        result = HOUR_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MINUTE) {\n      synchronized (MINUTE_FORMAT) {\n        result = MINUTE_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.SECOND) {\n      synchronized (SECOND_FORMAT) {\n        result = SECOND_FORMAT.format(cal.getTime());\n      }\n    } else if (resolution == Resolution.MILLISECOND) {\n      synchronized (MILLISECOND_FORMAT) {\n        result = MILLISECOND_FORMAT.format(cal.getTime());\n      }\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","pathOld":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depending on <code>resolution</code>; using GMT as timezone\n   */\n  public static synchronized String timeToString(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(round(time, resolution));\n    Date date = calInstance.getTime();\n    \n    if (resolution == Resolution.YEAR) {\n      return YEAR_FORMAT.format(date);\n    } else if (resolution == Resolution.MONTH) {\n      return MONTH_FORMAT.format(date);\n    } else if (resolution == Resolution.DAY) {\n      return DAY_FORMAT.format(date);\n    } else if (resolution == Resolution.HOUR) {\n      return HOUR_FORMAT.format(date);\n    } else if (resolution == Resolution.MINUTE) {\n      return MINUTE_FORMAT.format(date);\n    } else if (resolution == Resolution.SECOND) {\n      return SECOND_FORMAT.format(date);\n    } else if (resolution == Resolution.MILLISECOND) {\n      return MILLISECOND_FORMAT.format(date);\n    }\n    \n    throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depeding on <code>resolution</code>; using GMT as timezone\n   */\n  public static synchronized String timeToString(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(round(time, resolution));\n    Date date = calInstance.getTime();\n    \n    if (resolution == Resolution.YEAR) {\n      return YEAR_FORMAT.format(date);\n    } else if (resolution == Resolution.MONTH) {\n      return MONTH_FORMAT.format(date);\n    } else if (resolution == Resolution.DAY) {\n      return DAY_FORMAT.format(date);\n    } else if (resolution == Resolution.HOUR) {\n      return HOUR_FORMAT.format(date);\n    } else if (resolution == Resolution.MINUTE) {\n      return MINUTE_FORMAT.format(date);\n    } else if (resolution == Resolution.SECOND) {\n      return SECOND_FORMAT.format(date);\n    } else if (resolution == Resolution.MILLISECOND) {\n      return MILLISECOND_FORMAT.format(date);\n    }\n    \n    throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/DateTools#timeToString(long,Resolution).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * \n   * @param time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   * @param resolution the desired resolution, see\n   *  {@link #round(long, DateTools.Resolution)}\n   * @return a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,\n   *  depending on <code>resolution</code>; using GMT as timezone\n   */\n  public static synchronized String timeToString(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(round(time, resolution));\n    Date date = calInstance.getTime();\n    \n    if (resolution == Resolution.YEAR) {\n      return YEAR_FORMAT.format(date);\n    } else if (resolution == Resolution.MONTH) {\n      return MONTH_FORMAT.format(date);\n    } else if (resolution == Resolution.DAY) {\n      return DAY_FORMAT.format(date);\n    } else if (resolution == Resolution.HOUR) {\n      return HOUR_FORMAT.format(date);\n    } else if (resolution == Resolution.MINUTE) {\n      return MINUTE_FORMAT.format(date);\n    } else if (resolution == Resolution.SECOND) {\n      return SECOND_FORMAT.format(date);\n    } else if (resolution == Resolution.MILLISECOND) {\n      return MILLISECOND_FORMAT.format(date);\n    }\n    \n    throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28017b5a799539c88697d8570c796d841accb25f":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0"],"f0c7cf7c5321e0d685b7ac1fce06922d12b16203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6786d2653a8132c098ce0726e0a62fc0110dbf1":["28017b5a799539c88697d8570c796d841accb25f"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["ea5e8d049564c69ae93ebb291c320fb586c02733"],"ea5e8d049564c69ae93ebb291c320fb586c02733":["1d828a14d944c969b556a3d9a035d5822f118646"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"11c207f4dd27c1ea23adc2a2c92fe287c68c908c":["f0c7cf7c5321e0d685b7ac1fce06922d12b16203"],"1d828a14d944c969b556a3d9a035d5822f118646":["f6786d2653a8132c098ce0726e0a62fc0110dbf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0":["11c207f4dd27c1ea23adc2a2c92fe287c68c908c"]},"commit2Childs":{"28017b5a799539c88697d8570c796d841accb25f":["f6786d2653a8132c098ce0726e0a62fc0110dbf1"],"f0c7cf7c5321e0d685b7ac1fce06922d12b16203":["11c207f4dd27c1ea23adc2a2c92fe287c68c908c"],"f6786d2653a8132c098ce0726e0a62fc0110dbf1":["1d828a14d944c969b556a3d9a035d5822f118646"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0c7cf7c5321e0d685b7ac1fce06922d12b16203"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ea5e8d049564c69ae93ebb291c320fb586c02733":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"11c207f4dd27c1ea23adc2a2c92fe287c68c908c":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0"],"1d828a14d944c969b556a3d9a035d5822f118646":["ea5e8d049564c69ae93ebb291c320fb586c02733"],"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0":["28017b5a799539c88697d8570c796d841accb25f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}