{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","commits":[{"id":"673d1479bcc124ba45b876b686d19f67435bca90","date":1351013999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      // nocommit mixin some unicode here?\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      // nocommit must fix lookup to tie break properly!!:\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ba222c174ec1943d8d14d012d1d6e24a1cc4972","date":1351522220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, 3, true);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      // nocommit mixin some unicode here?\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      // nocommit must fix lookup to tie break properly!!:\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31b5edc7f41e0c481513ce8881696e3e042ff493","date":1351528983,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, 3);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, 3, true);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff58ebe70c75a455a2acfc526029e7d912270bd","date":1351529217,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, prefixLen);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, 3);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","date":1351615637,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, prefixLen);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6","date":1374158194,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, prefixLen);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":["8ff58ebe70c75a455a2acfc526029e7d912270bd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, prefixLen);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreqPayload> answers = new ArrayList<TermFreqPayload>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreqPayload(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreqPayload>() {\n        @Override\n        public int compare(TermFreqPayload a, TermFreqPayload b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreqPayload tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqPayloadArrayIterator(answers.toArray(new TermFreqPayload[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreq> answers = new ArrayList<TermFreq>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreq(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreq>() {\n        @Override\n        public int compare(TermFreq a, TermFreq b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreq tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqArrayIterator(answers.toArray(new TermFreq[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<Input>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<TermFreqPayload> answers = new ArrayList<TermFreqPayload>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new TermFreqPayload(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<TermFreqPayload>() {\n        @Override\n        public int compare(TermFreqPayload a, TermFreqPayload b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(TermFreqPayload tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new TermFreqPayloadArrayIterator(answers.toArray(new TermFreqPayload[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4e0095ef720d1b8e7406847147af69f19af3ab6","date":1383131477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<Input>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, false, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<Input>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33f87fe6faf49dfc1e66f45e841e24838c2f725c","date":1383142987,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<Input>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, true, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<Input>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, false, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<>();\n    final Set<String> seen = new HashSet<>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, true, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<Input>();\n    final Set<String> seen = new HashSet<String>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, true, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<>();\n    final Set<String> seen = new HashSet<>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, true, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n    a.close();\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<>();\n    final Set<String> seen = new HashSet<>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, true, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<>();\n    final Set<String> seen = new HashSet<>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, true, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n    a.close();\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<>();\n    final Set<String> seen = new HashSet<>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, true, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testRandom2().mjava","sourceNew":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<>();\n    final Set<String> seen = new HashSet<>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    Directory tempDir = getDirectory();\n    FuzzySuggester suggest = new FuzzySuggester(tempDir, \"fuzzy\", a, a, 0, 256, -1, true, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n    IOUtils.close(a, tempDir);\n  }\n\n","sourceOld":"  public void testRandom2() throws Throwable {\n    final int NUM = atLeast(200);\n    final List<Input> answers = new ArrayList<>();\n    final Set<String> seen = new HashSet<>();\n    for(int i=0;i<NUM;i++) {\n      final String s = randomSimpleString(8);\n      if (!seen.contains(s)) {\n        answers.add(new Input(s, random().nextInt(1000)));\n        seen.add(s);\n      }\n    }\n\n    Collections.sort(answers, new Comparator<Input>() {\n        @Override\n        public int compare(Input a, Input b) {\n          return a.term.compareTo(b.term);\n        }\n      });\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: targets\");\n      for(Input tf : answers) {\n        System.out.println(\"  \" + tf.term.utf8ToString() + \" freq=\" + tf.v);\n      }\n    }\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    int maxEdits = random().nextBoolean() ? 1 : 2;\n    int prefixLen = random().nextInt(4);\n    boolean transpositions = random().nextBoolean();\n    // TODO: test graph analyzers\n    // TODO: test exactFirst / preserveSep permutations\n    FuzzySuggester suggest = new FuzzySuggester(a, a, 0, 256, -1, true, maxEdits, transpositions, prefixLen, prefixLen, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: maxEdits=\" + maxEdits + \" prefixLen=\" + prefixLen + \" transpositions=\" + transpositions + \" num=\" + NUM);\n    }\n\n    Collections.shuffle(answers, random());\n    suggest.build(new InputArrayIterator(answers.toArray(new Input[answers.size()])));\n\n    final int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      final String frag = randomSimpleString(6);\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter frag=\" + frag);\n      }\n      final List<LookupResult> expected = slowFuzzyMatch(prefixLen, maxEdits, transpositions, answers, frag);\n      if (VERBOSE) {\n        System.out.println(\"  expected: \" + expected.size());\n        for(LookupResult c : expected) {\n          System.out.println(\"    \" + c);\n        }\n      }\n      final List<LookupResult> actual = suggest.lookup(frag, false, NUM);\n      if (VERBOSE) {\n        System.out.println(\"  actual: \" + actual.size());\n        for(LookupResult c : actual) {\n          System.out.println(\"    \" + c);\n        }\n      }\n\n      Collections.sort(actual, new CompareByCostThenAlpha());\n\n      final int limit = Math.min(expected.size(), actual.size());\n      for(int ans=0;ans<limit;ans++) {\n        final LookupResult c0 = expected.get(ans);\n        final LookupResult c1 = actual.get(ans);\n        assertEquals(\"expected \" + c0.key +\n                     \" but got \" + c1.key,\n                     0,\n                     CHARSEQUENCE_COMPARATOR.compare(c0.key, c1.key));\n        assertEquals(c0.value, c1.value);\n      }\n      assertEquals(expected.size(), actual.size());\n    }\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["33f87fe6faf49dfc1e66f45e841e24838c2f725c"],"8ff58ebe70c75a455a2acfc526029e7d912270bd":["31b5edc7f41e0c481513ce8881696e3e042ff493"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"31b5edc7f41e0c481513ce8881696e3e042ff493":["0ba222c174ec1943d8d14d012d1d6e24a1cc4972"],"33f87fe6faf49dfc1e66f45e841e24838c2f725c":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"673d1479bcc124ba45b876b686d19f67435bca90":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a56958d7f71a28824f20031ffbb2e13502a0274e"],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8ff58ebe70c75a455a2acfc526029e7d912270bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ba222c174ec1943d8d14d012d1d6e24a1cc4972":["673d1479bcc124ba45b876b686d19f67435bca90"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"8ff58ebe70c75a455a2acfc526029e7d912270bd":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"31b5edc7f41e0c481513ce8881696e3e042ff493":["8ff58ebe70c75a455a2acfc526029e7d912270bd"],"33f87fe6faf49dfc1e66f45e841e24838c2f725c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"673d1479bcc124ba45b876b686d19f67435bca90":["0ba222c174ec1943d8d14d012d1d6e24a1cc4972"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"0ba222c174ec1943d8d14d012d1d6e24a1cc4972":["31b5edc7f41e0c481513ce8881696e3e042ff493"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["673d1479bcc124ba45b876b686d19f67435bca90","4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["33f87fe6faf49dfc1e66f45e841e24838c2f725c"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}