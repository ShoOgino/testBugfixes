{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readSortedSetFieldWithTable(FieldInfo,IndexInput).mjava","commits":[{"id":"3c4b1dec123e039b2e4f9a82d8d7005a1151a97c","date":1437464198,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readSortedSetFieldWithTable(FieldInfo,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private void readSortedSetFieldWithTable(FieldInfo info, IndexInput meta) throws IOException {\n    // sortedset table = binary + ordset table + ordset index\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene50DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene50DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(info.name, n);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readSortedSetFieldWithTable(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readSortedSetFieldWithTable(FieldInfo,IndexInput).mjava","sourceNew":"  private void readSortedSetFieldWithTable(FieldInfo info, IndexInput meta) throws IOException {\n    // sortedset table = binary + ordset table + ordset index\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene50DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene50DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(info.name, n);\n  }\n\n","sourceOld":"  private void readSortedSetFieldWithTable(FieldInfo info, IndexInput meta) throws IOException {\n    // sortedset table = binary + ordset table + ordset index\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene50DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene50DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(info.name, n);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c4b1dec123e039b2e4f9a82d8d7005a1151a97c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["3c4b1dec123e039b2e4f9a82d8d7005a1151a97c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a870f9917149dc600c4ad4417d615c1795de5864"]},"commit2Childs":{"3c4b1dec123e039b2e4f9a82d8d7005a1151a97c":["a870f9917149dc600c4ad4417d615c1795de5864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c4b1dec123e039b2e4f9a82d8d7005a1151a97c"],"a870f9917149dc600c4ad4417d615c1795de5864":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}