{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","commits":[{"id":"7ded7f336122df7671eaad33d3164a701e13744d","date":1452097400,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Integer,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Integer length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41433c7c627c08fd84d7bfc7ec861e7cee911ab9","date":1460656317,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) urlc.setFixedLengthStreamingMode(length);\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce03a89b727b4096985ab8685a60360d9af9a824","date":1463414492,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = Base64.getEncoder().encodeToString(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = Base64.getEncoder().encodeToString(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = Base64.getEncoder().encodeToString(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a0894b72a443a16598f92e83172b2a8ae1db03","date":1477094527,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        basicAuth(urlc);\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      } catch (Exception e) {\n        fatal(\"POST failed with error \" + e.getMessage());\n      }\n\n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      } catch (GeneralSecurityException e) {\n        fatal(\"Looks like Solr is secured and would not let us in. Try with another user in '-u' parameter\");\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = Base64.getEncoder().encodeToString(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        basicAuth(urlc);\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      } catch (Exception e) {\n        fatal(\"POST failed with error \" + e.getMessage());\n      }\n\n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      } catch (GeneralSecurityException e) {\n        fatal(\"Looks like Solr is secured and would not let us in. Try with another user in '-u' parameter\");\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        if (url.getUserInfo() != null) {\n          String encoding = Base64.getEncoder().encodeToString(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));\n          urlc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      }\n      \n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n        success = false;\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postData(InputStream,Long,OutputStream,String,URL).mjava","sourceNew":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        basicAuth(urlc);\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      } catch (Exception e) {\n        fatal(\"POST failed with error \" + e.getMessage());\n      }\n\n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      }\n\n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      } catch (GeneralSecurityException e) {\n        fatal(\"Looks like Solr is secured and would not let us in. Try with another user in '-u' parameter\");\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data stream and posts it to solr,\n   * writes to the response to output\n   * @return true if success\n   */\n  public boolean postData(InputStream data, Long length, OutputStream output, String type, URL url) {\n    if(mockMode) return true;\n    boolean success = true;\n    if(type == null)\n      type = DEFAULT_CONTENT_TYPE;\n    HttpURLConnection urlc = null;\n    try {\n      try {\n        urlc = (HttpURLConnection) url.openConnection();\n        try {\n          urlc.setRequestMethod(\"POST\");\n        } catch (ProtocolException e) {\n          fatal(\"Shouldn't happen: HttpURLConnection doesn't support POST??\"+e);\n        }\n        urlc.setDoOutput(true);\n        urlc.setDoInput(true);\n        urlc.setUseCaches(false);\n        urlc.setAllowUserInteraction(false);\n        urlc.setRequestProperty(\"Content-type\", type);\n        basicAuth(urlc);\n        if (null != length) {\n          urlc.setFixedLengthStreamingMode(length);\n        } else {\n          urlc.setChunkedStreamingMode(-1);//use JDK default chunkLen, 4k in Java 8.\n        }\n        urlc.connect();\n      } catch (IOException e) {\n        fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n        success = false;\n      } catch (Exception e) {\n        fatal(\"POST failed with error \" + e.getMessage());\n      }\n\n      try (final OutputStream out = urlc.getOutputStream()) {\n        pipe(data, out);\n      } catch (IOException e) {\n        fatal(\"IOException while posting data: \" + e);\n      }\n      \n      try {\n        success &= checkResponseCode(urlc);\n        try (final InputStream in = urlc.getInputStream()) {\n          pipe(in, output);\n        }\n      } catch (IOException e) {\n        warn(\"IOException while reading response: \" + e);\n        success = false;\n      } catch (GeneralSecurityException e) {\n        fatal(\"Looks like Solr is secured and would not let us in. Try with another user in '-u' parameter\");\n      }\n    } finally {\n      if (urlc!=null) urlc.disconnect();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a0894b72a443a16598f92e83172b2a8ae1db03":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","30a0894b72a443a16598f92e83172b2a8ae1db03"],"41433c7c627c08fd84d7bfc7ec861e7cee911ab9":["7ded7f336122df7671eaad33d3164a701e13744d"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["30a0894b72a443a16598f92e83172b2a8ae1db03"],"7ded7f336122df7671eaad33d3164a701e13744d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["41433c7c627c08fd84d7bfc7ec861e7cee911ab9","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["41433c7c627c08fd84d7bfc7ec861e7cee911ab9","ce03a89b727b4096985ab8685a60360d9af9a824"],"ce03a89b727b4096985ab8685a60360d9af9a824":["41433c7c627c08fd84d7bfc7ec861e7cee911ab9"]},"commit2Childs":{"30a0894b72a443a16598f92e83172b2a8ae1db03":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ded7f336122df7671eaad33d3164a701e13744d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"41433c7c627c08fd84d7bfc7ec861e7cee911ab9":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ce03a89b727b4096985ab8685a60360d9af9a824"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"7ded7f336122df7671eaad33d3164a701e13744d":["41433c7c627c08fd84d7bfc7ec861e7cee911ab9"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["30a0894b72a443a16598f92e83172b2a8ae1db03","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ce03a89b727b4096985ab8685a60360d9af9a824":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}