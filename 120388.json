{"path":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","commits":[{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get, HttpClientUtil.createNewHttpClientRequestContext()).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"070b525fb213c5643ba35e1b60f1a1d4f7b23312","date":1475678176,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get, HttpClientUtil.createNewHttpClientRequestContext(null)).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get, HttpClientUtil.createNewHttpClientRequestContext()).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07cebc9816f8c940e8e9683abbdc742fe95e25d7","date":1475696954,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get, HttpClientUtil.createNewHttpClientRequestContext()).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get, HttpClientUtil.createNewHttpClientRequestContext(null)).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestAuthorizationFramework#verifySecurityStatus(HttpClient,String,String,Object,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get, HttpClientUtil.createNewHttpClientRequestContext()).getEntity());\n      @SuppressWarnings({\"rawtypes\"})\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        @SuppressWarnings({\"rawtypes\"})\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","sourceOld":"  public static void verifySecurityStatus(HttpClient cl, String url, String objPath, Object expected, int count) throws Exception {\n    boolean success = false;\n    String s = null;\n    List<String> hierarchy = StrUtils.splitSmart(objPath, '/');\n    for (int i = 0; i < count; i++) {\n      HttpGet get = new HttpGet(url);\n      s = EntityUtils.toString(cl.execute(get, HttpClientUtil.createNewHttpClientRequestContext()).getEntity());\n      Map m = (Map) Utils.fromJSONString(s);\n\n      Object actual = Utils.getObjectByPath(m, true, hierarchy);\n      if (expected instanceof Predicate) {\n        Predicate predicate = (Predicate) expected;\n        if (predicate.test(actual)) {\n          success = true;\n          break;\n        }\n      } else if (Objects.equals(String.valueOf(actual), expected)) {\n        success = true;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    assertTrue(\"No match for \" + objPath + \" = \" + expected + \", full response = \" + s, success);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"859081acf00749f5dd462772c571d611d4a4d2db":["6bdcb86c29922edae9a14852e636303bc52df094"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["859081acf00749f5dd462772c571d611d4a4d2db"],"859081acf00749f5dd462772c571d611d4a4d2db":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["e98520789adb1d5ad05afb4956eca0944a929688"],"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bdcb86c29922edae9a14852e636303bc52df094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}