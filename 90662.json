{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexOutput.Index#write(DataOutput,boolean).mjava","commits":[{"id":"fd65164c607d597fe7bb977735aa1ddfff22ed36","date":1377140532,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexOutput.Index#write(DataOutput,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","sourceNew":"    @Override\n    public void write(DataOutput indexOut, boolean absolute) throws IOException {\n      assert upto >= 0;\n      if (absolute) {\n        indexOut.writeVInt(upto);\n        indexOut.writeVLong(fp);\n      } else if (fp == lastFP) {\n        // same block\n        assert upto >= lastUpto;\n        int uptoDelta = upto - lastUpto;\n        indexOut.writeVInt(uptoDelta << 1 | 1);\n      } else {      \n        // new block\n        indexOut.writeVInt(upto << 1);\n        indexOut.writeVLong(fp - lastFP);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","sourceOld":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      assert upto >= 0;\n      if (absolute) {\n        indexOut.writeVInt(upto);\n        indexOut.writeVLong(fp);\n      } else if (fp == lastFP) {\n        // same block\n        assert upto >= lastUpto;\n        int uptoDelta = upto - lastUpto;\n        indexOut.writeVInt(uptoDelta << 1 | 1);\n      } else {      \n        // new block\n        indexOut.writeVInt(upto << 1);\n        indexOut.writeVLong(fp - lastFP);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexOutput.Index#write(DataOutput,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexOutput.Index#write(IndexOutput,boolean).mjava","sourceNew":"    @Override\n    public void write(DataOutput indexOut, boolean absolute) throws IOException {\n      assert upto >= 0;\n      if (absolute) {\n        indexOut.writeVInt(upto);\n        indexOut.writeVLong(fp);\n      } else if (fp == lastFP) {\n        // same block\n        assert upto >= lastUpto;\n        int uptoDelta = upto - lastUpto;\n        indexOut.writeVInt(uptoDelta << 1 | 1);\n      } else {      \n        // new block\n        indexOut.writeVInt(upto << 1);\n        indexOut.writeVLong(fp - lastFP);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","sourceOld":"    @Override\n    public void write(IndexOutput indexOut, boolean absolute) throws IOException {\n      assert upto >= 0;\n      if (absolute) {\n        indexOut.writeVInt(upto);\n        indexOut.writeVLong(fp);\n      } else if (fp == lastFP) {\n        // same block\n        assert upto >= lastUpto;\n        int uptoDelta = upto - lastUpto;\n        indexOut.writeVInt(uptoDelta << 1 | 1);\n      } else {      \n        // new block\n        indexOut.writeVInt(upto << 1);\n        indexOut.writeVLong(fp - lastFP);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexOutput.Index#write(DataOutput,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void write(DataOutput indexOut, boolean absolute) throws IOException {\n      assert upto >= 0;\n      if (absolute) {\n        indexOut.writeVInt(upto);\n        indexOut.writeVLong(fp);\n      } else if (fp == lastFP) {\n        // same block\n        assert upto >= lastUpto;\n        int uptoDelta = upto - lastUpto;\n        indexOut.writeVInt(uptoDelta << 1 | 1);\n      } else {      \n        // new block\n        indexOut.writeVInt(upto << 1);\n        indexOut.writeVLong(fp - lastFP);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/VariableIntBlockIndexOutput.Index#write(DataOutput,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void write(DataOutput indexOut, boolean absolute) throws IOException {\n      assert upto >= 0;\n      if (absolute) {\n        indexOut.writeVInt(upto);\n        indexOut.writeVLong(fp);\n      } else if (fp == lastFP) {\n        // same block\n        assert upto >= lastUpto;\n        int uptoDelta = upto - lastUpto;\n        indexOut.writeVInt(uptoDelta << 1 | 1);\n      } else {      \n        // new block\n        indexOut.writeVInt(upto << 1);\n        indexOut.writeVLong(fp - lastFP);\n      }\n      lastUpto = upto;\n      lastFP = fp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2f948dd442d23baa6cbb28daf77c8db78b351329","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd65164c607d597fe7bb977735aa1ddfff22ed36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd65164c607d597fe7bb977735aa1ddfff22ed36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd65164c607d597fe7bb977735aa1ddfff22ed36","2f948dd442d23baa6cbb28daf77c8db78b351329"],"fd65164c607d597fe7bb977735aa1ddfff22ed36":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}