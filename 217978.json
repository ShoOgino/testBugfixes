{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","commits":[{"id":"587eef0a5c30792658ddb8ea8c5281f2ce417fa1","date":1563182021,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","pathOld":"/dev/null","sourceNew":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    if (authResponse.statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      log.debug(\"USER_REQUIRED \"+req.getHeader(\"Authorization\")+\" \"+ req.getUserPrincipal());\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n    }\n    if (!(authResponse.statusCode == HttpStatus.SC_ACCEPTED) && !(authResponse.statusCode == HttpStatus.SC_OK)) {\n      log.info(\"USER_REQUIRED auth header {} context : {} \", req.getHeader(\"Authorization\"), context);\n      sendError(authResponse.statusCode,\n          \"Unauthorized request, Response code: \" + authResponse.statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d450c0530a2765633277b632c29c54e190e3cb7e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d450c0530a2765633277b632c29c54e190e3cb7e","date":1571265874,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","sourceNew":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n    \n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      log.debug(\"USER_REQUIRED \"+req.getHeader(\"Authorization\")+\" \"+ req.getUserPrincipal());\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage());\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage());\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","sourceOld":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    if (authResponse.statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      log.debug(\"USER_REQUIRED \"+req.getHeader(\"Authorization\")+\" \"+ req.getUserPrincipal());\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n    }\n    if (!(authResponse.statusCode == HttpStatus.SC_ACCEPTED) && !(authResponse.statusCode == HttpStatus.SC_OK)) {\n      log.info(\"USER_REQUIRED auth header {} context : {} \", req.getHeader(\"Authorization\"), context);\n      sendError(authResponse.statusCode,\n          \"Unauthorized request, Response code: \" + authResponse.statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","bugFix":["587eef0a5c30792658ddb8ea8c5281f2ce417fa1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","sourceNew":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n    \n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"USER_REQUIRED {} {}\", req.getHeader(\"Authorization\"), req.getUserPrincipal());\n      }\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage());\n      }\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage());\n      }\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","sourceOld":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n    \n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      log.debug(\"USER_REQUIRED \"+req.getHeader(\"Authorization\")+\" \"+ req.getUserPrincipal());\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage());\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage());\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","sourceNew":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n    \n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"USER_REQUIRED {} {}\", req.getHeader(\"Authorization\"), req.getUserPrincipal());\n      }\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage());\n      }\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage());\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","sourceOld":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n    \n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"USER_REQUIRED {} {}\", req.getHeader(\"Authorization\"), req.getUserPrincipal());\n      }\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage());\n      }\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage());\n      }\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","sourceNew":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n    \n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"USER_REQUIRED {} {}\", req.getHeader(\"Authorization\"), req.getUserPrincipal());\n      }\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage());\n      }\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage());\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","sourceOld":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n    \n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"USER_REQUIRED {} {}\", req.getHeader(\"Authorization\"), req.getUserPrincipal());\n      }\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage());\n      }\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage());\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ef011344cb9d79a273b9cfe096c5ecc5de84f58","date":1593208852,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","sourceNew":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n\n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"USER_REQUIRED {} {}\", req.getHeader(\"Authorization\"), req.getUserPrincipal());\n      }\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage());\n      }\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage());\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","sourceOld":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n    \n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"USER_REQUIRED {} {}\", req.getHeader(\"Authorization\"), req.getUserPrincipal());\n      }\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage());\n      }\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage());\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","sourceNew":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n\n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"USER_REQUIRED {} {}\", req.getHeader(\"Authorization\"), req.getUserPrincipal());\n      }\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage()); // logOk\n      }\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage()); // logOk\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","sourceOld":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n\n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"USER_REQUIRED {} {}\", req.getHeader(\"Authorization\"), req.getUserPrincipal());\n      }\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage());\n      }\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage());\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#authorize().mjava","sourceNew":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n\n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"USER_REQUIRED {} {}\", req.getHeader(\"Authorization\"), req.getUserPrincipal());\n      }\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage()); // nowarn\n      }\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage()); // nowarn\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","sourceOld":"  Action authorize() throws IOException {\n    AuthorizationContext context = getAuthCtx();\n    log.debug(\"AuthorizationContext : {}\", context);\n    AuthorizationResponse authResponse = cores.getAuthorizationPlugin().authorize(context);\n    int statusCode = authResponse.statusCode;\n\n    if (statusCode == AuthorizationResponse.PROMPT.statusCode) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, String> headers = (Map) getReq().getAttribute(AuthenticationPlugin.class.getName());\n      if (headers != null) {\n        for (Map.Entry<String, String> e : headers.entrySet()) response.setHeader(e.getKey(), e.getValue());\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"USER_REQUIRED {} {}\", req.getHeader(\"Authorization\"), req.getUserPrincipal());\n      }\n      sendError(statusCode,\n          \"Authentication failed, Response code: \" + statusCode);\n      if (shouldAudit(EventType.REJECTED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.REJECTED, req, context));\n      }\n      return RETURN;\n    }\n    if (statusCode == AuthorizationResponse.FORBIDDEN.statusCode) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"UNAUTHORIZED auth header {} context : {}, msg: {}\", req.getHeader(\"Authorization\"), context, authResponse.getMessage()); // logOk\n      }\n      sendError(statusCode,\n          \"Unauthorized request, Response code: \" + statusCode);\n      if (shouldAudit(EventType.UNAUTHORIZED)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.UNAUTHORIZED, req, context));\n      }\n      return RETURN;\n    }\n    if (!(statusCode == HttpStatus.SC_ACCEPTED) && !(statusCode == HttpStatus.SC_OK)) {\n      log.warn(\"ERROR {} during authentication: {}\", statusCode, authResponse.getMessage()); // logOk\n      sendError(statusCode,\n          \"ERROR during authorization, Response code: \" + statusCode);\n      if (shouldAudit(EventType.ERROR)) {\n        cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.ERROR, req, context));\n      }\n      return RETURN;\n    }\n    if (shouldAudit(EventType.AUTHORIZED)) {\n      cores.getAuditLoggerPlugin().doAudit(new AuditEvent(EventType.AUTHORIZED, req, context));\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["d450c0530a2765633277b632c29c54e190e3cb7e"],"d450c0530a2765633277b632c29c54e190e3cb7e":["587eef0a5c30792658ddb8ea8c5281f2ce417fa1"],"587eef0a5c30792658ddb8ea8c5281f2ce417fa1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["3ef011344cb9d79a273b9cfe096c5ecc5de84f58"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"3ef011344cb9d79a273b9cfe096c5ecc5de84f58":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"d450c0530a2765633277b632c29c54e190e3cb7e":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"587eef0a5c30792658ddb8ea8c5281f2ce417fa1":["d450c0530a2765633277b632c29c54e190e3cb7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["587eef0a5c30792658ddb8ea8c5281f2ce417fa1"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"575e66bd4b2349209027f6801184da7fc3cba13f":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"3ef011344cb9d79a273b9cfe096c5ecc5de84f58":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["3ef011344cb9d79a273b9cfe096c5ecc5de84f58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}