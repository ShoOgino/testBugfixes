{"path":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testMockExchangeRateProvider().mjava","commits":[{"id":"c2635332d49f7c5a0b484950462a01775512628e","date":1331332806,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testMockExchangeRateProvider().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMockExchangeRateProvider() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"mock_amount\", \"1.00,USD\"));\n    assertU(adoc(\"id\", \"2\", \"mock_amount\", \"1.00,EUR\"));\n    assertU(adoc(\"id\", \"3\", \"mock_amount\", \"1.00,NOK\"));\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:5.0,NOK\"),   \"//*[@numFound='1']\", \"//int[@name='id']='1'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:1.2,USD\"), \"//*[@numFound='1']\",   \"//int[@name='id']='2'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:0.2,USD\"), \"//*[@numFound='1']\",   \"//int[@name='id']='3'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:99,USD\"),  \"//*[@numFound='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testMockExchangeRateProvider().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMockExchangeRateProvider() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"mock_amount\", \"1.00,USD\"));\n    assertU(adoc(\"id\", \"2\", \"mock_amount\", \"1.00,EUR\"));\n    assertU(adoc(\"id\", \"3\", \"mock_amount\", \"1.00,NOK\"));\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:5.0,NOK\"),   \"//*[@numFound='1']\", \"//int[@name='id']='1'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:1.2,USD\"), \"//*[@numFound='1']\",   \"//int[@name='id']='2'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:0.2,USD\"), \"//*[@numFound='1']\",   \"//int[@name='id']='3'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:99,USD\"),  \"//*[@numFound='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a62481aacca928b5c069e6f825ef49c7b6586d8","date":1333048447,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testMockExchangeRateProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testMockExchangeRateProvider().mjava","sourceNew":"  @Test\n  public void testMockExchangeRateProvider() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"mock_amount\");\n\n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField)amount.getType()).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 3);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 0.8);\n  }\n\n","sourceOld":"  @Test\n  public void testMockExchangeRateProvider() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"mock_amount\", \"1.00,USD\"));\n    assertU(adoc(\"id\", \"2\", \"mock_amount\", \"1.00,EUR\"));\n    assertU(adoc(\"id\", \"3\", \"mock_amount\", \"1.00,NOK\"));\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:5.0,NOK\"),   \"//*[@numFound='1']\", \"//int[@name='id']='1'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:1.2,USD\"), \"//*[@numFound='1']\",   \"//int[@name='id']='2'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:0.2,USD\"), \"//*[@numFound='1']\",   \"//int[@name='id']='3'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"mock_amount:99,USD\"),  \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ce5a0276b8637186ae6adfa516e332132d197ad","date":1362165863,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testMockExchangeRateProvider().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testMockExchangeRateProvider().mjava","sourceNew":"  @Test\n  public void testMockExchangeRateProvider() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"mock_amount\");\n\n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField)amount.getType()).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 3);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 0.8);\n  }\n\n","sourceOld":"  @Test\n  public void testMockExchangeRateProvider() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"mock_amount\");\n\n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField)amount.getType()).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 3);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 0.8);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2635332d49f7c5a0b484950462a01775512628e"],"4ce5a0276b8637186ae6adfa516e332132d197ad":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ce5a0276b8637186ae6adfa516e332132d197ad"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"4ce5a0276b8637186ae6adfa516e332132d197ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["4ce5a0276b8637186ae6adfa516e332132d197ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["38e3b736c7ca086d61b7dbb841c905ee115490da","7a62481aacca928b5c069e6f825ef49c7b6586d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}