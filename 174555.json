{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrServer,String,String).mjava","sourceNew":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    long timeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    while(System.currentTimeMillis() <timeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","sourceOld":"  public static boolean setClusterProp(CloudSolrServer client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    long timeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    while(System.currentTimeMillis() <timeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","sourceNew":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","sourceOld":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    long timeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    while(System.currentTimeMillis() <timeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","sourceNew":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProperty(name, (String) null));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","sourceOld":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","sourceNew":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProperty(name, (String) null));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","sourceOld":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","sourceNew":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProperty(name, (String) null));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","sourceOld":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","sourceNew":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProperty(name, (String) null));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","sourceOld":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProps().get(name));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","sourceNew":null,"sourceOld":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProperty(name, (String) null));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#setClusterProp(CloudSolrClient,String,String).mjava","sourceNew":null,"sourceOld":"  public static boolean setClusterProp(CloudSolrClient client, String name , String val) throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\n        \"action\", CollectionAction.CLUSTERPROP.toLower(),\n        \"name\",name);\n\n    if(val != null) m.put(\"val\", val);\n    SolrRequest request = new QueryRequest(new MapSolrParams(m));\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(val,client.getZkStateReader().getClusterProperty(name, (String) null));\n      if(changed) break;\n    }\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad30c6a479e764150a3316e57263319775f1df2":["bcf9886c8ff537aafde14de48ebf744f5673f08b","115923bc88e5b1dc4bef049b1ded8486723052ed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bcf9886c8ff537aafde14de48ebf744f5673f08b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["bcf9886c8ff537aafde14de48ebf744f5673f08b","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["115923bc88e5b1dc4bef049b1ded8486723052ed","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"bafca15d8e408346a67f4282ad1143b88023893b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a4efd3fffdd7acd625bb88e455c8097e17f75735","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}