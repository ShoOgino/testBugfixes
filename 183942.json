{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#buildRandomQuery().mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#buildRandomQuery().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Generates a random query string across the randomized fields/values in the index\n   *\n   * @see #randFieldValue\n   * @see #field\n   */\n  private static String buildRandomQuery() {\n    if (0 == TestUtil.nextInt(random(), 0,10)) {\n      return \"*:*\";\n    }\n    final int numClauses = TestUtil.nextInt(random(), 3, 10);\n    final String[] clauses = new String[numClauses];\n    for (int c = 0; c < numClauses; c++) {\n      final int fieldNum = random().nextInt(MAX_FIELD_NUM);\n      // keep queries simple, just use str fields - not point of test\n      clauses[c] = strfield(fieldNum) + \":\" + randFieldValue(fieldNum);\n    }\n    return buildORQuery(clauses);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#buildRandomQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#buildRandomQuery().mjava","sourceNew":"  /**\n   * Generates a random query string across the randomized fields/values in the index\n   *\n   * @see #randFieldValue\n   * @see #field\n   */\n  private static String buildRandomQuery() {\n    if (0 == TestUtil.nextInt(random(), 0,10)) {\n      return \"*:*\";\n    }\n    final int numClauses = TestUtil.nextInt(random(), 3, 10);\n    final String[] clauses = new String[numClauses];\n    for (int c = 0; c < numClauses; c++) {\n      final int fieldNum = random().nextInt(MAX_FIELD_NUM);\n      // keep queries simple, just use str fields - not point of test\n      clauses[c] = strfield(fieldNum) + \":\" + randFieldValue(fieldNum);\n    }\n    return buildORQuery(clauses);\n  }\n\n","sourceOld":"  /**\n   * Generates a random query string across the randomized fields/values in the index\n   *\n   * @see #randFieldValue\n   * @see #field\n   */\n  private static String buildRandomQuery() {\n    if (0 == TestUtil.nextInt(random(), 0,10)) {\n      return \"*:*\";\n    }\n    final int numClauses = TestUtil.nextInt(random(), 3, 10);\n    final String[] clauses = new String[numClauses];\n    for (int c = 0; c < numClauses; c++) {\n      final int fieldNum = random().nextInt(MAX_FIELD_NUM);\n      // keep queries simple, just use str fields - not point of test\n      clauses[c] = strfield(fieldNum) + \":\" + randFieldValue(fieldNum);\n    }\n    return buildORQuery(clauses);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}