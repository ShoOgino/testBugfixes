{"path":"lucene/src/test/org/apache/lucene/document/TestDocument#doAssert(Document,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#doAssert(Document,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/document/TestDocument#doAssert(Document,boolean).mjava","sourceNew":"    private void doAssert(Document doc, boolean fromIndex)\n    {\n        String[] keywordFieldValues   = doc.getValues(\"keyword\");\n        String[] textFieldValues      = doc.getValues(\"text\");\n        String[] unindexedFieldValues = doc.getValues(\"unindexed\");\n        String[] unstoredFieldValues  = doc.getValues(\"unstored\");\n\n        assertTrue(keywordFieldValues.length   == 2);\n        assertTrue(textFieldValues.length      == 2);\n        assertTrue(unindexedFieldValues.length == 2);\n        // this test cannot work for documents retrieved from the index\n        // since unstored fields will obviously not be returned\n        if (! fromIndex)\n        {\n            assertTrue(unstoredFieldValues.length  == 2);\n        }\n\n        assertTrue(keywordFieldValues[0].equals(\"test1\"));\n        assertTrue(keywordFieldValues[1].equals(\"test2\"));\n        assertTrue(textFieldValues[0].equals(\"test1\"));\n        assertTrue(textFieldValues[1].equals(\"test2\"));\n        assertTrue(unindexedFieldValues[0].equals(\"test1\"));\n        assertTrue(unindexedFieldValues[1].equals(\"test2\"));\n        // this test cannot work for documents retrieved from the index\n        // since unstored fields will obviously not be returned\n        if (! fromIndex)\n        {\n            assertTrue(unstoredFieldValues[0].equals(\"test1\"));\n            assertTrue(unstoredFieldValues[1].equals(\"test2\"));\n        }\n    }\n\n","sourceOld":"    private void doAssert(Document doc, boolean fromIndex)\n    {\n        String[] keywordFieldValues   = doc.getValues(\"keyword\");\n        String[] textFieldValues      = doc.getValues(\"text\");\n        String[] unindexedFieldValues = doc.getValues(\"unindexed\");\n        String[] unstoredFieldValues  = doc.getValues(\"unstored\");\n\n        assertTrue(keywordFieldValues.length   == 2);\n        assertTrue(textFieldValues.length      == 2);\n        assertTrue(unindexedFieldValues.length == 2);\n        // this test cannot work for documents retrieved from the index\n        // since unstored fields will obviously not be returned\n        if (! fromIndex)\n        {\n            assertTrue(unstoredFieldValues.length  == 2);\n        }\n\n        assertTrue(keywordFieldValues[0].equals(\"test1\"));\n        assertTrue(keywordFieldValues[1].equals(\"test2\"));\n        assertTrue(textFieldValues[0].equals(\"test1\"));\n        assertTrue(textFieldValues[1].equals(\"test2\"));\n        assertTrue(unindexedFieldValues[0].equals(\"test1\"));\n        assertTrue(unindexedFieldValues[1].equals(\"test2\"));\n        // this test cannot work for documents retrieved from the index\n        // since unstored fields will obviously not be returned\n        if (! fromIndex)\n        {\n            assertTrue(unstoredFieldValues[0].equals(\"test1\"));\n            assertTrue(unstoredFieldValues[1].equals(\"test2\"));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#doAssert(Document,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#doAssert(Document,boolean).mjava","sourceNew":"  private void doAssert(Document doc, boolean fromIndex) {\n    String[] keywordFieldValues = doc.getValues(\"keyword\");\n    String[] textFieldValues = doc.getValues(\"text\");\n    String[] unindexedFieldValues = doc.getValues(\"unindexed\");\n    String[] unstoredFieldValues = doc.getValues(\"unstored\");\n    \n    assertTrue(keywordFieldValues.length == 2);\n    assertTrue(textFieldValues.length == 2);\n    assertTrue(unindexedFieldValues.length == 2);\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues.length == 2);\n    }\n    \n    assertTrue(keywordFieldValues[0].equals(\"test1\"));\n    assertTrue(keywordFieldValues[1].equals(\"test2\"));\n    assertTrue(textFieldValues[0].equals(\"test1\"));\n    assertTrue(textFieldValues[1].equals(\"test2\"));\n    assertTrue(unindexedFieldValues[0].equals(\"test1\"));\n    assertTrue(unindexedFieldValues[1].equals(\"test2\"));\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues[0].equals(\"test1\"));\n      assertTrue(unstoredFieldValues[1].equals(\"test2\"));\n    }\n  }\n\n","sourceOld":"    private void doAssert(Document doc, boolean fromIndex)\n    {\n        String[] keywordFieldValues   = doc.getValues(\"keyword\");\n        String[] textFieldValues      = doc.getValues(\"text\");\n        String[] unindexedFieldValues = doc.getValues(\"unindexed\");\n        String[] unstoredFieldValues  = doc.getValues(\"unstored\");\n\n        assertTrue(keywordFieldValues.length   == 2);\n        assertTrue(textFieldValues.length      == 2);\n        assertTrue(unindexedFieldValues.length == 2);\n        // this test cannot work for documents retrieved from the index\n        // since unstored fields will obviously not be returned\n        if (! fromIndex)\n        {\n            assertTrue(unstoredFieldValues.length  == 2);\n        }\n\n        assertTrue(keywordFieldValues[0].equals(\"test1\"));\n        assertTrue(keywordFieldValues[1].equals(\"test2\"));\n        assertTrue(textFieldValues[0].equals(\"test1\"));\n        assertTrue(textFieldValues[1].equals(\"test2\"));\n        assertTrue(unindexedFieldValues[0].equals(\"test1\"));\n        assertTrue(unindexedFieldValues[1].equals(\"test2\"));\n        // this test cannot work for documents retrieved from the index\n        // since unstored fields will obviously not be returned\n        if (! fromIndex)\n        {\n            assertTrue(unstoredFieldValues[0].equals(\"test1\"));\n            assertTrue(unstoredFieldValues[1].equals(\"test2\"));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#doAssert(Document,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#doAssert(Document,boolean).mjava","sourceNew":"  private void doAssert(Document doc, boolean fromIndex) {\n    String[] keywordFieldValues = doc.getValues(\"keyword\");\n    String[] textFieldValues = doc.getValues(\"text\");\n    String[] unindexedFieldValues = doc.getValues(\"unindexed\");\n    String[] unstoredFieldValues = doc.getValues(\"unstored\");\n    \n    assertTrue(keywordFieldValues.length == 2);\n    assertTrue(textFieldValues.length == 2);\n    assertTrue(unindexedFieldValues.length == 2);\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues.length == 2);\n    }\n    \n    assertTrue(keywordFieldValues[0].equals(\"test1\"));\n    assertTrue(keywordFieldValues[1].equals(\"test2\"));\n    assertTrue(textFieldValues[0].equals(\"test1\"));\n    assertTrue(textFieldValues[1].equals(\"test2\"));\n    assertTrue(unindexedFieldValues[0].equals(\"test1\"));\n    assertTrue(unindexedFieldValues[1].equals(\"test2\"));\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues[0].equals(\"test1\"));\n      assertTrue(unstoredFieldValues[1].equals(\"test2\"));\n    }\n  }\n\n","sourceOld":"    private void doAssert(Document doc, boolean fromIndex)\n    {\n        String[] keywordFieldValues   = doc.getValues(\"keyword\");\n        String[] textFieldValues      = doc.getValues(\"text\");\n        String[] unindexedFieldValues = doc.getValues(\"unindexed\");\n        String[] unstoredFieldValues  = doc.getValues(\"unstored\");\n\n        assertTrue(keywordFieldValues.length   == 2);\n        assertTrue(textFieldValues.length      == 2);\n        assertTrue(unindexedFieldValues.length == 2);\n        // this test cannot work for documents retrieved from the index\n        // since unstored fields will obviously not be returned\n        if (! fromIndex)\n        {\n            assertTrue(unstoredFieldValues.length  == 2);\n        }\n\n        assertTrue(keywordFieldValues[0].equals(\"test1\"));\n        assertTrue(keywordFieldValues[1].equals(\"test2\"));\n        assertTrue(textFieldValues[0].equals(\"test1\"));\n        assertTrue(textFieldValues[1].equals(\"test2\"));\n        assertTrue(unindexedFieldValues[0].equals(\"test1\"));\n        assertTrue(unindexedFieldValues[1].equals(\"test2\"));\n        // this test cannot work for documents retrieved from the index\n        // since unstored fields will obviously not be returned\n        if (! fromIndex)\n        {\n            assertTrue(unstoredFieldValues[0].equals(\"test1\"));\n            assertTrue(unstoredFieldValues[1].equals(\"test2\"));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#doAssert(Document,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#doAssert(Document,boolean).mjava","sourceNew":"  private void doAssert(Document doc, boolean fromIndex) {\n    IndexableField[] keywordFieldValues = doc.getFields(\"keyword\");\n    IndexableField[] textFieldValues = doc.getFields(\"text\");\n    IndexableField[] unindexedFieldValues = doc.getFields(\"unindexed\");\n    IndexableField[] unstoredFieldValues = doc.getFields(\"unstored\");\n    \n    assertTrue(keywordFieldValues.length == 2);\n    assertTrue(textFieldValues.length == 2);\n    assertTrue(unindexedFieldValues.length == 2);\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues.length == 2);\n    }\n    \n    assertTrue(keywordFieldValues[0].stringValue().equals(\"test1\"));\n    assertTrue(keywordFieldValues[1].stringValue().equals(\"test2\"));\n    assertTrue(textFieldValues[0].stringValue().equals(\"test1\"));\n    assertTrue(textFieldValues[1].stringValue().equals(\"test2\"));\n    assertTrue(unindexedFieldValues[0].stringValue().equals(\"test1\"));\n    assertTrue(unindexedFieldValues[1].stringValue().equals(\"test2\"));\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues[0].stringValue().equals(\"test1\"));\n      assertTrue(unstoredFieldValues[1].stringValue().equals(\"test2\"));\n    }\n  }\n\n","sourceOld":"  private void doAssert(Document doc, boolean fromIndex) {\n    String[] keywordFieldValues = doc.getValues(\"keyword\");\n    String[] textFieldValues = doc.getValues(\"text\");\n    String[] unindexedFieldValues = doc.getValues(\"unindexed\");\n    String[] unstoredFieldValues = doc.getValues(\"unstored\");\n    \n    assertTrue(keywordFieldValues.length == 2);\n    assertTrue(textFieldValues.length == 2);\n    assertTrue(unindexedFieldValues.length == 2);\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues.length == 2);\n    }\n    \n    assertTrue(keywordFieldValues[0].equals(\"test1\"));\n    assertTrue(keywordFieldValues[1].equals(\"test2\"));\n    assertTrue(textFieldValues[0].equals(\"test1\"));\n    assertTrue(textFieldValues[1].equals(\"test2\"));\n    assertTrue(unindexedFieldValues[0].equals(\"test1\"));\n    assertTrue(unindexedFieldValues[1].equals(\"test2\"));\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues[0].equals(\"test1\"));\n      assertTrue(unstoredFieldValues[1].equals(\"test2\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#doAssert(Document,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#doAssert(Document,boolean).mjava","sourceNew":"  private void doAssert(Document doc, boolean fromIndex) {\n    IndexableField[] keywordFieldValues = doc.getFields(\"keyword\");\n    IndexableField[] textFieldValues = doc.getFields(\"text\");\n    IndexableField[] unindexedFieldValues = doc.getFields(\"unindexed\");\n    IndexableField[] unstoredFieldValues = doc.getFields(\"unstored\");\n    \n    assertTrue(keywordFieldValues.length == 2);\n    assertTrue(textFieldValues.length == 2);\n    assertTrue(unindexedFieldValues.length == 2);\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues.length == 2);\n    }\n    \n    assertTrue(keywordFieldValues[0].stringValue().equals(\"test1\"));\n    assertTrue(keywordFieldValues[1].stringValue().equals(\"test2\"));\n    assertTrue(textFieldValues[0].stringValue().equals(\"test1\"));\n    assertTrue(textFieldValues[1].stringValue().equals(\"test2\"));\n    assertTrue(unindexedFieldValues[0].stringValue().equals(\"test1\"));\n    assertTrue(unindexedFieldValues[1].stringValue().equals(\"test2\"));\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues[0].stringValue().equals(\"test1\"));\n      assertTrue(unstoredFieldValues[1].stringValue().equals(\"test2\"));\n    }\n  }\n\n","sourceOld":"  private void doAssert(Document doc, boolean fromIndex) {\n    IndexableField[] keywordFieldValues = doc.getFields(\"keyword\");\n    IndexableField[] textFieldValues = doc.getFields(\"text\");\n    IndexableField[] unindexedFieldValues = doc.getFields(\"unindexed\");\n    IndexableField[] unstoredFieldValues = doc.getFields(\"unstored\");\n    \n    assertTrue(keywordFieldValues.length == 2);\n    assertTrue(textFieldValues.length == 2);\n    assertTrue(unindexedFieldValues.length == 2);\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues.length == 2);\n    }\n    \n    assertTrue(keywordFieldValues[0].stringValue().equals(\"test1\"));\n    assertTrue(keywordFieldValues[1].stringValue().equals(\"test2\"));\n    assertTrue(textFieldValues[0].stringValue().equals(\"test1\"));\n    assertTrue(textFieldValues[1].stringValue().equals(\"test2\"));\n    assertTrue(unindexedFieldValues[0].stringValue().equals(\"test1\"));\n    assertTrue(unindexedFieldValues[1].stringValue().equals(\"test2\"));\n    // this test cannot work for documents retrieved from the index\n    // since unstored fields will obviously not be returned\n    if (!fromIndex) {\n      assertTrue(unstoredFieldValues[0].stringValue().equals(\"test1\"));\n      assertTrue(unstoredFieldValues[1].stringValue().equals(\"test2\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}