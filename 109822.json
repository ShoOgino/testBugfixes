{"path":"solr/core/src/java/org/apache/solr/cloud/SplitShardCmd#throwIfNotNonExistentCoreException(String,SolrException).mjava","commits":[{"id":"d1d231959c9d0545adc421b7a2fefa7db47300d8","date":1472269133,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SplitShardCmd#throwIfNotNonExistentCoreException(String,SolrException).mjava","pathOld":"/dev/null","sourceNew":"  private void throwIfNotNonExistentCoreException(String subSlice, SolrException e) {\n    Throwable t = e;\n    String cause = null;\n    while (t != null) {\n      if (t instanceof SolrException) {\n        SolrException solrException = (SolrException) t;\n        cause = solrException.getMetadata(\"cause\");\n        if (cause != null && !\"NonExistentCore\".equals(cause)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n              e);\n        }\n      }\n      t = t.getCause();\n    }\n    if (!\"NonExistentCore\".equals(cause)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n          e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c","date":1472580862,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/SplitShardCmd#throwIfNotNonExistentCoreException(String,SolrException).mjava","sourceNew":null,"sourceOld":"  private void throwIfNotNonExistentCoreException(String subSlice, SolrException e) {\n    Throwable t = e;\n    String cause = null;\n    while (t != null) {\n      if (t instanceof SolrException) {\n        SolrException solrException = (SolrException) t;\n        cause = solrException.getMetadata(\"cause\");\n        if (cause != null && !\"NonExistentCore\".equals(cause)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n              e);\n        }\n      }\n      t = t.getCause();\n    }\n    if (!\"NonExistentCore\".equals(cause)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n          e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/SplitShardCmd#throwIfNotNonExistentCoreException(String,SolrException).mjava","sourceNew":null,"sourceOld":"  private void throwIfNotNonExistentCoreException(String subSlice, SolrException e) {\n    Throwable t = e;\n    String cause = null;\n    while (t != null) {\n      if (t instanceof SolrException) {\n        SolrException solrException = (SolrException) t;\n        cause = solrException.getMetadata(\"cause\");\n        if (cause != null && !\"NonExistentCore\".equals(cause)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n              e);\n        }\n      }\n      t = t.getCause();\n    }\n    if (!\"NonExistentCore\".equals(cause)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to delete already existing sub shard: \" + subSlice,\n          e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d1d231959c9d0545adc421b7a2fefa7db47300d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc8f206328a706450934717bec7ccc22ad166fc0":["d1d231959c9d0545adc421b7a2fefa7db47300d8","092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c":["d1d231959c9d0545adc421b7a2fefa7db47300d8"]},"commit2Childs":{"d1d231959c9d0545adc421b7a2fefa7db47300d8":["bc8f206328a706450934717bec7ccc22ad166fc0","092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1d231959c9d0545adc421b7a2fefa7db47300d8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c":["bc8f206328a706450934717bec7ccc22ad166fc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}