{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","commits":[{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n\n      SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!zkClient.exists(parentPath, true))  {\n            break;\n          }\n          List<String> children = zkClient.getChildren(parentPath, null, true);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              byte[] data = zkClient.getData(path, null, null, true);\n              if (data != null) {\n                Map map = (Map) Utils.fromJSON(data);\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(cloudSolrClient, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      zkClient.delete(path, -1, true);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (coreContainer.isShutDown())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: \" + requestid + \" to finish\", e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (coreContainer.isShutDown())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n\n      SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!zkClient.exists(parentPath, true))  {\n            break;\n          }\n          List<String> children = zkClient.getChildren(parentPath, null, true);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              byte[] data = zkClient.getData(path, null, null, true);\n              if (data != null) {\n                Map map = (Map) Utils.fromJSON(data);\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(cloudSolrClient, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      zkClient.delete(path, -1, true);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (coreContainer.isShutDown())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: \" + requestid + \" to finish\", e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (coreContainer.isShutDown())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n\n      SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!zkClient.exists(parentPath, true))  {\n            break;\n          }\n          List<String> children = zkClient.getChildren(parentPath, null, true);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              byte[] data = zkClient.getData(path, null, null, true);\n              if (data != null) {\n                Map map = (Map) Utils.fromJSON(data);\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(cloudSolrClient, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      zkClient.delete(path, -1, true);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (coreContainer.isShutDown())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: \" + requestid + \" to finish\", e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (coreContainer.isShutDown())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","sourceNew":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    DistribStateManager stateManager = dataProvider.getDistribStateManager();\n    try {\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!stateManager.hasData(parentPath))  {\n            break;\n          }\n          List<String> children = stateManager.listData(parentPath);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              VersionedData data = stateManager.getData(path, null);\n              if (data != null) {\n                Map map = (Map) Utils.fromJSON(data.getData());\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(dataProvider, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      stateManager.removeData(path, -1);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (dataProvider.isClosed())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: \" + requestid + \" to finish\", e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (dataProvider.isClosed())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","sourceOld":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n        .withZkHost(coreContainer.getZkController().getZkServerAddress())\n        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())\n        .build()) {\n\n      SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!zkClient.exists(parentPath, true))  {\n            break;\n          }\n          List<String> children = zkClient.getChildren(parentPath, null, true);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              byte[] data = zkClient.getData(path, null, null, true);\n              if (data != null) {\n                Map map = (Map) Utils.fromJSON(data);\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(cloudSolrClient, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      zkClient.delete(path, -1, true);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (coreContainer.isShutDown())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: \" + requestid + \" to finish\", e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (coreContainer.isShutDown())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","date":1512481565,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","sourceNew":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    try {\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!stateManager.hasData(parentPath))  {\n            break;\n          }\n          List<String> children = stateManager.listData(parentPath);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              VersionedData data = stateManager.getData(path, null);\n              if (data != null) {\n                Map map = (Map) Utils.fromJSON(data.getData());\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(cloudManager, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      stateManager.removeData(path, -1);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (cloudManager.isClosed())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: \" + requestid + \" to finish\", e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (cloudManager.isClosed())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","sourceOld":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    DistribStateManager stateManager = dataProvider.getDistribStateManager();\n    try {\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!stateManager.hasData(parentPath))  {\n            break;\n          }\n          List<String> children = stateManager.listData(parentPath);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              VersionedData data = stateManager.getData(path, null);\n              if (data != null) {\n                Map map = (Map) Utils.fromJSON(data.getData());\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(dataProvider, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      stateManager.removeData(path, -1);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (dataProvider.isClosed())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: \" + requestid + \" to finish\", e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (dataProvider.isClosed())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","sourceNew":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    try {\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!stateManager.hasData(parentPath))  {\n            break;\n          }\n          List<String> children = stateManager.listData(parentPath);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              VersionedData data = stateManager.getData(path, null);\n              if (data != null) {\n                Map map = (Map) Utils.fromJSON(data.getData());\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(cloudManager, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      stateManager.removeData(path, -1);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (cloudManager.isClosed())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: {} to finish\", requestid,  e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (cloudManager.isClosed())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","sourceOld":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    try {\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!stateManager.hasData(parentPath))  {\n            break;\n          }\n          List<String> children = stateManager.listData(parentPath);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              VersionedData data = stateManager.getData(path, null);\n              if (data != null) {\n                Map map = (Map) Utils.fromJSON(data.getData());\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(cloudManager, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      stateManager.removeData(path, -1);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (cloudManager.isClosed())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: \" + requestid + \" to finish\", e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (cloudManager.isClosed())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","sourceNew":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    try {\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!stateManager.hasData(parentPath))  {\n            break;\n          }\n          List<String> children = stateManager.listData(parentPath);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              VersionedData data = stateManager.getData(path, null);\n              if (data != null) {\n                @SuppressWarnings({\"rawtypes\"})\n                Map map = (Map) Utils.fromJSON(data.getData());\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(cloudManager, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      stateManager.removeData(path, -1);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (cloudManager.isClosed())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: {} to finish\", requestid,  e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (cloudManager.isClosed())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","sourceOld":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    try {\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!stateManager.hasData(parentPath))  {\n            break;\n          }\n          List<String> children = stateManager.listData(parentPath);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              VersionedData data = stateManager.getData(path, null);\n              if (data != null) {\n                Map map = (Map) Utils.fromJSON(data.getData());\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(cloudManager, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      stateManager.removeData(path, -1);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (cloudManager.isClosed())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: {} to finish\", requestid,  e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (cloudManager.isClosed())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#waitForPendingTasks(AutoScaling.Trigger,List[TriggerAction]).mjava","sourceNew":null,"sourceOld":"  private void waitForPendingTasks(AutoScaling.Trigger newTrigger, List<TriggerAction> actions) throws AlreadyClosedException {\n    DistribStateManager stateManager = cloudManager.getDistribStateManager();\n    try {\n\n      for (TriggerAction action : actions) {\n        if (action instanceof ExecutePlanAction) {\n          String parentPath = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + newTrigger.getName() + \"/\" + action.getName();\n          if (!stateManager.hasData(parentPath))  {\n            break;\n          }\n          List<String> children = stateManager.listData(parentPath);\n          if (children != null) {\n            for (String child : children) {\n              String path = parentPath + '/' + child;\n              VersionedData data = stateManager.getData(path, null);\n              if (data != null) {\n                @SuppressWarnings({\"rawtypes\"})\n                Map map = (Map) Utils.fromJSON(data.getData());\n                String requestid = (String) map.get(\"requestid\");\n                try {\n                  log.debug(\"Found pending task with requestid={}\", requestid);\n                  RequestStatusResponse statusResponse = waitForTaskToFinish(cloudManager, requestid,\n                      ExecutePlanAction.DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n                  if (statusResponse != null) {\n                    RequestStatusState state = statusResponse.getRequestStatus();\n                    if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {\n                      stateManager.removeData(path, -1);\n                    }\n                  }\n                } catch (Exception e) {\n                  if (cloudManager.isClosed())  {\n                    throw e; // propagate the abort to the caller\n                  }\n                  Throwable rootCause = ExceptionUtils.getRootCause(e);\n                  if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\")) {\n                    throw e;\n                  }\n                  if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n                    throw e;\n                  }\n                  log.error(\"Unexpected exception while waiting for pending task with requestid: {} to finish\", requestid,  e);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Thread interrupted\", e);\n    } catch (Exception e) {\n      if (cloudManager.isClosed())  {\n        throw new AlreadyClosedException(\"The Solr instance has been shutdown\");\n      }\n      // we catch but don't rethrow because a failure to wait for pending tasks\n      // should not keep the actions from executing\n      log.error(\"Unexpected exception while waiting for pending tasks to finish\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"e35f2dde06b35aa9904949a3a93fabd090371077":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5b8cffee0b9c10b78bd087c71485b482217fe84f","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"e35f2dde06b35aa9904949a3a93fabd090371077":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}