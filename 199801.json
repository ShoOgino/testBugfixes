{"path":"solr/core/src/java/org/apache/solr/cloud/rule/SnitchContext#invokeRemote(String,ModifiableSolrParams,String,RemoteCallback).mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/SnitchContext#invokeRemote(String,ModifiableSolrParams,String,RemoteCallback).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * make a call to solrnode/admin/cores with the given params and give a callback. This is designed to be\n   * asynchronous because the system would want to batch the calls made to any given node\n   *\n   * @param node     The node for which this call is made\n   * @param params   The params to be passed to the Snitch counterpart\n   * @param klas     The  name of the class to be invoked in the remote node\n   * @param callback The callback to be called when the response is obtained from remote node.\n   *                 If this is passed as null the entire response map will be added as tags\n   */\n  public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n    if (callback == null) callback = this;\n    String url = snitchInfo.getCoreContainer().getZkController().getZkStateReader().getBaseUrlForNodeName(node);\n    params.add(\"class\", klas);\n    params.add(ACTION, INVOKE.toString());\n    //todo batch all requests to the same server\n\n    try {\n      SimpleSolrResponse rsp = invoke(snitchInfo.getCoreContainer().getUpdateShardHandler(), url, CoreContainer.CORES_HANDLER_PATH, params);\n      Map<String, Object> returnedVal = (Map<String, Object>) rsp.getResponse().get(klas);\n      if(exception == null){\n//        log this\n      } else {\n        callback.remoteCallback(SnitchContext.this,returnedVal);\n      }\n      callback.remoteCallback(this, returnedVal);\n    } catch (Exception e) {\n      log.error(\"Unable to invoke snitch counterpart\", e);\n      exception = e;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e78c35bca3e32dfc7a695136fa2b5de1ae135c22","date":1441118240,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/SnitchContext#invokeRemote(String,ModifiableSolrParams,String,RemoteCallback).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/SnitchContext#invokeRemote(String,ModifiableSolrParams,String,RemoteCallback).mjava","sourceNew":"  /**\n   * make a call to solrnode/admin/cores with the given params and give a callback. This is designed to be\n   * asynchronous because the system would want to batch the calls made to any given node\n   *\n   * @param node     The node for which this call is made\n   * @param params   The params to be passed to the Snitch counterpart\n   * @param klas     The  name of the class to be invoked in the remote node\n   * @param callback The callback to be called when the response is obtained from remote node.\n   *                 If this is passed as null the entire response map will be added as tags\n   */\n  public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n    if (callback == null) callback = this;\n    String url = snitchInfo.getCoreContainer().getZkController().getZkStateReader().getBaseUrlForNodeName(node);\n    params.add(\"class\", klas);\n    params.add(ACTION, INVOKE.toString());\n    //todo batch all requests to the same server\n\n    try {\n      SimpleSolrResponse rsp = invoke(snitchInfo.getCoreContainer().getUpdateShardHandler(), url, CommonParams.CORES_HANDLER_PATH, params);\n      Map<String, Object> returnedVal = (Map<String, Object>) rsp.getResponse().get(klas);\n      if(exception == null){\n//        log this\n      } else {\n        callback.remoteCallback(SnitchContext.this,returnedVal);\n      }\n      callback.remoteCallback(this, returnedVal);\n    } catch (Exception e) {\n      log.error(\"Unable to invoke snitch counterpart\", e);\n      exception = e;\n    }\n  }\n\n","sourceOld":"  /**\n   * make a call to solrnode/admin/cores with the given params and give a callback. This is designed to be\n   * asynchronous because the system would want to batch the calls made to any given node\n   *\n   * @param node     The node for which this call is made\n   * @param params   The params to be passed to the Snitch counterpart\n   * @param klas     The  name of the class to be invoked in the remote node\n   * @param callback The callback to be called when the response is obtained from remote node.\n   *                 If this is passed as null the entire response map will be added as tags\n   */\n  public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n    if (callback == null) callback = this;\n    String url = snitchInfo.getCoreContainer().getZkController().getZkStateReader().getBaseUrlForNodeName(node);\n    params.add(\"class\", klas);\n    params.add(ACTION, INVOKE.toString());\n    //todo batch all requests to the same server\n\n    try {\n      SimpleSolrResponse rsp = invoke(snitchInfo.getCoreContainer().getUpdateShardHandler(), url, CoreContainer.CORES_HANDLER_PATH, params);\n      Map<String, Object> returnedVal = (Map<String, Object>) rsp.getResponse().get(klas);\n      if(exception == null){\n//        log this\n      } else {\n        callback.remoteCallback(SnitchContext.this,returnedVal);\n      }\n      callback.remoteCallback(this, returnedVal);\n    } catch (Exception e) {\n      log.error(\"Unable to invoke snitch counterpart\", e);\n      exception = e;\n    }\n  }\n\n","bugFix":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dded3df9e710f258905cff1def2f25eb51c62e0f","date":1475158173,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ServerSnitchContext#invokeRemote(String,ModifiableSolrParams,String,RemoteCallback).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/SnitchContext#invokeRemote(String,ModifiableSolrParams,String,RemoteCallback).mjava","sourceNew":"  public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n    if (callback == null) callback = this;\n    String url = coreContainer.getZkController().getZkStateReader().getBaseUrlForNodeName(node);\n    params.add(\"class\", klas);\n    params.add(ACTION, INVOKE.toString());\n    //todo batch all requests to the same server\n\n    try {\n      SimpleSolrResponse rsp = invoke(coreContainer.getUpdateShardHandler(), url, CommonParams.CORES_HANDLER_PATH, params);\n      Map<String, Object> returnedVal = (Map<String, Object>) rsp.getResponse().get(klas);\n      if(exception == null){\n//        log this\n      } else {\n        callback.remoteCallback(ServerSnitchContext.this,returnedVal);\n      }\n      callback.remoteCallback(this, returnedVal);\n    } catch (Exception e) {\n      log.error(\"Unable to invoke snitch counterpart\", e);\n      exception = e;\n    }\n  }\n\n","sourceOld":"  /**\n   * make a call to solrnode/admin/cores with the given params and give a callback. This is designed to be\n   * asynchronous because the system would want to batch the calls made to any given node\n   *\n   * @param node     The node for which this call is made\n   * @param params   The params to be passed to the Snitch counterpart\n   * @param klas     The  name of the class to be invoked in the remote node\n   * @param callback The callback to be called when the response is obtained from remote node.\n   *                 If this is passed as null the entire response map will be added as tags\n   */\n  public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n    if (callback == null) callback = this;\n    String url = snitchInfo.getCoreContainer().getZkController().getZkStateReader().getBaseUrlForNodeName(node);\n    params.add(\"class\", klas);\n    params.add(ACTION, INVOKE.toString());\n    //todo batch all requests to the same server\n\n    try {\n      SimpleSolrResponse rsp = invoke(snitchInfo.getCoreContainer().getUpdateShardHandler(), url, CommonParams.CORES_HANDLER_PATH, params);\n      Map<String, Object> returnedVal = (Map<String, Object>) rsp.getResponse().get(klas);\n      if(exception == null){\n//        log this\n      } else {\n        callback.remoteCallback(SnitchContext.this,returnedVal);\n      }\n      callback.remoteCallback(this, returnedVal);\n    } catch (Exception e) {\n      log.error(\"Unable to invoke snitch counterpart\", e);\n      exception = e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dded3df9e710f258905cff1def2f25eb51c62e0f","date":1475158173,"type":6,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/SnitchContext#invokeRemote(String,ModifiableSolrParams,String,RemoteCallback).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/SnitchContext#invokeRemote(String,ModifiableSolrParams,String,RemoteCallback).mjava","sourceNew":"  /**\n   * make a call to solrnode/admin/cores with the given params and give a callback. This is designed to be\n   * asynchronous because the system would want to batch the calls made to any given node\n   *\n   * @param node     The node for which this call is made\n   * @param params   The params to be passed to the Snitch counterpart\n   * @param klas     The  name of the class to be invoked in the remote node\n   * @param callback The callback to be called when the response is obtained from remote node.\n   *                 If this is passed as null the entire response map will be added as tags\n   */\n  public abstract void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) ;\n\n","sourceOld":"  /**\n   * make a call to solrnode/admin/cores with the given params and give a callback. This is designed to be\n   * asynchronous because the system would want to batch the calls made to any given node\n   *\n   * @param node     The node for which this call is made\n   * @param params   The params to be passed to the Snitch counterpart\n   * @param klas     The  name of the class to be invoked in the remote node\n   * @param callback The callback to be called when the response is obtained from remote node.\n   *                 If this is passed as null the entire response map will be added as tags\n   */\n  public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n    if (callback == null) callback = this;\n    String url = snitchInfo.getCoreContainer().getZkController().getZkStateReader().getBaseUrlForNodeName(node);\n    params.add(\"class\", klas);\n    params.add(ACTION, INVOKE.toString());\n    //todo batch all requests to the same server\n\n    try {\n      SimpleSolrResponse rsp = invoke(snitchInfo.getCoreContainer().getUpdateShardHandler(), url, CommonParams.CORES_HANDLER_PATH, params);\n      Map<String, Object> returnedVal = (Map<String, Object>) rsp.getResponse().get(klas);\n      if(exception == null){\n//        log this\n      } else {\n        callback.remoteCallback(SnitchContext.this,returnedVal);\n      }\n      callback.remoteCallback(this, returnedVal);\n    } catch (Exception e) {\n      log.error(\"Unable to invoke snitch counterpart\", e);\n      exception = e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/SnitchContext#invokeRemote(String,ModifiableSolrParams,String,RemoteCallback).mjava","sourceNew":null,"sourceOld":"  /**\n   * make a call to solrnode/admin/cores with the given params and give a callback. This is designed to be\n   * asynchronous because the system would want to batch the calls made to any given node\n   *\n   * @param node     The node for which this call is made\n   * @param params   The params to be passed to the Snitch counterpart\n   * @param klas     The  name of the class to be invoked in the remote node\n   * @param callback The callback to be called when the response is obtained from remote node.\n   *                 If this is passed as null the entire response map will be added as tags\n   */\n  public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n    if (callback == null) callback = this;\n    String url = snitchInfo.getCoreContainer().getZkController().getZkStateReader().getBaseUrlForNodeName(node);\n    params.add(\"class\", klas);\n    params.add(ACTION, INVOKE.toString());\n    //todo batch all requests to the same server\n\n    try {\n      SimpleSolrResponse rsp = invoke(snitchInfo.getCoreContainer().getUpdateShardHandler(), url, CommonParams.CORES_HANDLER_PATH, params);\n      Map<String, Object> returnedVal = (Map<String, Object>) rsp.getResponse().get(klas);\n      if(exception == null){\n//        log this\n      } else {\n        callback.remoteCallback(SnitchContext.this,returnedVal);\n      }\n      callback.remoteCallback(this, returnedVal);\n    } catch (Exception e) {\n      log.error(\"Unable to invoke snitch counterpart\", e);\n      exception = e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/SnitchContext#invokeRemote(String,ModifiableSolrParams,String,RemoteCallback).mjava","sourceNew":null,"sourceOld":"  /**\n   * make a call to solrnode/admin/cores with the given params and give a callback. This is designed to be\n   * asynchronous because the system would want to batch the calls made to any given node\n   *\n   * @param node     The node for which this call is made\n   * @param params   The params to be passed to the Snitch counterpart\n   * @param klas     The  name of the class to be invoked in the remote node\n   * @param callback The callback to be called when the response is obtained from remote node.\n   *                 If this is passed as null the entire response map will be added as tags\n   */\n  public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {\n    if (callback == null) callback = this;\n    String url = snitchInfo.getCoreContainer().getZkController().getZkStateReader().getBaseUrlForNodeName(node);\n    params.add(\"class\", klas);\n    params.add(ACTION, INVOKE.toString());\n    //todo batch all requests to the same server\n\n    try {\n      SimpleSolrResponse rsp = invoke(snitchInfo.getCoreContainer().getUpdateShardHandler(), url, CommonParams.CORES_HANDLER_PATH, params);\n      Map<String, Object> returnedVal = (Map<String, Object>) rsp.getResponse().get(klas);\n      if(exception == null){\n//        log this\n      } else {\n        callback.remoteCallback(SnitchContext.this,returnedVal);\n      }\n      callback.remoteCallback(this, returnedVal);\n    } catch (Exception e) {\n      log.error(\"Unable to invoke snitch counterpart\", e);\n      exception = e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e78c35bca3e32dfc7a695136fa2b5de1ae135c22":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22","dded3df9e710f258905cff1def2f25eb51c62e0f"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"e78c35bca3e32dfc7a695136fa2b5de1ae135c22":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","dded3df9e710f258905cff1def2f25eb51c62e0f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}