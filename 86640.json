{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#getTailId().mjava","commits":[{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#getTailId().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getTailId().mjava","sourceNew":"  /**\n   *\n   * Gets last element of the Queue without removing it.\n   */\n  public String getTailId() throws KeeperException, InterruptedException {\n    // TODO: could we use getChildren here?  Unsure what freshness guarantee the caller needs.\n    TreeSet<String> orderedChildren = fetchZkChildren(null);\n\n    for (String headNode : orderedChildren.descendingSet())\n      if (headNode != null) {\n        try {\n          QueueEvent queueEvent = new QueueEvent(dir + \"/\" + headNode, zookeeper.getData(dir + \"/\" + headNode,\n              null, null, true), null);\n          return queueEvent.getId();\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    return null;\n  }\n\n","sourceOld":"  /**\n   *\n   * Gets last element of the Queue without removing it.\n   */\n  public String getTailId() throws KeeperException, InterruptedException {\n    TreeMap<Long, String> orderedChildren = null;\n    orderedChildren = orderedChildren(null);\n    if(orderedChildren == null || orderedChildren.isEmpty()) return null;\n\n    for(String headNode : orderedChildren.descendingMap().values())\n      if (headNode != null) {\n        try {\n          QueueEvent queueEvent = new QueueEvent(dir + \"/\" + headNode, zookeeper.getData(dir + \"/\" + headNode,\n              null, null, true), null);\n          return queueEvent.getId();\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#getTailId().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#getTailId().mjava","sourceNew":"  /**\n   *\n   * Gets last element of the Queue without removing it.\n   */\n  public String getTailId() throws KeeperException, InterruptedException {\n    // TODO: could we use getChildren here?  Unsure what freshness guarantee the caller needs.\n    TreeSet<String> orderedChildren = fetchZkChildren(null);\n\n    for (String headNode : orderedChildren.descendingSet())\n      if (headNode != null) {\n        try {\n          QueueEvent queueEvent = new QueueEvent(dir + \"/\" + headNode, zookeeper.getData(dir + \"/\" + headNode,\n              null, null, true), null);\n          return queueEvent.getId();\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    return null;\n  }\n\n","sourceOld":"  /**\n   *\n   * Gets last element of the Queue without removing it.\n   */\n  public String getTailId() throws KeeperException, InterruptedException {\n    // TODO: could we use getChildren here?  Unsure what freshness guarantee the caller needs.\n    TreeSet<String> orderedChildren = fetchZkChildren(null);\n\n    for (String headNode : orderedChildren.descendingSet())\n      if (headNode != null) {\n        try {\n          QueueEvent queueEvent = new QueueEvent(dir + \"/\" + headNode, zookeeper.getData(dir + \"/\" + headNode,\n              null, null, true), null);\n          return queueEvent.getId();\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}