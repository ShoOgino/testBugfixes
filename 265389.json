{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":"  public void testNormsClose() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":"  public void testNormsClose() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(newRandom(), dir1, false);\n    SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":"  public void testNormsClose() throws IOException { \n    Random random = newRandom();\n    Directory dir1 = newDirectory(random); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(newRandom(), dir1, false);\n    SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsClose() throws IOException { \n    Random random = newRandom();\n    Directory dir1 = newDirectory(random); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    SegmentReader reader1 = SegmentReader.getOnlySegmentReader(dir1);\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b5e0eebe355b14693e24007d721da78a79d8170","date":1305898401,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    SegmentNorms r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    SegmentNorms r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    SegmentNorms r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    Norm r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":null,"sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    SegmentNorms r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":null,"sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    SegmentNorms r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsClose().mjava","sourceNew":null,"sourceOld":"  public void testNormsClose() throws IOException { \n    Directory dir1 = newDirectory(); \n    TestIndexReaderReopen.createIndex(random, dir1, false);\n    SegmentReader reader1 = getOnlySegmentReader(IndexReader.open(dir1, false));\n    reader1.norms(\"field1\");\n    SegmentNorms r1norm = reader1.norms.get(\"field1\");\n    AtomicInteger r1BytesRef = r1norm.bytesRef();\n    SegmentReader reader2 = (SegmentReader)reader1.clone();\n    assertEquals(2, r1norm.bytesRef().get());\n    reader1.close();\n    assertEquals(1, r1BytesRef.get());\n    reader2.norms(\"field1\");\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["3bb13258feba31ab676502787ab2e1779f129b7a","8b5e0eebe355b14693e24007d721da78a79d8170"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8b5e0eebe355b14693e24007d721da78a79d8170","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"8b5e0eebe355b14693e24007d721da78a79d8170":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","8b5e0eebe355b14693e24007d721da78a79d8170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8b5e0eebe355b14693e24007d721da78a79d8170","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["8b5e0eebe355b14693e24007d721da78a79d8170"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"8b5e0eebe355b14693e24007d721da78a79d8170":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a3776dccca01c11e7046323cfad46a3b4a471233","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b5e0eebe355b14693e24007d721da78a79d8170","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}