{"path":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Query,Filter,int).mjava","commits":[{"id":"82dc8f80042322d1c443b6c70bdec5249eb745c2","date":1074623829,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Query,Filter,int).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t* A search implementation which spans a new thread for each\n\t* Searchable, waits for each search to complete and merge\n\t* the results back together.\n\t*/\n\tpublic TopDocs search(Query query, Filter filter, int nDocs)\n\t\tthrows IOException {\n\t\tHitQueue hq = new HitQueue(nDocs);\n\t\tint totalHits = 0;\n\t\tMultiSearcherThread[] msta =\n\t\t\tnew MultiSearcherThread[searchables.length];\n\t\tfor (int i = 0; i < searchables.length; i++) { // search each searcher\n\t\t\t// Assume not too many searchables and cost of creating a thread is by far inferior to a search\n\t\t\tmsta[i] =\n\t\t\t\tnew MultiSearcherThread(\n\t\t\t\t\tsearchables[i],\n\t\t\t\t\tquery,\n\t\t\t\t\tfilter,\n\t\t\t\t\tnDocs,\n\t\t\t\t\thq,\n\t\t\t\t\ti,\n\t\t\t\t\tstarts,\n\t\t\t\t\t\"MultiSearcher thread #\" + (i + 1));\n\t\t\tmsta[i].start();\n\t\t}\n\n\t\tfor (int i = 0; i < searchables.length; i++) {\n\t\t\ttry {\n\t\t\t\tmsta[i].join();\n\t\t\t} catch (InterruptedException ie) {\n\t\t\t\t; // TODO: what should we do with this???\n\t\t\t}\n\t\t\tIOException ioe = msta[i].getIOException();\n\t\t\tif (ioe == null) {\n\t\t\t\ttotalHits += msta[i].hits();\n\t\t\t} else {\n\t\t\t\t// if one search produced an IOException, rethrow it\n\t\t\t\tthrow ioe;\n\t\t\t}\n\t\t}\n\n\t\tScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n\t\tfor (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n\t\t\tscoreDocs[i] = (ScoreDoc) hq.pop();\n\n\t\treturn new TopDocs(totalHits, scoreDocs);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6691cb6747f9e850337c706c06b92e9ddf816e1","date":1077044431,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Query,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Query,Filter,int).mjava","sourceNew":"  /**\n   * A search implementation which spans a new thread for each\n   * Searchable, waits for each search to complete and merge\n   * the results back together.\n   */\n  public TopDocs search(Query query, Filter filter, int nDocs)\n    throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta =\n      new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] =\n        new MultiSearcherThread(\n                                searchables[i],\n                                query,\n                                filter,\n                                nDocs,\n                                hq,\n                                i,\n                                starts,\n                                \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        ; // TODO: what should we do with this???\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","sourceOld":"\t/**\n\t* A search implementation which spans a new thread for each\n\t* Searchable, waits for each search to complete and merge\n\t* the results back together.\n\t*/\n\tpublic TopDocs search(Query query, Filter filter, int nDocs)\n\t\tthrows IOException {\n\t\tHitQueue hq = new HitQueue(nDocs);\n\t\tint totalHits = 0;\n\t\tMultiSearcherThread[] msta =\n\t\t\tnew MultiSearcherThread[searchables.length];\n\t\tfor (int i = 0; i < searchables.length; i++) { // search each searcher\n\t\t\t// Assume not too many searchables and cost of creating a thread is by far inferior to a search\n\t\t\tmsta[i] =\n\t\t\t\tnew MultiSearcherThread(\n\t\t\t\t\tsearchables[i],\n\t\t\t\t\tquery,\n\t\t\t\t\tfilter,\n\t\t\t\t\tnDocs,\n\t\t\t\t\thq,\n\t\t\t\t\ti,\n\t\t\t\t\tstarts,\n\t\t\t\t\t\"MultiSearcher thread #\" + (i + 1));\n\t\t\tmsta[i].start();\n\t\t}\n\n\t\tfor (int i = 0; i < searchables.length; i++) {\n\t\t\ttry {\n\t\t\t\tmsta[i].join();\n\t\t\t} catch (InterruptedException ie) {\n\t\t\t\t; // TODO: what should we do with this???\n\t\t\t}\n\t\t\tIOException ioe = msta[i].getIOException();\n\t\t\tif (ioe == null) {\n\t\t\t\ttotalHits += msta[i].hits();\n\t\t\t} else {\n\t\t\t\t// if one search produced an IOException, rethrow it\n\t\t\t\tthrow ioe;\n\t\t\t}\n\t\t}\n\n\t\tScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n\t\tfor (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n\t\t\tscoreDocs[i] = (ScoreDoc) hq.pop();\n\n\t\treturn new TopDocs(totalHits, scoreDocs);\n\t}\n\n","bugFix":null,"bugIntro":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8","1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":5,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,int).mjava","pathOld":"src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Query,Filter,int).mjava","sourceNew":"  /**\n   * A search implementation which spans a new thread for each\n   * Searchable, waits for each search to complete and merge\n   * the results back together.\n   */\n  public TopDocs search(Weight weight, Filter filter, int nDocs)\n    throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta =\n      new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] =\n        new MultiSearcherThread(\n                                searchables[i],\n                                weight,\n                                filter,\n                                nDocs,\n                                hq,\n                                i,\n                                starts,\n                                \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        ; // TODO: what should we do with this???\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","sourceOld":"  /**\n   * A search implementation which spans a new thread for each\n   * Searchable, waits for each search to complete and merge\n   * the results back together.\n   */\n  public TopDocs search(Query query, Filter filter, int nDocs)\n    throws IOException {\n    HitQueue hq = new HitQueue(nDocs);\n    int totalHits = 0;\n    MultiSearcherThread[] msta =\n      new MultiSearcherThread[searchables.length];\n    for (int i = 0; i < searchables.length; i++) { // search each searcher\n      // Assume not too many searchables and cost of creating a thread is by far inferior to a search\n      msta[i] =\n        new MultiSearcherThread(\n                                searchables[i],\n                                query,\n                                filter,\n                                nDocs,\n                                hq,\n                                i,\n                                starts,\n                                \"MultiSearcher thread #\" + (i + 1));\n      msta[i].start();\n    }\n\n    for (int i = 0; i < searchables.length; i++) {\n      try {\n        msta[i].join();\n      } catch (InterruptedException ie) {\n        ; // TODO: what should we do with this???\n      }\n      IOException ioe = msta[i].getIOException();\n      if (ioe == null) {\n        totalHits += msta[i].hits();\n      } else {\n        // if one search produced an IOException, rethrow it\n        throw ioe;\n      }\n    }\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n      scoreDocs[i] = (ScoreDoc) hq.pop();\n\n    return new TopDocs(totalHits, scoreDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["82dc8f80042322d1c443b6c70bdec5249eb745c2"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc8f80042322d1c443b6c70bdec5249eb745c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402061809f3a4629ea0c449e33e9f94a9772f3c3"]},"commit2Childs":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc8f80042322d1c443b6c70bdec5249eb745c2"],"82dc8f80042322d1c443b6c70bdec5249eb745c2":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}