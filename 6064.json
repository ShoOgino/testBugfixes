{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields#files(Directory,SegmentInfo,Collection[String]).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields#files(Directory,SegmentInfo,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  static void files(Directory dir, SegmentInfo info, Collection<String> files) throws IOException {\n    files.add(IndexFileNames.segmentFileName(info.name, PreFlexCodec.TERMS_EXTENSION));\n    files.add(IndexFileNames.segmentFileName(info.name, PreFlexCodec.TERMS_INDEX_EXTENSION));\n    files.add(IndexFileNames.segmentFileName(info.name, PreFlexCodec.FREQ_EXTENSION));\n    if (info.getHasProx()) {\n      // LUCENE-1739: for certain versions of 2.9-dev,\n      // hasProx would be incorrectly computed during\n      // indexing as true, and then stored into the segments\n      // file, when it should have been false.  So we do the\n      // extra check, here:\n      final String prx = IndexFileNames.segmentFileName(info.name, PreFlexCodec.PROX_EXTENSION);\n      if (dir.fileExists(prx)) {\n        files.add(prx);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields#files(Directory,SegmentInfo,Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields#files(Directory,SegmentInfo,Collection[String]).mjava","sourceNew":"  static void files(Directory dir, SegmentInfo info, Collection<String> files) throws IOException {\n    files.add(IndexFileNames.segmentFileName(info.name, \"\", PreFlexCodec.TERMS_EXTENSION));\n    files.add(IndexFileNames.segmentFileName(info.name, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION));\n    files.add(IndexFileNames.segmentFileName(info.name, \"\", PreFlexCodec.FREQ_EXTENSION));\n    if (info.getHasProx()) {\n      // LUCENE-1739: for certain versions of 2.9-dev,\n      // hasProx would be incorrectly computed during\n      // indexing as true, and then stored into the segments\n      // file, when it should have been false.  So we do the\n      // extra check, here:\n      final String prx = IndexFileNames.segmentFileName(info.name, \"\", PreFlexCodec.PROX_EXTENSION);\n      if (dir.fileExists(prx)) {\n        files.add(prx);\n      }\n    }\n  }\n\n","sourceOld":"  static void files(Directory dir, SegmentInfo info, Collection<String> files) throws IOException {\n    files.add(IndexFileNames.segmentFileName(info.name, PreFlexCodec.TERMS_EXTENSION));\n    files.add(IndexFileNames.segmentFileName(info.name, PreFlexCodec.TERMS_INDEX_EXTENSION));\n    files.add(IndexFileNames.segmentFileName(info.name, PreFlexCodec.FREQ_EXTENSION));\n    if (info.getHasProx()) {\n      // LUCENE-1739: for certain versions of 2.9-dev,\n      // hasProx would be incorrectly computed during\n      // indexing as true, and then stored into the segments\n      // file, when it should have been false.  So we do the\n      // extra check, here:\n      final String prx = IndexFileNames.segmentFileName(info.name, PreFlexCodec.PROX_EXTENSION);\n      if (dir.fileExists(prx)) {\n        files.add(prx);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/Lucene3xFields#files(Directory,SegmentInfo,Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields#files(Directory,SegmentInfo,Collection[String]).mjava","sourceNew":"  static void files(Directory dir, SegmentInfo info, Collection<String> files) throws IOException {\n    files.add(IndexFileNames.segmentFileName(info.name, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION));\n    files.add(IndexFileNames.segmentFileName(info.name, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION));\n    files.add(IndexFileNames.segmentFileName(info.name, \"\", Lucene3xPostingsFormat.FREQ_EXTENSION));\n    if (info.getHasProx()) {\n      // LUCENE-1739: for certain versions of 2.9-dev,\n      // hasProx would be incorrectly computed during\n      // indexing as true, and then stored into the segments\n      // file, when it should have been false.  So we do the\n      // extra check, here:\n      final String prx = IndexFileNames.segmentFileName(info.name, \"\", Lucene3xPostingsFormat.PROX_EXTENSION);\n      if (dir.fileExists(prx)) {\n        files.add(prx);\n      }\n    }\n  }\n\n","sourceOld":"  static void files(Directory dir, SegmentInfo info, Collection<String> files) throws IOException {\n    files.add(IndexFileNames.segmentFileName(info.name, \"\", PreFlexCodec.TERMS_EXTENSION));\n    files.add(IndexFileNames.segmentFileName(info.name, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION));\n    files.add(IndexFileNames.segmentFileName(info.name, \"\", PreFlexCodec.FREQ_EXTENSION));\n    if (info.getHasProx()) {\n      // LUCENE-1739: for certain versions of 2.9-dev,\n      // hasProx would be incorrectly computed during\n      // indexing as true, and then stored into the segments\n      // file, when it should have been false.  So we do the\n      // extra check, here:\n      final String prx = IndexFileNames.segmentFileName(info.name, \"\", PreFlexCodec.PROX_EXTENSION);\n      if (dir.fileExists(prx)) {\n        files.add(prx);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}