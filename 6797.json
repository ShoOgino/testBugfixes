{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow(boolean,Map[String,Integer]).mjava","commits":[{"id":"78002dda5f9d46d20e8cf0a7c070b8205219a93d","date":1465238456,"type":1,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow(boolean,Map[String,Integer]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow(ResultSet,boolean,List[String],Map[String,Integer]).mjava","sourceNew":"    protected Map<String,Object> getARow(boolean convertType, Map<String,Integer> fieldNameVsType) {\n      if (getResultSet() == null)\n        return null;\n      Map<String, Object> result = new HashMap<>();\n      for (String colName : getColNames()) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information except for BigDecimal and BigInteger\n            // which cannot be serialized by JavaBin/XML. See SOLR-6165\n            Object value = getResultSet().getObject(colName);\n            if (value instanceof BigDecimal || value instanceof BigInteger) {\n              result.put(colName, value.toString());\n            } else {\n              result.put(colName, value);\n            }\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, getResultSet().getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, getResultSet().getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, getResultSet().getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, getResultSet().getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, getResultSet().getTimestamp(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, getResultSet().getBoolean(colName));\n              break;\n            case Types.BLOB:\n              result.put(colName, getResultSet().getBytes(colName));\n              break;\n            default:\n              result.put(colName, getResultSet().getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          wrapAndThrow(SEVERE, e, \"Error reading data from database\");\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    protected Map<String,Object> getARow(ResultSet resultSet, boolean convertType, List<String> colNames,\n        Map<String,Integer> fieldNameVsType) {\n      if (resultSet == null)\n        return null;\n      Map<String, Object> result = new HashMap<>();\n      for (String colName : colNames) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information except for BigDecimal and BigInteger\n            // which cannot be serialized by JavaBin/XML. See SOLR-6165\n            Object value = resultSet.getObject(colName);\n            if (value instanceof BigDecimal || value instanceof BigInteger) {\n              result.put(colName, value.toString());\n            } else {\n              result.put(colName, value);\n            }\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, resultSet.getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, resultSet.getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, resultSet.getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, resultSet.getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, resultSet.getTimestamp(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, resultSet.getBoolean(colName));\n              break;\n            case Types.BLOB:\n              result.put(colName, resultSet.getBytes(colName));\n              break;\n            default:\n              result.put(colName, resultSet.getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          wrapAndThrow(SEVERE, e, \"Error reading data from database\");\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow(boolean,Map[String,Integer]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow(ResultSet,boolean,List[String],Map[String,Integer]).mjava","sourceNew":"    protected Map<String,Object> getARow(boolean convertType, Map<String,Integer> fieldNameVsType) {\n      if (getResultSet() == null)\n        return null;\n      Map<String, Object> result = new HashMap<>();\n      for (String colName : getColNames()) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information except for BigDecimal and BigInteger\n            // which cannot be serialized by JavaBin/XML. See SOLR-6165\n            Object value = getResultSet().getObject(colName);\n            if (value instanceof BigDecimal || value instanceof BigInteger) {\n              result.put(colName, value.toString());\n            } else {\n              result.put(colName, value);\n            }\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, getResultSet().getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, getResultSet().getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, getResultSet().getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, getResultSet().getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, getResultSet().getTimestamp(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, getResultSet().getBoolean(colName));\n              break;\n            case Types.BLOB:\n              result.put(colName, getResultSet().getBytes(colName));\n              break;\n            default:\n              result.put(colName, getResultSet().getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          wrapAndThrow(SEVERE, e, \"Error reading data from database\");\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    protected Map<String,Object> getARow(ResultSet resultSet, boolean convertType, List<String> colNames,\n        Map<String,Integer> fieldNameVsType) {\n      if (resultSet == null)\n        return null;\n      Map<String, Object> result = new HashMap<>();\n      for (String colName : colNames) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information except for BigDecimal and BigInteger\n            // which cannot be serialized by JavaBin/XML. See SOLR-6165\n            Object value = resultSet.getObject(colName);\n            if (value instanceof BigDecimal || value instanceof BigInteger) {\n              result.put(colName, value.toString());\n            } else {\n              result.put(colName, value);\n            }\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, resultSet.getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, resultSet.getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, resultSet.getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, resultSet.getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, resultSet.getTimestamp(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, resultSet.getBoolean(colName));\n              break;\n            case Types.BLOB:\n              result.put(colName, resultSet.getBytes(colName));\n              break;\n            default:\n              result.put(colName, resultSet.getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          wrapAndThrow(SEVERE, e, \"Error reading data from database\");\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow(boolean,Map[String,Integer]).mjava","pathOld":"/dev/null","sourceNew":"    protected Map<String,Object> getARow(boolean convertType, Map<String,Integer> fieldNameVsType) {\n      if (getResultSet() == null)\n        return null;\n      Map<String, Object> result = new HashMap<>();\n      for (String colName : getColNames()) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information except for BigDecimal and BigInteger\n            // which cannot be serialized by JavaBin/XML. See SOLR-6165\n            Object value = getResultSet().getObject(colName);\n            if (value instanceof BigDecimal || value instanceof BigInteger) {\n              result.put(colName, value.toString());\n            } else {\n              result.put(colName, value);\n            }\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, getResultSet().getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, getResultSet().getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, getResultSet().getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, getResultSet().getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, getResultSet().getTimestamp(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, getResultSet().getBoolean(colName));\n              break;\n            case Types.BLOB:\n              result.put(colName, getResultSet().getBytes(colName));\n              break;\n            default:\n              result.put(colName, getResultSet().getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          wrapAndThrow(SEVERE, e, \"Error reading data from database\");\n        }\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow(boolean,Map[String,Integer]).mjava","sourceNew":null,"sourceOld":"    protected Map<String,Object> getARow(boolean convertType, Map<String,Integer> fieldNameVsType) {\n      if (getResultSet() == null)\n        return null;\n      Map<String, Object> result = new HashMap<>();\n      for (String colName : getColNames()) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information except for BigDecimal and BigInteger\n            // which cannot be serialized by JavaBin/XML. See SOLR-6165\n            Object value = getResultSet().getObject(colName);\n            if (value instanceof BigDecimal || value instanceof BigInteger) {\n              result.put(colName, value.toString());\n            } else {\n              result.put(colName, value);\n            }\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, getResultSet().getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, getResultSet().getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, getResultSet().getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, getResultSet().getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, getResultSet().getTimestamp(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, getResultSet().getBoolean(colName));\n              break;\n            case Types.BLOB:\n              result.put(colName, getResultSet().getBytes(colName));\n              break;\n            default:\n              result.put(colName, getResultSet().getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          wrapAndThrow(SEVERE, e, \"Error reading data from database\");\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"191128ac5b85671b1671e2c857437694283b6ebf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","78002dda5f9d46d20e8cf0a7c070b8205219a93d"],"78002dda5f9d46d20e8cf0a7c070b8205219a93d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["191128ac5b85671b1671e2c857437694283b6ebf","78002dda5f9d46d20e8cf0a7c070b8205219a93d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"191128ac5b85671b1671e2c857437694283b6ebf":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"78002dda5f9d46d20e8cf0a7c070b8205219a93d":["191128ac5b85671b1671e2c857437694283b6ebf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}