{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String).mjava","commits":[{"id":"d805d691fbf3ca8aafa5397568ec761790b88622","date":1417093891,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getActiveSlicesMap(corename);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(corename, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename, String path) {\n    String collection = corename;\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getActiveSlicesMap(collection);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, path, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, path, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(String corename) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, Slice> slices = clusterState.getActiveSlicesMap(corename);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(corename, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getActiveSlicesMap(corename);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(corename, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d805d691fbf3ca8aafa5397568ec761790b88622":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["d805d691fbf3ca8aafa5397568ec761790b88622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a760e2135dfe20a04dea360873d4de1c6a0280bb"]},"commit2Childs":{"d805d691fbf3ca8aafa5397568ec761790b88622":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d805d691fbf3ca8aafa5397568ec761790b88622"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}