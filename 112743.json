{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#JapaneseTokenizer(Reader,UserDictionary,boolean,Mode).mjava","commits":[{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":1,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#JapaneseTokenizer(Reader,UserDictionary,boolean,Mode).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer#KuromojiTokenizer(Reader,UserDictionary,boolean,Mode).mjava","sourceNew":"  /**\n   * Create a new JapaneseTokenizer.\n   * \n   * @param input Reader containing text\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param mode tokenization mode.\n   */\n  public JapaneseTokenizer(Reader input, UserDictionary userDictionary, boolean discardPunctuation, Mode mode) {\n    super(input);\n    dictionary = TokenInfoDictionary.getInstance();\n    fst = dictionary.getFST();\n    unkDictionary = UnknownDictionary.getInstance();\n    characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    costs = ConnectionCosts.getInstance();\n    fstReader = fst.getBytesReader(0);\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader(0);\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","sourceOld":"  /**\n   * Create a new KuromojiTokenizer.\n   * \n   * @param input Reader containing text\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param mode tokenization mode.\n   */\n  public KuromojiTokenizer(Reader input, UserDictionary userDictionary, boolean discardPunctuation, Mode mode) {\n    super(input);\n    dictionary = TokenInfoDictionary.getInstance();\n    fst = dictionary.getFST();\n    unkDictionary = UnknownDictionary.getInstance();\n    characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    costs = ConnectionCosts.getInstance();\n    fstReader = fst.getBytesReader(0);\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader(0);\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#JapaneseTokenizer(Reader,UserDictionary,boolean,Mode).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#JapaneseTokenizer(Reader,UserDictionary,boolean,Mode).mjava","sourceNew":"  /**\n   * Create a new JapaneseTokenizer.\n   * \n   * @param input Reader containing text\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param mode tokenization mode.\n   */\n  public JapaneseTokenizer(Reader input, UserDictionary userDictionary, boolean discardPunctuation, Mode mode) {\n    super(input);\n    dictionary = TokenInfoDictionary.getInstance();\n    fst = dictionary.getFST();\n    unkDictionary = UnknownDictionary.getInstance();\n    characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    costs = ConnectionCosts.getInstance();\n    fstReader = fst.getBytesReader(0);\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader(0);\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","sourceOld":"  /**\n   * Create a new JapaneseTokenizer.\n   * \n   * @param input Reader containing text\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param mode tokenization mode.\n   */\n  public JapaneseTokenizer(Reader input, UserDictionary userDictionary, boolean discardPunctuation, Mode mode) {\n    super(input);\n    dictionary = TokenInfoDictionary.getInstance();\n    fst = dictionary.getFST();\n    unkDictionary = UnknownDictionary.getInstance();\n    characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    costs = ConnectionCosts.getInstance();\n    fstReader = fst.getBytesReader(0);\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader(0);\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}