{"path":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    \n    // can we use reversed wildcards in this field?\n    String type = schema.getFieldType(field).getTypeName();\n    ReversedWildcardFilterFactory factory = leadingWildcards.get(type);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n    Query q = super.getWildcardQuery(field, termStr);\n    if (q instanceof WildcardQuery) {\n      // use a constant score query to avoid overflowing clauses\n      WildcardQuery wildcardQuery = new WildcardQuery(((WildcardQuery)q).getTerm());\n      return  wildcardQuery; \n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    \n    // can we use reversed wildcards in this field?\n    String type = schema.getFieldType(field).getTypeName();\n    ReversedWildcardFilterFactory factory = leadingWildcards.get(type);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n    Query q = super.getWildcardQuery(field, termStr);\n    if (q instanceof WildcardQuery) {\n      // use a constant score query to avoid overflowing clauses\n      WildcardQuery wildcardQuery = new WildcardQuery(((WildcardQuery)q).getTerm());\n      return  wildcardQuery; \n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    \n    // can we use reversed wildcards in this field?\n    String type = schema.getFieldType(field).getTypeName();\n    ReversedWildcardFilterFactory factory = leadingWildcards.get(type);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n    Query q = super.getWildcardQuery(field, termStr);\n    if (q instanceof WildcardQuery) {\n      // use a constant score query to avoid overflowing clauses\n      WildcardQuery wildcardQuery = new WildcardQuery(((WildcardQuery)q).getTerm());\n      return  wildcardQuery; \n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    \n    // can we use reversed wildcards in this field?\n    String type = schema.getFieldType(field).getTypeName();\n    ReversedWildcardFilterFactory factory = leadingWildcards.get(type);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n    Query q = super.getWildcardQuery(field, termStr);\n    if (q instanceof WildcardQuery) {\n      // use a constant score query to avoid overflowing clauses\n      WildcardQuery wildcardQuery = new WildcardQuery(((WildcardQuery)q).getTerm());\n      return  wildcardQuery; \n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    \n    // can we use reversed wildcards in this field?\n    String type = schema.getFieldType(field).getTypeName();\n    ReversedWildcardFilterFactory factory = leadingWildcards.get(type);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n    Query q = super.getWildcardQuery(field, termStr);\n    if (q instanceof WildcardQuery) {\n      // use a constant score query to avoid overflowing clauses\n      WildcardQuery wildcardQuery = new WildcardQuery(((WildcardQuery)q).getTerm());\n      return  wildcardQuery; \n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    \n    // can we use reversed wildcards in this field?\n    String type = schema.getFieldType(field).getTypeName();\n    ReversedWildcardFilterFactory factory = leadingWildcards.get(type);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n    Query q = super.getWildcardQuery(field, termStr);\n    if (q instanceof WildcardQuery) {\n      // use a constant score query to avoid overflowing clauses\n      WildcardQuery wildcardQuery = new WildcardQuery(((WildcardQuery)q).getTerm());\n      return  wildcardQuery; \n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8d5405ac4f2510f9f83e07236792d1056c19640","date":1322235986,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    termStr = analyzeIfMultitermTermText(field, termStr, schema.getFieldType(field).getMultiTermAnalyzer());\n    // can we use reversed wildcards in this field?\n    String type = schema.getFieldType(field).getTypeName();\n    ReversedWildcardFilterFactory factory = leadingWildcards.get(type);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n    Query q = super.getWildcardQuery(field, termStr);\n    if (q instanceof WildcardQuery) {\n      // use a constant score query to avoid overflowing clauses\n      WildcardQuery wildcardQuery = new WildcardQuery(((WildcardQuery)q).getTerm());\n      return  wildcardQuery; \n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    \n    // can we use reversed wildcards in this field?\n    String type = schema.getFieldType(field).getTypeName();\n    ReversedWildcardFilterFactory factory = leadingWildcards.get(type);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n    Query q = super.getWildcardQuery(field, termStr);\n    if (q instanceof WildcardQuery) {\n      // use a constant score query to avoid overflowing clauses\n      WildcardQuery wildcardQuery = new WildcardQuery(((WildcardQuery)q).getTerm());\n      return  wildcardQuery; \n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15795b2193a8dd132f374975d4243687bee9351","date":1322413478,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    termStr = analyzeIfMultitermTermText(field, termStr, schema.getFieldType(field).getMultiTermAnalyzer());\n    // can we use reversed wildcards in this field?\n    String type = schema.getFieldType(field).getTypeName();\n    ReversedWildcardFilterFactory factory = leadingWildcards.get(type);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n    Query q = super.getWildcardQuery(field, termStr);\n    if (q instanceof WildcardQuery) {\n      // use a constant score query to avoid overflowing clauses\n      WildcardQuery wildcardQuery = new WildcardQuery(((WildcardQuery)q).getTerm());\n      return  wildcardQuery; \n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1572188101e23640cb33ef14d47ac743b5e930","date":1340165824,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","sourceNew":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getWildcardQuery(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","sourceNew":"  // called from parser\n  protected Query getWildcardQuery(String field, String termStr) throws SyntaxError {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else {\n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()),\n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","sourceOld":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getWildcardQuery(String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n    checkNullField(field);\n    // *:* -> MatchAllDocsQuery\n    if (\"*\".equals(field) && \"*\".equals(termStr)) {\n      return newMatchAllDocsQuery();\n    }\n    FieldType fieldType = schema.getFieldType(field);\n    termStr = analyzeIfMultitermTermText(field, termStr, fieldType);\n    // can we use reversed wildcards in this field?\n    ReversedWildcardFilterFactory factory = getReversedWildcardFilterFactory(fieldType);\n    if (factory != null) {\n      Term term = new Term(field, termStr);\n      // fsa representing the query\n      Automaton automaton = WildcardQuery.toAutomaton(term);\n      // TODO: we should likely use the automaton to calculate shouldReverse, too.\n      if (factory.shouldReverse(termStr)) {\n        automaton = BasicOperations.concatenate(automaton, BasicAutomata.makeChar(factory.getMarkerChar()));\n        SpecialOperations.reverse(automaton);\n      } else { \n        // reverse wildcardfilter is active: remove false positives\n        // fsa representing false positives (markerChar*)\n        Automaton falsePositives = BasicOperations.concatenate(\n            BasicAutomata.makeChar(factory.getMarkerChar()), \n            BasicAutomata.makeAnyString());\n        // subtract these away\n        automaton = BasicOperations.minus(automaton, falsePositives);\n      }\n      return new AutomatonQuery(term, automaton) {\n        // override toString so its completely transparent\n        @Override\n        public String toString(String field) {\n          StringBuilder buffer = new StringBuilder();\n          if (!getField().equals(field)) {\n            buffer.append(getField());\n            buffer.append(\":\");\n          }\n          buffer.append(term.text());\n          buffer.append(ToStringUtils.boost(getBoost()));\n          return buffer.toString();\n        }\n      };\n    }\n\n    // Solr has always used constant scoring for wildcard queries.  This should return constant scoring by default.\n    return newWildcardQuery(new Term(field, termStr));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdb67100dc016748799a77218aa409478372d79":["7b1572188101e23640cb33ef14d47ac743b5e930"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["7b1572188101e23640cb33ef14d47ac743b5e930","3cdb67100dc016748799a77218aa409478372d79"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15795b2193a8dd132f374975d4243687bee9351":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cdb67100dc016748799a77218aa409478372d79"],"7b1572188101e23640cb33ef14d47ac743b5e930":["f15795b2193a8dd132f374975d4243687bee9351"]},"commit2Childs":{"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"f8d5405ac4f2510f9f83e07236792d1056c19640":["f15795b2193a8dd132f374975d4243687bee9351"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f15795b2193a8dd132f374975d4243687bee9351":["7b1572188101e23640cb33ef14d47ac743b5e930"],"7b1572188101e23640cb33ef14d47ac743b5e930":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}