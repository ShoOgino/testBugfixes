{"path":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#setNewTerms(ShardTerms).mjava","commits":[{"id":"5b6cc501b75cbd5d0319284563cdd20aff857ee6","date":1575346594,"type":1,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#setNewTerms(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#setNewTerms(Terms).mjava","sourceNew":"  /**\r\n   * Atomically update {@link ZkShardTerms#terms} and call listeners\r\n   * @param newTerms to be set\r\n   */\r\n  private void setNewTerms(ShardTerms newTerms) {\r\n    boolean isChanged = false;\r\n    synchronized (writingLock) {\r\n      if (terms == null || newTerms.getVersion() > terms.getVersion()) {\r\n        terms = newTerms;\r\n        isChanged = true;\r\n      }\r\n    }\r\n    if (isChanged) onTermUpdates(newTerms);\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Atomically update {@link ZkShardTerms#terms} and call listeners\r\n   * @param newTerms to be set\r\n   */\r\n  private void setNewTerms(Terms newTerms) {\r\n    boolean isChanged = false;\r\n    synchronized (writingLock) {\r\n      if (terms == null || newTerms.version > terms.version) {\r\n        terms = newTerms;\r\n        isChanged = true;\r\n      }\r\n    }\r\n    if (isChanged) onTermUpdates(newTerms);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#setNewTerms(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#setNewTerms(Terms).mjava","sourceNew":"  /**\r\n   * Atomically update {@link ZkShardTerms#terms} and call listeners\r\n   * @param newTerms to be set\r\n   */\r\n  private void setNewTerms(ShardTerms newTerms) {\r\n    boolean isChanged = false;\r\n    synchronized (writingLock) {\r\n      if (terms == null || newTerms.getVersion() > terms.getVersion()) {\r\n        terms = newTerms;\r\n        isChanged = true;\r\n      }\r\n    }\r\n    if (isChanged) onTermUpdates(newTerms);\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Atomically update {@link ZkShardTerms#terms} and call listeners\r\n   * @param newTerms to be set\r\n   */\r\n  private void setNewTerms(Terms newTerms) {\r\n    boolean isChanged = false;\r\n    synchronized (writingLock) {\r\n      if (terms == null || newTerms.version > terms.version) {\r\n        terms = newTerms;\r\n        isChanged = true;\r\n      }\r\n    }\r\n    if (isChanged) onTermUpdates(newTerms);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b990ee56c39c454f5c6bc2e645d1286e93acee","date":1579181439,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#setNewTerms(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#setNewTerms(ShardTerms).mjava","sourceNew":"  /**\n   * Atomically update {@link ZkShardTerms#terms} and call listeners\n   * @param newTerms to be set\n   */\n  private void setNewTerms(ShardTerms newTerms) {\n    boolean isChanged = false;\n    synchronized (writingLock) {\n      if (terms == null || newTerms.getVersion() > terms.getVersion()) {\n        terms = newTerms;\n        isChanged = true;\n      }\n    }\n    if (isChanged) onTermUpdates(newTerms);\n  }\n\n","sourceOld":"  /**\r\n   * Atomically update {@link ZkShardTerms#terms} and call listeners\r\n   * @param newTerms to be set\r\n   */\r\n  private void setNewTerms(ShardTerms newTerms) {\r\n    boolean isChanged = false;\r\n    synchronized (writingLock) {\r\n      if (terms == null || newTerms.getVersion() > terms.getVersion()) {\r\n        terms = newTerms;\r\n        isChanged = true;\r\n      }\r\n    }\r\n    if (isChanged) onTermUpdates(newTerms);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64b136610bf3772c70e2d86fa4c913425cedbca5","date":1580107100,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#setNewTerms(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#setNewTerms(ShardTerms).mjava","sourceNew":"  /**\n   * Atomically update {@link ZkShardTerms#terms} and call listeners\n   * @param newTerms to be set\n   */\n  private void setNewTerms(ShardTerms newTerms) {\n    boolean isChanged = false;\n    for (;;)  {\n      ShardTerms terms = this.terms.get();\n      if (terms == null || newTerms.getVersion() > terms.getVersion())  {\n        if (this.terms.compareAndSet(terms, newTerms))  {\n          isChanged = true;\n          break;\n        }\n      } else  {\n        break;\n      }\n    }\n\n    if (isChanged) onTermUpdates(newTerms);\n  }\n\n","sourceOld":"  /**\n   * Atomically update {@link ZkShardTerms#terms} and call listeners\n   * @param newTerms to be set\n   */\n  private void setNewTerms(ShardTerms newTerms) {\n    boolean isChanged = false;\n    synchronized (writingLock) {\n      if (terms == null || newTerms.getVersion() > terms.getVersion()) {\n        terms = newTerms;\n        isChanged = true;\n      }\n    }\n    if (isChanged) onTermUpdates(newTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"64b136610bf3772c70e2d86fa4c913425cedbca5":["14b990ee56c39c454f5c6bc2e645d1286e93acee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64b136610bf3772c70e2d86fa4c913425cedbca5"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["d3aa683bba99315838c968fefedf3d74f44aa993","14b990ee56c39c454f5c6bc2e645d1286e93acee"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["64b136610bf3772c70e2d86fa4c913425cedbca5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3aa683bba99315838c968fefedf3d74f44aa993","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"64b136610bf3772c70e2d86fa4c913425cedbca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}