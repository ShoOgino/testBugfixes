{"path":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"51cb88215648c6da23e00f2ffb57a5e3e1ef14be","date":1309303947,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final DocValues x = sources.get(0).getValues(context, readerContext);\n      final DocValues y = sources.get(1).getValues(context, readerContext);\n      return new DocValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final DocValues x = sources.get(0).getValues(context, readerContext);\n      final DocValues y = sources.get(1).getValues(context, readerContext);\n      return new DocValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final DocValues x = sources.get(0).getValues(context, readerContext);\n      final DocValues y = sources.get(1).getValues(context, readerContext);\n      return new DocValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final DocValues x = sources.get(0).getValues(context, readerContext);\n      final DocValues y = sources.get(1).getValues(context, readerContext);\n      return new DocValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final DocValues x = sources.get(0).getValues(context, readerContext);\n      final DocValues y = sources.get(1).getValues(context, readerContext);\n      return new DocValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final DocValues x = sources.get(0).getValues(context, readerContext);\n      final DocValues y = sources.get(1).getValues(context, readerContext);\n      return new DocValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final DocValues x = sources.get(0).getValues(context, readerContext);\n      final DocValues y = sources.get(1).getValues(context, readerContext);\n      return new DocValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final DocValues x = sources.get(0).getValues(context, readerContext);\n      final DocValues y = sources.get(1).getValues(context, readerContext);\n      return new DocValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final DocValues[] valsArr = new DocValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new DocValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (DocValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}