{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","sourceOld":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(\"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","sourceOld":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","sourceOld":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(\"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(\"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","sourceOld":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(\"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery.Builder multiPhraseQueryBuilder = new MultiPhraseQuery.Builder();\n    multiPhraseQueryBuilder.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQueryBuilder.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQueryBuilder.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQueryBuilder.build(), q);\n  }\n\n","sourceOld":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(\"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(\"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery.Builder multiPhraseQueryBuilder = new MultiPhraseQuery.Builder();\n    multiPhraseQueryBuilder.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQueryBuilder.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQueryBuilder.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQueryBuilder.build(), q);\n  }\n\n","sourceOld":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(\"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["379db3ad24c4f0214f30a122265a6d6be003a99d","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}