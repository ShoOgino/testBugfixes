{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscaped().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscaped().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n\n    /*\n     * assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n     * assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n     * assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\"); assertQueryEquals(\"\\\\+blah\", a,\n     * \"\\\\+blah\"); assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n     * \n     * assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\"); assertQueryEquals(\"\\\\!blah\",\n     * a, \"\\\\!blah\"); assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n     * assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\"); assertQueryEquals(\"\\\\:blah\",\n     * a, \"\\\\:blah\"); assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n     * assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\"); assertQueryEquals(\"\\\\]blah\",\n     * a, \"\\\\]blah\"); assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n     * assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\"); assertQueryEquals(\"\\\\)blah\",\n     * a, \"\\\\)blah\"); assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n     * assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\"); assertQueryEquals(\"\\\\?blah\",\n     * a, \"\\\\?blah\"); //assertQueryEquals(\"foo \\\\&\\\\& bar\", a,\n     * \"foo \\\\&\\\\& bar\"); //assertQueryEquals(\"foo \\\\|| bar\", a,\n     * \"foo \\\\|| bar\"); //assertQueryEquals(\"foo \\\\AND bar\", a,\n     * \"foo \\\\AND bar\");\n     */\n\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    \n    assertQueryEquals(\"\\\\a\", a, \"a\");\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    // TODO: implement Range queries on QueryParser\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\n        \"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\",\n        a, \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n\n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n\n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n\n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n\n    assertQueryNodeException(\"XY\\\\\"); // there must be a character after the\n    // escape char\n\n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n\n    assertQueryNodeException(\"XY\\\\u005G\"); // test non-hex character in escaped\n    // unicode sequence\n    assertQueryNodeException(\"XY\\\\u005\"); // test incomplete escaped unicode\n    // sequence\n\n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertQueryNodeException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing\n    // paranthesis\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\"); // escaped backslash\n\n    assertQueryNodeException(\"\\\\\"); // a backslash must always be escaped\n\n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a, \"a\\\\ or b\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n\n    /*\n     * assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n     * assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n     * assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\"); assertQueryEquals(\"\\\\+blah\", a,\n     * \"\\\\+blah\"); assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n     * \n     * assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\"); assertQueryEquals(\"\\\\!blah\",\n     * a, \"\\\\!blah\"); assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n     * assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\"); assertQueryEquals(\"\\\\:blah\",\n     * a, \"\\\\:blah\"); assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n     * assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\"); assertQueryEquals(\"\\\\]blah\",\n     * a, \"\\\\]blah\"); assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n     * assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\"); assertQueryEquals(\"\\\\)blah\",\n     * a, \"\\\\)blah\"); assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n     * assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\"); assertQueryEquals(\"\\\\?blah\",\n     * a, \"\\\\?blah\"); //assertQueryEquals(\"foo \\\\&\\\\& bar\", a,\n     * \"foo \\\\&\\\\& bar\"); //assertQueryEquals(\"foo \\\\|| bar\", a,\n     * \"foo \\\\|| bar\"); //assertQueryEquals(\"foo \\\\AND bar\", a,\n     * \"foo \\\\AND bar\");\n     */\n\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    \n    assertQueryEquals(\"\\\\a\", a, \"a\");\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    // TODO: implement Range queries on QueryParser\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\n        \"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\",\n        a, \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n\n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n\n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n\n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n\n    assertQueryNodeException(\"XY\\\\\"); // there must be a character after the\n    // escape char\n\n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n\n    assertQueryNodeException(\"XY\\\\u005G\"); // test non-hex character in escaped\n    // unicode sequence\n    assertQueryNodeException(\"XY\\\\u005\"); // test incomplete escaped unicode\n    // sequence\n\n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertQueryNodeException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing\n    // paranthesis\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\"); // escaped backslash\n\n    assertQueryNodeException(\"\\\\\"); // a backslash must always be escaped\n\n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a, \"a\\\\ or b\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscaped().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    /*\n     * assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n     * assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n     * assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\"); assertQueryEquals(\"\\\\+blah\", a,\n     * \"\\\\+blah\"); assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n     * \n     * assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\"); assertQueryEquals(\"\\\\!blah\",\n     * a, \"\\\\!blah\"); assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n     * assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\"); assertQueryEquals(\"\\\\:blah\",\n     * a, \"\\\\:blah\"); assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n     * assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\"); assertQueryEquals(\"\\\\]blah\",\n     * a, \"\\\\]blah\"); assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n     * assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\"); assertQueryEquals(\"\\\\)blah\",\n     * a, \"\\\\)blah\"); assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n     * assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\"); assertQueryEquals(\"\\\\?blah\",\n     * a, \"\\\\?blah\"); //assertQueryEquals(\"foo \\\\&\\\\& bar\", a,\n     * \"foo \\\\&\\\\& bar\"); //assertQueryEquals(\"foo \\\\|| bar\", a,\n     * \"foo \\\\|| bar\"); //assertQueryEquals(\"foo \\\\AND bar\", a,\n     * \"foo \\\\AND bar\");\n     */\n\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    \n    assertQueryEquals(\"\\\\a\", a, \"a\");\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    // TODO: implement Range queries on QueryParser\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\n        \"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\",\n        a, \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n\n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n\n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n\n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n\n    assertQueryNodeException(\"XY\\\\\"); // there must be a character after the\n    // escape char\n\n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n\n    assertQueryNodeException(\"XY\\\\u005G\"); // test non-hex character in escaped\n    // unicode sequence\n    assertQueryNodeException(\"XY\\\\u005\"); // test incomplete escaped unicode\n    // sequence\n\n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertQueryNodeException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing\n    // paranthesis\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\"); // escaped backslash\n\n    assertQueryNodeException(\"\\\\\"); // a backslash must always be escaped\n\n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a, \"a\\\\ or b\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n\n    /*\n     * assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n     * assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n     * assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\"); assertQueryEquals(\"\\\\+blah\", a,\n     * \"\\\\+blah\"); assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n     * \n     * assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\"); assertQueryEquals(\"\\\\!blah\",\n     * a, \"\\\\!blah\"); assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n     * assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\"); assertQueryEquals(\"\\\\:blah\",\n     * a, \"\\\\:blah\"); assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n     * assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\"); assertQueryEquals(\"\\\\]blah\",\n     * a, \"\\\\]blah\"); assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n     * assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\"); assertQueryEquals(\"\\\\)blah\",\n     * a, \"\\\\)blah\"); assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n     * assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\"); assertQueryEquals(\"\\\\?blah\",\n     * a, \"\\\\?blah\"); //assertQueryEquals(\"foo \\\\&\\\\& bar\", a,\n     * \"foo \\\\&\\\\& bar\"); //assertQueryEquals(\"foo \\\\|| bar\", a,\n     * \"foo \\\\|| bar\"); //assertQueryEquals(\"foo \\\\AND bar\", a,\n     * \"foo \\\\AND bar\");\n     */\n\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    \n    assertQueryEquals(\"\\\\a\", a, \"a\");\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    // TODO: implement Range queries on QueryParser\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\n        \"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\",\n        a, \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n\n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n\n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n\n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n\n    assertQueryNodeException(\"XY\\\\\"); // there must be a character after the\n    // escape char\n\n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n\n    assertQueryNodeException(\"XY\\\\u005G\"); // test non-hex character in escaped\n    // unicode sequence\n    assertQueryNodeException(\"XY\\\\u005\"); // test incomplete escaped unicode\n    // sequence\n\n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertQueryNodeException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing\n    // paranthesis\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\"); // escaped backslash\n\n    assertQueryNodeException(\"\\\\\"); // a backslash must always be escaped\n\n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a, \"a\\\\ or b\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscaped().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    /*\n     * assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n     * assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n     * assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\"); assertQueryEquals(\"\\\\+blah\", a,\n     * \"\\\\+blah\"); assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n     * \n     * assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\"); assertQueryEquals(\"\\\\!blah\",\n     * a, \"\\\\!blah\"); assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n     * assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\"); assertQueryEquals(\"\\\\:blah\",\n     * a, \"\\\\:blah\"); assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n     * assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\"); assertQueryEquals(\"\\\\]blah\",\n     * a, \"\\\\]blah\"); assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n     * assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\"); assertQueryEquals(\"\\\\)blah\",\n     * a, \"\\\\)blah\"); assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n     * assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\"); assertQueryEquals(\"\\\\?blah\",\n     * a, \"\\\\?blah\"); //assertQueryEquals(\"foo \\\\&\\\\& bar\", a,\n     * \"foo \\\\&\\\\& bar\"); //assertQueryEquals(\"foo \\\\|| bar\", a,\n     * \"foo \\\\|| bar\"); //assertQueryEquals(\"foo \\\\AND bar\", a,\n     * \"foo \\\\AND bar\");\n     */\n\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    \n    assertQueryEquals(\"\\\\a\", a, \"a\");\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    // TODO: implement Range queries on QueryParser\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\n        \"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\",\n        a, \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n\n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n\n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n\n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n\n    assertQueryNodeException(\"XY\\\\\"); // there must be a character after the\n    // escape char\n\n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n\n    assertQueryNodeException(\"XY\\\\u005G\"); // test non-hex character in escaped\n    // unicode sequence\n    assertQueryNodeException(\"XY\\\\u005\"); // test incomplete escaped unicode\n    // sequence\n\n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertQueryNodeException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing\n    // paranthesis\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\"); // escaped backslash\n\n    assertQueryNodeException(\"\\\\\"); // a backslash must always be escaped\n\n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a, \"a\\\\ or b\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    /*\n     * assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n     * assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n     * assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\"); assertQueryEquals(\"\\\\+blah\", a,\n     * \"\\\\+blah\"); assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n     * \n     * assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\"); assertQueryEquals(\"\\\\!blah\",\n     * a, \"\\\\!blah\"); assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n     * assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\"); assertQueryEquals(\"\\\\:blah\",\n     * a, \"\\\\:blah\"); assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n     * assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\"); assertQueryEquals(\"\\\\]blah\",\n     * a, \"\\\\]blah\"); assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n     * assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\"); assertQueryEquals(\"\\\\)blah\",\n     * a, \"\\\\)blah\"); assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n     * assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\"); assertQueryEquals(\"\\\\?blah\",\n     * a, \"\\\\?blah\"); //assertQueryEquals(\"foo \\\\&\\\\& bar\", a,\n     * \"foo \\\\&\\\\& bar\"); //assertQueryEquals(\"foo \\\\|| bar\", a,\n     * \"foo \\\\|| bar\"); //assertQueryEquals(\"foo \\\\AND bar\", a,\n     * \"foo \\\\AND bar\");\n     */\n\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    \n    assertQueryEquals(\"\\\\a\", a, \"a\");\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    // TODO: implement Range queries on QueryParser\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\n        \"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\",\n        a, \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n\n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n\n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n\n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n\n    assertQueryNodeException(\"XY\\\\\"); // there must be a character after the\n    // escape char\n\n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n\n    assertQueryNodeException(\"XY\\\\u005G\"); // test non-hex character in escaped\n    // unicode sequence\n    assertQueryNodeException(\"XY\\\\u005\"); // test incomplete escaped unicode\n    // sequence\n\n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertQueryNodeException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing\n    // paranthesis\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\"); // escaped backslash\n\n    assertQueryNodeException(\"\\\\\"); // a backslash must always be escaped\n\n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a, \"a\\\\ or b\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}