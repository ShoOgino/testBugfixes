{"path":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","commits":[{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","sourceNew":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue<Object[]> q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(boostFactor * myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","sourceOld":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(boostFactor * myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","sourceNew":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue<Object[]> q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(boostFactor * myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","sourceOld":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue<Object[]> q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(boostFactor * myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60cdc0e643184821eb066795a8791cd82559f46e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}