{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,boolean).mjava","commits":[{"id":"c4bea909b475e3f9d726f4fee3c27d3c870b9027","date":1239875190,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doReadTest(File file, boolean bz2File) throws Exception {\n    InputStream in = new FileInputStream(file);\n    if (bz2File) {\n      in = csFactory.createCompressorInputStream(\"bzip2\", in);\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      assertEquals(3, parts.length);\n      assertEquals(\"title\", parts[0]);\n      assertEquals(\"date\", parts[1]);\n      assertEquals(\"body\", parts[2]);\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df0ea153147ddca2da71669efa2a7a3004400047"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ffbafd1986f7c18d53556ba40ae6a91ad9ffeca7","date":1245775577,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,boolean,String,String,String).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,boolean).mjava","sourceNew":"  private void doReadTest(File file, boolean bz2File, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    if (bz2File) {\n      in = csFactory.createCompressorInputStream(\"bzip2\", in);\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      assertEquals(3, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      assertEquals(expBody, parts[2]);\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  private void doReadTest(File file, boolean bz2File) throws Exception {\n    InputStream in = new FileInputStream(file);\n    if (bz2File) {\n      in = csFactory.createCompressorInputStream(\"bzip2\", in);\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      assertEquals(3, parts.length);\n      assertEquals(\"title\", parts[0]);\n      assertEquals(\"date\", parts[1]);\n      assertEquals(\"body\", parts[2]);\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["df0ea153147ddca2da71669efa2a7a3004400047"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4bea909b475e3f9d726f4fee3c27d3c870b9027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffbafd1986f7c18d53556ba40ae6a91ad9ffeca7"],"ffbafd1986f7c18d53556ba40ae6a91ad9ffeca7":["c4bea909b475e3f9d726f4fee3c27d3c870b9027"]},"commit2Childs":{"c4bea909b475e3f9d726f4fee3c27d3c870b9027":["ffbafd1986f7c18d53556ba40ae6a91ad9ffeca7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4bea909b475e3f9d726f4fee3c27d3c870b9027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ffbafd1986f7c18d53556ba40ae6a91ad9ffeca7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}