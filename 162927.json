{"path":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["60ba444201d2570214b6fcf1d15600dc1a01f548","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["150488c1317972164a9a824be05b1ba2ba0fc68c","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"150488c1317972164a9a824be05b1ba2ba0fc68c":["c084e47df29de3330311d69dabf515ceaa989512"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["60ba444201d2570214b6fcf1d15600dc1a01f548","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}