{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = StrUtils.splitFileNames(dictionaryFiles);\n      try {\n        if (files.size() > 0) {\n          dictionary = new CharArrayMap<String>(luceneMatchVersion, \n              files.size() * 10, ignoreCase);\n          for (String file : files) {\n            List<String> list = loader.getLines(file.trim());\n            for (String line : list) {\n              String[] mapping = line.split(\"\\t\", 2);\n              dictionary.put(mapping[0], mapping[1]);\n            }\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading dictionary\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = StrUtils.splitFileNames(dictionaryFiles);\n      try {\n        if (files.size() > 0) {\n          dictionary = new CharArrayMap<String>(luceneMatchVersion, \n              files.size() * 10, ignoreCase);\n          for (String file : files) {\n            List<String> list = loader.getLines(file.trim());\n            for (String line : list) {\n              String[] mapping = line.split(\"\\t\", 2);\n              dictionary.put(mapping[0], mapping[1]);\n            }\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading dictionary\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1be7eddae5f5e3424273c183686cc9e44196b811","date":1343102736,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      try {\n        if (files.size() > 0) {\n          dictionary = new CharArrayMap<String>(luceneMatchVersion, \n              files.size() * 10, ignoreCase);\n          for (String file : files) {\n            List<String> list = loader.getLines(file.trim());\n            for (String line : list) {\n              String[] mapping = line.split(\"\\t\", 2);\n              dictionary.put(mapping[0], mapping[1]);\n            }\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading dictionary\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = StrUtils.splitFileNames(dictionaryFiles);\n      try {\n        if (files.size() > 0) {\n          dictionary = new CharArrayMap<String>(luceneMatchVersion, \n              files.size() * 10, ignoreCase);\n          for (String file : files) {\n            List<String> list = loader.getLines(file.trim());\n            for (String line : list) {\n              String[] mapping = line.split(\"\\t\", 2);\n              dictionary.put(mapping[0], mapping[1]);\n            }\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading dictionary\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      try {\n        if (files.size() > 0) {\n          dictionary = new CharArrayMap<String>(luceneMatchVersion, \n              files.size() * 10, ignoreCase);\n          for (String file : files) {\n            List<String> list = loader.getLines(file.trim());\n            for (String line : list) {\n              String[] mapping = line.split(\"\\t\", 2);\n              dictionary.put(mapping[0], mapping[1]);\n            }\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading dictionary\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = StrUtils.splitFileNames(dictionaryFiles);\n      try {\n        if (files.size() > 0) {\n          dictionary = new CharArrayMap<String>(luceneMatchVersion, \n              files.size() * 10, ignoreCase);\n          for (String file : files) {\n            List<String> list = loader.getLines(file.trim());\n            for (String line : list) {\n              String[] mapping = line.split(\"\\t\", 2);\n              dictionary.put(mapping[0], mapping[1]);\n            }\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading dictionary\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        dictionary = new CharArrayMap<String>(luceneMatchVersion, \n            files.size() * 10, ignoreCase);\n        for (String file : files) {\n          List<String> list = loader.getLines(file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            dictionary.put(mapping[0], mapping[1]);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      try {\n        if (files.size() > 0) {\n          dictionary = new CharArrayMap<String>(luceneMatchVersion, \n              files.size() * 10, ignoreCase);\n          for (String file : files) {\n            List<String> list = loader.getLines(file.trim());\n            for (String line : list) {\n              String[] mapping = line.split(\"\\t\", 2);\n              dictionary.put(mapping[0], mapping[1]);\n            }\n          }\n        }\n      } catch (IOException e) {\n        throw new InitializationException(\"IOException thrown while loading dictionary\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de6b1e414481e1c25c32f310b02a6d192f7f9faa","date":1343310208,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        dictionary = new CharArrayMap<String>(luceneMatchVersion, \n            files.size() * 10, ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            dictionary.put(mapping[0], mapping[1]);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        dictionary = new CharArrayMap<String>(luceneMatchVersion, \n            files.size() * 10, ignoreCase);\n        for (String file : files) {\n          List<String> list = loader.getLines(file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            dictionary.put(mapping[0], mapping[1]);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        dictionary = new CharArrayMap<String>(luceneMatchVersion, \n            files.size() * 10, ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            dictionary.put(mapping[0], mapping[1]);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        dictionary = new CharArrayMap<String>(luceneMatchVersion, \n            files.size() * 10, ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            dictionary.put(mapping[0], mapping[1]);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        dictionary = new CharArrayMap<String>(luceneMatchVersion, \n            files.size() * 10, ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            dictionary.put(mapping[0], mapping[1]);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        dictionary = new CharArrayMap<String>(luceneMatchVersion, \n            files.size() * 10, ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            dictionary.put(mapping[0], mapping[1]);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        dictionary = new CharArrayMap<String>(luceneMatchVersion, \n            files.size() * 10, ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            dictionary.put(mapping[0], mapping[1]);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        dictionary = new CharArrayMap<String>(luceneMatchVersion, \n            files.size() * 10, ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            dictionary.put(mapping[0], mapping[1]);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7476b30b7c03f9027676c9df28fda37629da2c97","date":1364206093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            builder.add(mapping[0], mapping[1]);\n          }\n        }\n        dictionary = builder.build();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        dictionary = new CharArrayMap<String>(luceneMatchVersion, \n            files.size() * 10, ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            dictionary.put(mapping[0], mapping[1]);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            builder.add(mapping[0], mapping[1]);\n          }\n        }\n        dictionary = builder.build();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    String dictionaryFiles = args.get(\"dictionary\");\n    ignoreCase = getBoolean(\"ignoreCase\", false);\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            builder.add(mapping[0], mapping[1]);\n          }\n        }\n        dictionary = builder.build();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"623b5245fbd9d5af9f458826ba9ed3d6212db24d","date":1421078865,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (dictionaryFiles != null) {\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            builder.add(mapping[0], mapping[1]);\n          }\n        }\n        dictionary = builder.build();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (dictionaryFiles != null) {\n      assureMatchVersion();\n      List<String> files = splitFileNames(dictionaryFiles);\n      if (files.size() > 0) {\n        StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(ignoreCase);\n        for (String file : files) {\n          List<String> list = getLines(loader, file.trim());\n          for (String line : list) {\n            String[] mapping = line.split(\"\\t\", 2);\n            builder.add(mapping[0], mapping[1]);\n          }\n        }\n        dictionary = builder.build();\n      }\n    }\n  }\n\n","bugFix":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["de6b1e414481e1c25c32f310b02a6d192f7f9faa","7530de27b87b961b51f01bd1299b7004d46e8823"],"623b5245fbd9d5af9f458826ba9ed3d6212db24d":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["7476b30b7c03f9027676c9df28fda37629da2c97"],"de6b1e414481e1c25c32f310b02a6d192f7f9faa":["f6f80818731469e00f54165ec94aae2db868ea05"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1be7eddae5f5e3424273c183686cc9e44196b811"],"1be7eddae5f5e3424273c183686cc9e44196b811":["3241e06e642196396b80bb293acd9c0814d079e0"],"7476b30b7c03f9027676c9df28fda37629da2c97":["7530de27b87b961b51f01bd1299b7004d46e8823"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"623b5245fbd9d5af9f458826ba9ed3d6212db24d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"],"de6b1e414481e1c25c32f310b02a6d192f7f9faa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","7530de27b87b961b51f01bd1299b7004d46e8823"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"1be7eddae5f5e3424273c183686cc9e44196b811":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"7476b30b7c03f9027676c9df28fda37629da2c97":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7476b30b7c03f9027676c9df28fda37629da2c97"],"3241e06e642196396b80bb293acd9c0814d079e0":["1be7eddae5f5e3424273c183686cc9e44196b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}