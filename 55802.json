{"path":"src/java/org/apache/solr/search/DateValueSourceParser[ValueSourceParser]#parse(FunctionQParser).mjava","commits":[{"id":"920a0686ed72437773f441d7d5088d3aff98f6cb","date":1250805909,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DateValueSourceParser[ValueSourceParser]#parse(FunctionQParser).mjava","pathOld":"/dev/null","sourceNew":"  public ValueSource parse(FunctionQParser fp) throws ParseException {\n    String first = fp.parseArg();\n    String second = fp.parseArg();\n    if (first==null) first=\"NOW\";\n\n    Date d1=getDate(fp,first);\n    ValueSource v1 = d1==null ? getValueSource(fp, first) : null;\n\n    Date d2=getDate(fp,second);\n    ValueSource v2 = d2==null ? getValueSource(fp, second) : null;\n\n    // d     constant\n    // v     field\n    // dd    constant\n    // dv    subtract field from constant\n    // vd    subtract constant from field\n    // vv    subtract fields\n\n    final long ms1 = (d1 == null) ? 0 : d1.getTime();\n    final long ms2 = (d2 == null) ? 0 : d2.getTime(); \n\n    // \"d,dd\" handle both constant cases\n\n    if (d1 != null && v2==null) {\n      return new LongConstValueSource(ms1-ms2);\n    }\n\n    // \"v\" just the date field\n    if (v1 != null && v2==null && d2==null) {\n      return v1;\n    }\n\n\n    // \"dv\"\n    if (d1!=null && v2!=null)\n      return new DualFloatFunction(new LongConstValueSource(ms1), v2) {\n        protected String name() {\n          return \"ms\";\n        }\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return ms1 - bVals.longVal(doc);\n        }\n      };\n\n    // \"vd\"\n    if (v1!=null && d2!=null)\n      return new DualFloatFunction(v1, new LongConstValueSource(ms2)) {\n        protected String name() {\n          return \"ms\";\n        }\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return aVals.longVal(doc) - ms2;\n        }\n      };\n\n    // \"vv\"\n    if (v1!=null && v2!=null)\n      return new DualFloatFunction(v1,v2) {\n        protected String name() {\n          return \"ms\";\n        }\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return aVals.longVal(doc) - bVals.longVal(doc);\n        }\n      };\n\n      return null; // shouldn't happen\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4607364a2fc156ffb717ddc21d860e466ac7fd","date":1258218641,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DateValueSourceParser[ValueSourceParser]#parse(FunctionQParser).mjava","pathOld":"src/java/org/apache/solr/search/DateValueSourceParser[ValueSourceParser]#parse(FunctionQParser).mjava","sourceNew":"  public ValueSource parse(FunctionQParser fp) throws ParseException {\n    String first = fp.parseArg();\n    String second = fp.parseArg();\n    if (first == null) first = \"NOW\";\n\n    Date d1 = getDate(fp, first);\n    ValueSource v1 = d1 == null ? getValueSource(fp, first) : null;\n\n    Date d2 = getDate(fp, second);\n    ValueSource v2 = d2 == null ? getValueSource(fp, second) : null;\n\n    // d     constant\n    // v     field\n    // dd    constant\n    // dv    subtract field from constant\n    // vd    subtract constant from field\n    // vv    subtract fields\n\n    final long ms1 = (d1 == null) ? 0 : d1.getTime();\n    final long ms2 = (d2 == null) ? 0 : d2.getTime();\n\n    // \"d,dd\" handle both constant cases\n\n    if (d1 != null && v2 == null) {\n      return new LongConstValueSource(ms1 - ms2);\n    }\n\n    // \"v\" just the date field\n    if (v1 != null && v2 == null && d2 == null) {\n      return v1;\n    }\n\n\n    // \"dv\"\n    if (d1 != null && v2 != null)\n      return new DualFloatFunction(new LongConstValueSource(ms1), v2) {\n        protected String name() {\n          return \"ms\";\n        }\n\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return ms1 - bVals.longVal(doc);\n        }\n      };\n\n    // \"vd\"\n    if (v1 != null && d2 != null)\n      return new DualFloatFunction(v1, new LongConstValueSource(ms2)) {\n        protected String name() {\n          return \"ms\";\n        }\n\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return aVals.longVal(doc) - ms2;\n        }\n      };\n\n    // \"vv\"\n    if (v1 != null && v2 != null)\n      return new DualFloatFunction(v1, v2) {\n        protected String name() {\n          return \"ms\";\n        }\n\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return aVals.longVal(doc) - bVals.longVal(doc);\n        }\n      };\n\n    return null; // shouldn't happen\n  }\n\n","sourceOld":"  public ValueSource parse(FunctionQParser fp) throws ParseException {\n    String first = fp.parseArg();\n    String second = fp.parseArg();\n    if (first==null) first=\"NOW\";\n\n    Date d1=getDate(fp,first);\n    ValueSource v1 = d1==null ? getValueSource(fp, first) : null;\n\n    Date d2=getDate(fp,second);\n    ValueSource v2 = d2==null ? getValueSource(fp, second) : null;\n\n    // d     constant\n    // v     field\n    // dd    constant\n    // dv    subtract field from constant\n    // vd    subtract constant from field\n    // vv    subtract fields\n\n    final long ms1 = (d1 == null) ? 0 : d1.getTime();\n    final long ms2 = (d2 == null) ? 0 : d2.getTime(); \n\n    // \"d,dd\" handle both constant cases\n\n    if (d1 != null && v2==null) {\n      return new LongConstValueSource(ms1-ms2);\n    }\n\n    // \"v\" just the date field\n    if (v1 != null && v2==null && d2==null) {\n      return v1;\n    }\n\n\n    // \"dv\"\n    if (d1!=null && v2!=null)\n      return new DualFloatFunction(new LongConstValueSource(ms1), v2) {\n        protected String name() {\n          return \"ms\";\n        }\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return ms1 - bVals.longVal(doc);\n        }\n      };\n\n    // \"vd\"\n    if (v1!=null && d2!=null)\n      return new DualFloatFunction(v1, new LongConstValueSource(ms2)) {\n        protected String name() {\n          return \"ms\";\n        }\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return aVals.longVal(doc) - ms2;\n        }\n      };\n\n    // \"vv\"\n    if (v1!=null && v2!=null)\n      return new DualFloatFunction(v1,v2) {\n        protected String name() {\n          return \"ms\";\n        }\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return aVals.longVal(doc) - bVals.longVal(doc);\n        }\n      };\n\n      return null; // shouldn't happen\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/DateValueSourceParser[ValueSourceParser]#parse(FunctionQParser).mjava","pathOld":"src/java/org/apache/solr/search/DateValueSourceParser[ValueSourceParser]#parse(FunctionQParser).mjava","sourceNew":"  public ValueSource parse(FunctionQParser fp) throws ParseException {\n    String first = fp.parseArg();\n    String second = fp.parseArg();\n    if (first == null) first = \"NOW\";\n\n    Date d1 = getDate(fp, first);\n    ValueSource v1 = d1 == null ? getValueSource(fp, first) : null;\n\n    Date d2 = getDate(fp, second);\n    ValueSource v2 = d2 == null ? getValueSource(fp, second) : null;\n\n    // d     constant\n    // v     field\n    // dd    constant\n    // dv    subtract field from constant\n    // vd    subtract constant from field\n    // vv    subtract fields\n\n    final long ms1 = (d1 == null) ? 0 : d1.getTime();\n    final long ms2 = (d2 == null) ? 0 : d2.getTime();\n\n    // \"d,dd\" handle both constant cases\n\n    if (d1 != null && v2 == null) {\n      return new LongConstValueSource(ms1 - ms2);\n    }\n\n    // \"v\" just the date field\n    if (v1 != null && v2 == null && d2 == null) {\n      return v1;\n    }\n\n\n    // \"dv\"\n    if (d1 != null && v2 != null)\n      return new DualFloatFunction(new LongConstValueSource(ms1), v2) {\n        protected String name() {\n          return \"ms\";\n        }\n\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return ms1 - bVals.longVal(doc);\n        }\n      };\n\n    // \"vd\"\n    if (v1 != null && d2 != null)\n      return new DualFloatFunction(v1, new LongConstValueSource(ms2)) {\n        protected String name() {\n          return \"ms\";\n        }\n\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return aVals.longVal(doc) - ms2;\n        }\n      };\n\n    // \"vv\"\n    if (v1 != null && v2 != null)\n      return new DualFloatFunction(v1, v2) {\n        protected String name() {\n          return \"ms\";\n        }\n\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return aVals.longVal(doc) - bVals.longVal(doc);\n        }\n      };\n\n    return null; // shouldn't happen\n  }\n\n","sourceOld":"  public ValueSource parse(FunctionQParser fp) throws ParseException {\n    String first = fp.parseArg();\n    String second = fp.parseArg();\n    if (first == null) first = \"NOW\";\n\n    Date d1 = getDate(fp, first);\n    ValueSource v1 = d1 == null ? getValueSource(fp, first) : null;\n\n    Date d2 = getDate(fp, second);\n    ValueSource v2 = d2 == null ? getValueSource(fp, second) : null;\n\n    // d     constant\n    // v     field\n    // dd    constant\n    // dv    subtract field from constant\n    // vd    subtract constant from field\n    // vv    subtract fields\n\n    final long ms1 = (d1 == null) ? 0 : d1.getTime();\n    final long ms2 = (d2 == null) ? 0 : d2.getTime();\n\n    // \"d,dd\" handle both constant cases\n\n    if (d1 != null && v2 == null) {\n      return new LongConstValueSource(ms1 - ms2);\n    }\n\n    // \"v\" just the date field\n    if (v1 != null && v2 == null && d2 == null) {\n      return v1;\n    }\n\n\n    // \"dv\"\n    if (d1 != null && v2 != null)\n      return new DualFloatFunction(new LongConstValueSource(ms1), v2) {\n        protected String name() {\n          return \"ms\";\n        }\n\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return ms1 - bVals.longVal(doc);\n        }\n      };\n\n    // \"vd\"\n    if (v1 != null && d2 != null)\n      return new DualFloatFunction(v1, new LongConstValueSource(ms2)) {\n        protected String name() {\n          return \"ms\";\n        }\n\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return aVals.longVal(doc) - ms2;\n        }\n      };\n\n    // \"vv\"\n    if (v1 != null && v2 != null)\n      return new DualFloatFunction(v1, v2) {\n        protected String name() {\n          return \"ms\";\n        }\n\n        protected float func(int doc, DocValues aVals, DocValues bVals) {\n          return aVals.longVal(doc) - bVals.longVal(doc);\n        }\n      };\n\n    return null; // shouldn't happen\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["920a0686ed72437773f441d7d5088d3aff98f6cb"],"920a0686ed72437773f441d7d5088d3aff98f6cb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["920a0686ed72437773f441d7d5088d3aff98f6cb"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["ad94625fb8d088209f46650c8097196fec67f00c"],"920a0686ed72437773f441d7d5088d3aff98f6cb":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}