{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"    public void testSmallRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"    public void testSmallRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.shutdown();\n      dir.close();\n    }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setRAMBufferSizeMB(0.000001)\n              .setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.shutdown();\n      dir.close();\n    }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setRAMBufferSizeMB(0.000001).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.shutdown();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setRAMBufferSizeMB(0.000001)\n              .setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setRAMBufferSizeMB(0.000001)\n              .setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.shutdown();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setRAMBufferSizeMB(0.000001)\n              .setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumSegments = getSegmentCount(dir);\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        int numSegments = getSegmentCount(dir);\n        assertTrue(numSegments > lastNumSegments);\n        lastNumSegments = numSegments;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setRAMBufferSizeMB(0.000001)\n              .setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumFile = dir.listAll().length;\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        int numFile = dir.listAll().length;\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        assertTrue(numFile > lastNumFile);\n        lastNumFile = numFile;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"  public void testSmallRAMBuffer() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(\n                                          dir,\n                                          newIndexWriterConfig(new MockAnalyzer(random()))\n                                          .setRAMBufferSizeMB(0.000001)\n                                          .setMergePolicy(newLogMergePolicy(10))\n                                          );\n    int lastNumSegments = getSegmentCount(dir);\n    for(int j=0;j<9;j++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n      writer.addDocument(doc);\n      // Verify that with a tiny RAM buffer we see new\n      // segment after every doc\n      int numSegments = getSegmentCount(dir);\n      assertTrue(numSegments > lastNumSegments);\n      lastNumSegments = numSegments;\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setRAMBufferSizeMB(0.000001)\n              .setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumSegments = getSegmentCount(dir);\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        int numSegments = getSegmentCount(dir);\n        assertTrue(numSegments > lastNumSegments);\n        lastNumSegments = numSegments;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"  public void testSmallRAMBuffer() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(\n                                          dir,\n                                          newIndexWriterConfig(new MockAnalyzer(random()))\n                                          .setRAMBufferSizeMB(0.000001)\n                                          .setMergePolicy(newLogMergePolicy(10))\n                                          );\n    int lastNumSegments = getSegmentCount(dir);\n    for(int j=0;j<9;j++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n      writer.addDocument(doc);\n      // Verify that with a tiny RAM buffer we see new\n      // segment after every doc\n      int numSegments = getSegmentCount(dir);\n      assertTrue(numSegments > lastNumSegments);\n      lastNumSegments = numSegments;\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setRAMBufferSizeMB(0.000001)\n              .setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumSegments = getSegmentCount(dir);\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        int numSegments = getSegmentCount(dir);\n        assertTrue(numSegments > lastNumSegments);\n        lastNumSegments = numSegments;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"  public void testSmallRAMBuffer() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(\n                                          dir,\n                                          newIndexWriterConfig(new MockAnalyzer(random()))\n                                          .setRAMBufferSizeMB(0.000001)\n                                          .setMergePolicy(newLogMergePolicy(10))\n                                          );\n    int lastNumSegments = getSegmentCount(dir);\n    for(int j=0;j<9;j++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n      writer.addDocument(doc);\n      // Verify that with a tiny RAM buffer we see new\n      // segment after every doc\n      int numSegments = getSegmentCount(dir);\n      assertTrue(numSegments > lastNumSegments);\n      lastNumSegments = numSegments;\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setRAMBufferSizeMB(0.000001)\n              .setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumSegments = getSegmentCount(dir);\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        int numSegments = getSegmentCount(dir);\n        assertTrue(numSegments > lastNumSegments);\n        lastNumSegments = numSegments;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSmallRAMBuffer().mjava","sourceNew":"  public void testSmallRAMBuffer() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(\n                                          dir,\n                                          newIndexWriterConfig(new MockAnalyzer(random()))\n                                          .setRAMBufferSizeMB(0.000001)\n                                          .setMergePolicy(newLogMergePolicy(10))\n                                          );\n    int lastNumSegments = getSegmentCount(dir);\n    for(int j=0;j<9;j++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n      writer.addDocument(doc);\n      // Verify that with a tiny RAM buffer we see new\n      // segment after every doc\n      int numSegments = getSegmentCount(dir);\n      assertTrue(numSegments > lastNumSegments);\n      lastNumSegments = numSegments;\n    }\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testSmallRAMBuffer() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setRAMBufferSizeMB(0.000001)\n              .setMergePolicy(newLogMergePolicy(10))\n      );\n      int lastNumSegments = getSegmentCount(dir);\n      for(int j=0;j<9;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        // Verify that with a tiny RAM buffer we see new\n        // segment after every doc\n        int numSegments = getSegmentCount(dir);\n        assertTrue(numSegments > lastNumSegments);\n        lastNumSegments = numSegments;\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"aba371508186796cc6151d8223a5b4e16d02e26e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}