{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","sourceNew":"    public int binarySearchLookup(BytesRef key, BytesRef spare) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = numOrd()-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup(mid, spare).compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","sourceOld":"    public int binarySearchLookup(BytesRef key, BytesRef spare) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = numOrd()-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup(mid, spare).compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","sourceNew":"    public int binarySearchLookup(BytesRef key, BytesRef spare) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n  \n      int low = 1;\n      int high = numOrd()-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup(mid, spare).compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","sourceOld":"    public int binarySearchLookup(BytesRef key, BytesRef spare) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = numOrd()-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup(mid, spare).compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f7cc7c185412da66c1d0089d9e75da01329a00","date":1353364851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","sourceNew":"    // nocommit remove this?\n    public int binarySearchLookup(BytesRef key, BytesRef spare) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null) {\n        return -1;\n      }\n\n      int low = 0;\n      int high = numOrd()-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup(mid, spare).compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","sourceOld":"    public int binarySearchLookup(BytesRef key, BytesRef spare) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n  \n      int low = 1;\n      int high = numOrd()-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup(mid, spare).compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"854f97cd3613b9579fba83755c80b697e2f3993f","date":1353527621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","sourceNew":"    public int binarySearchLookup(BytesRef key, BytesRef spare) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null) {\n        throw new IllegalArgumentException(\"key must not be null\");\n      }\n\n      int low = 0;\n      int high = numOrd()-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup(mid, spare).compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","sourceOld":"    // nocommit remove this?\n    public int binarySearchLookup(BytesRef key, BytesRef spare) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null) {\n        return -1;\n      }\n\n      int low = 0;\n      int high = numOrd()-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup(mid, spare).compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","sourceNew":null,"sourceOld":"    public int binarySearchLookup(BytesRef key, BytesRef spare) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null) {\n        throw new IllegalArgumentException(\"key must not be null\");\n      }\n\n      int low = 0;\n      int high = numOrd()-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup(mid, spare).compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache.DocTermsIndex#binarySearchLookup(BytesRef,BytesRef).mjava","sourceNew":null,"sourceOld":"    public int binarySearchLookup(BytesRef key, BytesRef spare) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n  \n      int low = 1;\n      int high = numOrd()-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup(mid, spare).compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["854f97cd3613b9579fba83755c80b697e2f3993f"],"854f97cd3613b9579fba83755c80b697e2f3993f":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["854f97cd3613b9579fba83755c80b697e2f3993f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"854f97cd3613b9579fba83755c80b697e2f3993f":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["d4d69c535930b5cce125cff868d40f6373dc27d4","29f7cc7c185412da66c1d0089d9e75da01329a00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}