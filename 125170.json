{"path":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#testConjunctions().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#testConjunctions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#testConjunctions().mjava","sourceNew":"  public void testConjunctions() throws Exception {\n    // test many small sets... the bugs will be found on boundary conditions\n    createDummySearcher();\n    validate=true;\n    sets=randBitSets(atLeast(1000), atLeast(10));\n    doConjunctions(atLeast(10000), atLeast(5));\n    doNestedConjunctions(atLeast(10000), atLeast(3), atLeast(3));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConjunctions() throws Exception {\n    // test many small sets... the bugs will be found on boundary conditions\n    createDummySearcher();\n    validate=true;\n    sets=randBitSets(atLeast(1000), atLeast(10));\n    doConjunctions(atLeast(10000), atLeast(5));\n    doNestedConjunctions(atLeast(10000), atLeast(3), atLeast(3));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#testConjunctions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#testConjunctions().mjava","sourceNew":"  public void testConjunctions() throws Exception {\n    // test many small sets... the bugs will be found on boundary conditions\n    createDummySearcher();\n    validate=true;\n    sets=randBitSets(atLeast(1000), atLeast(10));\n    doConjunctions(atLeast(10000), atLeast(5));\n    doNestedConjunctions(atLeast(10000), atLeast(3), atLeast(3));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConjunctions() throws Exception {\n    // test many small sets... the bugs will be found on boundary conditions\n    createDummySearcher();\n    validate=true;\n    sets=randBitSets(atLeast(1000), atLeast(10));\n    doConjunctions(atLeast(10000), atLeast(5));\n    doNestedConjunctions(atLeast(10000), atLeast(3), atLeast(3));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#testConjunctions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#testConjunctions().mjava","sourceNew":"  public void testConjunctions() throws Exception {\n    // test many small sets... the bugs will be found on boundary conditions\n    createDummySearcher();\n    validate=true;\n    sets=randBitSets(atLeast(1000), atLeast(10));\n    doConjunctions(atLeast(10000), atLeast(5));\n    doNestedConjunctions(atLeast(10000), atLeast(3), atLeast(3));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConjunctions() throws Exception {\n    // test many small sets... the bugs will be found on boundary conditions\n    createDummySearcher();\n    validate=true;\n    sets=randBitSets(atLeast(1000), atLeast(10));\n    doConjunctions(atLeast(10000), atLeast(5));\n    doNestedConjunctions(atLeast(10000), atLeast(3), atLeast(3));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#testConjunctions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#testConjunctions().mjava","sourceNew":"  public void testConjunctions() throws Exception {\n    // test many small sets... the bugs will be found on boundary conditions\n    try (Directory d = newDirectory()) {\n      IndexWriter iw = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));\n      iw.addDocument(new Document());\n      iw.close();\n\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        IndexSearcher s = newSearcher(r);\n        s.setQueryCache(null);\n\n        FixedBitSet[] sets = randBitSets(atLeast(1000), atLeast(10));\n\n        doConjunctions(s, sets, atLeast(10000), atLeast(5));\n        doNestedConjunctions(s, sets, atLeast(10000), atLeast(3), atLeast(3));\n      }\n    }\n  }\n\n","sourceOld":"  public void testConjunctions() throws Exception {\n    // test many small sets... the bugs will be found on boundary conditions\n    createDummySearcher();\n    validate=true;\n    sets=randBitSets(atLeast(1000), atLeast(10));\n    doConjunctions(atLeast(10000), atLeast(5));\n    doNestedConjunctions(atLeast(10000), atLeast(3), atLeast(3));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#testConjunctions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#testConjunctions().mjava","sourceNew":"  public void testConjunctions() throws Exception {\n    // test many small sets... the bugs will be found on boundary conditions\n    try (Directory d = newDirectory()) {\n      IndexWriter iw = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));\n      iw.addDocument(new Document());\n      iw.close();\n\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        IndexSearcher s = newSearcher(r);\n        s.setQueryCache(null);\n\n        FixedBitSet[] sets = randBitSets(atLeast(1000), atLeast(10));\n\n        int iterations = TEST_NIGHTLY ? atLeast(10000) : atLeast(500);\n        doConjunctions(s, sets, iterations, atLeast(5));\n        doNestedConjunctions(s, sets, iterations, atLeast(3), atLeast(3));\n      }\n    }\n  }\n\n","sourceOld":"  public void testConjunctions() throws Exception {\n    // test many small sets... the bugs will be found on boundary conditions\n    try (Directory d = newDirectory()) {\n      IndexWriter iw = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));\n      iw.addDocument(new Document());\n      iw.close();\n\n      try (DirectoryReader r = DirectoryReader.open(d)) {\n        IndexSearcher s = newSearcher(r);\n        s.setQueryCache(null);\n\n        FixedBitSet[] sets = randBitSets(atLeast(1000), atLeast(10));\n\n        doConjunctions(s, sets, atLeast(10000), atLeast(5));\n        doNestedConjunctions(s, sets, atLeast(10000), atLeast(3), atLeast(3));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["d77dafd89756a5161d244985903e3487ca109182"],"d77dafd89756a5161d244985903e3487ca109182":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d77dafd89756a5161d244985903e3487ca109182":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["d77dafd89756a5161d244985903e3487ca109182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}