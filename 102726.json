{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","commits":[{"id":"bedba8c41772c90fab237170d639e910d36f7755","date":1259780364,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              while(System.currentTimeMillis() < endTime && !failed.get()) {\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              }\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7","a78a90fc9701e511308346ea29f4f5e548bb39fe","a78a90fc9701e511308346ea29f4f5e548bb39fe","a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7","date":1261132949,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              while(System.currentTimeMillis() < endTime && !failed.get()) {\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              }\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":["bedba8c41772c90fab237170d639e910d36f7755"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985","date":1262018769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new SimpleAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              IndexReader r = IndexReader.open(dir);\n              Field f = new Field(\"f\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  IndexReader r2 = r.reopen();\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    w.close();\n    dir.close();\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985":["a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"bedba8c41772c90fab237170d639e910d36f7755":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7":["bedba8c41772c90fab237170d639e910d36f7755"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bedba8c41772c90fab237170d639e910d36f7755"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"bedba8c41772c90fab237170d639e910d36f7755":["a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7":["8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}