{"path":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocuments(Term,List[#-extends-IndexDocument]).mjava","commits":[{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocuments(Term,List[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#addDocuments(Term,List[#-extends-IndexDocument]).mjava","sourceNew":"  @Override\n  protected void addDocuments(Term id, List<? extends IndexDocument> docs) throws Exception {\n    final long gen = genWriter.addDocuments(docs);\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(docs.size(), s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocuments(Term id, List<? extends IndexDocument> docs) throws Exception {\n    final long gen = genWriter.addDocuments(docs);\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletes.waitForGeneration(gen);\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(docs.size(), s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e5cee716c29944d6fcbb8f558285d2aa5c07da8","date":1450118305,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocuments(Term,List[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocuments(Term,List[#-extends-IndexDocument]).mjava","sourceNew":"  @Override\n  protected void addDocuments(Term id, List<? extends IndexDocument> docs) throws Exception {\n    final long gen = genWriter.addDocuments(docs);\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(docs.size(), s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocuments(Term id, List<? extends IndexDocument> docs) throws Exception {\n    final long gen = genWriter.addDocuments(docs);\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(docs.size(), s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocuments(Term,List[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#addDocuments(Term,List[#-extends-IndexDocument]).mjava","sourceNew":"  @Override\n  protected void addDocuments(Term id, List<? extends Iterable<? extends IndexableField>> docs) throws Exception {\n    final long gen = genWriter.addDocuments(docs);\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(docs.size(), s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","sourceOld":"  @Override\n  protected void addDocuments(Term id, List<? extends IndexDocument> docs) throws Exception {\n    final long gen = genWriter.addDocuments(docs);\n    // Randomly verify the add \"took\":\n    if (random().nextInt(20) == 2) {\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: verify \" + id);\n      }\n      nrtNoDeletesThread.waitForGeneration(gen);\n      assertTrue(gen <= nrtNoDeletesThread.getSearchingGen());\n      final IndexSearcher s = nrtNoDeletes.acquire();\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": nrt: got searcher=\" + s);\n      }\n      try {\n        assertEquals(docs.size(), s.search(new TermQuery(id), 10).totalHits);\n      } finally {\n        nrtNoDeletes.release(s);\n      }\n    }\n    lastGens.set(gen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e5cee716c29944d6fcbb8f558285d2aa5c07da8":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["7e5cee716c29944d6fcbb8f558285d2aa5c07da8"]},"commit2Childs":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["7e5cee716c29944d6fcbb8f558285d2aa5c07da8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"7e5cee716c29944d6fcbb8f558285d2aa5c07da8":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}