{"path":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValuesAndNormsFieldInfos().mjava","commits":[{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValuesAndNormsFieldInfos().mjava","pathOld":"/dev/null","sourceNew":"  public void mergeDocValuesAndNormsFieldInfos() throws IOException {\n    // mapping from all docvalues fields found to their promoted types\n    // this is because FieldInfos does not store the valueSize\n    Map<FieldInfo,TypePromoter> docValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n    Map<FieldInfo,TypePromoter> normValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n\n    for (MergeState.IndexReaderAndLiveDocs readerAndLiveDocs : mergeState.readers) {\n      final IndexReader reader = readerAndLiveDocs.reader;\n      FieldInfos readerFieldInfos = reader.getFieldInfos();\n      for (FieldInfo fi : readerFieldInfos) {\n        FieldInfo merged = mergeState.fieldInfos.add(fi);\n        // update the type promotion mapping for this reader\n        if (fi.hasDocValues()) {\n          TypePromoter previous = docValuesTypes.get(merged);\n          docValuesTypes.put(merged, mergeDocValuesType(previous, reader.docValues(fi.name))); \n        }\n        if (fi.normsPresent()) {\n          TypePromoter previous = normValuesTypes.get(merged);\n          normValuesTypes.put(merged, mergeDocValuesType(previous, reader.normValues(fi.name))); \n        }\n      }\n    }\n    updatePromoted(normValuesTypes, true);\n    updatePromoted(docValuesTypes, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c95a819869502635864dac0a788f874787e3395b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValuesAndNormsFieldInfos().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValuesAndNormsFieldInfos().mjava","sourceNew":"  public void mergeDocValuesAndNormsFieldInfos() throws IOException {\n    // mapping from all docvalues fields found to their promoted types\n    // this is because FieldInfos does not store the valueSize\n    Map<FieldInfo,TypePromoter> docValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n    Map<FieldInfo,TypePromoter> normValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n\n    for (MergeState.IndexReaderAndLiveDocs readerAndLiveDocs : mergeState.readers) {\n      final AtomicIndexReader reader = readerAndLiveDocs.reader;\n      FieldInfos readerFieldInfos = reader.getFieldInfos();\n      for (FieldInfo fi : readerFieldInfos) {\n        FieldInfo merged = mergeState.fieldInfos.add(fi);\n        // update the type promotion mapping for this reader\n        if (fi.hasDocValues()) {\n          TypePromoter previous = docValuesTypes.get(merged);\n          docValuesTypes.put(merged, mergeDocValuesType(previous, reader.docValues(fi.name))); \n        }\n        if (fi.normsPresent()) {\n          TypePromoter previous = normValuesTypes.get(merged);\n          normValuesTypes.put(merged, mergeDocValuesType(previous, reader.normValues(fi.name))); \n        }\n      }\n    }\n    updatePromoted(normValuesTypes, true);\n    updatePromoted(docValuesTypes, false);\n  }\n\n","sourceOld":"  public void mergeDocValuesAndNormsFieldInfos() throws IOException {\n    // mapping from all docvalues fields found to their promoted types\n    // this is because FieldInfos does not store the valueSize\n    Map<FieldInfo,TypePromoter> docValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n    Map<FieldInfo,TypePromoter> normValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n\n    for (MergeState.IndexReaderAndLiveDocs readerAndLiveDocs : mergeState.readers) {\n      final IndexReader reader = readerAndLiveDocs.reader;\n      FieldInfos readerFieldInfos = reader.getFieldInfos();\n      for (FieldInfo fi : readerFieldInfos) {\n        FieldInfo merged = mergeState.fieldInfos.add(fi);\n        // update the type promotion mapping for this reader\n        if (fi.hasDocValues()) {\n          TypePromoter previous = docValuesTypes.get(merged);\n          docValuesTypes.put(merged, mergeDocValuesType(previous, reader.docValues(fi.name))); \n        }\n        if (fi.normsPresent()) {\n          TypePromoter previous = normValuesTypes.get(merged);\n          normValuesTypes.put(merged, mergeDocValuesType(previous, reader.normValues(fi.name))); \n        }\n      }\n    }\n    updatePromoted(normValuesTypes, true);\n    updatePromoted(docValuesTypes, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValuesAndNormsFieldInfos().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValuesAndNormsFieldInfos().mjava","sourceNew":"  public void mergeDocValuesAndNormsFieldInfos() throws IOException {\n    // mapping from all docvalues fields found to their promoted types\n    // this is because FieldInfos does not store the valueSize\n    Map<FieldInfo,TypePromoter> docValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n    Map<FieldInfo,TypePromoter> normValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n\n    for (MergeState.IndexReaderAndLiveDocs readerAndLiveDocs : mergeState.readers) {\n      final AtomicReader reader = readerAndLiveDocs.reader;\n      FieldInfos readerFieldInfos = reader.getFieldInfos();\n      for (FieldInfo fi : readerFieldInfos) {\n        FieldInfo merged = mergeState.fieldInfos.add(fi);\n        // update the type promotion mapping for this reader\n        if (fi.hasDocValues()) {\n          TypePromoter previous = docValuesTypes.get(merged);\n          docValuesTypes.put(merged, mergeDocValuesType(previous, reader.docValues(fi.name))); \n        }\n        if (fi.normsPresent()) {\n          TypePromoter previous = normValuesTypes.get(merged);\n          normValuesTypes.put(merged, mergeDocValuesType(previous, reader.normValues(fi.name))); \n        }\n      }\n    }\n    updatePromoted(normValuesTypes, true);\n    updatePromoted(docValuesTypes, false);\n  }\n\n","sourceOld":"  public void mergeDocValuesAndNormsFieldInfos() throws IOException {\n    // mapping from all docvalues fields found to their promoted types\n    // this is because FieldInfos does not store the valueSize\n    Map<FieldInfo,TypePromoter> docValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n    Map<FieldInfo,TypePromoter> normValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n\n    for (MergeState.IndexReaderAndLiveDocs readerAndLiveDocs : mergeState.readers) {\n      final AtomicIndexReader reader = readerAndLiveDocs.reader;\n      FieldInfos readerFieldInfos = reader.getFieldInfos();\n      for (FieldInfo fi : readerFieldInfos) {\n        FieldInfo merged = mergeState.fieldInfos.add(fi);\n        // update the type promotion mapping for this reader\n        if (fi.hasDocValues()) {\n          TypePromoter previous = docValuesTypes.get(merged);\n          docValuesTypes.put(merged, mergeDocValuesType(previous, reader.docValues(fi.name))); \n        }\n        if (fi.normsPresent()) {\n          TypePromoter previous = normValuesTypes.get(merged);\n          normValuesTypes.put(merged, mergeDocValuesType(previous, reader.normValues(fi.name))); \n        }\n      }\n    }\n    updatePromoted(normValuesTypes, true);\n    updatePromoted(docValuesTypes, false);\n  }\n\n","bugFix":null,"bugIntro":["c95a819869502635864dac0a788f874787e3395b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValuesAndNormsFieldInfos().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValuesAndNormsFieldInfos().mjava","sourceNew":"  public void mergeDocValuesAndNormsFieldInfos() throws IOException {\n    // mapping from all docvalues fields found to their promoted types\n    // this is because FieldInfos does not store the valueSize\n    Map<FieldInfo,TypePromoter> docValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n    Map<FieldInfo,TypePromoter> normValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n\n    for (MergeState.IndexReaderAndLiveDocs readerAndLiveDocs : mergeState.readers) {\n      final AtomicReader reader = readerAndLiveDocs.reader;\n      FieldInfos readerFieldInfos = reader.getFieldInfos();\n      for (FieldInfo fi : readerFieldInfos) {\n        FieldInfo merged = mergeState.fieldInfos.add(fi);\n        // update the type promotion mapping for this reader\n        if (fi.hasDocValues()) {\n          TypePromoter previous = docValuesTypes.get(merged);\n          docValuesTypes.put(merged, mergeDocValuesType(previous, reader.docValues(fi.name))); \n        }\n        if (fi.normsPresent()) {\n          TypePromoter previous = normValuesTypes.get(merged);\n          normValuesTypes.put(merged, mergeDocValuesType(previous, reader.normValues(fi.name))); \n        }\n      }\n    }\n    updatePromoted(normValuesTypes, true);\n    updatePromoted(docValuesTypes, false);\n  }\n\n","sourceOld":"  public void mergeDocValuesAndNormsFieldInfos() throws IOException {\n    // mapping from all docvalues fields found to their promoted types\n    // this is because FieldInfos does not store the valueSize\n    Map<FieldInfo,TypePromoter> docValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n    Map<FieldInfo,TypePromoter> normValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n\n    for (MergeState.IndexReaderAndLiveDocs readerAndLiveDocs : mergeState.readers) {\n      final IndexReader reader = readerAndLiveDocs.reader;\n      FieldInfos readerFieldInfos = reader.getFieldInfos();\n      for (FieldInfo fi : readerFieldInfos) {\n        FieldInfo merged = mergeState.fieldInfos.add(fi);\n        // update the type promotion mapping for this reader\n        if (fi.hasDocValues()) {\n          TypePromoter previous = docValuesTypes.get(merged);\n          docValuesTypes.put(merged, mergeDocValuesType(previous, reader.docValues(fi.name))); \n        }\n        if (fi.normsPresent()) {\n          TypePromoter previous = normValuesTypes.get(merged);\n          normValuesTypes.put(merged, mergeDocValuesType(previous, reader.normValues(fi.name))); \n        }\n      }\n    }\n    updatePromoted(normValuesTypes, true);\n    updatePromoted(docValuesTypes, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValuesAndNormsFieldInfos().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeDocValuesAndNormsFieldInfos().mjava","sourceNew":"  public void mergeDocValuesAndNormsFieldInfos() throws IOException {\n    // mapping from all docvalues fields found to their promoted types\n    // this is because FieldInfos does not store the valueSize\n    Map<FieldInfo,TypePromoter> docValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n    Map<FieldInfo,TypePromoter> normValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n\n    for (MergeState.IndexReaderAndLiveDocs readerAndLiveDocs : mergeState.readers) {\n      final AtomicReader reader = readerAndLiveDocs.reader;\n      FieldInfos readerFieldInfos = reader.getFieldInfos();\n      for (FieldInfo fi : readerFieldInfos) {\n        FieldInfo merged = mergeState.fieldInfos.add(fi);\n        // update the type promotion mapping for this reader\n        if (fi.hasDocValues()) {\n          TypePromoter previous = docValuesTypes.get(merged);\n          docValuesTypes.put(merged, mergeDocValuesType(previous, reader.docValues(fi.name))); \n        }\n        if (fi.normsPresent()) {\n          TypePromoter previous = normValuesTypes.get(merged);\n          normValuesTypes.put(merged, mergeDocValuesType(previous, reader.normValues(fi.name))); \n        }\n      }\n    }\n    updatePromoted(normValuesTypes, true);\n    updatePromoted(docValuesTypes, false);\n  }\n\n","sourceOld":"  public void mergeDocValuesAndNormsFieldInfos() throws IOException {\n    // mapping from all docvalues fields found to their promoted types\n    // this is because FieldInfos does not store the valueSize\n    Map<FieldInfo,TypePromoter> docValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n    Map<FieldInfo,TypePromoter> normValuesTypes = new HashMap<FieldInfo,TypePromoter>();\n\n    for (MergeState.IndexReaderAndLiveDocs readerAndLiveDocs : mergeState.readers) {\n      final AtomicReader reader = readerAndLiveDocs.reader;\n      FieldInfos readerFieldInfos = reader.getFieldInfos();\n      for (FieldInfo fi : readerFieldInfos) {\n        FieldInfo merged = mergeState.fieldInfos.add(fi);\n        // update the type promotion mapping for this reader\n        if (fi.hasDocValues()) {\n          TypePromoter previous = docValuesTypes.get(merged);\n          docValuesTypes.put(merged, mergeDocValuesType(previous, reader.docValues(fi.name))); \n        }\n        if (fi.normsPresent()) {\n          TypePromoter previous = normValuesTypes.get(merged);\n          normValuesTypes.put(merged, mergeDocValuesType(previous, reader.normValues(fi.name))); \n        }\n      }\n    }\n    updatePromoted(normValuesTypes, true);\n    updatePromoted(docValuesTypes, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9e8d5a6ffbfa3405d234a87c833741eabed98d13","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}