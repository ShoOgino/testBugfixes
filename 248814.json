{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    for(int iter=0;iter<2;iter++) {\n      IndexWriter writer = new IndexWriter(dir,\n                                           new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Document document = new Document();\n\n      Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                    Field.Index.NO);\n      document.add(storedField);\n      writer.addDocument(document);\n      writer.addDocument(document);\n\n      document = new Document();\n      document.add(storedField);\n      Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                        Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                        Field.TermVector.WITH_POSITIONS_OFFSETS);\n\n      document.add(termVectorField);\n      writer.addDocument(document);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      for(int i=0;i<reader.numDocs();i++) {\n        reader.document(i);\n        reader.getTermFreqVectors(i);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir,\n                               new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(2);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n      Directory[] indexDirs = {new MockRAMDirectory(dir)};\n      writer.addIndexesNoOptimize(indexDirs);\n      writer.optimize();\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}