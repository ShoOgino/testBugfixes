{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #next()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #next()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f","date":1281110328,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #nextDoc()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #next()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #nextDoc()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #next()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54c40f2a4f8741ec845d55de05ea762e631b5c90","date":1294602494,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #nextDoc()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #nextDoc()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #nextDoc()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #nextDoc()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #nextDoc()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #nextDoc()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #nextDoc()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #nextDoc()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54c40f2a4f8741ec845d55de05ea762e631b5c90":["5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f"],"5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["54c40f2a4f8741ec845d55de05ea762e631b5c90"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f","54c40f2a4f8741ec845d55de05ea762e631b5c90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","54c40f2a4f8741ec845d55de05ea762e631b5c90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54c40f2a4f8741ec845d55de05ea762e631b5c90":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f":["54c40f2a4f8741ec845d55de05ea762e631b5c90","29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5060ee4ef8bd1415d9d382ab5d17c8f90afbf88f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}