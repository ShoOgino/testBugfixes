{"path":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"c5f8e44d5e9627993851287f67e8360a36cb302a","date":1132032532,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\r\n  {\r\n    // do a little bit of normalization...\r\n    // open ended range queries should always be inclusive.\r\n    if (lowerVal==null) {\r\n      includeLower=true;\r\n    } else if (includeLower && lowerVal.equals(\"\")) {\r\n      lowerVal=null;\r\n    }\r\n    if (upperVal==null) {\r\n      includeUpper=true;\r\n    }\r\n\r\n\r\n    this.fieldName = fieldName.intern();  // intern it, just like terms...\r\n    this.lowerVal = lowerVal;\r\n    this.upperVal = upperVal;\r\n    this.includeLower = includeLower;\r\n    this.includeUpper = includeUpper;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6616a9b902d52a1d7831e2ad621d234ef3b540e6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6616a9b902d52a1d7831e2ad621d234ef3b540e6","date":1141872133,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\n  {\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerVal==null) {\n      includeLower=true;\n    } else if (includeLower && lowerVal.equals(\"\")) {\n      lowerVal=null;\n    }\n    if (upperVal==null) {\n      includeUpper=true;\n    }\n\n\n    this.fieldName = fieldName.intern();  // intern it, just like terms...\n    this.lowerVal = lowerVal;\n    this.upperVal = upperVal;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","sourceOld":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\r\n  {\r\n    // do a little bit of normalization...\r\n    // open ended range queries should always be inclusive.\r\n    if (lowerVal==null) {\r\n      includeLower=true;\r\n    } else if (includeLower && lowerVal.equals(\"\")) {\r\n      lowerVal=null;\r\n    }\r\n    if (upperVal==null) {\r\n      includeUpper=true;\r\n    }\r\n\r\n\r\n    this.fieldName = fieldName.intern();  // intern it, just like terms...\r\n    this.lowerVal = lowerVal;\r\n    this.upperVal = upperVal;\r\n    this.includeLower = includeLower;\r\n    this.includeUpper = includeUpper;\r\n  }\r\n\n","bugFix":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\n  {\n    super(fieldName, lowerVal, upperVal, includeLower, includeUpper);\n    this.constantScoreRewrite = true;\n  }\n\n","sourceOld":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\n  {\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (lowerVal==null) {\n      includeLower=true;\n    } else if (includeLower && lowerVal.equals(\"\")) {\n      lowerVal=null;\n    }\n    if (upperVal==null) {\n      includeUpper=true;\n    }\n\n\n    this.fieldName = fieldName.intern();  // intern it, just like terms...\n    this.lowerVal = lowerVal;\n    this.upperVal = upperVal;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\n  {\n    super(fieldName, lowerVal, upperVal, includeLower, includeUpper);\n    setConstantScoreRewrite(true);\n  }\n\n","sourceOld":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\n  {\n    super(fieldName, lowerVal, upperVal, includeLower, includeUpper);\n    this.constantScoreRewrite = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a9553c1383b3678fd48ad68f0686008b07ef25b","date":1246867108,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\n  {\n    super(fieldName, lowerVal, upperVal, includeLower, includeUpper);\n    this.constantScoreRewrite = true;\n  }\n\n","sourceOld":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\n  {\n    super(fieldName, lowerVal, upperVal, includeLower, includeUpper);\n    setConstantScoreRewrite(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\n  {\n    super(fieldName, lowerVal, upperVal, includeLower, includeUpper);\n    rewriteMethod = CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n  }\n\n","sourceOld":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\n  {\n    super(fieldName, lowerVal, upperVal, includeLower, includeUpper);\n    this.constantScoreRewrite = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#ConstantScoreRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  public ConstantScoreRangeQuery(String fieldName, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper)\n  {\n    super(fieldName, lowerVal, upperVal, includeLower, includeUpper);\n    rewriteMethod = CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a9553c1383b3678fd48ad68f0686008b07ef25b":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"6616a9b902d52a1d7831e2ad621d234ef3b540e6":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"c5f8e44d5e9627993851287f67e8360a36cb302a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["1a9553c1383b3678fd48ad68f0686008b07ef25b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["6616a9b902d52a1d7831e2ad621d234ef3b540e6"]},"commit2Childs":{"1a9553c1383b3678fd48ad68f0686008b07ef25b":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"6616a9b902d52a1d7831e2ad621d234ef3b540e6":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["1a9553c1383b3678fd48ad68f0686008b07ef25b"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5f8e44d5e9627993851287f67e8360a36cb302a":["6616a9b902d52a1d7831e2ad621d234ef3b540e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}