{"path":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","commits":[{"id":"cb9af919a17be70cfc512901fc70f1beaf840ca1","date":1413208885,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#parse(Reader).mjava","sourceNew":"  /**Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr ) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if(parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for(;;) {\n      int ev = parser.nextEvent();\n      if (ev==JSONParser.OBJECT_END) return operations;\n      Object key =  ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new CommandOperation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**Parse the command operations into command objects\n   */\n  static List<Operation> parse(Reader rdr ) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if(parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<Operation> operations = new ArrayList<>();\n    for(;;) {\n      int ev = parser.nextEvent();\n      if (ev==JSONParser.OBJECT_END) return operations;\n      Object key =  ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new Operation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new Operation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#parse(Reader).mjava","sourceNew":"  /**Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr ) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if(parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for(;;) {\n      int ev = parser.nextEvent();\n      if (ev==JSONParser.OBJECT_END) return operations;\n      Object key =  ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new CommandOperation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**Parse the command operations into command objects\n   */\n  static List<Operation> parse(Reader rdr ) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if(parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<Operation> operations = new ArrayList<>();\n    for(;;) {\n      int ev = parser.nextEvent();\n      if (ev==JSONParser.OBJECT_END) return operations;\n      Object key =  ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new Operation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new Operation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be214850f18c80408bcfafd463ec155ab0515aee","date":1423651203,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","sourceNew":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new CommandOperation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr ) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if(parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for(;;) {\n      int ev = parser.nextEvent();\n      if (ev==JSONParser.OBJECT_END) return operations;\n      Object key =  ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new CommandOperation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","sourceNew":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new CommandOperation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63","date":1493709133,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","sourceNew":"  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    return parse(rdr, Collections.emptySet());\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d21112928e2aedcec0c17025bc0e91f8fcfcf30","date":1494423367,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","sourceNew":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","sourceNew":"  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    return parse(rdr, Collections.emptySet());\n\n  }\n\n","sourceOld":"  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    return parse(rdr, Collections.emptySet());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["6bdcb86c29922edae9a14852e636303bc52df094"],"6bdcb86c29922edae9a14852e636303bc52df094":["be214850f18c80408bcfafd463ec155ab0515aee"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["738b0ca71fa4c8a1f63e6368e8a3912bfc540f63","2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cb9af919a17be70cfc512901fc70f1beaf840ca1"],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be214850f18c80408bcfafd463ec155ab0515aee":["cb9af919a17be70cfc512901fc70f1beaf840ca1"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["6bdcb86c29922edae9a14852e636303bc52df094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30"]},"commit2Childs":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bdcb86c29922edae9a14852e636303bc52df094":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","738b0ca71fa4c8a1f63e6368e8a3912bfc540f63"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"55980207f1977bd1463465de1659b821347e2fa8":[],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["55980207f1977bd1463465de1659b821347e2fa8","be214850f18c80408bcfafd463ec155ab0515aee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","cb9af919a17be70cfc512901fc70f1beaf840ca1"],"be214850f18c80408bcfafd463ec155ab0515aee":["6bdcb86c29922edae9a14852e636303bc52df094"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}