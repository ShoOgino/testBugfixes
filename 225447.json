{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}