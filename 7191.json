{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#setCacheMissesUntilFill(int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#setCacheMissesUntilFill(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the number of cache misses before an attempt is made to read the\n   * entire taxonomy into the in-memory cache.\n   * <P> \n   * LuceneTaxonomyWriter holds an in-memory cache of recently seen\n   * categories to speed up operation. On each cache-miss, the on-disk index\n   * needs to be consulted. When an existing taxonomy is opened, a lot of\n   * slow disk reads like that are needed until the cache is filled, so it\n   * is more efficient to read the entire taxonomy into memory at once.\n   * We do this complete read after a certain number (defined by this method)\n   * of cache misses.\n   * <P>\n   * If the number is set to <CODE>0</CODE>, the entire taxonomy is read\n   * into the cache on first use, without fetching individual categories\n   * first.\n   * <P>\n   * Note that if the memory cache of choice is limited in size, and cannot\n   * hold the entire content of the on-disk taxonomy, then it is never\n   * read in its entirety into the cache, regardless of the setting of this\n   * method. \n   */\n  public void setCacheMissesUntilFill(int i) {\n    cacheMissesUntilFill = i;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#setCacheMissesUntilFill(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the number of cache misses before an attempt is made to read the\n   * entire taxonomy into the in-memory cache.\n   * <P> \n   * LuceneTaxonomyWriter holds an in-memory cache of recently seen\n   * categories to speed up operation. On each cache-miss, the on-disk index\n   * needs to be consulted. When an existing taxonomy is opened, a lot of\n   * slow disk reads like that are needed until the cache is filled, so it\n   * is more efficient to read the entire taxonomy into memory at once.\n   * We do this complete read after a certain number (defined by this method)\n   * of cache misses.\n   * <P>\n   * If the number is set to <CODE>0</CODE>, the entire taxonomy is read\n   * into the cache on first use, without fetching individual categories\n   * first.\n   * <P>\n   * Note that if the memory cache of choice is limited in size, and cannot\n   * hold the entire content of the on-disk taxonomy, then it is never\n   * read in its entirety into the cache, regardless of the setting of this\n   * method. \n   */\n  public void setCacheMissesUntilFill(int i) {\n    cacheMissesUntilFill = i;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#setCacheMissesUntilFill(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the number of cache misses before an attempt is made to read the\n   * entire taxonomy into the in-memory cache.\n   * <P> \n   * LuceneTaxonomyWriter holds an in-memory cache of recently seen\n   * categories to speed up operation. On each cache-miss, the on-disk index\n   * needs to be consulted. When an existing taxonomy is opened, a lot of\n   * slow disk reads like that are needed until the cache is filled, so it\n   * is more efficient to read the entire taxonomy into memory at once.\n   * We do this complete read after a certain number (defined by this method)\n   * of cache misses.\n   * <P>\n   * If the number is set to <CODE>0</CODE>, the entire taxonomy is read\n   * into the cache on first use, without fetching individual categories\n   * first.\n   * <P>\n   * Note that if the memory cache of choice is limited in size, and cannot\n   * hold the entire content of the on-disk taxonomy, then it is never\n   * read in its entirety into the cache, regardless of the setting of this\n   * method. \n   */\n  public void setCacheMissesUntilFill(int i) {\n    cacheMissesUntilFill = i;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#setCacheMissesUntilFill(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#setCacheMissesUntilFill(int).mjava","sourceNew":"  /**\n   * Set the number of cache misses before an attempt is made to read the\n   * entire taxonomy into the in-memory cache.\n   * <P> \n   * LuceneTaxonomyWriter holds an in-memory cache of recently seen\n   * categories to speed up operation. On each cache-miss, the on-disk index\n   * needs to be consulted. When an existing taxonomy is opened, a lot of\n   * slow disk reads like that are needed until the cache is filled, so it\n   * is more efficient to read the entire taxonomy into memory at once.\n   * We do this complete read after a certain number (defined by this method)\n   * of cache misses.\n   * <P>\n   * If the number is set to <CODE>0</CODE>, the entire taxonomy is read\n   * into the cache on first use, without fetching individual categories\n   * first.\n   * <P>\n   * Note that if the memory cache of choice is limited in size, and cannot\n   * hold the entire content of the on-disk taxonomy, then it is never\n   * read in its entirety into the cache, regardless of the setting of this\n   * method. \n   */\n  public void setCacheMissesUntilFill(int i) {\n    cacheMissesUntilFill = i;\n  }\n\n","sourceOld":"  /**\n   * Set the number of cache misses before an attempt is made to read the\n   * entire taxonomy into the in-memory cache.\n   * <P> \n   * LuceneTaxonomyWriter holds an in-memory cache of recently seen\n   * categories to speed up operation. On each cache-miss, the on-disk index\n   * needs to be consulted. When an existing taxonomy is opened, a lot of\n   * slow disk reads like that are needed until the cache is filled, so it\n   * is more efficient to read the entire taxonomy into memory at once.\n   * We do this complete read after a certain number (defined by this method)\n   * of cache misses.\n   * <P>\n   * If the number is set to <CODE>0</CODE>, the entire taxonomy is read\n   * into the cache on first use, without fetching individual categories\n   * first.\n   * <P>\n   * Note that if the memory cache of choice is limited in size, and cannot\n   * hold the entire content of the on-disk taxonomy, then it is never\n   * read in its entirety into the cache, regardless of the setting of this\n   * method. \n   */\n  public void setCacheMissesUntilFill(int i) {\n    cacheMissesUntilFill = i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}