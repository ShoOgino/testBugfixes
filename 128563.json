{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public ZkWriteCommand removeRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKeyStr = message.getStr(\"routeKey\");\n\n    log.info(\"Overseer.removeRoutingRule invoked for collection: \" + collection\n        + \" shard: \" + shard + \" routeKey: \" + routeKeyStr);\n\n    Slice slice = clusterState.getSlice(collection, shard);\n    if (slice == null) {\n      log.warn(\"Unknown collection: \" + collection + \" shard: \" + shard);\n      return ZkStateWriter.NO_OP;\n    }\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules != null) {\n      routingRules.remove(routeKeyStr); // no rules left\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      return new ZkWriteCommand(collection,\n          CollectionMutator.updateSlice(collection, clusterState.getCollection(collection), newSlice));\n    }\n\n    return ZkStateWriter.NO_OP;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand removeRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKeyStr = message.getStr(\"routeKey\");\n\n    log.info(\"Overseer.removeRoutingRule invoked for collection: \" + collectionName\n        + \" shard: \" + shard + \" routeKey: \" + routeKeyStr);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      log.warn(\"Unknown collection: \" + collectionName + \" shard: \" + shard);\n      return ZkStateWriter.NO_OP;\n    }\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules != null) {\n      routingRules.remove(routeKeyStr); // no rules left\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      return new ZkWriteCommand(collectionName,\n          CollectionMutator.updateSlice(collectionName, collection, newSlice));\n    }\n\n    return ZkStateWriter.NO_OP;\n  }\n\n","sourceOld":"  public ZkWriteCommand removeRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKeyStr = message.getStr(\"routeKey\");\n\n    log.info(\"Overseer.removeRoutingRule invoked for collection: \" + collection\n        + \" shard: \" + shard + \" routeKey: \" + routeKeyStr);\n\n    Slice slice = clusterState.getSlice(collection, shard);\n    if (slice == null) {\n      log.warn(\"Unknown collection: \" + collection + \" shard: \" + shard);\n      return ZkStateWriter.NO_OP;\n    }\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules != null) {\n      routingRules.remove(routeKeyStr); // no rules left\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      return new ZkWriteCommand(collection,\n          CollectionMutator.updateSlice(collection, clusterState.getCollection(collection), newSlice));\n    }\n\n    return ZkStateWriter.NO_OP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand removeRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKeyStr = message.getStr(\"routeKey\");\n\n    log.info(\"Overseer.removeRoutingRule invoked for collection: \" + collectionName\n        + \" shard: \" + shard + \" routeKey: \" + routeKeyStr);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      log.warn(\"Unknown collection: \" + collectionName + \" shard: \" + shard);\n      return ZkStateWriter.NO_OP;\n    }\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules != null) {\n      routingRules.remove(routeKeyStr); // no rules left\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      return new ZkWriteCommand(collectionName,\n          CollectionMutator.updateSlice(collectionName, collection, newSlice));\n    }\n\n    return ZkStateWriter.NO_OP;\n  }\n\n","sourceOld":"  public ZkWriteCommand removeRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKeyStr = message.getStr(\"routeKey\");\n\n    log.info(\"Overseer.removeRoutingRule invoked for collection: \" + collection\n        + \" shard: \" + shard + \" routeKey: \" + routeKeyStr);\n\n    Slice slice = clusterState.getSlice(collection, shard);\n    if (slice == null) {\n      log.warn(\"Unknown collection: \" + collection + \" shard: \" + shard);\n      return ZkStateWriter.NO_OP;\n    }\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules != null) {\n      routingRules.remove(routeKeyStr); // no rules left\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      return new ZkWriteCommand(collection,\n          CollectionMutator.updateSlice(collection, clusterState.getCollection(collection), newSlice));\n    }\n\n    return ZkStateWriter.NO_OP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand removeRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKeyStr = message.getStr(\"routeKey\");\n\n    log.info(\"Overseer.removeRoutingRule invoked for collection: \" + collectionName\n        + \" shard: \" + shard + \" routeKey: \" + routeKeyStr);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      log.warn(\"Unknown collection: \" + collectionName + \" shard: \" + shard);\n      return ZkStateWriter.NO_OP;\n    }\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules != null) {\n      routingRules.remove(routeKeyStr); // no rules left\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props,collectionName);\n      return new ZkWriteCommand(collectionName,\n          CollectionMutator.updateSlice(collectionName, collection, newSlice));\n    }\n\n    return ZkStateWriter.NO_OP;\n  }\n\n","sourceOld":"  public ZkWriteCommand removeRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKeyStr = message.getStr(\"routeKey\");\n\n    log.info(\"Overseer.removeRoutingRule invoked for collection: \" + collectionName\n        + \" shard: \" + shard + \" routeKey: \" + routeKeyStr);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      log.warn(\"Unknown collection: \" + collectionName + \" shard: \" + shard);\n      return ZkStateWriter.NO_OP;\n    }\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules != null) {\n      routingRules.remove(routeKeyStr); // no rules left\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      return new ZkWriteCommand(collectionName,\n          CollectionMutator.updateSlice(collectionName, collection, newSlice));\n    }\n\n    return ZkStateWriter.NO_OP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand removeRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKeyStr = message.getStr(\"routeKey\");\n\n    log.info(\"Overseer.removeRoutingRule invoked for collection: \" + collectionName\n        + \" shard: \" + shard + \" routeKey: \" + routeKeyStr);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      log.warn(\"Unknown collection: \" + collectionName + \" shard: \" + shard);\n      return ZkStateWriter.NO_OP;\n    }\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules != null) {\n      routingRules.remove(routeKeyStr); // no rules left\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props,collectionName);\n      return new ZkWriteCommand(collectionName,\n          CollectionMutator.updateSlice(collectionName, collection, newSlice));\n    }\n\n    return ZkStateWriter.NO_OP;\n  }\n\n","sourceOld":"  public ZkWriteCommand removeRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKeyStr = message.getStr(\"routeKey\");\n\n    log.info(\"Overseer.removeRoutingRule invoked for collection: \" + collectionName\n        + \" shard: \" + shard + \" routeKey: \" + routeKeyStr);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      log.warn(\"Unknown collection: \" + collectionName + \" shard: \" + shard);\n      return ZkStateWriter.NO_OP;\n    }\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules != null) {\n      routingRules.remove(routeKeyStr); // no rules left\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      return new ZkWriteCommand(collectionName,\n          CollectionMutator.updateSlice(collectionName, collection, newSlice));\n    }\n\n    return ZkStateWriter.NO_OP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#removeRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand removeRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKeyStr = message.getStr(\"routeKey\");\n\n    log.info(\"Overseer.removeRoutingRule invoked for collection: {} shard: {} routeKey: {}\"\n        , collectionName, shard, routeKeyStr);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      log.warn(\"Unknown collection: {} shard: {}\", collectionName, shard);\n      return ZkStateWriter.NO_OP;\n    }\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules != null) {\n      routingRules.remove(routeKeyStr); // no rules left\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props,collectionName);\n      return new ZkWriteCommand(collectionName,\n          CollectionMutator.updateSlice(collectionName, collection, newSlice));\n    }\n\n    return ZkStateWriter.NO_OP;\n  }\n\n","sourceOld":"  public ZkWriteCommand removeRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKeyStr = message.getStr(\"routeKey\");\n\n    log.info(\"Overseer.removeRoutingRule invoked for collection: \" + collectionName\n        + \" shard: \" + shard + \" routeKey: \" + routeKeyStr);\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      log.warn(\"Unknown collection: \" + collectionName + \" shard: \" + shard);\n      return ZkStateWriter.NO_OP;\n    }\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules != null) {\n      routingRules.remove(routeKeyStr); // no rules left\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props,collectionName);\n      return new ZkWriteCommand(collectionName,\n          CollectionMutator.updateSlice(collectionName, collection, newSlice));\n    }\n\n    return ZkStateWriter.NO_OP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","6681d02f2302c363be938426e68f8dfd090cc1bf"],"4abf821a41a2fdca2a1dea148999931d22e20529":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4abf821a41a2fdca2a1dea148999931d22e20529"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"4abf821a41a2fdca2a1dea148999931d22e20529":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}