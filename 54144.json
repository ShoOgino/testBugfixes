{"path":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testJSONSolrDocument().mjava","commits":[{"id":"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","date":1435150219,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testJSONSolrDocument().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n        CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SmileResponseWriter w = new SmileResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.add(\"response\", list);\n\n    w.write(buf, req, rsp);\n\n    byte[] bytes = buf.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes));\n    m = (Map) m.get(\"response\");\n    List l = (List) m.get(\"docs\");\n    Map doc = (Map) l.get(0);\n    assertFalse(doc.containsKey(\"subject\"));\n    assertFalse(doc.containsKey(\"title\"));\n    assertTrue(doc.containsKey(\"id\"));\n    assertTrue(doc.containsKey(\"score\"));\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n        CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SmileResponseWriter w = new SmileResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n\n    byte[] bytes = buf.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes));\n    m = (Map) m.get(\"response\");\n    List l = (List) m.get(\"docs\");\n    Map doc = (Map) l.get(0);\n    assertFalse(doc.containsKey(\"subject\"));\n    assertFalse(doc.containsKey(\"title\"));\n    assertTrue(doc.containsKey(\"id\"));\n    assertTrue(doc.containsKey(\"score\"));\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n        CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SmileResponseWriter w = new SmileResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.add(\"response\", list);\n\n    w.write(buf, req, rsp);\n\n    byte[] bytes = buf.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes));\n    m = (Map) m.get(\"response\");\n    List l = (List) m.get(\"docs\");\n    Map doc = (Map) l.get(0);\n    assertFalse(doc.containsKey(\"subject\"));\n    assertFalse(doc.containsKey(\"title\"));\n    assertTrue(doc.containsKey(\"id\"));\n    assertTrue(doc.containsKey(\"score\"));\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","date":1474893506,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testJSONSolrDocument().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n        CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SmileResponseWriter w = new SmileResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n\n    byte[] bytes = buf.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes));\n    m = (Map) m.get(\"response\");\n    List l = (List) m.get(\"docs\");\n    Map doc = (Map) l.get(0);\n    assertFalse(doc.containsKey(\"subject\"));\n    assertFalse(doc.containsKey(\"title\"));\n    assertTrue(doc.containsKey(\"id\"));\n    assertTrue(doc.containsKey(\"score\"));\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n        CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SmileResponseWriter w = new SmileResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n\n    byte[] bytes = buf.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes));\n    m = (Map) m.get(\"response\");\n    List l = (List) m.get(\"docs\");\n    Map doc = (Map) l.get(0);\n    assertFalse(doc.containsKey(\"subject\"));\n    assertFalse(doc.containsKey(\"title\"));\n    assertTrue(doc.containsKey(\"id\"));\n    assertTrue(doc.containsKey(\"score\"));\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n        CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SmileResponseWriter w = new SmileResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n\n    byte[] bytes = buf.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes));\n    m = (Map) m.get(\"response\");\n    List l = (List) m.get(\"docs\");\n    Map doc = (Map) l.get(0);\n    assertFalse(doc.containsKey(\"subject\"));\n    assertFalse(doc.containsKey(\"title\"));\n    assertTrue(doc.containsKey(\"id\"));\n    assertTrue(doc.containsKey(\"score\"));\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n        CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SmileResponseWriter w = new SmileResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n\n    byte[] bytes = buf.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes));\n    m = (Map) m.get(\"response\");\n    List l = (List) m.get(\"docs\");\n    Map doc = (Map) l.get(0);\n    assertFalse(doc.containsKey(\"subject\"));\n    assertFalse(doc.containsKey(\"title\"));\n    assertTrue(doc.containsKey(\"id\"));\n    assertTrue(doc.containsKey(\"score\"));\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n        CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SmileResponseWriter w = new SmileResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    ByteArrayOutputStream buf = new ByteArrayOutputStream();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n\n    byte[] bytes = buf.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes));\n    m = (Map) m.get(\"response\");\n    List l = (List) m.get(\"docs\");\n    Map doc = (Map) l.get(0);\n    assertFalse(doc.containsKey(\"subject\"));\n    assertFalse(doc.containsKey(\"title\"));\n    assertTrue(doc.containsKey(\"id\"));\n    assertTrue(doc.containsKey(\"score\"));\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ecd75942508378ccc92c3a26f71db6cba9f25784","b564b6c464f1c4b1f8e676b2b9b1558c34634b3a"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ecd75942508378ccc92c3a26f71db6cba9f25784","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}