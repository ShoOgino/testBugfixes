{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","commits":[{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","pathOld":"/dev/null","sourceNew":"  boolean waitForAllPreferreds() throws KeeperException, InterruptedException {\n    boolean goAgain = true;\n    long start = System.currentTimeMillis();\n    while (System.currentTimeMillis() - start < timeoutMs) {\n      goAgain = false;\n      cloudClient.getZkStateReader().updateClusterState(true);\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n\n      for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n        Replica me = slices.get(ent.getKey()).getReplica(ent.getValue().getName());\n        if (me.getBool(\"property.preferredleader\", false) == false) {\n          goAgain = true;\n          break;\n        }\n      }\n      if (goAgain) {\n        Thread.sleep(250);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","sourceNew":"  boolean waitForAllPreferreds() throws KeeperException, InterruptedException {\n    boolean goAgain = true;\n    long start = System.currentTimeMillis();\n    while (System.currentTimeMillis() - start < timeoutMs) {\n      goAgain = false;\n      cloudClient.getZkStateReader().updateClusterState();\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n\n      for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n        Replica me = slices.get(ent.getKey()).getReplica(ent.getValue().getName());\n        if (me.getBool(\"property.preferredleader\", false) == false) {\n          goAgain = true;\n          break;\n        }\n      }\n      if (goAgain) {\n        Thread.sleep(250);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean waitForAllPreferreds() throws KeeperException, InterruptedException {\n    boolean goAgain = true;\n    long start = System.currentTimeMillis();\n    while (System.currentTimeMillis() - start < timeoutMs) {\n      goAgain = false;\n      cloudClient.getZkStateReader().updateClusterState(true);\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n\n      for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n        Replica me = slices.get(ent.getKey()).getReplica(ent.getValue().getName());\n        if (me.getBool(\"property.preferredleader\", false) == false) {\n          goAgain = true;\n          break;\n        }\n      }\n      if (goAgain) {\n        Thread.sleep(250);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","sourceNew":"  boolean waitForAllPreferreds() throws KeeperException, InterruptedException {\n    boolean goAgain = true;\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n    while (! timeout.hasTimedOut()) {\n      goAgain = false;\n      cloudClient.getZkStateReader().updateClusterState();\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n\n      for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n        Replica me = slices.get(ent.getKey()).getReplica(ent.getValue().getName());\n        if (me.getBool(\"property.preferredleader\", false) == false) {\n          goAgain = true;\n          break;\n        }\n      }\n      if (goAgain) {\n        Thread.sleep(250);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean waitForAllPreferreds() throws KeeperException, InterruptedException {\n    boolean goAgain = true;\n    long start = System.currentTimeMillis();\n    while (System.currentTimeMillis() - start < timeoutMs) {\n      goAgain = false;\n      cloudClient.getZkStateReader().updateClusterState();\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n\n      for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n        Replica me = slices.get(ent.getKey()).getReplica(ent.getValue().getName());\n        if (me.getBool(\"property.preferredleader\", false) == false) {\n          goAgain = true;\n          break;\n        }\n      }\n      if (goAgain) {\n        Thread.sleep(250);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","sourceNew":"  boolean waitForAllPreferreds() throws KeeperException, InterruptedException {\n    boolean goAgain = true;\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n    while (! timeout.hasTimedOut()) {\n      goAgain = false;\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n\n      for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n        Replica me = slices.get(ent.getKey()).getReplica(ent.getValue().getName());\n        if (me.getBool(\"property.preferredleader\", false) == false) {\n          goAgain = true;\n          break;\n        }\n      }\n      if (goAgain) {\n        Thread.sleep(250);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean waitForAllPreferreds() throws KeeperException, InterruptedException {\n    boolean goAgain = true;\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n    while (! timeout.hasTimedOut()) {\n      goAgain = false;\n      cloudClient.getZkStateReader().updateClusterState();\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n\n      for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n        Replica me = slices.get(ent.getKey()).getReplica(ent.getValue().getName());\n        if (me.getBool(\"property.preferredleader\", false) == false) {\n          goAgain = true;\n          break;\n        }\n      }\n      if (goAgain) {\n        Thread.sleep(250);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","sourceNew":"  boolean waitForAllPreferreds() throws KeeperException, InterruptedException {\n    boolean goAgain = true;\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (! timeout.hasTimedOut()) {\n      goAgain = false;\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n\n      for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n        Replica me = slices.get(ent.getKey()).getReplica(ent.getValue().getName());\n        if (me.getBool(\"property.preferredleader\", false) == false) {\n          goAgain = true;\n          break;\n        }\n      }\n      if (goAgain) {\n        Thread.sleep(250);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean waitForAllPreferreds() throws KeeperException, InterruptedException {\n    boolean goAgain = true;\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n    while (! timeout.hasTimedOut()) {\n      goAgain = false;\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n\n      for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n        Replica me = slices.get(ent.getKey()).getReplica(ent.getValue().getName());\n        if (me.getBool(\"property.preferredleader\", false) == false) {\n          goAgain = true;\n          break;\n        }\n      }\n      if (goAgain) {\n        Thread.sleep(250);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","sourceNew":null,"sourceOld":"  boolean waitForAllPreferreds() throws KeeperException, InterruptedException {\n    boolean goAgain = true;\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (! timeout.hasTimedOut()) {\n      goAgain = false;\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n\n      for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n        Replica me = slices.get(ent.getKey()).getReplica(ent.getValue().getName());\n        if (me.getBool(\"property.preferredleader\", false) == false) {\n          goAgain = true;\n          break;\n        }\n      }\n      if (goAgain) {\n        Thread.sleep(250);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":4,"author":"Tommaso Teofili","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#waitForAllPreferreds().mjava","sourceNew":null,"sourceOld":"  boolean waitForAllPreferreds() throws KeeperException, InterruptedException {\n    boolean goAgain = true;\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (! timeout.hasTimedOut()) {\n      goAgain = false;\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n\n      for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n        Replica me = slices.get(ent.getKey()).getReplica(ent.getValue().getName());\n        if (me.getBool(\"property.preferredleader\", false) == false) {\n          goAgain = true;\n          break;\n        }\n      }\n      if (goAgain) {\n        Thread.sleep(250);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","73fd358e8ec697393d56617f4d9cedaca74dca14"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}