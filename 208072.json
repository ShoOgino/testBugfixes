{"path":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","commits":[{"id":"1fc56848da7b3f927bb9840e8aedf09ee11cede1","date":1424871235,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new ShardHandler() {\n      @Override\n      public void checkDistributed(ResponseBuilder rb) {\n        wrapped.checkDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new ShardHandler() {\n      @Override\n      public void checkDistributed(ResponseBuilder rb) {\n        wrapped.checkDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5676bf22fd531b9a2a3053047d0e0f922c1c53ff","date":1435097302,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","sourceNew":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new ShardHandler() {\n      @Override\n      public void prepDistributed(ResponseBuilder rb) {\n        wrapped.prepDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new ShardHandler() {\n      @Override\n      public void checkDistributed(ResponseBuilder rb) {\n        wrapped.checkDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"23e55c29de60130e8a1226800b66c5f6d7e16e8a","date":1447950053,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","sourceNew":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new ShardHandler() {\n      @Override\n      public void prepDistributed(ResponseBuilder rb) {\n        wrapped.prepDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params, String preferredHostAddress) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new ShardHandler() {\n      @Override\n      public void prepDistributed(ResponseBuilder rb) {\n        wrapped.prepDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"304ef848381e39ff6cf3e7af6127733a6f4db389","date":1482353305,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","sourceNew":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new ShardHandler() {\n      @Override\n      public void prepDistributed(ResponseBuilder rb) {\n        wrapped.prepDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new ShardHandler() {\n      @Override\n      public void prepDistributed(ResponseBuilder rb) {\n        wrapped.prepDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params, String preferredHostAddress) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","sourceNew":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new ShardHandler() {\n      @Override\n      public void prepDistributed(ResponseBuilder rb) {\n        wrapped.prepDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new ShardHandler() {\n      @Override\n      public void prepDistributed(ResponseBuilder rb) {\n        wrapped.prepDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params, String preferredHostAddress) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","sourceNew":"  @Override\n  public ShardHandler getShardHandler() {\n    return super.getShardHandler();\n  }\n\n","sourceOld":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new ShardHandler() {\n      @Override\n      public void prepDistributed(ResponseBuilder rb) {\n        wrapped.prepDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","bugFix":["304ef848381e39ff6cf3e7af6127733a6f4db389","1fc56848da7b3f927bb9840e8aedf09ee11cede1","5676bf22fd531b9a2a3053047d0e0f922c1c53ff"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/handler/component/TrackingShardHandlerFactory#getShardHandler().mjava","sourceNew":"  @Override\n  public ShardHandler getShardHandler() {\n    final ShardHandlerFactory factory = this;\n    final ShardHandler wrapped = super.getShardHandler();\n    return new HttpShardHandler(this) {\n      @Override\n      public void prepDistributed(ResponseBuilder rb) {\n        wrapped.prepDistributed(rb);\n      }\n\n      @Override\n      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params) {\n        synchronized (TrackingShardHandlerFactory.this) {\n          if (isTracking()) {\n            queue.offer(new ShardRequestAndParams(sreq, shard, params));\n          }\n        }\n        wrapped.submit(sreq, shard, params);\n      }\n\n      @Override\n      public ShardResponse takeCompletedIncludingErrors() {\n        return wrapped.takeCompletedIncludingErrors();\n      }\n\n      @Override\n      public ShardResponse takeCompletedOrError() {\n        return wrapped.takeCompletedOrError();\n      }\n\n      @Override\n      public void cancelAll() {\n        wrapped.cancelAll();\n      }\n\n      @Override\n      public ShardHandlerFactory getShardHandlerFactory() {\n        return factory;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ShardHandler getShardHandler() {\n    return super.getShardHandler();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["304ef848381e39ff6cf3e7af6127733a6f4db389"],"1fc56848da7b3f927bb9840e8aedf09ee11cede1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5676bf22fd531b9a2a3053047d0e0f922c1c53ff":["1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"304ef848381e39ff6cf3e7af6127733a6f4db389":["23e55c29de60130e8a1226800b66c5f6d7e16e8a"],"23e55c29de60130e8a1226800b66c5f6d7e16e8a":["5676bf22fd531b9a2a3053047d0e0f922c1c53ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["23e55c29de60130e8a1226800b66c5f6d7e16e8a","304ef848381e39ff6cf3e7af6127733a6f4db389"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"1fc56848da7b3f927bb9840e8aedf09ee11cede1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5676bf22fd531b9a2a3053047d0e0f922c1c53ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1fc56848da7b3f927bb9840e8aedf09ee11cede1"],"5676bf22fd531b9a2a3053047d0e0f922c1c53ff":["23e55c29de60130e8a1226800b66c5f6d7e16e8a"],"304ef848381e39ff6cf3e7af6127733a6f4db389":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"23e55c29de60130e8a1226800b66c5f6d7e16e8a":["304ef848381e39ff6cf3e7af6127733a6f4db389","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}