{"path":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.SimpleAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testLineDocFile().mjava","sourceNew":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","sourceOld":"  /**\n   * Test WriteLineDoc and LineDocSource.\n   */\n  public void testLineDocFile() throws Exception {\n    File lineFile = new File(TEMP_DIR, \"test.reuters.lines.txt\");\n\n    // We will call WriteLineDocs this many times\n    final int NUM_TRY_DOCS = 50;\n\n    // Creates a line file with first 50 docs from SingleDocSource\n    String algLines1[] = {\n      \"# ----- properties \",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n      \"content.source.forever=true\",\n      \"line.file.out=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"# ----- alg \",\n      \"{WriteLineDoc()}:\" + NUM_TRY_DOCS,\n    };\n\n    // Run algo\n    Benchmark benchmark = execBenchmark(algLines1);\n\n    BufferedReader r = new BufferedReader(new FileReader(lineFile));\n    int numLines = 0;\n    while(r.readLine() != null)\n      numLines++;\n    r.close();\n    assertEquals(\"did not see the right number of docs; should be \" + NUM_TRY_DOCS + \" but was \" + numLines, NUM_TRY_DOCS, numLines);\n    \n    // Index the line docs\n    String algLines2[] = {\n      \"# ----- properties \",\n      \"analyzer=org.apache.lucene.analysis.MockAnalyzer\",\n      \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n      \"docs.file=\" + lineFile.getAbsolutePath().replace('\\\\', '/'),\n      \"content.source.forever=false\",\n      \"doc.reuse.fields=false\",\n      \"ram.flush.mb=4\",\n      \"# ----- alg \",\n      \"ResetSystemErase\",\n      \"CreateIndex\",\n      \"{AddDoc}: *\",\n      \"CloseIndex\",\n    };\n    \n    // Run algo\n    benchmark = execBenchmark(algLines2);\n\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(numLines + \" lines were created but \" + ir.numDocs() + \" docs are in the index\", numLines, ir.numDocs());\n    ir.close();\n\n    lineFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d572389229127c297dd1fa5ce4758e1cec41e799","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["d572389229127c297dd1fa5ce4758e1cec41e799","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}