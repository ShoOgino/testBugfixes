{"path":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"modules/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, null, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, null, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, null, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, null, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0","date":1354615545,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = new DefaultFacetIndexingParams();\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, null, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, null, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = new DefaultFacetIndexingParams();\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, null, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, null, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = new DefaultFacetIndexingParams();\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = new DefaultFacetIndexingParams();\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa7a3db4fa6c77f454964f515841c097ca09212","date":1359119468,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, Occur.MUST, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, Occur.MUST, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, Occur.MUST, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, Occur.MUST, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, Occur.MUST, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, Occur.MUST, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"9fa7a3db4fa6c77f454964f515841c097ca09212":["811cdb4a80352766eb0c762e48972707a924e5cd"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["07155cdd910937cdf6877e48884d5782845c8b8b","9fa7a3db4fa6c77f454964f515841c097ca09212"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["9fa7a3db4fa6c77f454964f515841c097ca09212"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["dd45d4a2ee01a1932d33eec42f5272c2402da679","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"811cdb4a80352766eb0c762e48972707a924e5cd":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"9fa7a3db4fa6c77f454964f515841c097ca09212":["dd45d4a2ee01a1932d33eec42f5272c2402da679","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["61d5f95d14e5b9b046998c51e16709a398c15226"],"07155cdd910937cdf6877e48884d5782845c8b8b":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"e9b1f09a9e58dfa9a85edd07038d129b0dee0ac0":["407687e67faf6e1f02a211ca078d8e3eed631027","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"811cdb4a80352766eb0c762e48972707a924e5cd":["9fa7a3db4fa6c77f454964f515841c097ca09212","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}