{"path":"solr/core/src/test/org/apache/solr/util/TestUtils#testMapWriterIdx().mjava","commits":[{"id":"3167eae3325cf45449a75ab0468b53c0545606a3","date":1538465698,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testMapWriterIdx().mjava","pathOld":"/dev/null","sourceNew":"  public void testMapWriterIdx(){\n    String json = \"{\" +\n        \"  'responseHeader':{\" +\n        \"    'status':0,\" +\n        \"    'QTime':6752},\" +\n        \"  'success':{\" +\n        \"    '127.0.0.1:56443_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':4276},\" +\n        \"      'core':'corestatus_test_shard2_replica_n5'},\" +\n        \"    '127.0.0.1:56445_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':4271},\" +\n        \"      'core':'corestatus_test_shard1_replica_n1'},\" +\n        \"    '127.0.0.1:56446_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':5015},\" +\n        \"      'core':'corestatus_test_shard1_replica_n2'},\" +\n        \"    '127.0.0.1:56444_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':5033},\" +\n        \"      'core':'corestatus_test_shard2_replica_n3'}}}\";\n    Map m = (Map) fromJSONString(json);\n\n    assertEquals(\"127.0.0.1:56443_solr\", Utils.getObjectByPath(m,false, \"success[0]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n5\", Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"core\") ));\n    assertEquals(4276L, Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"responseHeader\", \"QTime\") ));\n\n    assertEquals(\"127.0.0.1:56444_solr\", Utils.getObjectByPath(m,false, \"success[3]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n3\", Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"core\") ));\n    assertEquals(5033L, Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"responseHeader\", \"QTime\") ));\n\n    Map nodes = (Map) m.get(\"success\");\n    m.put(\"success\", (MapWriter) ew -> nodes.forEach((o, o2) -> ew.putNoEx((String) o,o2)));\n    assertEquals(\"127.0.0.1:56443_solr\", Utils.getObjectByPath(m,false, \"success[0]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n5\", Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"core\") ));\n    assertEquals(4276L, Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"responseHeader\", \"QTime\") ));\n\n    assertEquals(\"127.0.0.1:56444_solr\", Utils.getObjectByPath(m,false, \"success[3]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n3\", Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"core\") ));\n    assertEquals(5033L, Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"responseHeader\", \"QTime\") ));\n    final int[] count = {0};\n    NamedList nl = new NamedList(m);\n    nl._forEachEntry(\"success\", (o, o2) -> count[0]++);\n    assertEquals(count[0], 4);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testMapWriterIdx().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testMapWriterIdx().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testMapWriterIdx(){\n    String json = \"{\" +\n        \"  'responseHeader':{\" +\n        \"    'status':0,\" +\n        \"    'QTime':6752},\" +\n        \"  'success':{\" +\n        \"    '127.0.0.1:56443_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':4276},\" +\n        \"      'core':'corestatus_test_shard2_replica_n5'},\" +\n        \"    '127.0.0.1:56445_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':4271},\" +\n        \"      'core':'corestatus_test_shard1_replica_n1'},\" +\n        \"    '127.0.0.1:56446_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':5015},\" +\n        \"      'core':'corestatus_test_shard1_replica_n2'},\" +\n        \"    '127.0.0.1:56444_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':5033},\" +\n        \"      'core':'corestatus_test_shard2_replica_n3'}}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) fromJSONString(json);\n\n    assertEquals(\"127.0.0.1:56443_solr\", Utils.getObjectByPath(m,false, \"success[0]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n5\", Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"core\") ));\n    assertEquals(4276L, Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"responseHeader\", \"QTime\") ));\n\n    assertEquals(\"127.0.0.1:56444_solr\", Utils.getObjectByPath(m,false, \"success[3]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n3\", Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"core\") ));\n    assertEquals(5033L, Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"responseHeader\", \"QTime\") ));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map nodes = (Map) m.get(\"success\");\n    m.put(\"success\", (MapWriter) ew -> nodes.forEach((o, o2) -> ew.putNoEx((String) o,o2)));\n    assertEquals(\"127.0.0.1:56443_solr\", Utils.getObjectByPath(m,false, \"success[0]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n5\", Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"core\") ));\n    assertEquals(4276L, Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"responseHeader\", \"QTime\") ));\n\n    assertEquals(\"127.0.0.1:56444_solr\", Utils.getObjectByPath(m,false, \"success[3]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n3\", Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"core\") ));\n    assertEquals(5033L, Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"responseHeader\", \"QTime\") ));\n    final int[] count = {0};\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    NamedList nl = new NamedList(m);\n    nl._forEachEntry(\"success\", (o, o2) -> count[0]++);\n    assertEquals(count[0], 4);\n  }\n\n","sourceOld":"  public void testMapWriterIdx(){\n    String json = \"{\" +\n        \"  'responseHeader':{\" +\n        \"    'status':0,\" +\n        \"    'QTime':6752},\" +\n        \"  'success':{\" +\n        \"    '127.0.0.1:56443_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':4276},\" +\n        \"      'core':'corestatus_test_shard2_replica_n5'},\" +\n        \"    '127.0.0.1:56445_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':4271},\" +\n        \"      'core':'corestatus_test_shard1_replica_n1'},\" +\n        \"    '127.0.0.1:56446_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':5015},\" +\n        \"      'core':'corestatus_test_shard1_replica_n2'},\" +\n        \"    '127.0.0.1:56444_solr':{\" +\n        \"      'responseHeader':{\" +\n        \"        'status':0,\" +\n        \"        'QTime':5033},\" +\n        \"      'core':'corestatus_test_shard2_replica_n3'}}}\";\n    Map m = (Map) fromJSONString(json);\n\n    assertEquals(\"127.0.0.1:56443_solr\", Utils.getObjectByPath(m,false, \"success[0]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n5\", Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"core\") ));\n    assertEquals(4276L, Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"responseHeader\", \"QTime\") ));\n\n    assertEquals(\"127.0.0.1:56444_solr\", Utils.getObjectByPath(m,false, \"success[3]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n3\", Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"core\") ));\n    assertEquals(5033L, Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"responseHeader\", \"QTime\") ));\n\n    Map nodes = (Map) m.get(\"success\");\n    m.put(\"success\", (MapWriter) ew -> nodes.forEach((o, o2) -> ew.putNoEx((String) o,o2)));\n    assertEquals(\"127.0.0.1:56443_solr\", Utils.getObjectByPath(m,false, \"success[0]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n5\", Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"core\") ));\n    assertEquals(4276L, Utils.getObjectByPath(m, false,asList(\"success[0]\", \"value\", \"responseHeader\", \"QTime\") ));\n\n    assertEquals(\"127.0.0.1:56444_solr\", Utils.getObjectByPath(m,false, \"success[3]/key\"));\n    assertEquals(\"corestatus_test_shard2_replica_n3\", Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"core\") ));\n    assertEquals(5033L, Utils.getObjectByPath(m, false,asList(\"success[3]\", \"value\", \"responseHeader\", \"QTime\") ));\n    final int[] count = {0};\n    NamedList nl = new NamedList(m);\n    nl._forEachEntry(\"success\", (o, o2) -> count[0]++);\n    assertEquals(count[0], 4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3167eae3325cf45449a75ab0468b53c0545606a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["3167eae3325cf45449a75ab0468b53c0545606a3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3167eae3325cf45449a75ab0468b53c0545606a3"],"3167eae3325cf45449a75ab0468b53c0545606a3":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}