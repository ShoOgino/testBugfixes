{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl31#zzUnpackTrans(String,int,int[]).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl31#zzUnpackTrans(String,int,int[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl31#zzUnpackTrans(String,int,int[]).mjava","sourceNew":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","sourceOld":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683d3f90dda2bbb999c3ce855706d74563a53680","date":1285654576,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl#zzUnpackTrans(String,int,int[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl31#zzUnpackTrans(String,int,int[]).mjava","sourceNew":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","sourceOld":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683d3f90dda2bbb999c3ce855706d74563a53680","date":1285654576,"type":6,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzUnpackTrans(String,int,int[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl31#zzUnpackTrans(String,int,int[]).mjava","sourceNew":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","sourceOld":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683d3f90dda2bbb999c3ce855706d74563a53680","date":1285654576,"type":6,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29Tokenizer#zzUnpackTrans(String,int,int[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl31#zzUnpackTrans(String,int,int[]).mjava","sourceNew":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","sourceOld":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl#zzUnpackTrans(String,int,int[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl31#zzUnpackTrans(String,int,int[]).mjava","sourceNew":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","sourceOld":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":6,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl#zzUnpackTrans(String,int,int[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl31#zzUnpackTrans(String,int,int[]).mjava","sourceNew":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","sourceOld":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":6,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer#zzUnpackTrans(String,int,int[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl31#zzUnpackTrans(String,int,int[]).mjava","sourceNew":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","sourceOld":"  private static int zzUnpackTrans(String packed, int offset, int [] result) {\n    int i = 0;       /* index in packed string  */\n    int j = offset;  /* index in unpacked array */\n    int l = packed.length();\n    while (i < l) {\n      int count = packed.charAt(i++);\n      int value = packed.charAt(i++);\n      value--;\n      do result[j++] = value; while (--count > 0);\n    }\n    return j;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683d3f90dda2bbb999c3ce855706d74563a53680":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","683d3f90dda2bbb999c3ce855706d74563a53680"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683d3f90dda2bbb999c3ce855706d74563a53680"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"683d3f90dda2bbb999c3ce855706d74563a53680":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["683d3f90dda2bbb999c3ce855706d74563a53680","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}