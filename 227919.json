{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#advanceBlock(int).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#advanceBlock(int).mjava","pathOld":"/dev/null","sourceNew":"  private void advanceBlock(int targetBlock) throws IOException {\n    final int blockIndex = targetBlock >> 16;\n    // If the destination block is 2 blocks or more ahead, we use the jump-table.\n    if (jumpTable != null && blockIndex >= (block >> 16)+2) {\n      // If the jumpTableEntryCount is exceeded, there are no further bits. Last entry is always NO_MORE_DOCS\n      final int inRangeBlockIndex = blockIndex < jumpTableEntryCount ? blockIndex : jumpTableEntryCount-1;\n      final int index = jumpTable.readInt(inRangeBlockIndex*Integer.BYTES*2);\n      final int offset = jumpTable.readInt(inRangeBlockIndex*Integer.BYTES*2+Integer.BYTES);\n      this.nextBlockIndex = index-1; // -1 to compensate for the always-added 1 in readBlockHeader\n      slice.seek(offset);\n      readBlockHeader();\n      return;\n    }\n\n    // Fallback to iteration of blocks\n    do {\n      slice.seek(blockEnd);\n      readBlockHeader();\n    } while (block < targetBlock);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#advanceBlock(int).mjava","pathOld":"/dev/null","sourceNew":"  private void advanceBlock(int targetBlock) throws IOException {\n    final int blockIndex = targetBlock >> 16;\n    // If the destination block is 2 blocks or more ahead, we use the jump-table.\n    if (jumpTable != null && blockIndex >= (block >> 16)+2) {\n      // If the jumpTableEntryCount is exceeded, there are no further bits. Last entry is always NO_MORE_DOCS\n      final int inRangeBlockIndex = blockIndex < jumpTableEntryCount ? blockIndex : jumpTableEntryCount-1;\n      final int index = jumpTable.readInt(inRangeBlockIndex*Integer.BYTES*2);\n      final int offset = jumpTable.readInt(inRangeBlockIndex*Integer.BYTES*2+Integer.BYTES);\n      this.nextBlockIndex = index-1; // -1 to compensate for the always-added 1 in readBlockHeader\n      slice.seek(offset);\n      readBlockHeader();\n      return;\n    }\n\n    // Fallback to iteration of blocks\n    do {\n      slice.seek(blockEnd);\n      readBlockHeader();\n    } while (block < targetBlock);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}