{"path":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"  public synchronized void onInit(List<? extends IndexCommit> commits) throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size()-1);\n  }\n\n","sourceOld":"  public synchronized void onInit(List<? extends IndexCommit> commits) throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size()-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3cefb552695b930cefe85eb7880cccdb914be6b","date":1275316631,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size() - 1);\n\n    /*\n     * Assign snapshotted IndexCommits to their correct snapshot IDs as\n     * specified in the constructor.\n     */\n    for (IndexCommit commit : commits) {\n      Set<String> ids = segmentsFileToIDs.get(commit.getSegmentsFileName());\n      if (ids != null) {\n        for (String id : ids) {\n          idToSnapshot.get(id).commit = commit;\n        }\n      }\n    }\n\n    /*\n     * Second, see if there are any instances where a snapshot ID was specified\n     * in the constructor but an IndexCommit doesn't exist. In this case, the ID\n     * should be removed.\n     * \n     * Note: This code is protective for extreme cases where IDs point to\n     * non-existent segments. As the constructor should have received its\n     * information via a call to getSnapshots(), the data should be well-formed.\n     */\n    // Find lost snapshots\n    ArrayList<String> idsToRemove = null;\n    for (Entry<String, SnapshotInfo> e : idToSnapshot.entrySet()) {\n      if (e.getValue().commit == null) {\n        if (idsToRemove == null) {\n          idsToRemove = new ArrayList<String>();\n        }\n        idsToRemove.add(e.getKey());\n      }\n    }\n    // Finally, remove those 'lost' snapshots.\n    if (idsToRemove != null) {\n      for (String id : idsToRemove) {\n        SnapshotInfo info = idToSnapshot.remove(id);\n        segmentsFileToIDs.remove(info.segmentsFileName);\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void onInit(List<? extends IndexCommit> commits) throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size()-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy#onInit(List[#-extends-IndexCommit]).mjava","sourceNew":"  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size() - 1);\n\n    /*\n     * Assign snapshotted IndexCommits to their correct snapshot IDs as\n     * specified in the constructor.\n     */\n    for (IndexCommit commit : commits) {\n      Set<String> ids = segmentsFileToIDs.get(commit.getSegmentsFileName());\n      if (ids != null) {\n        for (String id : ids) {\n          idToSnapshot.get(id).commit = commit;\n        }\n      }\n    }\n\n    /*\n     * Second, see if there are any instances where a snapshot ID was specified\n     * in the constructor but an IndexCommit doesn't exist. In this case, the ID\n     * should be removed.\n     * \n     * Note: This code is protective for extreme cases where IDs point to\n     * non-existent segments. As the constructor should have received its\n     * information via a call to getSnapshots(), the data should be well-formed.\n     */\n    // Find lost snapshots\n    ArrayList<String> idsToRemove = null;\n    for (Entry<String, SnapshotInfo> e : idToSnapshot.entrySet()) {\n      if (e.getValue().commit == null) {\n        if (idsToRemove == null) {\n          idsToRemove = new ArrayList<String>();\n        }\n        idsToRemove.add(e.getKey());\n      }\n    }\n    // Finally, remove those 'lost' snapshots.\n    if (idsToRemove != null) {\n      for (String id : idsToRemove) {\n        SnapshotInfo info = idToSnapshot.remove(id);\n        segmentsFileToIDs.remove(info.segmentsFileName);\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void onInit(List<? extends IndexCommit> commits)\n      throws IOException {\n    primary.onInit(wrapCommits(commits));\n    lastCommit = commits.get(commits.size() - 1);\n\n    /*\n     * Assign snapshotted IndexCommits to their correct snapshot IDs as\n     * specified in the constructor.\n     */\n    for (IndexCommit commit : commits) {\n      Set<String> ids = segmentsFileToIDs.get(commit.getSegmentsFileName());\n      if (ids != null) {\n        for (String id : ids) {\n          idToSnapshot.get(id).commit = commit;\n        }\n      }\n    }\n\n    /*\n     * Second, see if there are any instances where a snapshot ID was specified\n     * in the constructor but an IndexCommit doesn't exist. In this case, the ID\n     * should be removed.\n     * \n     * Note: This code is protective for extreme cases where IDs point to\n     * non-existent segments. As the constructor should have received its\n     * information via a call to getSnapshots(), the data should be well-formed.\n     */\n    // Find lost snapshots\n    ArrayList<String> idsToRemove = null;\n    for (Entry<String, SnapshotInfo> e : idToSnapshot.entrySet()) {\n      if (e.getValue().commit == null) {\n        if (idsToRemove == null) {\n          idsToRemove = new ArrayList<String>();\n        }\n        idsToRemove.add(e.getKey());\n      }\n    }\n    // Finally, remove those 'lost' snapshots.\n    if (idsToRemove != null) {\n      for (String id : idsToRemove) {\n        SnapshotInfo info = idToSnapshot.remove(id);\n        segmentsFileToIDs.remove(info.segmentsFileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}