{"path":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","commits":[{"id":"7f2e96099703c24c0c63d27806ba7020626b649b","date":1385214372,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"Suggester finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<>();\n    NamedList response = new SimpleOrderedMap();\n    NamedList<NamedList> namedListResult = null;\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<NamedList> namedList = \n            (NamedList<NamedList>) srsp.getSolrResponse().getResponse().get(SuggesterResultLabels.SUGGEST);\n        LOG.info(srsp.getShard() + \" : \" + namedList);\n        suggesterResults.add(toSuggesterResult(namedList));\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    namedListResult = toNamedList(suggesterResult);\n      \n    response.add(SuggesterResultLabels.SUGGESTIONS, namedListResult);\n    rb.rsp.add(SuggesterResultLabels.SUGGEST, response);\n  }\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62b8732cb451168644d19e4d6e4fcf7b07bafc3d","date":1385219983,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"Suggester finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<SuggesterResult>();\n    NamedList response = new SimpleOrderedMap();\n    NamedList<NamedList> namedListResult = null;\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<NamedList> namedList = \n            (NamedList<NamedList>) srsp.getSolrResponse().getResponse().get(SuggesterResultLabels.SUGGEST);\n        LOG.info(srsp.getShard() + \" : \" + namedList);\n        suggesterResults.add(toSuggesterResult(namedList));\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    namedListResult = toNamedList(suggesterResult);\n      \n    response.add(SuggesterResultLabels.SUGGESTIONS, namedListResult);\n    rb.rsp.add(SuggesterResultLabels.SUGGEST, response);\n  }\n","sourceOld":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"Suggester finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<>();\n    NamedList response = new SimpleOrderedMap();\n    NamedList<NamedList> namedListResult = null;\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<NamedList> namedList = \n            (NamedList<NamedList>) srsp.getSolrResponse().getResponse().get(SuggesterResultLabels.SUGGEST);\n        LOG.info(srsp.getShard() + \" : \" + namedList);\n        suggesterResults.add(toSuggesterResult(namedList));\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    namedListResult = toNamedList(suggesterResult);\n      \n    response.add(SuggesterResultLabels.SUGGESTIONS, namedListResult);\n    rb.rsp.add(SuggesterResultLabels.SUGGEST, response);\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf2ccf302186b563c9549824a4d45db1e8cf8a0d","date":1387322051,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<SuggesterResult>();\n    NamedList<NamedList<Object>> namedListResult = null;\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<Object> resp;\n        if((resp = srsp.getSolrResponse().getResponse()) != null) {\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> namedList = \n              (NamedList<NamedList<Object>>) resp.get(SuggesterResultLabels.SUGGEST);\n          LOG.info(srsp.getShard() + \" : \" + namedList);\n          suggesterResults.add(toSuggesterResult(namedList));\n        }\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    namedListResult = toNamedList(suggesterResult);\n      \n    rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResult);\n  }\n\n","sourceOld":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"Suggester finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<SuggesterResult>();\n    NamedList response = new SimpleOrderedMap();\n    NamedList<NamedList> namedListResult = null;\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<NamedList> namedList = \n            (NamedList<NamedList>) srsp.getSolrResponse().getResponse().get(SuggesterResultLabels.SUGGEST);\n        LOG.info(srsp.getShard() + \" : \" + namedList);\n        suggesterResults.add(toSuggesterResult(namedList));\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    namedListResult = toNamedList(suggesterResult);\n      \n    response.add(SuggesterResultLabels.SUGGESTIONS, namedListResult);\n    rb.rsp.add(SuggesterResultLabels.SUGGEST, response);\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<SuggesterResult>();\n    NamedList<NamedList<Object>> namedListResult = null;\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<Object> resp;\n        if((resp = srsp.getSolrResponse().getResponse()) != null) {\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> namedList = \n              (NamedList<NamedList<Object>>) resp.get(SuggesterResultLabels.SUGGEST);\n          LOG.info(srsp.getShard() + \" : \" + namedList);\n          suggesterResults.add(toSuggesterResult(namedList));\n        }\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    namedListResult = toNamedList(suggesterResult);\n      \n    rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResult);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214b8610690edbe7e294594a7bc58a978ef1863c","date":1389376762,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<SuggesterResult>();\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<Object> resp;\n        if((resp = srsp.getSolrResponse().getResponse()) != null) {\n          @SuppressWarnings(\"unchecked\")\n          Map<String, SimpleOrderedMap<NamedList<Object>>> namedList = \n              (Map<String, SimpleOrderedMap<NamedList<Object>>>) resp.get(SuggesterResultLabels.SUGGEST);\n          LOG.info(srsp.getShard() + \" : \" + namedList);\n          suggesterResults.add(toSuggesterResult(namedList));\n        }\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n        new HashMap<String, SimpleOrderedMap<NamedList<Object>>>();\n    toNamedList(suggesterResult, namedListResults);\n    \n    rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n  }\n\n","sourceOld":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<SuggesterResult>();\n    NamedList<NamedList<Object>> namedListResult = null;\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<Object> resp;\n        if((resp = srsp.getSolrResponse().getResponse()) != null) {\n          @SuppressWarnings(\"unchecked\")\n          NamedList<NamedList<Object>> namedList = \n              (NamedList<NamedList<Object>>) resp.get(SuggesterResultLabels.SUGGEST);\n          LOG.info(srsp.getShard() + \" : \" + namedList);\n          suggesterResults.add(toSuggesterResult(namedList));\n        }\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    namedListResult = toNamedList(suggesterResult);\n      \n    rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<>();\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<Object> resp;\n        if((resp = srsp.getSolrResponse().getResponse()) != null) {\n          @SuppressWarnings(\"unchecked\")\n          Map<String, SimpleOrderedMap<NamedList<Object>>> namedList = \n              (Map<String, SimpleOrderedMap<NamedList<Object>>>) resp.get(SuggesterResultLabels.SUGGEST);\n          LOG.info(srsp.getShard() + \" : \" + namedList);\n          suggesterResults.add(toSuggesterResult(namedList));\n        }\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n        new HashMap<>();\n    toNamedList(suggesterResult, namedListResults);\n    \n    rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n  }\n\n","sourceOld":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<SuggesterResult>();\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<Object> resp;\n        if((resp = srsp.getSolrResponse().getResponse()) != null) {\n          @SuppressWarnings(\"unchecked\")\n          Map<String, SimpleOrderedMap<NamedList<Object>>> namedList = \n              (Map<String, SimpleOrderedMap<NamedList<Object>>>) resp.get(SuggesterResultLabels.SUGGEST);\n          LOG.info(srsp.getShard() + \" : \" + namedList);\n          suggesterResults.add(toSuggesterResult(namedList));\n        }\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n        new HashMap<String, SimpleOrderedMap<NamedList<Object>>>();\n    toNamedList(suggesterResult, namedListResults);\n    \n    rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<>();\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<Object> resp;\n        if((resp = srsp.getSolrResponse().getResponse()) != null) {\n          @SuppressWarnings(\"unchecked\")\n          Map<String, SimpleOrderedMap<NamedList<Object>>> namedList = \n              (Map<String, SimpleOrderedMap<NamedList<Object>>>) resp.get(SuggesterResultLabels.SUGGEST);\n          log.info(srsp.getShard() + \" : \" + namedList);\n          suggesterResults.add(toSuggesterResult(namedList));\n        }\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n        new HashMap<>();\n    toNamedList(suggesterResult, namedListResults);\n    \n    rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n  }\n\n","sourceOld":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<>();\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<Object> resp;\n        if((resp = srsp.getSolrResponse().getResponse()) != null) {\n          @SuppressWarnings(\"unchecked\")\n          Map<String, SimpleOrderedMap<NamedList<Object>>> namedList = \n              (Map<String, SimpleOrderedMap<NamedList<Object>>>) resp.get(SuggesterResultLabels.SUGGEST);\n          LOG.info(srsp.getShard() + \" : \" + namedList);\n          suggesterResults.add(toSuggesterResult(namedList));\n        }\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n        new HashMap<>();\n    toNamedList(suggesterResult, namedListResults);\n    \n    rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent finishStage with : {}\", params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<>();\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<Object> resp;\n        if((resp = srsp.getSolrResponse().getResponse()) != null) {\n          @SuppressWarnings(\"unchecked\")\n          Map<String, SimpleOrderedMap<NamedList<Object>>> namedList = \n              (Map<String, SimpleOrderedMap<NamedList<Object>>>) resp.get(SuggesterResultLabels.SUGGEST);\n          if (log.isInfoEnabled()) {\n            log.info(\"{} : {}\", srsp.getShard(), namedList);\n          }\n          suggesterResults.add(toSuggesterResult(namedList));\n        }\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n        new HashMap<>();\n    toNamedList(suggesterResult, namedListResults);\n    \n    rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n  }\n\n","sourceOld":"  /** \n   * Used in Distributed Search, merges the suggestion results from every shard\n   * */\n  @Override\n  public void finishStage(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent finishStage with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)\n      return;\n    int count = params.getInt(SUGGEST_COUNT, 1);\n    \n    List<SuggesterResult> suggesterResults = new ArrayList<>();\n    \n    // Collect Shard responses\n    for (ShardRequest sreq : rb.finished) {\n      for (ShardResponse srsp : sreq.responses) {\n        NamedList<Object> resp;\n        if((resp = srsp.getSolrResponse().getResponse()) != null) {\n          @SuppressWarnings(\"unchecked\")\n          Map<String, SimpleOrderedMap<NamedList<Object>>> namedList = \n              (Map<String, SimpleOrderedMap<NamedList<Object>>>) resp.get(SuggesterResultLabels.SUGGEST);\n          log.info(srsp.getShard() + \" : \" + namedList);\n          suggesterResults.add(toSuggesterResult(namedList));\n        }\n      }\n    }\n    \n    // Merge Shard responses\n    SuggesterResult suggesterResult = merge(suggesterResults, count);\n    Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n        new HashMap<>();\n    toNamedList(suggesterResult, namedListResults);\n    \n    rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["214b8610690edbe7e294594a7bc58a978ef1863c"],"62b8732cb451168644d19e4d6e4fcf7b07bafc3d":["7f2e96099703c24c0c63d27806ba7020626b649b"],"7f2e96099703c24c0c63d27806ba7020626b649b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"214b8610690edbe7e294594a7bc58a978ef1863c":["bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"575e66bd4b2349209027f6801184da7fc3cba13f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"bf2ccf302186b563c9549824a4d45db1e8cf8a0d":["62b8732cb451168644d19e4d6e4fcf7b07bafc3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"62b8732cb451168644d19e4d6e4fcf7b07bafc3d":["bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"7f2e96099703c24c0c63d27806ba7020626b649b":["62b8732cb451168644d19e4d6e4fcf7b07bafc3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f2e96099703c24c0c63d27806ba7020626b649b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"214b8610690edbe7e294594a7bc58a978ef1863c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf2ccf302186b563c9549824a4d45db1e8cf8a0d":["214b8610690edbe7e294594a7bc58a978ef1863c","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}