{"path":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","commits":[{"id":"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","date":1269379515,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  final void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  final void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  final void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  final void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  final void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  final void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc","date":1295002842,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        postings.docFreqs[termID]++;\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n    \n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    \n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","date":1310159023,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n        fieldState.uniqueTermCount++;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n        fieldState.uniqueTermCount++;\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n        fieldState.uniqueTermCount++;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n        fieldState.uniqueTermCount++;\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert indexOptions == IndexOptions.DOCS_ONLY || postings.docFreqs[termID] > 0;\n\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n        fieldState.uniqueTermCount++;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          writeProx(termID, fieldState.position);\n        }\n        fieldState.uniqueTermCount++;\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert omitTermFreqAndPositions || postings.docFreqs[termID] > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n        fieldState.uniqueTermCount++;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        writeProx(termID, fieldState.position);\n        fieldState.uniqueTermCount++;\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert !writeFreq || postings.docFreqs[termID] > 0;\n\n    if (!writeFreq) {\n      assert postings.docFreqs == null;\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n        fieldState.uniqueTermCount++;\n      }\n    } else if (docState.docID != postings.lastDocIDs[termID]) {\n      assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n      // Term not yet seen in the current doc but previously\n      // seen in other doc(s) since the last flush\n\n      // Now that we know doc freq for previous doc,\n      // write it & lastDocCode\n      if (1 == postings.docFreqs[termID]) {\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n      } else {\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n      }\n      postings.docFreqs[termID] = 1;\n      fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n      postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n      postings.lastDocIDs[termID] = docState.docID;\n      if (writeProx) {\n        writeProx(termID, fieldState.position);\n        if (writeOffsets) {\n          writeOffsets(termID, fieldState.offset);\n        }\n      } else {\n        assert !writeOffsets;\n      }\n      fieldState.uniqueTermCount++;\n    } else {\n      fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n      if (writeProx) {\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n      if (writeOffsets) {\n        writeOffsets(termID, postings.lastOffsets[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert indexOptions == IndexOptions.DOCS_ONLY || postings.docFreqs[termID] > 0;\n\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n        fieldState.uniqueTermCount++;\n      }\n    } else {\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == postings.docFreqs[termID])\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n        else {\n          termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n          termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n        }\n        postings.docFreqs[termID] = 1;\n        fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n        postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n        postings.lastDocIDs[termID] = docState.docID;\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          writeProx(termID, fieldState.position);\n        }\n        fieldState.uniqueTermCount++;\n      } else {\n        fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3","d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert !writeFreq || postings.docFreqs[termID] > 0;\n\n    if (!writeFreq) {\n      assert postings.docFreqs == null;\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n        fieldState.uniqueTermCount++;\n      }\n    } else if (docState.docID != postings.lastDocIDs[termID]) {\n      assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n      // Term not yet seen in the current doc but previously\n      // seen in other doc(s) since the last flush\n\n      // Now that we know doc freq for previous doc,\n      // write it & lastDocCode\n      if (1 == postings.docFreqs[termID]) {\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n      } else {\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n      }\n      postings.docFreqs[termID] = 1;\n      fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n      postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n      postings.lastDocIDs[termID] = docState.docID;\n      if (writeProx) {\n        writeProx(termID, fieldState.position);\n        if (writeOffsets) {\n          writeOffsets(termID, fieldState.offset);\n        }\n      } else {\n        assert !writeOffsets;\n      }\n      fieldState.uniqueTermCount++;\n    } else {\n      fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n      if (writeProx) {\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n      if (writeOffsets) {\n        writeOffsets(termID, postings.lastOffsets[termID]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n\n    assert !writeFreq || postings.docFreqs[termID] > 0;\n\n    if (!writeFreq) {\n      assert postings.docFreqs == null;\n      if (docState.docID != postings.lastDocIDs[termID]) {\n        assert docState.docID > postings.lastDocIDs[termID];\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        postings.lastDocCodes[termID] = docState.docID - postings.lastDocIDs[termID];\n        postings.lastDocIDs[termID] = docState.docID;\n        fieldState.uniqueTermCount++;\n      }\n    } else if (docState.docID != postings.lastDocIDs[termID]) {\n      assert docState.docID > postings.lastDocIDs[termID]:\"id: \"+docState.docID + \" postings ID: \"+ postings.lastDocIDs[termID] + \" termID: \"+termID;\n      // Term not yet seen in the current doc but previously\n      // seen in other doc(s) since the last flush\n\n      // Now that we know doc freq for previous doc,\n      // write it & lastDocCode\n      if (1 == postings.docFreqs[termID]) {\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]|1);\n      } else {\n        termsHashPerField.writeVInt(0, postings.lastDocCodes[termID]);\n        termsHashPerField.writeVInt(0, postings.docFreqs[termID]);\n      }\n      postings.docFreqs[termID] = 1;\n      fieldState.maxTermFrequency = Math.max(1, fieldState.maxTermFrequency);\n      postings.lastDocCodes[termID] = (docState.docID - postings.lastDocIDs[termID]) << 1;\n      postings.lastDocIDs[termID] = docState.docID;\n      if (writeProx) {\n        writeProx(termID, fieldState.position);\n        if (writeOffsets) {\n          writeOffsets(termID, fieldState.offset);\n        }\n      } else {\n        assert !writeOffsets;\n      }\n      fieldState.uniqueTermCount++;\n    } else {\n      fieldState.maxTermFrequency = Math.max(fieldState.maxTermFrequency, ++postings.docFreqs[termID]);\n      if (writeProx) {\n        writeProx(termID, fieldState.position-postings.lastPositions[termID]);\n      }\n      if (writeOffsets) {\n        writeOffsets(termID, postings.lastOffsets[termID]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"16843358872ed92ba92888ab99df297550b9a36a":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc","16843358872ed92ba92888ab99df297550b9a36a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["a3776dccca01c11e7046323cfad46a3b4a471233","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"16843358872ed92ba92888ab99df297550b9a36a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","a3776dccca01c11e7046323cfad46a3b4a471233"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["16843358872ed92ba92888ab99df297550b9a36a"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc":["16843358872ed92ba92888ab99df297550b9a36a","b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}