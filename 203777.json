{"path":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = currentReader.reopen(indexWriterProvider.getIndexWriter(), true);\n  \n    \n    if (newReader == currentReader) {\n      currentReader.incRef();\n    }\n    \n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true);\n  }\n\n","sourceOld":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = currentReader.reopen(indexWriterProvider.getIndexWriter(), true);\n  \n    \n    if (newReader == currentReader) {\n      currentReader.incRef();\n    }\n    \n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = currentReader.reopen(indexWriterProvider.getIndexWriter(), true);\n  \n    \n    if (newReader == currentReader) {\n      currentReader.incRef();\n    }\n    \n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true);\n  }\n\n","sourceOld":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = currentReader.reopen(indexWriterProvider.getIndexWriter(), true);\n  \n    \n    if (newReader == currentReader) {\n      currentReader.incRef();\n    }\n    \n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = currentReader.reopen(indexWriterProvider.getIndexWriter(), true);\n  \n    \n    if (newReader == currentReader) {\n      currentReader.incRef();\n    }\n    \n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true);\n  }\n\n","sourceOld":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = currentReader.reopen(indexWriterProvider.getIndexWriter(), true);\n  \n    \n    if (newReader == currentReader) {\n      currentReader.incRef();\n    }\n    \n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e","date":1313005033,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = currentReader.reopen(indexWriterProvider.getIndexWriter(core), true);\n  \n    \n    if (newReader == currentReader) {\n      currentReader.incRef();\n    }\n    \n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true);\n  }\n\n","sourceOld":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = currentReader.reopen(indexWriterProvider.getIndexWriter(), true);\n  \n    \n    if (newReader == currentReader) {\n      currentReader.incRef();\n    }\n    \n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = currentReader.reopen(indexWriterProvider.getIndexWriter(core), true);\n  \n    \n    if (newReader == currentReader) {\n      currentReader.incRef();\n    }\n\n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true, true, core.getDirectoryFactory());\n  }\n\n","sourceOld":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = currentReader.reopen(indexWriterProvider.getIndexWriter(core), true);\n  \n    \n    if (newReader == currentReader) {\n      currentReader.incRef();\n    }\n    \n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true);\n  }\n\n","bugFix":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = IndexReader.openIfChanged(currentReader, indexWriterProvider.getIndexWriter(core), true);\n  \n    \n    if (newReader == null) {\n      currentReader.incRef();\n      newReader = currentReader;\n    }\n\n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true, true, core.getDirectoryFactory());\n  }\n\n","sourceOld":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = currentReader.reopen(indexWriterProvider.getIndexWriter(core), true);\n  \n    \n    if (newReader == currentReader) {\n      currentReader.incRef();\n    }\n\n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true, true, core.getDirectoryFactory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98fa1aca20a29db3d3d1a867eeed78f65448febe","date":1317919012,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = IndexReader.openIfChanged(currentReader, solrCoreState.getIndexWriter(core), true);\n  \n    \n    if (newReader == null) {\n      currentReader.incRef();\n      newReader = currentReader;\n    }\n\n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true, true, core.getDirectoryFactory());\n  }\n\n","sourceOld":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = IndexReader.openIfChanged(currentReader, indexWriterProvider.getIndexWriter(core), true);\n  \n    \n    if (newReader == null) {\n      currentReader.incRef();\n      newReader = currentReader;\n    }\n\n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true, true, core.getDirectoryFactory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e","date":1320267737,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    // SolrCore.verbose(\"start reopen from\",previousSearcher,\"writer=\",writer);\n    newReader = IndexReader.openIfChanged(currentReader, writer, true);\n    // SolrCore.verbose(\"reopen result\", newReader);\n    \n    if (newReader == null) {\n      currentReader.incRef();\n      newReader = currentReader;\n    }\n\n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true, true, core.getDirectoryFactory());\n  }\n\n","sourceOld":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    newReader = IndexReader.openIfChanged(currentReader, solrCoreState.getIndexWriter(core), true);\n  \n    \n    if (newReader == null) {\n      currentReader.incRef();\n      newReader = currentReader;\n    }\n\n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true, true, core.getDirectoryFactory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    // SolrCore.verbose(\"start reopen from\",previousSearcher,\"writer=\",writer);\n    newReader = IndexReader.openIfChanged(currentReader, writer, true);\n    // SolrCore.verbose(\"reopen result\", newReader);\n    \n    if (newReader == null) {\n      currentReader.incRef();\n      newReader = currentReader;\n    }\n\n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true, true, core.getDirectoryFactory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    // SolrCore.verbose(\"start reopen from\",previousSearcher,\"writer=\",writer);\n    newReader = IndexReader.openIfChanged(currentReader, writer, true);\n    // SolrCore.verbose(\"reopen result\", newReader);\n    \n    if (newReader == null) {\n      currentReader.incRef();\n      newReader = currentReader;\n    }\n\n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true, true, core.getDirectoryFactory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#reopenSearcher(SolrIndexSearcher).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SolrIndexSearcher reopenSearcher(SolrIndexSearcher previousSearcher) throws IOException {\n    \n    IndexReader currentReader = previousSearcher.getIndexReader();\n    IndexReader newReader;\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    // SolrCore.verbose(\"start reopen from\",previousSearcher,\"writer=\",writer);\n    newReader = IndexReader.openIfChanged(currentReader, writer, true);\n    // SolrCore.verbose(\"reopen result\", newReader);\n    \n    if (newReader == null) {\n      currentReader.incRef();\n      newReader = currentReader;\n    }\n\n    return new SolrIndexSearcher(core, schema, \"main\", newReader, true, true, true, core.getDirectoryFactory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["c26f00b574427b55127e869b935845554afde1fa"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"98fa1aca20a29db3d3d1a867eeed78f65448febe":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["98fa1aca20a29db3d3d1a867eeed78f65448febe"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"98fa1aca20a29db3d3d1a867eeed78f65448febe":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["98fa1aca20a29db3d3d1a867eeed78f65448febe"],"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e22ffe8cc51a892ae103df018822d7873e901c2a":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}