{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.get(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.get(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.get(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.get(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.get(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.get(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.get(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1525b4dfbc0d413b8d7247da232009778e624836","date":1351101135,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":["be948e374a439077071179ec3f2edaa547064514"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56a558aa5aadd60ae850d1ab090098bc63bdfaf9","date":1355245333,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderProps(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0713b289be914e52cc2ec942aeb7306f0593a787","date":1361852996,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"108a890321e59d70c58d42b1a3fd696037547447","date":1385308380,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(\"shard1\").get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(\"shard1\");\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"072f211dfa8387028bb978d128c35bf9a450bbbf","date":1406041363,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"QTime\", SKIPVAL);\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":["be948e374a439077071179ec3f2edaa547064514"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to its own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to it's own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to its own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrClient client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to its own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrServer client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to its own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrClient client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to its own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrClient client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"072f211dfa8387028bb978d128c35bf9a450bbbf":["108a890321e59d70c58d42b1a3fd696037547447"],"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"fa64435b5902ce266c23755a4a00691a3285dab8":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"0713b289be914e52cc2ec942aeb7306f0593a787":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"bafca15d8e408346a67f4282ad1143b88023893b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["1525b4dfbc0d413b8d7247da232009778e624836"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"108a890321e59d70c58d42b1a3fd696037547447":["0713b289be914e52cc2ec942aeb7306f0593a787"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["0713b289be914e52cc2ec942aeb7306f0593a787","108a890321e59d70c58d42b1a3fd696037547447"],"f2126b84bd093fa3d921582a109a0ee578c28126":["fa64435b5902ce266c23755a4a00691a3285dab8","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"1525b4dfbc0d413b8d7247da232009778e624836":["fa64435b5902ce266c23755a4a00691a3285dab8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"072f211dfa8387028bb978d128c35bf9a450bbbf":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa64435b5902ce266c23755a4a00691a3285dab8":["f2126b84bd093fa3d921582a109a0ee578c28126","1525b4dfbc0d413b8d7247da232009778e624836"],"0713b289be914e52cc2ec942aeb7306f0593a787":["108a890321e59d70c58d42b1a3fd696037547447","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["bafca15d8e408346a67f4282ad1143b88023893b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"108a890321e59d70c58d42b1a3fd696037547447":["072f211dfa8387028bb978d128c35bf9a450bbbf","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0713b289be914e52cc2ec942aeb7306f0593a787"],"1525b4dfbc0d413b8d7247da232009778e624836":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["fa64435b5902ce266c23755a4a00691a3285dab8","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}