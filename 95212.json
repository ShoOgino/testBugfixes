{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()));\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()));\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()));\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()));\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()));\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()));\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8797b4584f9c10520b8f985903790413b682f776","date":1288950293,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsWriter#testTermVectorCorruption3().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = newField(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testTermVectorCorruption3().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1168\n  public void testTermVectorCorruption3() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n            IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergeScheduler(\n            new SerialMergeScheduler()).setMergePolicy(new LogDocMergePolicy()));\n\n    Document document = new Document();\n\n    document = new Document();\n    Field storedField = new Field(\"stored\", \"stored\", Field.Store.YES,\n                                  Field.Index.NO);\n    document.add(storedField);\n    Field termVectorField = new Field(\"termVector\", \"termVector\",\n                                      Field.Store.NO, Field.Index.NOT_ANALYZED,\n                                      Field.TermVector.WITH_POSITIONS_OFFSETS);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++)\n      writer.addDocument(document);\n    writer.close();\n\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setMaxBufferedDocs(2)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(\n            new LogDocMergePolicy()));\n    for(int i=0;i<6;i++)\n      writer.addDocument(document);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    for(int i=0;i<10;i++) {\n      reader.getTermFreqVectors(i);\n      reader.document(i);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8797b4584f9c10520b8f985903790413b682f776":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["132903c28af3aa6f67284b78de91c0f0a99488c2","8797b4584f9c10520b8f985903790413b682f776"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","8797b4584f9c10520b8f985903790413b682f776"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8797b4584f9c10520b8f985903790413b682f776"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8797b4584f9c10520b8f985903790413b682f776":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["8797b4584f9c10520b8f985903790413b682f776","85a883878c0af761245ab048babc63d099f835f3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}