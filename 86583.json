{"path":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(String,String,float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(String,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#addField(String,String,float).mjava","sourceNew":"  /**\n   * Add the Field and value to the document with the specified boost, invoking the copyField mechanism\n   * @param name The name of the field.\n   * @param val The value to add\n   * @param boost The boost\n   *\n   * @see #addField(String, String)\n   * @see #addField(org.apache.solr.schema.SchemaField, String, float)\n   * @see #addSingleField(org.apache.solr.schema.SchemaField, String, float)\n   *\n   */\n  public void addField(String name, String val, float boost) {\n    SchemaField sfield = schema.getFieldOrNull(name);\n    if (sfield != null) {\n      addField(sfield,val,boost);\n    }\n\n    // Check if we should copy this field to any other fields.\n    // This could happen whether it is explicit or not.\n    final List<CopyField> copyFields = schema.getCopyFieldsList(name);\n    if (copyFields != null) {\n      for(CopyField cf : copyFields) {\n        addSingleField(cf.getDestination(), cf.getLimitedValue( val ), boost);\n      }\n    }\n\n    // error if this field name doesn't match anything\n    if (sfield==null && (copyFields==null || copyFields.size()==0)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" + name + \"'\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Add the Field and value to the document with the specified boost, invoking the copyField mechanism\n   * @param name The name of the field.\n   * @param val The value to add\n   * @param boost The boost\n   *\n   * @see #addField(String, String)\n   * @see #addField(org.apache.solr.schema.SchemaField, String, float)\n   * @see #addSingleField(org.apache.solr.schema.SchemaField, String, float)\n   *\n   */\n  public void addField(String name, String val, float boost) {\n    SchemaField sfield = schema.getFieldOrNull(name);\n    if (sfield != null) {\n      addField(sfield,val,boost);\n    }\n\n    // Check if we should copy this field to any other fields.\n    // This could happen whether it is explicit or not.\n    final List<CopyField> copyFields = schema.getCopyFieldsList(name);\n    if (copyFields != null) {\n      for(CopyField cf : copyFields) {\n        addSingleField(cf.getDestination(), cf.getLimitedValue( val ), boost);\n      }\n    }\n\n    // error if this field name doesn't match anything\n    if (sfield==null && (copyFields==null || copyFields.size()==0)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" + name + \"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(String,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#addField(String,String,float).mjava","sourceNew":"  /**\n   * Add the Field and value to the document with the specified boost, invoking the copyField mechanism\n   * @param name The name of the field.\n   * @param val The value to add\n   * @param boost The boost\n   *\n   * @see #addField(String, String)\n   * @see #addField(org.apache.solr.schema.SchemaField, String, float)\n   * @see #addSingleField(org.apache.solr.schema.SchemaField, String, float)\n   *\n   */\n  public void addField(String name, String val, float boost) {\n    SchemaField sfield = schema.getFieldOrNull(name);\n    if (sfield != null) {\n      addField(sfield,val,boost);\n    }\n\n    // Check if we should copy this field to any other fields.\n    // This could happen whether it is explicit or not.\n    final List<CopyField> copyFields = schema.getCopyFieldsList(name);\n    if (copyFields != null) {\n      for(CopyField cf : copyFields) {\n        addSingleField(cf.getDestination(), cf.getLimitedValue( val ), boost);\n      }\n    }\n\n    // error if this field name doesn't match anything\n    if (sfield==null && (copyFields==null || copyFields.size()==0)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" + name + \"'\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Add the Field and value to the document with the specified boost, invoking the copyField mechanism\n   * @param name The name of the field.\n   * @param val The value to add\n   * @param boost The boost\n   *\n   * @see #addField(String, String)\n   * @see #addField(org.apache.solr.schema.SchemaField, String, float)\n   * @see #addSingleField(org.apache.solr.schema.SchemaField, String, float)\n   *\n   */\n  public void addField(String name, String val, float boost) {\n    SchemaField sfield = schema.getFieldOrNull(name);\n    if (sfield != null) {\n      addField(sfield,val,boost);\n    }\n\n    // Check if we should copy this field to any other fields.\n    // This could happen whether it is explicit or not.\n    final List<CopyField> copyFields = schema.getCopyFieldsList(name);\n    if (copyFields != null) {\n      for(CopyField cf : copyFields) {\n        addSingleField(cf.getDestination(), cf.getLimitedValue( val ), boost);\n      }\n    }\n\n    // error if this field name doesn't match anything\n    if (sfield==null && (copyFields==null || copyFields.size()==0)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" + name + \"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(String,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#addField(String,String,float).mjava","sourceNew":"  /**\n   * Add the Field and value to the document with the specified boost, invoking the copyField mechanism\n   * @param name The name of the field.\n   * @param val The value to add\n   * @param boost The boost\n   *\n   * @see #addField(String, String)\n   * @see #addField(org.apache.solr.schema.SchemaField, String, float)\n   * @see #addSingleField(org.apache.solr.schema.SchemaField, String, float)\n   *\n   */\n  public void addField(String name, String val, float boost) {\n    SchemaField sfield = schema.getFieldOrNull(name);\n    if (sfield != null) {\n      addField(sfield,val,boost);\n    }\n\n    // Check if we should copy this field to any other fields.\n    // This could happen whether it is explicit or not.\n    final List<CopyField> copyFields = schema.getCopyFieldsList(name);\n    if (copyFields != null) {\n      for(CopyField cf : copyFields) {\n        addSingleField(cf.getDestination(), cf.getLimitedValue( val ), boost);\n      }\n    }\n\n    // error if this field name doesn't match anything\n    if (sfield==null && (copyFields==null || copyFields.size()==0)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" + name + \"'\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Add the Field and value to the document with the specified boost, invoking the copyField mechanism\n   * @param name The name of the field.\n   * @param val The value to add\n   * @param boost The boost\n   *\n   * @see #addField(String, String)\n   * @see #addField(org.apache.solr.schema.SchemaField, String, float)\n   * @see #addSingleField(org.apache.solr.schema.SchemaField, String, float)\n   *\n   */\n  public void addField(String name, String val, float boost) {\n    SchemaField sfield = schema.getFieldOrNull(name);\n    if (sfield != null) {\n      addField(sfield,val,boost);\n    }\n\n    // Check if we should copy this field to any other fields.\n    // This could happen whether it is explicit or not.\n    final List<CopyField> copyFields = schema.getCopyFieldsList(name);\n    if (copyFields != null) {\n      for(CopyField cf : copyFields) {\n        addSingleField(cf.getDestination(), cf.getLimitedValue( val ), boost);\n      }\n    }\n\n    // error if this field name doesn't match anything\n    if (sfield==null && (copyFields==null || copyFields.size()==0)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" + name + \"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addField(String,String,float).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add the Field and value to the document with the specified boost, invoking the copyField mechanism\n   * @param name The name of the field.\n   * @param val The value to add\n   * @param boost The boost\n   *\n   * @see #addField(String, String)\n   * @see #addField(org.apache.solr.schema.SchemaField, String, float)\n   * @see #addSingleField(org.apache.solr.schema.SchemaField, String, float)\n   *\n   */\n  public void addField(String name, String val, float boost) {\n    SchemaField sfield = schema.getFieldOrNull(name);\n    if (sfield != null) {\n      addField(sfield,val,boost);\n    }\n\n    // Check if we should copy this field to any other fields.\n    // This could happen whether it is explicit or not.\n    final List<CopyField> copyFields = schema.getCopyFieldsList(name);\n    if (copyFields != null) {\n      for(CopyField cf : copyFields) {\n        addSingleField(cf.getDestination(), cf.getLimitedValue( val ), boost);\n      }\n    }\n\n    // error if this field name doesn't match anything\n    if (sfield==null && (copyFields==null || copyFields.size()==0)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR:unknown field '\" + name + \"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}