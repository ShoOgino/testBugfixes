{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","commits":[{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new SlowFuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new FuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new FuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new FuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.shutdown();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new SlowFuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new SlowFuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new SlowFuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.shutdown();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new SlowFuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new SlowFuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new SlowFuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":null,"sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new SlowFuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":null,"sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new SlowFuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":null,"sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new SlowFuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery#testTokenLengthOpt().mjava","sourceNew":null,"sourceOld":"  public void testTokenLengthOpt() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    addDoc(\"12345678911\", writer);\n    addDoc(\"segment\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    Query query;\n    // term not over 10 chars, so optimization shortcuts\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234569\"), 0.9f);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"1234567891\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    // over 10 chars, so no optimization\n    query = new SlowFuzzyQuery(new Term(\"field\", \"12345678911\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // over 10 chars, no match\n    query = new SlowFuzzyQuery(new Term(\"field\", \"sdfsdfsdfsdf\"), 0.9f);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","89424def13674ea17829b41c5883c54ecc31a132"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}