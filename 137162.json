{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter, prefixLen)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter, prefixLen)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n                                                new BytesRef(categoryPath.toString(delimiter, prefixLen)),\n                                                false);\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter, prefixLen)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n                                                new BytesRef(categoryPath.toString(delimiter, prefixLen)),\n                                                false);\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n        new BytesRef(categoryPath.toString(delimiter, prefixLen)));\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#findCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n                                                new BytesRef(categoryPath.toString(delimiter, prefixLen)),\n                                                false);\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","sourceOld":"  /**\n   * Look up the given prefix of the given category in the cache and/or the\n   * on-disk storage, returning that prefix's ordinal, or a negative number in\n   * case the category does not yet exist in the taxonomy.\n   */\n  private int findCategory(CategoryPath categoryPath, int prefixLen)\n  throws IOException {\n    int res = cache.get(categoryPath, prefixLen);\n    if (res >= 0) {\n      return res;\n    }\n    if (cacheIsComplete) {\n      return -1;\n    }\n    cacheMisses++;\n    if (perhapsFillCache()) {\n      return cache.get(categoryPath, prefixLen);\n    }\n    if (reader == null) {\n      reader = openReader();\n    }\n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    DocsEnum docs = MultiFields.getTermDocsEnum(reader, liveDocs, Consts.FULL, \n                                                new BytesRef(categoryPath.toString(delimiter, prefixLen)),\n                                                false);\n    if (docs == null || docs.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return -1; // category does not exist in taxonomy\n    }\n    addToCache(categoryPath, prefixLen, docs.docID());\n    return docs.docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}