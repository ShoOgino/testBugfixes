{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#sampleTest(ModifiableSolrParams,String).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#sampleTest(ModifiableSolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  private void sampleTest(ModifiableSolrParams paramsLoc, String url) throws IOException {\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n    Map ks = (Map) tuples.get(0).get(\"ks\");\n    Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n    Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n    assertTrue(out.size() == 250);\n    Number pvalue = (Number) ks.get(\"p-value\");\n    Number pvalue2 = (Number) ks2.get(\"p-value\");\n    Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n    assertTrue(pvalue.doubleValue() > .05D);\n    assertTrue(pvalue2.doubleValue() == 0);\n    assertTrue(pvalue3.doubleValue() > .05D);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#sampleTest(ModifiableSolrParams,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#sampleTest(ModifiableSolrParams,String).mjava","sourceNew":"  private void sampleTest(ModifiableSolrParams paramsLoc, String url) throws IOException {\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map ks = (Map) tuples.get(0).get(\"ks\");\n    @SuppressWarnings({\"rawtypes\"})\n    Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n    @SuppressWarnings({\"rawtypes\"})\n    Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n    assertTrue(out.size() == 250);\n    Number pvalue = (Number) ks.get(\"p-value\");\n    Number pvalue2 = (Number) ks2.get(\"p-value\");\n    Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n    assertTrue(pvalue.doubleValue() > .05D);\n    assertTrue(pvalue2.doubleValue() == 0);\n    assertTrue(pvalue3.doubleValue() > .05D);\n  }\n\n","sourceOld":"  private void sampleTest(ModifiableSolrParams paramsLoc, String url) throws IOException {\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n    Map ks = (Map) tuples.get(0).get(\"ks\");\n    Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n    Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n    assertTrue(out.size() == 250);\n    Number pvalue = (Number) ks.get(\"p-value\");\n    Number pvalue2 = (Number) ks2.get(\"p-value\");\n    Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n    assertTrue(pvalue.doubleValue() > .05D);\n    assertTrue(pvalue2.doubleValue() == 0);\n    assertTrue(pvalue3.doubleValue() > .05D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}