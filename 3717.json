{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeOnGetReader().mjava","commits":[{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMergeOnGetReader().mjava","pathOld":"/dev/null","sourceNew":"  // Test basic semantics of merge on getReader\n  public void testMergeOnGetReader() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter firstWriter = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(NoMergePolicy.INSTANCE));\n    for (int i = 0; i < 5; i++) {\n      TestIndexWriter.addDoc(firstWriter);\n      firstWriter.flush();\n    }\n    DirectoryReader firstReader = DirectoryReader.open(firstWriter);\n    assertEquals(5, firstReader.leaves().size());\n    firstReader.close();\n    firstWriter.close(); // When this writer closes, it does not merge on commit.\n\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(new MergeOnXMergePolicy(newMergePolicy(), MergeTrigger.GET_READER)).setMaxFullFlushMergeWaitMillis(Integer.MAX_VALUE);\n\n    IndexWriter writerWithMergePolicy = new IndexWriter(dir, iwc);\n\n    try (DirectoryReader unmergedReader =  DirectoryReader.open(dir)) { // No changes. GetReader doesn't trigger a merge.\n      assertEquals(5, unmergedReader.leaves().size());\n    }\n\n    TestIndexWriter.addDoc(writerWithMergePolicy);\n    try (DirectoryReader mergedReader =  writerWithMergePolicy.getReader()) {\n      // Doc added, do merge on getReader.\n      assertEquals(1, mergedReader.leaves().size());\n    }\n\n    writerWithMergePolicy.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}