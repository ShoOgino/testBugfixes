{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int).mjava","commits":[{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int).mjava","sourceNew":"  @Override\n  public boolean score(LeafCollector collector, int max) throws IOException {\n\n    boolean more;\n    Bucket tmp;\n    FakeScorer fs = new FakeScorer();\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(fs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max) {\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            fs.score = (float) (current.score * coordFactors[current.coord]);\n            fs.doc = current.doc;\n            fs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        if (sub.more) {\n          sub.more = sub.scorer.score(sub.collector, end);\n          more |= sub.more;\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean score(Collector collector, int max) throws IOException {\n\n    boolean more;\n    Bucket tmp;\n    FakeScorer fs = new FakeScorer();\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(fs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max) {\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            fs.score = (float) (current.score * coordFactors[current.coord]);\n            fs.doc = current.doc;\n            fs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        if (sub.more) {\n          sub.more = sub.scorer.score(sub.collector, end);\n          more |= sub.more;\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int).mjava","sourceNew":"  @Override\n  public boolean score(LeafCollector collector, int max) throws IOException {\n\n    boolean more;\n    Bucket tmp;\n    FakeScorer fs = new FakeScorer();\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(fs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max) {\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            fs.score = (float) (current.score * coordFactors[current.coord]);\n            fs.doc = current.doc;\n            fs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        if (sub.more) {\n          sub.more = sub.scorer.score(sub.collector, end);\n          more |= sub.more;\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean score(Collector collector, int max) throws IOException {\n\n    boolean more;\n    Bucket tmp;\n    FakeScorer fs = new FakeScorer();\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(fs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max) {\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            fs.score = (float) (current.score * coordFactors[current.coord]);\n            fs.doc = current.doc;\n            fs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        if (sub.more) {\n          sub.more = sub.scorer.score(sub.collector, end);\n          more |= sub.more;\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cf15d89c400585df630cb62449fb4d6cb58434f","date":1397643074,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int).mjava","sourceNew":"  @Override\n  public boolean score(LeafCollector collector, int max) throws IOException {\n\n    boolean more;\n    Bucket tmp;\n    FakeScorer fs = new FakeScorer();\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(fs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0 &&\n            (requiredNrMatchers == 0 || (current.bits & REQUIRED_MASK) == REQUIRED_MASK)) {\n\n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max) {\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch + requiredNrMatchers) {\n            fs.score = (float) (current.score * coordFactors[current.coord]);\n            fs.doc = current.doc;\n            fs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        if (sub.more) {\n          sub.more = sub.scorer.score(sub.collector, end);\n          more |= sub.more;\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean score(LeafCollector collector, int max) throws IOException {\n\n    boolean more;\n    Bucket tmp;\n    FakeScorer fs = new FakeScorer();\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(fs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max) {\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            fs.score = (float) (current.score * coordFactors[current.coord]);\n            fs.doc = current.doc;\n            fs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        if (sub.more) {\n          sub.more = sub.scorer.score(sub.collector, end);\n          more |= sub.more;\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"158bf4b301557fdddcd1f665fa0700b7f19678d0","date":1397643258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int).mjava","sourceNew":"  @Override\n  public boolean score(LeafCollector collector, int max) throws IOException {\n\n    boolean more;\n    Bucket tmp;\n    FakeScorer fs = new FakeScorer();\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(fs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max) {\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            fs.score = (float) (current.score * coordFactors[current.coord]);\n            fs.doc = current.doc;\n            fs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        if (sub.more) {\n          sub.more = sub.scorer.score(sub.collector, end);\n          more |= sub.more;\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean score(LeafCollector collector, int max) throws IOException {\n\n    boolean more;\n    Bucket tmp;\n    FakeScorer fs = new FakeScorer();\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(fs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0 &&\n            (requiredNrMatchers == 0 || (current.bits & REQUIRED_MASK) == REQUIRED_MASK)) {\n\n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max) {\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch + requiredNrMatchers) {\n            fs.score = (float) (current.score * coordFactors[current.coord]);\n            fs.doc = current.doc;\n            fs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        if (sub.more) {\n          sub.more = sub.scorer.score(sub.collector, end);\n          more |= sub.more;\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int).mjava","sourceNew":"  @Override\n  public boolean score(LeafCollector collector, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    for (int docBase = this.max & ~MASK; docBase < max; docBase += SIZE) {\n      if (scoreWindow(collector, docBase, max) == false) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean score(LeafCollector collector, int max) throws IOException {\n\n    boolean more;\n    Bucket tmp;\n    FakeScorer fs = new FakeScorer();\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(fs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // NOTE: Lucene always passes max =\n          // Integer.MAX_VALUE today, because we never embed\n          // a BooleanScorer inside another (even though\n          // that should work)... but in theory an outside\n          // app could pass a different max so we must check\n          // it:\n          if (current.doc >= max) {\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            fs.score = (float) (current.score * coordFactors[current.coord]);\n            fs.doc = current.doc;\n            fs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        if (sub.more) {\n          sub.more = sub.scorer.score(sub.collector, end);\n          more |= sub.more;\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e166cc9c5f45f78a8dd02332b5ac100221063fd8","date":1421678965,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean score(LeafCollector collector, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    for (int docBase = this.max & ~MASK; docBase < max; docBase += SIZE) {\n      if (scoreWindow(collector, docBase, max) == false) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cf15d89c400585df630cb62449fb4d6cb58434f":["ae73da626f97850c922c42736f808d0378e165f0"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"158bf4b301557fdddcd1f665fa0700b7f19678d0":["0cf15d89c400585df630cb62449fb4d6cb58434f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["158bf4b301557fdddcd1f665fa0700b7f19678d0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"]},"commit2Childs":{"0cf15d89c400585df630cb62449fb4d6cb58434f":["158bf4b301557fdddcd1f665fa0700b7f19678d0"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"158bf4b301557fdddcd1f665fa0700b7f19678d0":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"ae73da626f97850c922c42736f808d0378e165f0":["0cf15d89c400585df630cb62449fb4d6cb58434f","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}