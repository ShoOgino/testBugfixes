{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","sourceNew":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","sourceOld":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","sourceNew":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","sourceOld":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","sourceNew":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null, false);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null, false);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null, false);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","sourceOld":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","sourceNew":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null, false);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null, false);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null, false);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","sourceOld":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null, false);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null, false);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null, false);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db96734b79e26d948b59f68bd4564c4836a71acf":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db96734b79e26d948b59f68bd4564c4836a71acf"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"db96734b79e26d948b59f68bd4564c4836a71acf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["db96734b79e26d948b59f68bd4564c4836a71acf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}