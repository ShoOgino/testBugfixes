{"path":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","commits":[{"id":"26bd56bd7f06194390617d646d6b9a24a7a472dd","date":1420576157,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setup() {\n    metrics = new Metrics();\n    BufferStore.initNewBuffer(blockSize, blockSize, metrics);\n    store = BufferStore.instance(blockSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    metrics = new Metrics();\n    SolrMetricManager metricManager = new SolrMetricManager();\n    String registry = TestUtil.randomSimpleString(random(), 2, 10);\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    metrics.initializeMetrics(metricManager, registry, scope);\n    metricsMap = (MetricsMap) metricManager.registry(registry).getMetrics().get(\"CACHE.\" + scope + \".hdfsBlockCache\");\n    BufferStore.initNewBuffer(blockSize, blockSize, metrics);\n    store = BufferStore.instance(blockSize);\n  }\n\n","sourceOld":"  @Before\n  public void setup() {\n    metrics = new Metrics();\n    BufferStore.initNewBuffer(blockSize, blockSize, metrics);\n    store = BufferStore.instance(blockSize);\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    metrics = new Metrics();\n    SolrMetricManager metricManager = new SolrMetricManager();\n    String registry = TestUtil.randomSimpleString(random(), 2, 10);\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    metrics.initializeMetrics(metricManager, registry, scope);\n    metricsMap = (MetricsMap) metricManager.registry(registry).getMetrics().get(\"CACHE.\" + scope + \".hdfsBlockCache\");\n    BufferStore.initNewBuffer(blockSize, blockSize, metrics);\n    store = BufferStore.instance(blockSize);\n  }\n\n","sourceOld":"  @Before\n  public void setup() {\n    metrics = new Metrics();\n    BufferStore.initNewBuffer(blockSize, blockSize, metrics);\n    store = BufferStore.instance(blockSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    metrics = new Metrics();\n    SolrMetricManager metricManager = new SolrMetricManager();\n    String registry = TestUtil.randomSimpleString(random(), 2, 10);\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    metrics.initializeMetrics(metricManager, registry, \"foo\", scope);\n    metricsMap = (MetricsMap) ((SolrMetricManager.GaugeWrapper)metricManager.registry(registry).getMetrics().get(\"CACHE.\" + scope + \".hdfsBlockCache\")).getGauge();\n    BufferStore.initNewBuffer(blockSize, blockSize, metrics);\n    store = BufferStore.instance(blockSize);\n  }\n\n","sourceOld":"  @Before\n  public void setup() {\n    metrics = new Metrics();\n    SolrMetricManager metricManager = new SolrMetricManager();\n    String registry = TestUtil.randomSimpleString(random(), 2, 10);\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    metrics.initializeMetrics(metricManager, registry, scope);\n    metricsMap = (MetricsMap) metricManager.registry(registry).getMetrics().get(\"CACHE.\" + scope + \".hdfsBlockCache\");\n    BufferStore.initNewBuffer(blockSize, blockSize, metrics);\n    store = BufferStore.instance(blockSize);\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    metrics = new Metrics();\n    SolrMetricManager metricManager = new SolrMetricManager();\n    String registry = TestUtil.randomSimpleString(random(), 2, 10);\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    metrics.initializeMetrics(metricManager, registry, \"foo\", scope);\n    metricsMap = (MetricsMap) ((SolrMetricManager.GaugeWrapper)metricManager.registry(registry).getMetrics().get(\"CACHE.\" + scope + \".hdfsBlockCache\")).getGauge();\n    BufferStore.initNewBuffer(blockSize, blockSize, metrics);\n    store = BufferStore.instance(blockSize);\n  }\n\n","sourceOld":"  @Before\n  public void setup() {\n    metrics = new Metrics();\n    SolrMetricManager metricManager = new SolrMetricManager();\n    String registry = TestUtil.randomSimpleString(random(), 2, 10);\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    metrics.initializeMetrics(metricManager, registry, scope);\n    metricsMap = (MetricsMap) metricManager.registry(registry).getMetrics().get(\"CACHE.\" + scope + \".hdfsBlockCache\");\n    BufferStore.initNewBuffer(blockSize, blockSize, metrics);\n    store = BufferStore.instance(blockSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/blockcache/BufferStoreTest#setup().mjava","sourceNew":"  @Before\n  public void setup() {\n    metrics = new Metrics();\n    SolrMetricManager metricManager = new SolrMetricManager();\n    String registry = TestUtil.randomSimpleString(random(), 2, 10);\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    metrics.initializeMetrics(solrMetricsContext, scope);\n    metricsMap = (MetricsMap) ((SolrMetricManager.GaugeWrapper)metricManager.registry(registry).getMetrics().get(\"CACHE.\" + scope + \".hdfsBlockCache\")).getGauge();\n    BufferStore.initNewBuffer(blockSize, blockSize, metrics);\n    store = BufferStore.instance(blockSize);\n  }\n\n","sourceOld":"  @Before\n  public void setup() {\n    metrics = new Metrics();\n    SolrMetricManager metricManager = new SolrMetricManager();\n    String registry = TestUtil.randomSimpleString(random(), 2, 10);\n    String scope = TestUtil.randomSimpleString(random(), 2, 10);\n    metrics.initializeMetrics(metricManager, registry, \"foo\", scope);\n    metricsMap = (MetricsMap) ((SolrMetricManager.GaugeWrapper)metricManager.registry(registry).getMetrics().get(\"CACHE.\" + scope + \".hdfsBlockCache\")).getGauge();\n    BufferStore.initNewBuffer(blockSize, blockSize, metrics);\n    store = BufferStore.instance(blockSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["43564cbb30b064675027cfb569564e8531096e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"26bd56bd7f06194390617d646d6b9a24a7a472dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"26bd56bd7f06194390617d646d6b9a24a7a472dd":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}