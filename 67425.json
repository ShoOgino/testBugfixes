{"path":"solr/core/src/java/org/apache/solr/rest/ManagedResource#buildMapToStore(Object).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResource#buildMapToStore(Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds the JSON object to be stored, containing initArgs and managed data fields. \n   */\n  protected Map<String,Object> buildMapToStore(Object managedData) {\n    Map<String,Object> toStore = new LinkedHashMap<>();\n    toStore.put(INIT_ARGS_JSON_FIELD, convertNamedListToMap(managedInitArgs));\n    \n    // report important dates when data was init'd / updated\n    toStore.put(INITIALIZED_ON_JSON_FIELD, getInitializedOn());\n    \n    // if the managed data has been updated since initialization (ie. it's dirty)\n    // return that in the response as well ... which gives a good hint that the\n    // client needs to re-load the collection / core to apply the updates\n    if (hasChangesSinceInitialization()) {\n      toStore.put(UPDATED_SINCE_INIT_JSON_FIELD, getUpdatedSinceInitialization());\n    }\n    \n    if (managedData != null) {\n      if (managedData instanceof List || managedData instanceof Set) {\n        toStore.put(MANAGED_JSON_LIST_FIELD, managedData);            \n      } else if (managedData instanceof Map) {\n        toStore.put(MANAGED_JSON_MAP_FIELD, managedData);      \n      } else {\n        throw new IllegalArgumentException(\n            \"Invalid managed data type \"+managedData.getClass().getName()+\n            \"! Only List, Set, or Map objects are supported by this ManagedResource!\");\n      }      \n    }\n    \n    return toStore;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637230d0125f5aa153298289322945139167ef76","date":1404226166,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResource#buildMapToStore(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResource#buildMapToStore(Object).mjava","sourceNew":"  /**\n   * Builds the JSON object to be stored, containing initArgs and managed data fields. \n   */\n  protected Map<String,Object> buildMapToStore(Object managedData) {\n    Map<String,Object> toStore = new LinkedHashMap<>();\n    toStore.put(INIT_ARGS_JSON_FIELD, convertNamedListToMap(managedInitArgs));\n    \n    // report important dates when data was init'd / updated\n    String initializedOnStr = getInitializedOn();\n    if (initializedOnStr != null) {\n      toStore.put(INITIALIZED_ON_JSON_FIELD, initializedOnStr);\n    }\n    \n    // if the managed data has been updated since initialization (ie. it's dirty)\n    // return that in the response as well ... which gives a good hint that the\n    // client needs to re-load the collection / core to apply the updates\n    if (hasChangesSinceInitialization()) {\n      toStore.put(UPDATED_SINCE_INIT_JSON_FIELD, getUpdatedSinceInitialization());\n    }\n    \n    if (managedData != null) {\n      if (managedData instanceof List || managedData instanceof Set) {\n        toStore.put(MANAGED_JSON_LIST_FIELD, managedData);            \n      } else if (managedData instanceof Map) {\n        toStore.put(MANAGED_JSON_MAP_FIELD, managedData);      \n      } else {\n        throw new IllegalArgumentException(\n            \"Invalid managed data type \"+managedData.getClass().getName()+\n            \"! Only List, Set, or Map objects are supported by this ManagedResource!\");\n      }      \n    }\n    \n    return toStore;\n  }\n\n","sourceOld":"  /**\n   * Builds the JSON object to be stored, containing initArgs and managed data fields. \n   */\n  protected Map<String,Object> buildMapToStore(Object managedData) {\n    Map<String,Object> toStore = new LinkedHashMap<>();\n    toStore.put(INIT_ARGS_JSON_FIELD, convertNamedListToMap(managedInitArgs));\n    \n    // report important dates when data was init'd / updated\n    toStore.put(INITIALIZED_ON_JSON_FIELD, getInitializedOn());\n    \n    // if the managed data has been updated since initialization (ie. it's dirty)\n    // return that in the response as well ... which gives a good hint that the\n    // client needs to re-load the collection / core to apply the updates\n    if (hasChangesSinceInitialization()) {\n      toStore.put(UPDATED_SINCE_INIT_JSON_FIELD, getUpdatedSinceInitialization());\n    }\n    \n    if (managedData != null) {\n      if (managedData instanceof List || managedData instanceof Set) {\n        toStore.put(MANAGED_JSON_LIST_FIELD, managedData);            \n      } else if (managedData instanceof Map) {\n        toStore.put(MANAGED_JSON_MAP_FIELD, managedData);      \n      } else {\n        throw new IllegalArgumentException(\n            \"Invalid managed data type \"+managedData.getClass().getName()+\n            \"! Only List, Set, or Map objects are supported by this ManagedResource!\");\n      }      \n    }\n    \n    return toStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6aa3e82d4adf483b74e6a0b236daff41f928603","date":1453307739,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResource#buildMapToStore(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResource#buildMapToStore(Object).mjava","sourceNew":"  /**\n   * Builds the JSON object to be stored, containing initArgs and managed data fields. \n   */\n  protected Map<String,Object> buildMapToStore(Object managedData) {\n    Map<String,Object> toStore = new LinkedHashMap<>(4, 1.0f);\n    toStore.put(INIT_ARGS_JSON_FIELD, convertNamedListToMap(managedInitArgs));\n    \n    // report important dates when data was init'd / updated\n    String initializedOnStr = getInitializedOn();\n    if (initializedOnStr != null) {\n      toStore.put(INITIALIZED_ON_JSON_FIELD, initializedOnStr);\n    }\n    \n    // if the managed data has been updated since initialization (ie. it's dirty)\n    // return that in the response as well ... which gives a good hint that the\n    // client needs to re-load the collection / core to apply the updates\n    if (hasChangesSinceInitialization()) {\n      toStore.put(UPDATED_SINCE_INIT_JSON_FIELD, getUpdatedSinceInitialization());\n    }\n    \n    if (managedData != null) {\n      if (managedData instanceof List || managedData instanceof Set) {\n        toStore.put(MANAGED_JSON_LIST_FIELD, managedData);            \n      } else if (managedData instanceof Map) {\n        toStore.put(MANAGED_JSON_MAP_FIELD, managedData);      \n      } else {\n        throw new IllegalArgumentException(\n            \"Invalid managed data type \"+managedData.getClass().getName()+\n            \"! Only List, Set, or Map objects are supported by this ManagedResource!\");\n      }      \n    }\n    \n    return toStore;\n  }\n\n","sourceOld":"  /**\n   * Builds the JSON object to be stored, containing initArgs and managed data fields. \n   */\n  protected Map<String,Object> buildMapToStore(Object managedData) {\n    Map<String,Object> toStore = new LinkedHashMap<>();\n    toStore.put(INIT_ARGS_JSON_FIELD, convertNamedListToMap(managedInitArgs));\n    \n    // report important dates when data was init'd / updated\n    String initializedOnStr = getInitializedOn();\n    if (initializedOnStr != null) {\n      toStore.put(INITIALIZED_ON_JSON_FIELD, initializedOnStr);\n    }\n    \n    // if the managed data has been updated since initialization (ie. it's dirty)\n    // return that in the response as well ... which gives a good hint that the\n    // client needs to re-load the collection / core to apply the updates\n    if (hasChangesSinceInitialization()) {\n      toStore.put(UPDATED_SINCE_INIT_JSON_FIELD, getUpdatedSinceInitialization());\n    }\n    \n    if (managedData != null) {\n      if (managedData instanceof List || managedData instanceof Set) {\n        toStore.put(MANAGED_JSON_LIST_FIELD, managedData);            \n      } else if (managedData instanceof Map) {\n        toStore.put(MANAGED_JSON_MAP_FIELD, managedData);      \n      } else {\n        throw new IllegalArgumentException(\n            \"Invalid managed data type \"+managedData.getClass().getName()+\n            \"! Only List, Set, or Map objects are supported by this ManagedResource!\");\n      }      \n    }\n    \n    return toStore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"637230d0125f5aa153298289322945139167ef76":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"c6aa3e82d4adf483b74e6a0b236daff41f928603":["637230d0125f5aa153298289322945139167ef76"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c6aa3e82d4adf483b74e6a0b236daff41f928603"]},"commit2Childs":{"637230d0125f5aa153298289322945139167ef76":["c6aa3e82d4adf483b74e6a0b236daff41f928603"],"c6aa3e82d4adf483b74e6a0b236daff41f928603":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["637230d0125f5aa153298289322945139167ef76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}