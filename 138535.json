{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","commits":[{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader().mjava","sourceNew":"  private void initXpathReader(VariableResolver resolver) {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader() {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : TemplateString.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","pathOld":"/dev/null","sourceNew":"  private void initXpathReader(VariableResolver resolver) {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","sourceNew":"  private void initXpathReader(VariableResolver resolver) {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader(VariableResolver resolver) {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<String>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<String>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0428b9e5eb6ff76866de67d9bb57efef95ef23ef","date":1477560144,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","sourceNew":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader(VariableResolver resolver) {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","sourceNew":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader(VariableResolver resolver) {\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","sourceNew":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        log.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        LOG.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        log.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.emptyList() : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        log.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","sourceNew":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        log.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        log.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.emptyList() : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","sourceNew":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        if (log.isInfoEnabled()) {\n          log.info(\"Using xslTransformer: {}\", xslTransformer.getClass().getName());\n        }\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        log.info(\"Using xslTransformer: \"\n                        + xslTransformer.getClass().getName());\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","sourceNew":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        if (log.isInfoEnabled()) {\n          log.info(\"Using xslTransformer: {}\", xslTransformer.getClass().getName());\n        }\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    @SuppressWarnings({\"unchecked\"})\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        if (log.isInfoEnabled()) {\n          log.info(\"Using xslTransformer: {}\", xslTransformer.getClass().getName());\n        }\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3adc4d119a7deba35b2721853853464857d9d0a9","date":1594608068,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","sourceNew":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        if (log.isInfoEnabled()) {\n          log.info(\"Using xslTransformer: {}\", xslTransformer.getClass().getName());\n        }\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.emptyList() : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","sourceOld":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        if (log.isInfoEnabled()) {\n          log.info(\"Using xslTransformer: {}\", xslTransformer.getClass().getName());\n        }\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    @SuppressWarnings({\"unchecked\"})\n    List<String> l = url == null ? Collections.EMPTY_LIST : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#initXpathReader(VariableResolver).mjava","sourceNew":null,"sourceOld":"  private void initXpathReader(VariableResolver resolver) {\n    reinitXPathReader = false;\n    useSolrAddXml = Boolean.parseBoolean(context\n            .getEntityAttribute(USE_SOLR_ADD_SCHEMA));\n    streamRows = Boolean.parseBoolean(context\n            .getEntityAttribute(STREAM));\n    if (context.getResolvedEntityAttribute(\"batchSize\") != null) {\n      blockingQueueSize = Integer.parseInt(context.getEntityAttribute(\"batchSize\"));\n    }\n    if (context.getResolvedEntityAttribute(\"readTimeOut\") != null) {\n      blockingQueueTimeOut = Integer.parseInt(context.getEntityAttribute(\"readTimeOut\"));\n    }\n    String xslt = context.getEntityAttribute(XSL);\n    if (xslt != null) {\n      xslt = context.replaceTokens(xslt);\n      try {\n        // create an instance of TransformerFactory\n        TransformerFactory transFact = TransformerFactory.newInstance();\n        final SolrCore core = context.getSolrCore();\n        final StreamSource xsltSource;\n        if (core != null) {\n          final ResourceLoader loader = core.getResourceLoader();\n          transFact.setURIResolver(new SystemIdResolver(loader).asURIResolver());\n          xsltSource = new StreamSource(loader.openResource(xslt),\n            SystemIdResolver.createSystemIdFromResourceName(xslt));\n        } else {\n          // fallback for tests\n          xsltSource = new StreamSource(xslt);\n        }\n        transFact.setErrorListener(xmllog);\n        try {\n          xslTransformer = transFact.newTransformer(xsltSource);\n        } finally {\n          // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n          IOUtils.closeQuietly(xsltSource.getInputStream());\n        }\n        if (log.isInfoEnabled()) {\n          log.info(\"Using xslTransformer: {}\", xslTransformer.getClass().getName());\n        }\n      } catch (Exception e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Error initializing XSL \", e);\n      }\n    }\n\n    if (useSolrAddXml) {\n      // Support solr add documents\n      xpathReader = new XPathRecordReader(\"/add/doc\");\n      xpathReader.addField(\"name\", \"/add/doc/field/@name\", true);\n      xpathReader.addField(\"value\", \"/add/doc/field\", true);\n    } else {\n      String forEachXpath = context.getResolvedEntityAttribute(FOR_EACH);\n      if (forEachXpath == null)\n        throw new DataImportHandlerException(SEVERE,\n                \"Entity : \" + context.getEntityAttribute(\"name\")\n                        + \" must have a 'forEach' attribute\");\n      if (forEachXpath.equals(context.getEntityAttribute(FOR_EACH))) reinitXPathReader = true;\n\n      try {\n        xpathReader = new XPathRecordReader(forEachXpath);\n        for (Map<String, String> field : context.getAllEntityFields()) {\n          if (field.get(XPATH) == null)\n            continue;\n          int flags = 0;\n          if (\"true\".equals(field.get(\"flatten\"))) {\n            flags = XPathRecordReader.FLATTEN;\n          }\n          String xpath = field.get(XPATH);\n          xpath = context.replaceTokens(xpath);\n          //!xpath.equals(field.get(XPATH) means the field xpath has a template\n          //in that case ensure that the XPathRecordReader is reinitialized\n          //for each xml\n          if (!xpath.equals(field.get(XPATH)) && !context.isRootEntity()) reinitXPathReader = true;\n          xpathReader.addField(field.get(DataImporter.COLUMN),\n                  xpath,\n                  Boolean.parseBoolean(field.get(DataImporter.MULTI_VALUED)),\n                  flags);\n        }\n      } catch (RuntimeException e) {\n        throw new DataImportHandlerException(SEVERE,\n                \"Exception while reading xpaths for fields\", e);\n      }\n    }\n    String url = context.getEntityAttribute(URL);\n    List<String> l = url == null ? Collections.emptyList() : resolver.getVariables(url);\n    for (String s : l) {\n      if (s.startsWith(entityName + \".\")) {\n        if (placeHolderVariables == null)\n          placeHolderVariables = new ArrayList<>();\n        placeHolderVariables.add(s.substring(entityName.length() + 1));\n      }\n    }\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      if (fld.get(COMMON_FIELD) != null && \"true\".equals(fld.get(COMMON_FIELD))) {\n        if (commonFields == null)\n          commonFields = new ArrayList<>();\n        commonFields.add(fld.get(DataImporter.COLUMN));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"024e13388acbf5562fcbb77a129620982a5e2d79":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c7b0ae5716b6c2044195a818e9ae58205175659"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["3adc4d119a7deba35b2721853853464857d9d0a9"],"3adc4d119a7deba35b2721853853464857d9d0a9":["024e13388acbf5562fcbb77a129620982a5e2d79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0428b9e5eb6ff76866de67d9bb57efef95ef23ef"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"0428b9e5eb6ff76866de67d9bb57efef95ef23ef":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["0428b9e5eb6ff76866de67d9bb57efef95ef23ef"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","0428b9e5eb6ff76866de67d9bb57efef95ef23ef"],"024e13388acbf5562fcbb77a129620982a5e2d79":["3adc4d119a7deba35b2721853853464857d9d0a9"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3adc4d119a7deba35b2721853853464857d9d0a9":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"0428b9e5eb6ff76866de67d9bb57efef95ef23ef":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}