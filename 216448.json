{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","commits":[{"id":"688f23c47b3d5b61d795e3042013aa908716c068","date":1449761553,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\");\n        cloudSolrClient.connect();\n        downconfig(cloudSolrClient, cli.getOptionValue(\"confname\"), cli.getOptionValue(\"confdir\"));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\");\n        cloudSolrClient.connect();\n        downconfig(cloudSolrClient, cli.getOptionValue(\"confname\"), cli.getOptionValue(\"confdir\"));\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\");\n        cloudSolrClient.connect();\n        downconfig(cloudSolrClient, cli.getOptionValue(\"confname\"), cli.getOptionValue(\"confdir\"));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\");\n        cloudSolrClient.connect();\n        downconfig(cloudSolrClient, cli.getOptionValue(\"confname\"), cli.getOptionValue(\"confdir\"));\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\");\n        cloudSolrClient.connect();\n        downconfig(cloudSolrClient, cli.getOptionValue(\"confname\"), cli.getOptionValue(\"confdir\"));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\");\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\");\n        cloudSolrClient.connect();\n        downconfig(cloudSolrClient, cli.getOptionValue(\"confname\"), cli.getOptionValue(\"confdir\"));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\");\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\");\n        cloudSolrClient.connect();\n        downconfig(cloudSolrClient, cli.getOptionValue(\"confname\"), cli.getOptionValue(\"confdir\"));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","date":1503399053,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\");\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echo(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\");\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: {}\", e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigSetDownloadTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: \", e);\n        throw (e);\n      }\n\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = getZkHost(cli);\n      if (zkHost == null) {\n        throw new IllegalStateException(\"Solr at \" + cli.getOptionValue(\"solrUrl\") +\n            \" is running in standalone server mode, downconfig can only be used when running in SolrCloud mode.\\n\");\n      }\n\n\n      try (SolrZkClient zkClient = new SolrZkClient(zkHost, 30000)) {\n        echoIfVerbose(\"\\nConnecting to ZooKeeper at \" + zkHost + \" ...\", cli);\n        String confName = cli.getOptionValue(\"confname\");\n        String confDir = cli.getOptionValue(\"confdir\");\n        Path configSetPath = Paths.get(confDir);\n        // we try to be nice about having the \"conf\" in the directory, and we create it if it's not there.\n        if (configSetPath.endsWith(\"/conf\") == false) {\n          configSetPath = Paths.get(configSetPath.toString(), \"conf\");\n        }\n        if (Files.exists(configSetPath) == false) {\n          Files.createDirectories(configSetPath);\n        }\n        echo(\"Downloading configset \" + confName + \" from ZooKeeper at \" + zkHost +\n            \" to directory \" + configSetPath.toAbsolutePath());\n\n        zkClient.downConfig(confName, configSetPath);\n      } catch (Exception e) {\n        log.error(\"Could not complete downconfig operation for reason: {}\", e.getMessage());\n        throw (e);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["688f23c47b3d5b61d795e3042013aa908716c068"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"688f23c47b3d5b61d795e3042013aa908716c068":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["688f23c47b3d5b61d795e3042013aa908716c068","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["54faedfb0e03479a38f5ee82f2dfaeea536e9404","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"688f23c47b3d5b61d795e3042013aa908716c068":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3a7809d1d753b67f48b1a706e17034bf8b624ea3","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["688f23c47b3d5b61d795e3042013aa908716c068"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["b79a5db147a1c6f95d1625ddbc3561ef56955225","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}