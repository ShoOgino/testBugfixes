{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["c5c06a413042e52dc241808ed12b0a1324acaffd"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b97002ca487af397e493405ced0c73acdabd86ca","date":1453103304,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertFalse(\"negative score for \" + sim, score < 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n      assertFalse(\"nan score for \" + sim, Float.isNaN(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["c5c06a413042e52dc241808ed12b0a1324acaffd"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // historically this was a problem, but sim's no longer have to score terms that dont exist\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertFalse(\"negative score for \" + sim, score < 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n      assertFalse(\"nan score for \" + sim, Float.isNaN(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertFalse(\"negative score for \" + sim, score < 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n      assertFalse(\"nan score for \" + sim, Float.isNaN(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["c5c06a413042e52dc241808ed12b0a1324acaffd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // historically this was a problem, but sim's no longer have to score terms that dont exist\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits.value);\n      float score = td.scoreDocs[0].score;\n      assertFalse(\"negative score for \" + sim, score < 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n      assertFalse(\"nan score for \" + sim, Float.isNaN(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // historically this was a problem, but sim's no longer have to score terms that dont exist\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertFalse(\"negative score for \" + sim, score < 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n      assertFalse(\"nan score for \" + sim, Float.isNaN(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b97002ca487af397e493405ced0c73acdabd86ca":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["b97002ca487af397e493405ced0c73acdabd86ca"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b97002ca487af397e493405ced0c73acdabd86ca"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b97002ca487af397e493405ced0c73acdabd86ca":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}