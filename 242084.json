{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  // Note that the methods calling addCategoryDocument() are synchornized,\n  // so this method is effectively synchronized as well, but we'll add\n  // synchronized to be on the safe side, and we can reuse class-local objects\n  // instead of allocating them every time\n  protected synchronized int addCategoryDocument(CategoryPath categoryPath,\n                                                  int length, int parent)\n      throws CorruptIndexException, IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(parent+1);\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    addToCache(categoryPath, length, id);\n\n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","sourceOld":"  // Note that the methods calling addCategoryDocument() are synchornized,\n  // so this method is effectively synchronized as well, but we'll add\n  // synchronized to be on the safe side, and we can reuse class-local objects\n  // instead of allocating them every time\n  protected synchronized int addCategoryDocument(CategoryPath categoryPath,\n                                                  int length, int parent)\n      throws CorruptIndexException, IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(parent+1);\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    addToCache(categoryPath, length, id);\n\n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"533890d1266aa8169162ec556395d0c5d0377566","date":1337173867,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(parent + 1);\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    addToCache(categoryPath, length, id);\n\n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","sourceOld":"  // Note that the methods calling addCategoryDocument() are synchornized,\n  // so this method is effectively synchronized as well, but we'll add\n  // synchronized to be on the safe side, and we can reuse class-local objects\n  // instead of allocating them every time\n  protected synchronized int addCategoryDocument(CategoryPath categoryPath,\n                                                  int length, int parent)\n      throws CorruptIndexException, IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(parent+1);\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    addToCache(categoryPath, length, id);\n\n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(parent + 1);\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    addToCache(categoryPath, length, id);\n\n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","sourceOld":"  // Note that the methods calling addCategoryDocument() are synchornized,\n  // so this method is effectively synchronized as well, but we'll add\n  // synchronized to be on the safe side, and we can reuse class-local objects\n  // instead of allocating them every time\n  protected synchronized int addCategoryDocument(CategoryPath categoryPath,\n                                                  int length, int parent)\n      throws CorruptIndexException, IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(parent+1);\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    addToCache(categoryPath, length, id);\n\n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5f000280bc18391509bbb40c4a2a2c7515d54d3","date":1339339354,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    addToCache(categoryPath, length, id);\n\n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(parent + 1);\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    addToCache(categoryPath, length, id);\n\n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b7a1bc6030c258e47d63eff3455a2b1bbf32683","date":1339494023,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    addToCache(categoryPath, length, id);\n    \n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    addToCache(categoryPath, length, id);\n\n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52ea8b7f80d4a0600efc9765dc896387008ebd4","date":1340109038,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    addToCache(categoryPath, length, id);\n    \n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    addToCache(categoryPath, length, id);\n    \n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":["209b03e6aa9098ac043cc757e46f758400427b15"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    addToCache(categoryPath, length, id);\n    \n    // also add to the parent array\n    parentArray = getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    addToCache(categoryPath, length, id);\n    \n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    addToCache(categoryPath, length, id);\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    addToCache(categoryPath, length, id);\n    \n    // also add to the parent array\n    parentArray = getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"209b03e6aa9098ac043cc757e46f758400427b15","date":1355045906,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    // NOTE: this line must be executed last, or else the cache gets updated\n    // before the parents array (LUCENE-4596)\n    addToCache(categoryPath, length, id);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    addToCache(categoryPath, length, id);\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    return id;\n  }\n\n","bugFix":["b52ea8b7f80d4a0600efc9765dc896387008ebd4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    // NOTE: this line must be executed last, or else the cache gets updated\n    // before the parents array (LUCENE-4596)\n    addToCache(categoryPath, length, id);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    addToCache(categoryPath, length, id);\n    \n    // also add to the parent array\n    getParentArray().add(id, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent + 1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    // NOTE: this line must be executed last, or else the cache gets updated\n    // before the parents array (LUCENE-4596)\n    addToCache(categoryPath, id);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    // NOTE: this line must be executed last, or else the cache gets updated\n    // before the parents array (LUCENE-4596)\n    addToCache(categoryPath, length, id);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategoryDocument(CategoryPath,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Note that the methods calling addCategoryDocument() are synchornized, so\n   * this method is effectively synchronized as well.\n   */\n  private int addCategoryDocument(CategoryPath categoryPath, int length,\n      int parent) throws IOException {\n    // Before Lucene 2.9, position increments >=0 were supported, so we\n    // added 1 to parent to allow the parent -1 (the parent of the root).\n    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is\n    // no longer enough, since 0 is not encoded consistently either (see\n    // comment in SinglePositionTokenStream). But because we must be\n    // backward-compatible with existing indexes, we can't just fix what\n    // we write here (e.g., to write parent+2), and need to do a workaround\n    // in the reader (which knows that anyway only category 0 has a parent\n    // -1).    \n    parentStream.set(Math.max(parent+1, 1));\n    Document d = new Document();\n    d.add(parentStreamField);\n\n    fullPathField.setStringValue(categoryPath.toString(delimiter, length));\n    d.add(fullPathField);\n\n    // Note that we do no pass an Analyzer here because the fields that are\n    // added to the Document are untokenized or contains their own TokenStream.\n    // Therefore the IndexWriter's Analyzer has no effect.\n    indexWriter.addDocument(d);\n    int id = nextID++;\n\n    // added a category document, mark that ReaderManager is not up-to-date\n    shouldRefreshReaderManager = true;\n    \n    // also add to the parent array\n    taxoArrays = getTaxoArrays().add(id, parent);\n\n    // NOTE: this line must be executed last, or else the cache gets updated\n    // before the parents array (LUCENE-4596)\n    addToCache(categoryPath, length, id);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"c5f000280bc18391509bbb40c4a2a2c7515d54d3":["533890d1266aa8169162ec556395d0c5d0377566"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b52ea8b7f80d4a0600efc9765dc896387008ebd4","209b03e6aa9098ac043cc757e46f758400427b15"],"3d58d08788c3fd51172ba34474cca42499d6391b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["b52ea8b7f80d4a0600efc9765dc896387008ebd4"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["209b03e6aa9098ac043cc757e46f758400427b15"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"209b03e6aa9098ac043cc757e46f758400427b15":["3d58d08788c3fd51172ba34474cca42499d6391b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52ea8b7f80d4a0600efc9765dc896387008ebd4":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["c5f000280bc18391509bbb40c4a2a2c7515d54d3"],"533890d1266aa8169162ec556395d0c5d0377566":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ef0d8a69209261514c5739c770bba706c2308450":["b89678825b68eccaf09e6ab71675fc0b0af1e099","533890d1266aa8169162ec556395d0c5d0377566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c5f000280bc18391509bbb40c4a2a2c7515d54d3":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"3d58d08788c3fd51172ba34474cca42499d6391b":["209b03e6aa9098ac043cc757e46f758400427b15"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["3d58d08788c3fd51172ba34474cca42499d6391b"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["533890d1266aa8169162ec556395d0c5d0377566","ef0d8a69209261514c5739c770bba706c2308450"],"209b03e6aa9098ac043cc757e46f758400427b15":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b52ea8b7f80d4a0600efc9765dc896387008ebd4":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["b52ea8b7f80d4a0600efc9765dc896387008ebd4"],"533890d1266aa8169162ec556395d0c5d0377566":["c5f000280bc18391509bbb40c4a2a2c7515d54d3","ef0d8a69209261514c5739c770bba706c2308450"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}