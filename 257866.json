{"path":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","commits":[{"id":"ab10d7c14ce9f8db61956611a57a5a377362a633","date":1413903184,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate().mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(\"path\");\n      if(UpdateRequestHandler.DOC_PATH.equals(path) ||   \"false\".equals( req.getParams().get(\"json.command\"))){\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while( ev != JSONParser.EOF ) {\n\n        switch( ev )\n        {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            String v = parser.getString();\n            if( v.equals( UpdateRequestHandler.ADD ) ) {\n              int ev2 = parser.nextEvent();\n              if (ev2 == JSONParser.OBJECT_START) {\n                processor.processAdd( parseAdd() );\n              } else if (ev2 == JSONParser.ARRAY_START) {\n                handleAdds();\n              } else {\n                assertEvent(ev2, JSONParser.OBJECT_START);\n              }\n            }\n            else if( v.equals( UpdateRequestHandler.COMMIT ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.OPTIMIZE ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.DELETE ) ) {\n              handleDeleteCommand();\n            }\n            else if( v.equals( UpdateRequestHandler.ROLLBACK ) ) {\n              processor.processRollback( parseRollback() );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n            }\n            break;\n          }\n          // fall through\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n        case JSONParser.BOOLEAN:\n        case JSONParser.NULL:\n          log.info( \"can't have a value here! \"\n              +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n\n        case JSONParser.OBJECT_START:\n        case JSONParser.OBJECT_END:\n        case JSONParser.ARRAY_END:\n          break;\n\n        default:\n          log.info(\"Noggit UNKNOWN_EVENT_ID:\"+ev);\n          break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate() throws IOException\n    {\n      String path = (String) req.getContext().get(\"path\");\n      if(UpdateRequestHandler.DOC_PATH.equals(path) ||   \"false\".equals( req.getParams().get(\"json.command\"))){\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split,f);\n        return;\n      }\n      int ev = parser.nextEvent();\n      while( ev != JSONParser.EOF ) {\n        \n        switch( ev )\n        {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n  \n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            String v = parser.getString();\n            if( v.equals( UpdateRequestHandler.ADD ) ) {\n              int ev2 = parser.nextEvent();\n              if (ev2 == JSONParser.OBJECT_START) {\n                processor.processAdd( parseAdd() );\n              } else if (ev2 == JSONParser.ARRAY_START) {\n                handleAdds();\n              } else {\n                assertEvent(ev2, JSONParser.OBJECT_START);\n              }\n            }\n            else if( v.equals( UpdateRequestHandler.COMMIT ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.OPTIMIZE ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.DELETE ) ) {\n              handleDeleteCommand();\n            }\n            else if( v.equals( UpdateRequestHandler.ROLLBACK ) ) {\n              processor.processRollback( parseRollback() );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n            }\n            break;\n          }\n          // fall through\n  \n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n        case JSONParser.BOOLEAN:\n        case JSONParser.NULL:\n          log.info( \"can't have a value here! \"\n              +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n          \n        case JSONParser.OBJECT_START:\n        case JSONParser.OBJECT_END:\n        case JSONParser.ARRAY_END:\n          break;\n          \n        default:\n          log.info(\"Noggit UNKNOWN_EVENT_ID:\"+ev);\n          break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate().mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(\"path\");\n      if(UpdateRequestHandler.DOC_PATH.equals(path) ||   \"false\".equals( req.getParams().get(\"json.command\"))){\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while( ev != JSONParser.EOF ) {\n\n        switch( ev )\n        {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            String v = parser.getString();\n            if( v.equals( UpdateRequestHandler.ADD ) ) {\n              int ev2 = parser.nextEvent();\n              if (ev2 == JSONParser.OBJECT_START) {\n                processor.processAdd( parseAdd() );\n              } else if (ev2 == JSONParser.ARRAY_START) {\n                handleAdds();\n              } else {\n                assertEvent(ev2, JSONParser.OBJECT_START);\n              }\n            }\n            else if( v.equals( UpdateRequestHandler.COMMIT ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.OPTIMIZE ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.DELETE ) ) {\n              handleDeleteCommand();\n            }\n            else if( v.equals( UpdateRequestHandler.ROLLBACK ) ) {\n              processor.processRollback( parseRollback() );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n            }\n            break;\n          }\n          // fall through\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n        case JSONParser.BOOLEAN:\n        case JSONParser.NULL:\n          log.info( \"can't have a value here! \"\n              +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n\n        case JSONParser.OBJECT_START:\n        case JSONParser.OBJECT_END:\n        case JSONParser.ARRAY_END:\n          break;\n\n        default:\n          log.info(\"Noggit UNKNOWN_EVENT_ID:\"+ev);\n          break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate() throws IOException\n    {\n      String path = (String) req.getContext().get(\"path\");\n      if(UpdateRequestHandler.DOC_PATH.equals(path) ||   \"false\".equals( req.getParams().get(\"json.command\"))){\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split,f);\n        return;\n      }\n      int ev = parser.nextEvent();\n      while( ev != JSONParser.EOF ) {\n        \n        switch( ev )\n        {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n  \n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            String v = parser.getString();\n            if( v.equals( UpdateRequestHandler.ADD ) ) {\n              int ev2 = parser.nextEvent();\n              if (ev2 == JSONParser.OBJECT_START) {\n                processor.processAdd( parseAdd() );\n              } else if (ev2 == JSONParser.ARRAY_START) {\n                handleAdds();\n              } else {\n                assertEvent(ev2, JSONParser.OBJECT_START);\n              }\n            }\n            else if( v.equals( UpdateRequestHandler.COMMIT ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.OPTIMIZE ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.DELETE ) ) {\n              handleDeleteCommand();\n            }\n            else if( v.equals( UpdateRequestHandler.ROLLBACK ) ) {\n              processor.processRollback( parseRollback() );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n            }\n            break;\n          }\n          // fall through\n  \n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n        case JSONParser.BOOLEAN:\n        case JSONParser.NULL:\n          log.info( \"can't have a value here! \"\n              +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n          \n        case JSONParser.OBJECT_START:\n        case JSONParser.OBJECT_END:\n        case JSONParser.ARRAY_END:\n          break;\n          \n        default:\n          log.info(\"Noggit UNKNOWN_EVENT_ID:\"+ev);\n          break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a63f62e9f506b7a15c76fddc8ad5f22112070c2","date":1423521689,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(\"path\");\n      if(UpdateRequestHandler.DOC_PATH.equals(path) ||   \"false\".equals( req.getParams().get(\"json.command\"))){\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while( ev != JSONParser.EOF ) {\n\n        switch( ev )\n        {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            String v = parser.getString();\n            if( v.equals( UpdateRequestHandler.ADD ) ) {\n              int ev2 = parser.nextEvent();\n              if (ev2 == JSONParser.OBJECT_START) {\n                processor.processAdd( parseAdd() );\n              } else if (ev2 == JSONParser.ARRAY_START) {\n                handleAdds();\n              } else {\n                assertEvent(ev2, JSONParser.OBJECT_START);\n              }\n            }\n            else if( v.equals( UpdateRequestHandler.COMMIT ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.OPTIMIZE ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.DELETE ) ) {\n              handleDeleteCommand();\n            }\n            else if( v.equals( UpdateRequestHandler.ROLLBACK ) ) {\n              processor.processRollback( parseRollback() );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\"+v+\"' at [\"+parser.getPosition()+\"]\" );\n            }\n            break;\n          }\n          // fall through\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n        case JSONParser.BOOLEAN:\n        case JSONParser.NULL:\n          log.info( \"Can't have a value here. Unexpected \"\n              +JSONParser.getEventString(ev)+\" at [\"+parser.getPosition()+\"]\" );\n\n        case JSONParser.OBJECT_START:\n        case JSONParser.OBJECT_END:\n        case JSONParser.ARRAY_END:\n          break;\n\n        default:\n          log.info(\"Noggit UNKNOWN_EVENT_ID: \"+ev);\n          break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(\"path\");\n      if(UpdateRequestHandler.DOC_PATH.equals(path) ||   \"false\".equals( req.getParams().get(\"json.command\"))){\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while( ev != JSONParser.EOF ) {\n\n        switch( ev )\n        {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            String v = parser.getString();\n            if( v.equals( UpdateRequestHandler.ADD ) ) {\n              int ev2 = parser.nextEvent();\n              if (ev2 == JSONParser.OBJECT_START) {\n                processor.processAdd( parseAdd() );\n              } else if (ev2 == JSONParser.ARRAY_START) {\n                handleAdds();\n              } else {\n                assertEvent(ev2, JSONParser.OBJECT_START);\n              }\n            }\n            else if( v.equals( UpdateRequestHandler.COMMIT ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.OPTIMIZE ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.DELETE ) ) {\n              handleDeleteCommand();\n            }\n            else if( v.equals( UpdateRequestHandler.ROLLBACK ) ) {\n              processor.processRollback( parseRollback() );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \"+v+\" [\"+parser.getPosition()+\"]\" );\n            }\n            break;\n          }\n          // fall through\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n        case JSONParser.BOOLEAN:\n        case JSONParser.NULL:\n          log.info( \"can't have a value here! \"\n              +JSONParser.getEventString(ev)+\" \"+parser.getPosition() );\n\n        case JSONParser.OBJECT_START:\n        case JSONParser.OBJECT_END:\n        case JSONParser.ARRAY_END:\n          break;\n\n        default:\n          log.info(\"Noggit UNKNOWN_EVENT_ID:\"+ev);\n          break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f5f8e831e266692b649e39dad7a64f525aa6d21","date":1427506910,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(\"path\");\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(\"path\");\n      if(UpdateRequestHandler.DOC_PATH.equals(path) ||   \"false\".equals( req.getParams().get(\"json.command\"))){\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while( ev != JSONParser.EOF ) {\n\n        switch( ev )\n        {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            String v = parser.getString();\n            if( v.equals( UpdateRequestHandler.ADD ) ) {\n              int ev2 = parser.nextEvent();\n              if (ev2 == JSONParser.OBJECT_START) {\n                processor.processAdd( parseAdd() );\n              } else if (ev2 == JSONParser.ARRAY_START) {\n                handleAdds();\n              } else {\n                assertEvent(ev2, JSONParser.OBJECT_START);\n              }\n            }\n            else if( v.equals( UpdateRequestHandler.COMMIT ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.OPTIMIZE ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.DELETE ) ) {\n              handleDeleteCommand();\n            }\n            else if( v.equals( UpdateRequestHandler.ROLLBACK ) ) {\n              processor.processRollback( parseRollback() );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\"+v+\"' at [\"+parser.getPosition()+\"]\" );\n            }\n            break;\n          }\n          // fall through\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n        case JSONParser.BOOLEAN:\n        case JSONParser.NULL:\n          log.info( \"Can't have a value here. Unexpected \"\n              +JSONParser.getEventString(ev)+\" at [\"+parser.getPosition()+\"]\" );\n\n        case JSONParser.OBJECT_START:\n        case JSONParser.OBJECT_END:\n        case JSONParser.ARRAY_END:\n          break;\n\n        default:\n          log.info(\"Noggit UNKNOWN_EVENT_ID: \"+ev);\n          break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(\"path\");\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(\"path\");\n      if(UpdateRequestHandler.DOC_PATH.equals(path) ||   \"false\".equals( req.getParams().get(\"json.command\"))){\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while( ev != JSONParser.EOF ) {\n\n        switch( ev )\n        {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n        case JSONParser.STRING:\n          if( parser.wasKey() ) {\n            String v = parser.getString();\n            if( v.equals( UpdateRequestHandler.ADD ) ) {\n              int ev2 = parser.nextEvent();\n              if (ev2 == JSONParser.OBJECT_START) {\n                processor.processAdd( parseAdd() );\n              } else if (ev2 == JSONParser.ARRAY_START) {\n                handleAdds();\n              } else {\n                assertEvent(ev2, JSONParser.OBJECT_START);\n              }\n            }\n            else if( v.equals( UpdateRequestHandler.COMMIT ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req,  false );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.OPTIMIZE ) ) {\n              CommitUpdateCommand cmd = new CommitUpdateCommand(req, true );\n              cmd.waitSearcher = true;\n              parseCommitOptions( cmd );\n              processor.processCommit( cmd );\n            }\n            else if( v.equals( UpdateRequestHandler.DELETE ) ) {\n              handleDeleteCommand();\n            }\n            else if( v.equals( UpdateRequestHandler.ROLLBACK ) ) {\n              processor.processRollback( parseRollback() );\n            }\n            else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\"+v+\"' at [\"+parser.getPosition()+\"]\" );\n            }\n            break;\n          }\n          // fall through\n\n        case JSONParser.LONG:\n        case JSONParser.NUMBER:\n        case JSONParser.BIGNUMBER:\n        case JSONParser.BOOLEAN:\n        case JSONParser.NULL:\n          log.info( \"Can't have a value here. Unexpected \"\n              +JSONParser.getEventString(ev)+\" at [\"+parser.getPosition()+\"]\" );\n\n        case JSONParser.OBJECT_START:\n        case JSONParser.OBJECT_END:\n        case JSONParser.ARRAY_END:\n          break;\n\n        default:\n          log.info(\"Noggit UNKNOWN_EVENT_ID: \"+ev);\n          break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(\"path\");\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(\"path\");\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e08e2b6886d78c91752d82ea2b436c4324cd55","date":1464786234,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String childSplit = req.getParams().get(\"child.split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, childSplit, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f7ea4eee5babadf4129bfa5fbae964738cd7c","date":1464787051,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String childSplit = req.getParams().get(\"child.split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, childSplit, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String childSplit = req.getParams().get(\"child.split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, childSplit, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String childSplit = req.getParams().get(\"child.split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, childSplit, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d9512babbd72795eb013cdd392dad2e2b2313e","date":1465331500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String childSplit = req.getParams().get(\"child.split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, childSplit, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#processUpdate(Reader).mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            if (log.isInfoEnabled()) {\n              log.info(\"Can't have a value here. Unexpected {} at [{}]\"\n                  , JSONParser.getEventString(ev), parser.getPosition());\n            }\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: {}\", ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    void processUpdate(Reader reader) throws IOException {\n      String path = (String) req.getContext().get(PATH);\n      if (UpdateRequestHandler.DOC_PATH.equals(path) || \"false\".equals(req.getParams().get(\"json.command\"))) {\n        String split = req.getParams().get(\"split\");\n        String[] f = req.getParams().getParams(\"f\");\n        handleSplitMode(split, f, reader);\n        return;\n      }\n      parser = new JSONParser(reader);\n      int ev = parser.nextEvent();\n      while (ev != JSONParser.EOF) {\n\n        switch (ev) {\n          case JSONParser.ARRAY_START:\n            handleAdds();\n            break;\n\n          case JSONParser.STRING:\n            if (parser.wasKey()) {\n              String v = parser.getString();\n              if (v.equals(UpdateRequestHandler.ADD)) {\n                int ev2 = parser.nextEvent();\n                if (ev2 == JSONParser.OBJECT_START) {\n                  processor.processAdd(parseAdd());\n                } else if (ev2 == JSONParser.ARRAY_START) {\n                  handleAdds();\n                } else {\n                  assertEvent(ev2, JSONParser.OBJECT_START);\n                }\n              } else if (v.equals(UpdateRequestHandler.COMMIT)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, false);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.OPTIMIZE)) {\n                CommitUpdateCommand cmd = new CommitUpdateCommand(req, true);\n                cmd.waitSearcher = true;\n                parseCommitOptions(cmd);\n                processor.processCommit(cmd);\n              } else if (v.equals(UpdateRequestHandler.DELETE)) {\n                handleDeleteCommand();\n              } else if (v.equals(UpdateRequestHandler.ROLLBACK)) {\n                processor.processRollback(parseRollback());\n              } else {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command '\" + v + \"' at [\" + parser.getPosition() + \"]\");\n              }\n              break;\n            }\n            // fall through\n\n          case JSONParser.LONG:\n          case JSONParser.NUMBER:\n          case JSONParser.BIGNUMBER:\n          case JSONParser.BOOLEAN:\n          case JSONParser.NULL:\n            log.info(\"Can't have a value here. Unexpected \"\n                + JSONParser.getEventString(ev) + \" at [\" + parser.getPosition() + \"]\");\n\n          case JSONParser.OBJECT_START:\n          case JSONParser.OBJECT_END:\n          case JSONParser.ARRAY_END:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID: \" + ev);\n            break;\n        }\n        // read the next event\n        ev = parser.nextEvent();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"575e66bd4b2349209027f6801184da7fc3cba13f":["d8d9512babbd72795eb013cdd392dad2e2b2313e"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["1390137e395d2f07f9ba5b8c43d293befe84d563","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["1390137e395d2f07f9ba5b8c43d293befe84d563","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"d8d9512babbd72795eb013cdd392dad2e2b2313e":["b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["2a63f62e9f506b7a15c76fddc8ad5f22112070c2","6f5f8e831e266692b649e39dad7a64f525aa6d21"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab10d7c14ce9f8db61956611a57a5a377362a633"],"6f5f8e831e266692b649e39dad7a64f525aa6d21":["2a63f62e9f506b7a15c76fddc8ad5f22112070c2"],"ab10d7c14ce9f8db61956611a57a5a377362a633":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["6f5f8e831e266692b649e39dad7a64f525aa6d21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"2a63f62e9f506b7a15c76fddc8ad5f22112070c2":["ab10d7c14ce9f8db61956611a57a5a377362a633"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["1390137e395d2f07f9ba5b8c43d293befe84d563","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["d8d9512babbd72795eb013cdd392dad2e2b2313e","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"d8d9512babbd72795eb013cdd392dad2e2b2313e":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"6f5f8e831e266692b649e39dad7a64f525aa6d21":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"ab10d7c14ce9f8db61956611a57a5a377362a633":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2a63f62e9f506b7a15c76fddc8ad5f22112070c2"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","5b8ee93140fd0efef7e101786e3ed5160a700b5f","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","d2638f781be724518ff6c2263d14a48cf6e68017","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","ab10d7c14ce9f8db61956611a57a5a377362a633"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"2a63f62e9f506b7a15c76fddc8ad5f22112070c2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6f5f8e831e266692b649e39dad7a64f525aa6d21"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","0a22eafe3f72a4c2945eaad9547e6c78816978f4","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}