{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","sourceNew":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertTrue(pother.compareTo(p) == 0);\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n  }\n\n","sourceOld":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertTrue(pother.compareTo(p) == 0);\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","sourceNew":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n  }\n\n","sourceOld":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertTrue(pother.compareTo(p) == 0);\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","sourceNew":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n  }\n\n","sourceOld":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertTrue(pother.compareTo(p) == 0);\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"449e3e5d86c2c7742ce15084568c860029c09c36","date":1358424551,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","sourceNew":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    assertEquals(0, p.compareTo(pother));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n  }\n\n","sourceOld":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n  }\n\n","bugFix":null,"bugIntro":["9f98959552975d79aafaf0f964262eac98ded407"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","sourceNew":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    assertEquals(0, p.compareTo(pother));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n  }\n\n","sourceOld":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f98959552975d79aafaf0f964262eac98ded407","date":1359372702,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","sourceNew":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    assertEquals(0, p.compareTo(pother));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n  }\n\n","sourceOld":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    assertEquals(0, p.compareTo(pother));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n  }\n\n","bugFix":["449e3e5d86c2c7742ce15084568c860029c09c36","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","sourceNew":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    assertEquals(0, p.compareTo(pother));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n  }\n\n","sourceOld":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    assertEquals(0, p.compareTo(pother));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c//e\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","sourceNew":"  @Test \n  public void testCompareTo() {\n    FacetLabel p = new FacetLabel(\"a/b/c/d\", '/');\n    FacetLabel pother = new FacetLabel(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    assertEquals(0, p.compareTo(pother));\n    pother = new FacetLabel(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new FacetLabel(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new FacetLabel(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new FacetLabel(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n  }\n\n","sourceOld":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    assertEquals(0, p.compareTo(pother));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testCompareTo().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","sourceNew":"  @Test \n  public void testCompareTo() {\n    FacetLabel p = new FacetLabel(\"a/b/c/d\", '/');\n    FacetLabel pother = new FacetLabel(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    assertEquals(0, p.compareTo(pother));\n    pother = new FacetLabel(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new FacetLabel(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new FacetLabel(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new FacetLabel(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n  }\n\n","sourceOld":"  @Test \n  public void testCompareTo() {\n    FacetLabel p = new FacetLabel(\"a/b/c/d\", '/');\n    FacetLabel pother = new FacetLabel(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    assertEquals(0, p.compareTo(pother));\n    pother = new FacetLabel(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new FacetLabel(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new FacetLabel(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new FacetLabel(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCompareTo().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testCompareTo() {\n    CategoryPath p = new CategoryPath(\"a/b/c/d\", '/');\n    CategoryPath pother = new CategoryPath(\"a/b/c/d\", '/');\n    assertEquals(0, pother.compareTo(p));\n    assertEquals(0, p.compareTo(pother));\n    pother = new CategoryPath(\"\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b_/c/d\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n    pother = new CategoryPath(\"a/b/c\", '/');\n    assertTrue(pother.compareTo(p) < 0);\n    assertTrue(p.compareTo(pother) > 0);\n    pother = new CategoryPath(\"a/b/c/e\", '/');\n    assertTrue(pother.compareTo(p) > 0);\n    assertTrue(p.compareTo(pother) < 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","449e3e5d86c2c7742ce15084568c860029c09c36"],"9f98959552975d79aafaf0f964262eac98ded407":["449e3e5d86c2c7742ce15084568c860029c09c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"449e3e5d86c2c7742ce15084568c860029c09c36":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"78522aad83283ca58fae08fd89406b65429d0229":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["9f98959552975d79aafaf0f964262eac98ded407","78522aad83283ca58fae08fd89406b65429d0229"],"de522d9303bd67c8473a269a1319125d1f3700e0":["c4015cd39dff8d4dec562d909f9766debac53aa6","9f98959552975d79aafaf0f964262eac98ded407"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["9f98959552975d79aafaf0f964262eac98ded407"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","449e3e5d86c2c7742ce15084568c860029c09c36"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["de522d9303bd67c8473a269a1319125d1f3700e0"],"9f98959552975d79aafaf0f964262eac98ded407":["3cc728b07df73b197e6d940d27f9b08b63918f13","de522d9303bd67c8473a269a1319125d1f3700e0","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"449e3e5d86c2c7742ce15084568c860029c09c36":["c4015cd39dff8d4dec562d909f9766debac53aa6","9f98959552975d79aafaf0f964262eac98ded407"],"78522aad83283ca58fae08fd89406b65429d0229":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["78522aad83283ca58fae08fd89406b65429d0229"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}