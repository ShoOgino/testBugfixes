{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","commits":[{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#testMethods().mjava","sourceNew":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","sourceOld":"  public void testMethods() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 2, false);\n    HashMap<String,Integer> hm = new HashMap<String,Integer>();\n    hm.put(\"foo\",1);\n    hm.put(\"bar\",2);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n    hm.put(\"baz\", 3);\n    cm.putAll(hm);\n    assertEquals(hm.size(), cm.size());\n\n    CharArraySet cs = cm.keySet();\n    int n=0;\n    for (Object o : cs) {\n      assertTrue(cm.containsKey(o));\n      char[] co = (char[]) o;\n      assertTrue(cm.containsKey(co, 0, co.length));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n    cs.clear();\n    assertEquals(0, cs.size());\n    assertEquals(0, cm.size());\n    try {\n      cs.add(\"test\");\n      fail(\"keySet() allows adding new keys\");\n    } catch (UnsupportedOperationException ue) {\n      // pass\n    }\n    cm.putAll(hm);\n    assertEquals(hm.size(), cs.size());\n    assertEquals(cm.size(), cs.size());\n\n    Iterator<Map.Entry<Object,Integer>> iter1 = cm.entrySet().iterator();\n    n=0;\n    while (iter1.hasNext()) {\n      Map.Entry<Object,Integer> entry = iter1.next();\n      Object key = entry.getKey();\n      Integer val = entry.getValue();\n      assertEquals(cm.get(key), val);\n      entry.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(key));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n    cm.clear();\n    cm.putAll(hm);\n    assertEquals(cm.size(), n);\n\n    CharArrayMap<Integer>.EntryIterator iter2 = cm.entrySet().iterator();\n    n=0;\n    while (iter2.hasNext()) {\n      char[] keyc = iter2.nextKey();\n      Integer val = iter2.currentValue();\n      assertEquals(hm.get(new String(keyc)), val);\n      iter2.setValue(val*100);\n      assertEquals(val*100, (int)cm.get(keyc));\n      n++;\n    }\n    assertEquals(hm.size(), n);\n\n    cm.entrySet().clear();\n    assertEquals(0, cm.size());\n    assertEquals(0, cm.entrySet().size());\n    assertTrue(cm.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}