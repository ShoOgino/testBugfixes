{"path":"lucene/backwards/src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(ByteBuffer).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(ByteBuffer).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(ByteBuffer).mjava","sourceNew":"  /**\n   * Returns the number of chars required to encode the given byte sequence.\n   * \n   * @param original The byte sequence to be encoded.  Must be backed by an array.\n   * @return The number of chars required to encode the given byte sequence\n   * @throws IllegalArgumentException If the given ByteBuffer is not backed by an array\n   */\n  public static int getEncodedLength(ByteBuffer original) \n    throws IllegalArgumentException {\n    if (original.hasArray()) {\n      // Use long for intermediaries to protect against overflow\n      long length = (long)(original.limit() - original.arrayOffset());\n      return (int)((length * 8L + 14L) / 15L) + 1;\n    } else {\n      throw new IllegalArgumentException(\"original argument must have a backing array\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the number of chars required to encode the given byte sequence.\n   * \n   * @param original The byte sequence to be encoded.  Must be backed by an array.\n   * @return The number of chars required to encode the given byte sequence\n   * @throws IllegalArgumentException If the given ByteBuffer is not backed by an array\n   */\n  public static int getEncodedLength(ByteBuffer original) \n    throws IllegalArgumentException {\n    if (original.hasArray()) {\n      // Use long for intermediaries to protect against overflow\n      long length = (long)(original.limit() - original.arrayOffset());\n      return (int)((length * 8L + 14L) / 15L) + 1;\n    } else {\n      throw new IllegalArgumentException(\"original argument must have a backing array\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/IndexableBinaryStringTools#getEncodedLength(ByteBuffer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the number of chars required to encode the given byte sequence.\n   * \n   * @param original The byte sequence to be encoded.  Must be backed by an array.\n   * @return The number of chars required to encode the given byte sequence\n   * @throws IllegalArgumentException If the given ByteBuffer is not backed by an array\n   */\n  public static int getEncodedLength(ByteBuffer original) \n    throws IllegalArgumentException {\n    if (original.hasArray()) {\n      // Use long for intermediaries to protect against overflow\n      long length = (long)(original.limit() - original.arrayOffset());\n      return (int)((length * 8L + 14L) / 15L) + 1;\n    } else {\n      throw new IllegalArgumentException(\"original argument must have a backing array\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}