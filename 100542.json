{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","commits":[{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"/dev/null","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = (File) inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), 1 << 16);\n        reader = new BufferedReader(new InputStreamReader(zis), 1 << 16);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3463e1ea68056152638eaa6a4b98a1b212a547dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3463e1ea68056152638eaa6a4b98a1b212a547dc","date":1246895799,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = (File) inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = (File) inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), 1 << 16);\n        reader = new BufferedReader(new InputStreamReader(zis), 1 << 16);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = (File) inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["3463e1ea68056152638eaa6a4b98a1b212a547dc"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3463e1ea68056152638eaa6a4b98a1b212a547dc":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["3463e1ea68056152638eaa6a4b98a1b212a547dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"3463e1ea68056152638eaa6a4b98a1b212a547dc":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}