{"path":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(reader, field, true );\n    \n    int offset = 0;\n    IndexReader topReader = reader;\n    if (topReader instanceof SolrIndexReader) {\n      SolrIndexReader r = (SolrIndexReader)topReader;\n      while (r.getParent() != null) {\n        offset += r.getBase();\n        r = r.getParent();\n      }\n      topReader = r;\n    }\n    final IndexReader top = topReader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eeff6b8391d7b5e70e37193643d76c05a3abf75","date":1302902022,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f35b388d9df4d2190412cd1cbcc0c391a94bb158","date":1309218318,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51cb88215648c6da23e00f2ffb57a5e3e1ef14be","date":1309303947,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c220849f876de24a79f756f65b3eb045db59f63f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","f35b388d9df4d2190412cd1cbcc0c391a94bb158"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["bde51b089eb7f86171eb3406e38a274743f9b7ac","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c220849f876de24a79f756f65b3eb045db59f63f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f35b388d9df4d2190412cd1cbcc0c391a94bb158":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"a3776dccca01c11e7046323cfad46a3b4a471233":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c220849f876de24a79f756f65b3eb045db59f63f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["f35b388d9df4d2190412cd1cbcc0c391a94bb158"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"c220849f876de24a79f756f65b3eb045db59f63f":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","d083e83f225b11e5fdd900e83d26ddb385b6955c","f35b388d9df4d2190412cd1cbcc0c391a94bb158","a3776dccca01c11e7046323cfad46a3b4a471233"],"f35b388d9df4d2190412cd1cbcc0c391a94bb158":["2553b00f699380c64959ccb27991289aae87be2e","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}