{"path":"solr/solrj/src/java/org/apache/solr/common/SolrException#doIgnore(Throwable,String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrException#doIgnore(Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns null if this exception does not match any ignore patterns, or a message string to use if it does. */\n  public static String doIgnore(Throwable t, String m) {\n    if (ignorePatterns == null || m == null) return null;\n    if (t != null && t instanceof AssertionError) return null;\n\n    for (String regex : ignorePatterns) {\n      Pattern pattern = Pattern.compile(regex);\n      Matcher matcher = pattern.matcher(m);\n      \n      if (matcher.find()) return \"Ignoring exception matching \" + regex;\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrException#doIgnore(Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns null if this exception does not match any ignore patterns, or a message string to use if it does. */\n  public static String doIgnore(Throwable t, String m) {\n    if (ignorePatterns == null || m == null) return null;\n    if (t != null && t instanceof AssertionError) return null;\n\n    for (String regex : ignorePatterns) {\n      Pattern pattern = Pattern.compile(regex);\n      Matcher matcher = pattern.matcher(m);\n      \n      if (matcher.find()) return \"Ignoring exception matching \" + regex;\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrException#doIgnore(Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns null if this exception does not match any ignore patterns, or a message string to use if it does. */\n  public static String doIgnore(Throwable t, String m) {\n    if (ignorePatterns == null || m == null) return null;\n    if (t != null && t instanceof AssertionError) return null;\n\n    for (String regex : ignorePatterns) {\n      Pattern pattern = Pattern.compile(regex);\n      Matcher matcher = pattern.matcher(m);\n      \n      if (matcher.find()) return \"Ignoring exception matching \" + regex;\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af845fe4d504b5dfbfe7e64542f57d9456e17018","date":1513376377,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrException#doIgnore(Throwable,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrException#doIgnore(Throwable,String).mjava","sourceNew":"  /** Returns null if this exception does not match any ignore patterns, or a message string to use if it does. */\n  public static String doIgnore(Throwable t, String m) {\n    Set<String> ignorePatterns = SolrException.ignorePatterns; // guard against races, albeit unlikely\n    if (ignorePatterns == null || m == null) return null;\n    if (t != null && t instanceof AssertionError) return null;\n\n    for (String regex : ignorePatterns) {\n      Pattern pattern = Pattern.compile(regex); // TODO why do we compile late; why not up-front?\n      Matcher matcher = pattern.matcher(m);\n      \n      if (matcher.find()) return \"Ignoring exception matching \" + regex;\n    }\n\n    return null;\n  }\n\n","sourceOld":"  /** Returns null if this exception does not match any ignore patterns, or a message string to use if it does. */\n  public static String doIgnore(Throwable t, String m) {\n    if (ignorePatterns == null || m == null) return null;\n    if (t != null && t instanceof AssertionError) return null;\n\n    for (String regex : ignorePatterns) {\n      Pattern pattern = Pattern.compile(regex);\n      Matcher matcher = pattern.matcher(m);\n      \n      if (matcher.find()) return \"Ignoring exception matching \" + regex;\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af845fe4d504b5dfbfe7e64542f57d9456e17018":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af845fe4d504b5dfbfe7e64542f57d9456e17018"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","af845fe4d504b5dfbfe7e64542f57d9456e17018"],"af845fe4d504b5dfbfe7e64542f57d9456e17018":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}