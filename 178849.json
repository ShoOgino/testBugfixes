{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(TermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final String[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].toCharArray(), 0, terms[i].length(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setTermBuffer(terms[i]);\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    final Comparator<Token> tokenComparator = new Comparator<Token>() {\n      public int compare(final Token o1, final Token o2) {\n        if (o1.getPositionIncrement() < o2.getPositionIncrement()) {\n          return -1;\n        }\n        if (o1.getPositionIncrement() > o2.getPositionIncrement()) {\n          return 1;\n        }\n        return 0;\n      }\n    };\n    Collections.sort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(TermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final String[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].toCharArray(), 0, terms[i].length(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setTermBuffer(terms[i]);\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    final Comparator<Token> tokenComparator = new Comparator<Token>() {\n      public int compare(final Token o1, final Token o2) {\n        if (o1.getPositionIncrement() < o2.getPositionIncrement()) {\n          return -1;\n        }\n        if (o1.getPositionIncrement() > o2.getPositionIncrement()) {\n          return 1;\n        }\n        return 0;\n      }\n    };\n    Collections.sort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final String[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].toCharArray(), 0, terms[i].length(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i]);\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    final Comparator<Token> tokenComparator = new Comparator<Token>() {\n      public int compare(final Token o1, final Token o2) {\n        if (o1.getPositionIncrement() < o2.getPositionIncrement()) {\n          return -1;\n        }\n        if (o1.getPositionIncrement() > o2.getPositionIncrement()) {\n          return 1;\n        }\n        return 0;\n      }\n    };\n    Collections.sort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(TermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final String[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].toCharArray(), 0, terms[i].length(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setTermBuffer(terms[i]);\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    final Comparator<Token> tokenComparator = new Comparator<Token>() {\n      public int compare(final Token o1, final Token o2) {\n        if (o1.getPositionIncrement() < o2.getPositionIncrement()) {\n          return -1;\n        }\n        if (o1.getPositionIncrement() > o2.getPositionIncrement()) {\n          return 1;\n        }\n        return 0;\n      }\n    };\n    Collections.sort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final BytesRef[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].utf8ToString(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i].utf8ToString());\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    final Comparator<Token> tokenComparator = new Comparator<Token>() {\n      public int compare(final Token o1, final Token o2) {\n        if (o1.getPositionIncrement() < o2.getPositionIncrement()) {\n          return -1;\n        }\n        if (o1.getPositionIncrement() > o2.getPositionIncrement()) {\n          return 1;\n        }\n        return 0;\n      }\n    };\n    Collections.sort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final String[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].toCharArray(), 0, terms[i].length(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i]);\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    final Comparator<Token> tokenComparator = new Comparator<Token>() {\n      public int compare(final Token o1, final Token o2) {\n        if (o1.getPositionIncrement() < o2.getPositionIncrement()) {\n          return -1;\n        }\n        if (o1.getPositionIncrement() > o2.getPositionIncrement()) {\n          return 1;\n        }\n        return 0;\n      }\n    };\n    Collections.sort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final BytesRef[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].utf8ToString(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i].utf8ToString());\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    final Comparator<Token> tokenComparator = new Comparator<Token>() {\n      public int compare(final Token o1, final Token o2) {\n        if (o1.getPositionIncrement() < o2.getPositionIncrement()) {\n          return -1;\n        }\n        if (o1.getPositionIncrement() > o2.getPositionIncrement()) {\n          return 1;\n        }\n        return 0;\n      }\n    };\n    Collections.sort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final String[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].toCharArray(), 0, terms[i].length(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i]);\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    final Comparator<Token> tokenComparator = new Comparator<Token>() {\n      public int compare(final Token o1, final Token o2) {\n        if (o1.getPositionIncrement() < o2.getPositionIncrement()) {\n          return -1;\n        }\n        if (o1.getPositionIncrement() > o2.getPositionIncrement()) {\n          return 1;\n        }\n        return 0;\n      }\n    };\n    Collections.sort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final BytesRef[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].utf8ToString(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i].utf8ToString());\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    CollectionUtil.mergeSort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final BytesRef[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].utf8ToString(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i].utf8ToString());\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    final Comparator<Token> tokenComparator = new Comparator<Token>() {\n      public int compare(final Token o1, final Token o2) {\n        if (o1.getPositionIncrement() < o2.getPositionIncrement()) {\n          return -1;\n        }\n        if (o1.getPositionIncrement() > o2.getPositionIncrement()) {\n          return 1;\n        }\n        return 0;\n      }\n    };\n    Collections.sort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final BytesRef[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].utf8ToString(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i].utf8ToString());\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    CollectionUtil.mergeSort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final BytesRef[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].utf8ToString(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i].utf8ToString());\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    final Comparator<Token> tokenComparator = new Comparator<Token>() {\n      public int compare(final Token o1, final Token o2) {\n        if (o1.getPositionIncrement() < o2.getPositionIncrement()) {\n          return -1;\n        }\n        if (o1.getPositionIncrement() > o2.getPositionIncrement()) {\n          return 1;\n        }\n        return 0;\n      }\n    };\n    Collections.sort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final BytesRef[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].utf8ToString(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i].utf8ToString());\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    CollectionUtil.mergeSort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final BytesRef[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].utf8ToString(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i].utf8ToString());\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    final Comparator<Token> tokenComparator = new Comparator<Token>() {\n      public int compare(final Token o1, final Token o2) {\n        if (o1.getPositionIncrement() < o2.getPositionIncrement()) {\n          return -1;\n        }\n        if (o1.getPositionIncrement() > o2.getPositionIncrement()) {\n          return 1;\n        }\n        return 0;\n      }\n    };\n    Collections.sort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(Terms).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#TokenStreamFromTermPositionVector(TermPositionVector).mjava","sourceNew":"  /**\n   * Constructor.\n   * \n   * @param vector Terms that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final Terms vector) throws IOException {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final TermsEnum termsEnum = vector.iterator(null);\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      dpEnum.nextDoc();\n      final int freq = dpEnum.freq();\n      final OffsetAttribute offsetAtt;\n      if (dpEnum.attributes().hasAttribute(OffsetAttribute.class)) {\n        offsetAtt = dpEnum.attributes().getAttribute(OffsetAttribute.class);\n      } else {\n        offsetAtt = null;\n      }\n      for (int j = 0; j < freq; j++) {\n        int pos = dpEnum.nextPosition();\n        Token token;\n        if (offsetAtt != null) {\n          token = new Token(text.utf8ToString(),\n                            offsetAtt.startOffset(),\n                            offsetAtt.endOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(text.utf8ToString());\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(pos);\n        this.positionedTokens.add(token);\n      }\n    }\n    CollectionUtil.mergeSort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * \n   * @param termPositionVector TermPositionVector that contains the data for\n   *        creating the TokenStream. Must have positions and offsets.\n   */\n  public TokenStreamFromTermPositionVector(\n      final TermPositionVector termPositionVector) {\n    termAttribute = addAttribute(CharTermAttribute.class);\n    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);\n    offsetAttribute = addAttribute(OffsetAttribute.class);\n    final BytesRef[] terms = termPositionVector.getTerms();\n    for (int i = 0; i < terms.length; i++) {\n      final TermVectorOffsetInfo[] offsets = termPositionVector.getOffsets(i);\n      final int[] termPositions = termPositionVector.getTermPositions(i);\n      for (int j = 0; j < termPositions.length; j++) {\n        Token token;\n        if (offsets != null) {\n          token = new Token(terms[i].utf8ToString(),\n              offsets[j].getStartOffset(), offsets[j].getEndOffset());\n        } else {\n          token = new Token();\n          token.setEmpty().append(terms[i].utf8ToString());\n        }\n        // Yes - this is the position, not the increment! This is for\n        // sorting. This value\n        // will be corrected before use.\n        token.setPositionIncrement(termPositions[j]);\n        this.positionedTokens.add(token);\n      }\n    }\n    CollectionUtil.mergeSort(this.positionedTokens, tokenComparator);\n    int lastPosition = -1;\n    for (final Token token : this.positionedTokens) {\n      int thisPosition = token.getPositionIncrement();\n      token.setPositionIncrement(thisPosition - lastPosition);\n      lastPosition = thisPosition;\n    }\n    this.tokensAtCurrentPosition = this.positionedTokens.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"5f4e87790277826a2aea119328600dfb07761f32":["a7347509fad0711ac30cb15a746e9a3830a38ebd","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","5f4e87790277826a2aea119328600dfb07761f32","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["3cc749c053615f5871f3b95715fe292f34e70a53","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":[],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}