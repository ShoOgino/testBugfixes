{"path":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#constructorErrorTest().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#constructorErrorTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Error checking tests for constructor.\n     */\n    @Test\n    public void constructorErrorTest() {\n        // word length too small\n        try {\n            new BigEndianAscendingWordSerializer(0/*wordLength, below minimum of 1*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about too-short words.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word length must be\"));\n        }\n\n        // word length too large\n        try {\n            new BigEndianAscendingWordSerializer(65/*wordLength, above max of 64*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about too-long words.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word length must be\"));\n        }\n\n        // word count negative\n        try {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, -1/*wordCount, too small*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about negative word count.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word count must be\"));\n        }\n\n        // byte padding negative\n        try {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, 1/*wordCount, arbitrary*/, -1/*bytePadding, too small*/);\n            fail(\"Should complain about negative byte padding.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Byte padding must be\"));\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#constructorErrorTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Error checking tests for constructor.\n     */\n    @Test\n    public void constructorErrorTest() {\n        // word length too small\n        try {\n            new BigEndianAscendingWordSerializer(0/*wordLength, below minimum of 1*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about too-short words.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word length must be\"));\n        }\n\n        // word length too large\n        try {\n            new BigEndianAscendingWordSerializer(65/*wordLength, above max of 64*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about too-long words.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word length must be\"));\n        }\n\n        // word count negative\n        try {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, -1/*wordCount, too small*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about negative word count.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word count must be\"));\n        }\n\n        // byte padding negative\n        try {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, 1/*wordCount, arbitrary*/, -1/*bytePadding, too small*/);\n            fail(\"Should complain about negative byte padding.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Byte padding must be\"));\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#constructorErrorTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#constructorErrorTest().mjava","sourceNew":"    /**\n     * Error checking tests for constructor.\n     */\n    @Test\n    public void constructorErrorTest() {\n        // word length too small\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(0/*wordLength, below minimum of 1*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);;\n        });\n        assertTrue(e.getMessage().contains(\"Word length must be\"));\n\n        // word length too large\n        e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(65/*wordLength, above max of 64*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n        });\n        assertTrue(e.getMessage().contains(\"Word length must be\"));\n\n        // word count negative\n        e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, -1/*wordCount, too small*/, 0/*bytePadding, arbitrary*/);\n        });\n        assertTrue(e.getMessage().contains(\"Word count must be\"));\n\n        // byte padding negative\n        e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, 1/*wordCount, arbitrary*/, -1/*bytePadding, too small*/);\n        });\n        assertTrue(e.getMessage().contains(\"Byte padding must be\"));\n    }\n\n","sourceOld":"    /**\n     * Error checking tests for constructor.\n     */\n    @Test\n    public void constructorErrorTest() {\n        // word length too small\n        try {\n            new BigEndianAscendingWordSerializer(0/*wordLength, below minimum of 1*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about too-short words.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word length must be\"));\n        }\n\n        // word length too large\n        try {\n            new BigEndianAscendingWordSerializer(65/*wordLength, above max of 64*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about too-long words.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word length must be\"));\n        }\n\n        // word count negative\n        try {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, -1/*wordCount, too small*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about negative word count.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word count must be\"));\n        }\n\n        // byte padding negative\n        try {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, 1/*wordCount, arbitrary*/, -1/*bytePadding, too small*/);\n            fail(\"Should complain about negative byte padding.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Byte padding must be\"));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#constructorErrorTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#constructorErrorTest().mjava","sourceNew":"    /**\n     * Error checking tests for constructor.\n     */\n    @Test\n    public void constructorErrorTest() {\n        // word length too small\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(0/*wordLength, below minimum of 1*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);;\n        });\n        assertTrue(e.getMessage().contains(\"Word length must be\"));\n\n        // word length too large\n        e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(65/*wordLength, above max of 64*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n        });\n        assertTrue(e.getMessage().contains(\"Word length must be\"));\n\n        // word count negative\n        e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, -1/*wordCount, too small*/, 0/*bytePadding, arbitrary*/);\n        });\n        assertTrue(e.getMessage().contains(\"Word count must be\"));\n\n        // byte padding negative\n        e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, 1/*wordCount, arbitrary*/, -1/*bytePadding, too small*/);\n        });\n        assertTrue(e.getMessage().contains(\"Byte padding must be\"));\n    }\n\n","sourceOld":"    /**\n     * Error checking tests for constructor.\n     */\n    @Test\n    public void constructorErrorTest() {\n        // word length too small\n        try {\n            new BigEndianAscendingWordSerializer(0/*wordLength, below minimum of 1*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about too-short words.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word length must be\"));\n        }\n\n        // word length too large\n        try {\n            new BigEndianAscendingWordSerializer(65/*wordLength, above max of 64*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about too-long words.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word length must be\"));\n        }\n\n        // word count negative\n        try {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, -1/*wordCount, too small*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about negative word count.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word count must be\"));\n        }\n\n        // byte padding negative\n        try {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, 1/*wordCount, arbitrary*/, -1/*bytePadding, too small*/);\n            fail(\"Should complain about negative byte padding.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Byte padding must be\"));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#constructorErrorTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/hll/BigEndianAscendingWordSerializerTest#constructorErrorTest().mjava","sourceNew":"    /**\n     * Error checking tests for constructor.\n     */\n    @Test\n    public void constructorErrorTest() {\n        // word length too small\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(0/*wordLength, below minimum of 1*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);;\n        });\n        assertTrue(e.getMessage().contains(\"Word length must be\"));\n\n        // word length too large\n        e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(65/*wordLength, above max of 64*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n        });\n        assertTrue(e.getMessage().contains(\"Word length must be\"));\n\n        // word count negative\n        e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, -1/*wordCount, too small*/, 0/*bytePadding, arbitrary*/);\n        });\n        assertTrue(e.getMessage().contains(\"Word count must be\"));\n\n        // byte padding negative\n        e = expectThrows(IllegalArgumentException.class,  () -> {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, 1/*wordCount, arbitrary*/, -1/*bytePadding, too small*/);\n        });\n        assertTrue(e.getMessage().contains(\"Byte padding must be\"));\n    }\n\n","sourceOld":"    /**\n     * Error checking tests for constructor.\n     */\n    @Test\n    public void constructorErrorTest() {\n        // word length too small\n        try {\n            new BigEndianAscendingWordSerializer(0/*wordLength, below minimum of 1*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about too-short words.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word length must be\"));\n        }\n\n        // word length too large\n        try {\n            new BigEndianAscendingWordSerializer(65/*wordLength, above max of 64*/, 1/*wordCount, arbitrary*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about too-long words.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word length must be\"));\n        }\n\n        // word count negative\n        try {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, -1/*wordCount, too small*/, 0/*bytePadding, arbitrary*/);\n            fail(\"Should complain about negative word count.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Word count must be\"));\n        }\n\n        // byte padding negative\n        try {\n            new BigEndianAscendingWordSerializer(5/*wordLength, arbitrary*/, 1/*wordCount, arbitrary*/, -1/*bytePadding, too small*/);\n            fail(\"Should complain about negative byte padding.\");\n        } catch(final IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Byte padding must be\"));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["3b5ee4c66244bdfcc4796a114519d47701b2c026","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["3b5ee4c66244bdfcc4796a114519d47701b2c026","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}