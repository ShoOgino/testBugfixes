{"path":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","commits":[{"id":"0491dc45f6b12f57e9c33751e9317a01995556c6","date":1385418725,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","pathOld":"/dev/null","sourceNew":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrServers ss = new MockStreamingSolrServers(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(ss, 5, 0);\n    ss.setExp(Exp.CONNECT_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<Node>();\n    final HttpSolrServer solrclient1 = (HttpSolrServer) clients.get(0);\n    \n    final AtomicInteger retries = new AtomicInteger();\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    cmdDistrib.finish();\n    \n    assertEquals(6, retries.get());\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1dd6595120fba7e99fcec70759c6cdea9a071b3","date":1385615716,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","sourceNew":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrServers ss = new MockStreamingSolrServers(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(ss, 5, 0);\n    ss.setExp(Exp.CONNECT_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<Node>();\n    final HttpSolrServer solrclient1 = (HttpSolrServer) clients.get(0);\n    \n    final AtomicInteger retries = new AtomicInteger();\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", \"locahost\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    cmdDistrib.finish();\n    \n    assertEquals(6, retries.get());\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","sourceOld":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrServers ss = new MockStreamingSolrServers(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(ss, 5, 0);\n    ss.setExp(Exp.CONNECT_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<Node>();\n    final HttpSolrServer solrclient1 = (HttpSolrServer) clients.get(0);\n    \n    final AtomicInteger retries = new AtomicInteger();\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    cmdDistrib.finish();\n    \n    assertEquals(6, retries.get());\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce545e833f5334e245fb71d83c3460ef83c2d5e","date":1385773467,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","sourceNew":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrServers ss = new MockStreamingSolrServers(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(ss, 5, 0);\n    ss.setExp(Exp.CONNECT_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<Node>();\n    final HttpSolrServer solrclient1 = (HttpSolrServer) clients.get(0);\n    \n    final AtomicInteger retries = new AtomicInteger();\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    cmdDistrib.finish();\n    \n    assertEquals(6, retries.get());\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","sourceOld":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrServers ss = new MockStreamingSolrServers(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(ss, 5, 0);\n    ss.setExp(Exp.CONNECT_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<Node>();\n    final HttpSolrServer solrclient1 = (HttpSolrServer) clients.get(0);\n    \n    final AtomicInteger retries = new AtomicInteger();\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", \"locahost\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    cmdDistrib.finish();\n    \n    assertEquals(6, retries.get());\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","pathOld":"/dev/null","sourceNew":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrServers ss = new MockStreamingSolrServers(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(ss, 5, 0);\n    ss.setExp(Exp.CONNECT_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<Node>();\n    final HttpSolrServer solrclient1 = (HttpSolrServer) clients.get(0);\n    \n    final AtomicInteger retries = new AtomicInteger();\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    cmdDistrib.finish();\n    \n    assertEquals(6, retries.get());\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","sourceNew":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrServers ss = new MockStreamingSolrServers(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(ss, 5, 0);\n    ss.setExp(Exp.CONNECT_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<>();\n    final HttpSolrServer solrclient1 = (HttpSolrServer) clients.get(0);\n    \n    final AtomicInteger retries = new AtomicInteger();\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    cmdDistrib.finish();\n    \n    assertEquals(6, retries.get());\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","sourceOld":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrServers ss = new MockStreamingSolrServers(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(ss, 5, 0);\n    ss.setExp(Exp.CONNECT_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<Node>();\n    final HttpSolrServer solrclient1 = (HttpSolrServer) clients.get(0);\n    \n    final AtomicInteger retries = new AtomicInteger();\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    cmdDistrib.finish();\n    \n    assertEquals(6, retries.get());\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","sourceNew":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 5, 0);\n    streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<>();\n    final HttpSolrClient solrclient1 = (HttpSolrClient) clients.get(0);\n    \n    final AtomicInteger retries = new AtomicInteger();\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    cmdDistrib.finish();\n    \n    assertEquals(6, retries.get());\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","sourceOld":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrServers ss = new MockStreamingSolrServers(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(ss, 5, 0);\n    ss.setExp(Exp.CONNECT_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<>();\n    final HttpSolrServer solrclient1 = (HttpSolrServer) clients.get(0);\n    \n    final AtomicInteger retries = new AtomicInteger();\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    cmdDistrib.finish();\n    \n    assertEquals(6, retries.get());\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","sourceNew":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 5, 0)) {\n      streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n      final HttpSolrClient solrclient1 = (HttpSolrClient) clients.get(0);\n\n      final AtomicInteger retries = new AtomicInteger();\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n        @Override\n        public boolean checkRetry() {\n          retries.incrementAndGet();\n          return true;\n        }\n      };\n\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n      cmdDistrib.finish();\n\n      assertEquals(6, retries.get());\n\n      assertEquals(1, cmdDistrib.getErrors().size());\n    }\n  }\n\n","sourceOld":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 5, 0);\n    streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n    ArrayList<Node> nodes = new ArrayList<>();\n    final HttpSolrClient solrclient1 = (HttpSolrClient) clients.get(0);\n    \n    final AtomicInteger retries = new AtomicInteger();\n    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n    RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n      @Override\n      public boolean checkRetry() {\n        retries.incrementAndGet();\n        return true;\n      }\n    };\n    \n    nodes.add(retryNode);\n    \n    AddUpdateCommand cmd = new AddUpdateCommand(null);\n    cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    cmdDistrib.distribAdd(cmd, nodes, params);\n    cmdDistrib.finish();\n    \n    assertEquals(6, retries.get());\n    \n    assertEquals(1, cmdDistrib.getErrors().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":6,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries(NodeType).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","sourceNew":"  private void testMaxRetries(NodeType nodeType) throws IOException {\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n      final HttpSolrClient solrclient1 = (HttpSolrClient) clients.get(0);\n\n      final AtomicInteger retries = new AtomicInteger();\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      Node retryNode;\n      if (nodeType == NodeType.FORWARD) {\n        retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 6) {\n          @Override\n          public boolean checkRetry(Error err) {\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      } else {\n        retryNode = new StdNode(new ZkCoreNodeProps(nodeProps), \"collection1\", \"shard1\", 6) {\n          @Override\n          public boolean checkRetry(Error err) {\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      }\n      \n\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n      cmdDistrib.finish();\n\n      assertEquals(7, retries.get());\n\n      assertEquals(1, cmdDistrib.getErrors().size());\n    }\n  }\n\n","sourceOld":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 5, 0)) {\n      streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n      final HttpSolrClient solrclient1 = (HttpSolrClient) clients.get(0);\n\n      final AtomicInteger retries = new AtomicInteger();\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n        @Override\n        public boolean checkRetry() {\n          retries.incrementAndGet();\n          return true;\n        }\n      };\n\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n      cmdDistrib.finish();\n\n      assertEquals(6, retries.get());\n\n      assertEquals(1, cmdDistrib.getErrors().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testStdNodeRetriesSocketError().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMaxRetries().mjava","sourceNew":"  private void testStdNodeRetriesSocketError() throws Exception {\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.SOCKET_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      Node retryNode = new StdNode(new ZkCoreNodeProps(nodeProps), \"collection1\", \"shard1\", 5) {\n        @Override\n        public boolean checkRetry(Error err) {\n          retries.incrementAndGet();\n          return super.checkRetry(err);\n        }\n      };\n\n\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n      cmdDistrib.finish();\n\n      // it will checkRetry, but not actually do it...\n      assertEquals(6, retries.get());\n    }\n  }\n\n","sourceOld":"  private void testMaxRetries() throws IOException {\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 5, 0)) {\n      streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n      final HttpSolrClient solrclient1 = (HttpSolrClient) clients.get(0);\n\n      final AtomicInteger retries = new AtomicInteger();\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient1.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      RetryNode retryNode = new RetryNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\") {\n        @Override\n        public boolean checkRetry() {\n          retries.incrementAndGet();\n          return true;\n        }\n      };\n\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      cmdDistrib.distribAdd(cmd, nodes, params);\n      cmdDistrib.finish();\n\n      assertEquals(6, retries.get());\n\n      assertEquals(1, cmdDistrib.getErrors().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9ce545e833f5334e245fb71d83c3460ef83c2d5e"],"9ce545e833f5334e245fb71d83c3460ef83c2d5e":["c1dd6595120fba7e99fcec70759c6cdea9a071b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ce545e833f5334e245fb71d83c3460ef83c2d5e"],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c1dd6595120fba7e99fcec70759c6cdea9a071b3":["0491dc45f6b12f57e9c33751e9317a01995556c6"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["bafca15d8e408346a67f4282ad1143b88023893b"],"0491dc45f6b12f57e9c33751e9317a01995556c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"9ce545e833f5334e245fb71d83c3460ef83c2d5e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0491dc45f6b12f57e9c33751e9317a01995556c6"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"c1dd6595120fba7e99fcec70759c6cdea9a071b3":["9ce545e833f5334e245fb71d83c3460ef83c2d5e"],"bafca15d8e408346a67f4282ad1143b88023893b":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"0491dc45f6b12f57e9c33751e9317a01995556c6":["c1dd6595120fba7e99fcec70759c6cdea9a071b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}