{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleIgnoreAfterMaxFailures#apply(Statement,Description).mjava","commits":[{"id":"c813a2b1db6d91d83baed4eab53ecc22eb857a82","date":1340957276,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleIgnoreAfterMaxFailures#apply(Statement,Description).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        if (failuresSoFar >= maxFailures) {\n          RandomizedTest.assumeTrue(\"Ignored, failures limit reached (\" + \n              failuresSoFar + \" >= \" + maxFailures + \").\", false);\n        }\n\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          if (!TestRuleMarkFailure.isAssumption(t)) {\n            System.out.println(\"#\" + d);\n            failuresSoFar++;\n          }\n          throw t;\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["18bf84f26e85b274460f472a6e42de37fda19f7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbf8bcd0aa41f81725d2d7ef520f744236c50b51","date":1340958307,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleIgnoreAfterMaxFailures#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleIgnoreAfterMaxFailures#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        if (failuresSoFar >= maxFailures) {\n          RandomizedTest.assumeTrue(\"Ignored, failures limit reached (\" + \n              failuresSoFar + \" >= \" + maxFailures + \").\", false);\n        }\n\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          if (!TestRuleMarkFailure.isAssumption(t)) {\n            failuresSoFar++;\n          }\n          throw t;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        if (failuresSoFar >= maxFailures) {\n          RandomizedTest.assumeTrue(\"Ignored, failures limit reached (\" + \n              failuresSoFar + \" >= \" + maxFailures + \").\", false);\n        }\n\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          if (!TestRuleMarkFailure.isAssumption(t)) {\n            System.out.println(\"#\" + d);\n            failuresSoFar++;\n          }\n          throw t;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleIgnoreAfterMaxFailures#apply(Statement,Description).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        if (failuresSoFar >= maxFailures) {\n          RandomizedTest.assumeTrue(\"Ignored, failures limit reached (\" + \n              failuresSoFar + \" >= \" + maxFailures + \").\", false);\n        }\n\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          if (!TestRuleMarkFailure.isAssumption(t)) {\n            failuresSoFar++;\n          }\n          throw t;\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18bf84f26e85b274460f472a6e42de37fda19f7c","date":1396602216,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleIgnoreAfterMaxFailures#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleIgnoreAfterMaxFailures#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        int failuresSoFar = FailureMarker.getFailures();\n        if (failuresSoFar >= maxFailures) {\n          RandomizedTest.assumeTrue(\"Ignored, failures limit reached (\" + \n              failuresSoFar + \" >= \" + maxFailures + \").\", false);\n        }\n\n        s.evaluate();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        if (failuresSoFar >= maxFailures) {\n          RandomizedTest.assumeTrue(\"Ignored, failures limit reached (\" + \n              failuresSoFar + \" >= \" + maxFailures + \").\", false);\n        }\n\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          if (!TestRuleMarkFailure.isAssumption(t)) {\n            failuresSoFar++;\n          }\n          throw t;\n        }\n      }\n    };\n  }\n\n","bugFix":["c813a2b1db6d91d83baed4eab53ecc22eb857a82"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleIgnoreAfterMaxFailures#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleIgnoreAfterMaxFailures#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        int failuresSoFar = FailureMarker.getFailures();\n        if (failuresSoFar >= maxFailures) {\n          RandomizedTest.assumeTrue(\"Ignored, failures limit reached (\" + \n              failuresSoFar + \" >= \" + maxFailures + \").\", false);\n        }\n\n        s.evaluate();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        if (failuresSoFar >= maxFailures) {\n          RandomizedTest.assumeTrue(\"Ignored, failures limit reached (\" + \n              failuresSoFar + \" >= \" + maxFailures + \").\", false);\n        }\n\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          if (!TestRuleMarkFailure.isAssumption(t)) {\n            failuresSoFar++;\n          }\n          throw t;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18bf84f26e85b274460f472a6e42de37fda19f7c":["cbf8bcd0aa41f81725d2d7ef520f744236c50b51"],"cbf8bcd0aa41f81725d2d7ef520f744236c50b51":["c813a2b1db6d91d83baed4eab53ecc22eb857a82"],"5eb2511ababf862ea11e10761c70ee560cd84510":["cbf8bcd0aa41f81725d2d7ef520f744236c50b51","18bf84f26e85b274460f472a6e42de37fda19f7c"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cbf8bcd0aa41f81725d2d7ef520f744236c50b51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["18bf84f26e85b274460f472a6e42de37fda19f7c"],"c813a2b1db6d91d83baed4eab53ecc22eb857a82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"18bf84f26e85b274460f472a6e42de37fda19f7c":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbf8bcd0aa41f81725d2d7ef520f744236c50b51":["18bf84f26e85b274460f472a6e42de37fda19f7c","5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c813a2b1db6d91d83baed4eab53ecc22eb857a82"],"c813a2b1db6d91d83baed4eab53ecc22eb857a82":["cbf8bcd0aa41f81725d2d7ef520f744236c50b51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}