{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","sourceNew":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - (int) readerOrds.get(doc);\n        } else {\n          // ord is only approx comparable: if they are not\n          // equal, we can use that; if they are equal, we\n          // must fallback to compare by value\n          final int order = (int) readerOrds.get(doc);\n          final int cmp = bottomOrd - order;\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          if (bottomValue == null) {\n            if (order == 0) {\n              // unset\n              return 0;\n            }\n            // bottom wins\n            return -1;\n          } else if (order == 0) {\n            // doc wins\n            return 1;\n          }\n          termsIndex.lookup(order, tempBR);\n          return bottomValue.compareTo(tempBR);\n        }\n      }\n\n","sourceOld":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - (int) readerOrds.get(doc);\n        } else {\n          // ord is only approx comparable: if they are not\n          // equal, we can use that; if they are equal, we\n          // must fallback to compare by value\n          final int order = (int) readerOrds.get(doc);\n          final int cmp = bottomOrd - order;\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          if (bottomValue == null) {\n            if (order == 0) {\n              // unset\n              return 0;\n            }\n            // bottom wins\n            return -1;\n          } else if (order == 0) {\n            // doc wins\n            return 1;\n          }\n          termsIndex.lookup(order, tempBR);\n          return bottomValue.compareTo(tempBR);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7523dd562634d9145b67eb4c8b3b3db2340532b","date":1330467618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","sourceNew":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        final int docOrd = (int) readerOrds.get(doc);\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - docOrd;\n        } else if (bottomOrd >= docOrd) {\n          // the equals case always means bottom is > doc\n          // (because we set bottomOrd to the lower bound in\n          // setBottom):\n          return 1;\n        } else {\n          return -1;\n        }\n      }\n\n","sourceOld":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - (int) readerOrds.get(doc);\n        } else {\n          // ord is only approx comparable: if they are not\n          // equal, we can use that; if they are equal, we\n          // must fallback to compare by value\n          final int order = (int) readerOrds.get(doc);\n          final int cmp = bottomOrd - order;\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          if (bottomValue == null) {\n            if (order == 0) {\n              // unset\n              return 0;\n            }\n            // bottom wins\n            return -1;\n          } else if (order == 0) {\n            // doc wins\n            return 1;\n          }\n          termsIndex.lookup(order, tempBR);\n          return bottomValue.compareTo(tempBR);\n        }\n      }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","sourceNew":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        final int docOrd = (int) readerOrds.get(doc);\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - docOrd;\n        } else if (bottomOrd >= docOrd) {\n          // the equals case always means bottom is > doc\n          // (because we set bottomOrd to the lower bound in\n          // setBottom):\n          return 1;\n        } else {\n          return -1;\n        }\n      }\n\n","sourceOld":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - (int) readerOrds.get(doc);\n        } else {\n          // ord is only approx comparable: if they are not\n          // equal, we can use that; if they are equal, we\n          // must fallback to compare by value\n          final int order = (int) readerOrds.get(doc);\n          final int cmp = bottomOrd - order;\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          if (bottomValue == null) {\n            if (order == 0) {\n              // unset\n              return 0;\n            }\n            // bottom wins\n            return -1;\n          } else if (order == 0) {\n            // doc wins\n            return 1;\n          }\n          termsIndex.lookup(order, tempBR);\n          return bottomValue.compareTo(tempBR);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed65f3455364344c6d2ff76ea5421aac754eae7","date":1353261762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","sourceNew":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        final int docOrd = (int) termsIndex.getOrd(doc);\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - docOrd;\n        } else if (bottomOrd >= docOrd) {\n          // the equals case always means bottom is > doc\n          // (because we set bottomOrd to the lower bound in\n          // setBottom):\n          return 1;\n        } else {\n          return -1;\n        }\n      }\n\n","sourceOld":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        final int docOrd = (int) readerOrds.get(doc);\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - docOrd;\n        } else if (bottomOrd >= docOrd) {\n          // the equals case always means bottom is > doc\n          // (because we set bottomOrd to the lower bound in\n          // setBottom):\n          return 1;\n        } else {\n          return -1;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29f7cc7c185412da66c1d0089d9e75da01329a00","date":1353364851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","sourceNew":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        final int docOrd = termsIndex.getOrd(doc);\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - docOrd;\n        } else if (bottomOrd >= docOrd) {\n          // the equals case always means bottom is > doc\n          // (because we set bottomOrd to the lower bound in\n          // setBottom):\n          return 1;\n        } else {\n          return -1;\n        }\n      }\n\n","sourceOld":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        final int docOrd = (int) termsIndex.getOrd(doc);\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - docOrd;\n        } else if (bottomOrd >= docOrd) {\n          // the equals case always means bottom is > doc\n          // (because we set bottomOrd to the lower bound in\n          // setBottom):\n          return 1;\n        } else {\n          return -1;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","sourceNew":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        final int docOrd = termsIndex.getOrd(doc);\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - docOrd;\n        } else if (bottomOrd >= docOrd) {\n          // the equals case always means bottom is > doc\n          // (because we set bottomOrd to the lower bound in\n          // setBottom):\n          return 1;\n        } else {\n          return -1;\n        }\n      }\n\n","sourceOld":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        final int docOrd = (int) readerOrds.get(doc);\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - docOrd;\n        } else if (bottomOrd >= docOrd) {\n          // the equals case always means bottom is > doc\n          // (because we set bottomOrd to the lower bound in\n          // setBottom):\n          return 1;\n        } else {\n          return -1;\n        }\n      }\n\n","bugFix":["b7523dd562634d9145b67eb4c8b3b3db2340532b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","sourceNew":null,"sourceOld":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        final int docOrd = termsIndex.getOrd(doc);\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - docOrd;\n        } else if (bottomOrd >= docOrd) {\n          // the equals case always means bottom is > doc\n          // (because we set bottomOrd to the lower bound in\n          // setBottom):\n          return 1;\n        } else {\n          return -1;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator.AnyOrdComparator#compareBottom(int).mjava","sourceNew":null,"sourceOld":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        final int docOrd = termsIndex.getOrd(doc);\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - docOrd;\n        } else if (bottomOrd >= docOrd) {\n          // the equals case always means bottom is > doc\n          // (because we set bottomOrd to the lower bound in\n          // setBottom):\n          return 1;\n        } else {\n          return -1;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["b7523dd562634d9145b67eb4c8b3b3db2340532b","29f7cc7c185412da66c1d0089d9e75da01329a00"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["d4d69c535930b5cce125cff868d40f6373dc27d4","7615b855702e008d91a95a2578bf05d27372f599"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["b7523dd562634d9145b67eb4c8b3b3db2340532b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7615b855702e008d91a95a2578bf05d27372f599":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27ab7b234eab0cbc020836989b96ed430e1065bb"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"29f7cc7c185412da66c1d0089d9e75da01329a00":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["d4d69c535930b5cce125cff868d40f6373dc27d4","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","1ed65f3455364344c6d2ff76ea5421aac754eae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}