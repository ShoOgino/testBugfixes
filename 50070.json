{"path":"solr/core/src/java/org/apache/solr/api/ApiBag#validateAndRegister(Api,Map[String,String]).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/ApiBag#validateAndRegister(Api,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void validateAndRegister(Api api, Map<String, String> nameSubstitutes) {\n    ValidatingJsonMap spec = api.getSpec();\n    Api introspect = new IntrospectApi(api, isCoreSpecific);\n    List<String> methods = spec.getList(\"methods\", ENUM_OF, SUPPORTED_METHODS);\n    for (String method : methods) {\n      PathTrie<Api> registry = apis.get(method);\n\n      if (registry == null) apis.put(method, registry = new PathTrie<>(ImmutableSet.of(\"_introspect\")));\n      ValidatingJsonMap url = spec.getMap(\"url\", NOT_NULL);\n      ValidatingJsonMap params = url.getMap(\"params\", null);\n      if (params != null) {\n        for (Object o : params.keySet()) {\n          ValidatingJsonMap param = params.getMap(o.toString(), NOT_NULL);\n          param.get(\"type\", ENUM_OF, KNOWN_TYPES);\n        }\n      }\n      List<String> paths = url.getList(\"paths\", NOT_NULL);\n      ValidatingJsonMap parts = url.getMap(\"parts\", null);\n      if (parts != null) {\n        Set<String> wildCardNames = getWildCardNames(paths);\n        for (Object o : parts.keySet()) {\n          if (!wildCardNames.contains(o.toString()))\n            throw new RuntimeException(\"\" + o + \" is not a valid part name\");\n          ValidatingJsonMap pathMeta = parts.getMap(o.toString(), NOT_NULL);\n          pathMeta.get(\"type\", ENUM_OF, ImmutableSet.of(\"enum\", \"string\", \"int\", \"number\", \"boolean\"));\n        }\n      }\n      verifyCommands(api.getSpec());\n      for (String path : paths) {\n        registry.insert(path, nameSubstitutes, api);\n        registerIntrospect(nameSubstitutes, registry, path, introspect);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/ApiBag#validateAndRegister(Api,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void validateAndRegister(Api api, Map<String, String> nameSubstitutes) {\n    ValidatingJsonMap spec = api.getSpec();\n    Api introspect = new IntrospectApi(api, isCoreSpecific);\n    List<String> methods = spec.getList(\"methods\", ENUM_OF, SUPPORTED_METHODS);\n    for (String method : methods) {\n      PathTrie<Api> registry = apis.get(method);\n\n      if (registry == null) apis.put(method, registry = new PathTrie<>(ImmutableSet.of(\"_introspect\")));\n      ValidatingJsonMap url = spec.getMap(\"url\", NOT_NULL);\n      ValidatingJsonMap params = url.getMap(\"params\", null);\n      if (params != null) {\n        for (Object o : params.keySet()) {\n          ValidatingJsonMap param = params.getMap(o.toString(), NOT_NULL);\n          param.get(\"type\", ENUM_OF, KNOWN_TYPES);\n        }\n      }\n      List<String> paths = url.getList(\"paths\", NOT_NULL);\n      ValidatingJsonMap parts = url.getMap(\"parts\", null);\n      if (parts != null) {\n        Set<String> wildCardNames = getWildCardNames(paths);\n        for (Object o : parts.keySet()) {\n          if (!wildCardNames.contains(o.toString()))\n            throw new RuntimeException(\"\" + o + \" is not a valid part name\");\n          ValidatingJsonMap pathMeta = parts.getMap(o.toString(), NOT_NULL);\n          pathMeta.get(\"type\", ENUM_OF, ImmutableSet.of(\"enum\", \"string\", \"int\", \"number\", \"boolean\"));\n        }\n      }\n      verifyCommands(api.getSpec());\n      for (String path : paths) {\n        registry.insert(path, nameSubstitutes, api);\n        registerIntrospect(nameSubstitutes, registry, path, introspect);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/ApiBag#validateAndRegister(Api,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/ApiBag#validateAndRegister(Api,Map[String,String]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void validateAndRegister(Api api, Map<String, String> nameSubstitutes) {\n    ValidatingJsonMap spec = api.getSpec();\n    Api introspect = new IntrospectApi(api, isCoreSpecific);\n    List<String> methods = spec.getList(\"methods\", ENUM_OF, SUPPORTED_METHODS);\n    for (String method : methods) {\n      PathTrie<Api> registry = apis.get(method);\n\n      if (registry == null) apis.put(method, registry = new PathTrie<>(ImmutableSet.of(\"_introspect\")));\n      ValidatingJsonMap url = spec.getMap(\"url\", NOT_NULL);\n      ValidatingJsonMap params = url.getMap(\"params\", null);\n      if (params != null) {\n        for (Object o : params.keySet()) {\n          ValidatingJsonMap param = params.getMap(o.toString(), NOT_NULL);\n          param.get(\"type\", ENUM_OF, KNOWN_TYPES);\n        }\n      }\n      List<String> paths = url.getList(\"paths\", NOT_NULL);\n      ValidatingJsonMap parts = url.getMap(\"parts\", null);\n      if (parts != null) {\n        Set<String> wildCardNames = getWildCardNames(paths);\n        for (Object o : parts.keySet()) {\n          if (!wildCardNames.contains(o.toString()))\n            throw new RuntimeException(\"\" + o + \" is not a valid part name\");\n          ValidatingJsonMap pathMeta = parts.getMap(o.toString(), NOT_NULL);\n          pathMeta.get(\"type\", ENUM_OF, ImmutableSet.of(\"enum\", \"string\", \"int\", \"number\", \"boolean\"));\n        }\n      }\n      verifyCommands(api.getSpec());\n      for (String path : paths) {\n        registry.insert(path, nameSubstitutes, api);\n        registerIntrospect(nameSubstitutes, registry, path, introspect);\n      }\n    }\n  }\n\n","sourceOld":"  private void validateAndRegister(Api api, Map<String, String> nameSubstitutes) {\n    ValidatingJsonMap spec = api.getSpec();\n    Api introspect = new IntrospectApi(api, isCoreSpecific);\n    List<String> methods = spec.getList(\"methods\", ENUM_OF, SUPPORTED_METHODS);\n    for (String method : methods) {\n      PathTrie<Api> registry = apis.get(method);\n\n      if (registry == null) apis.put(method, registry = new PathTrie<>(ImmutableSet.of(\"_introspect\")));\n      ValidatingJsonMap url = spec.getMap(\"url\", NOT_NULL);\n      ValidatingJsonMap params = url.getMap(\"params\", null);\n      if (params != null) {\n        for (Object o : params.keySet()) {\n          ValidatingJsonMap param = params.getMap(o.toString(), NOT_NULL);\n          param.get(\"type\", ENUM_OF, KNOWN_TYPES);\n        }\n      }\n      List<String> paths = url.getList(\"paths\", NOT_NULL);\n      ValidatingJsonMap parts = url.getMap(\"parts\", null);\n      if (parts != null) {\n        Set<String> wildCardNames = getWildCardNames(paths);\n        for (Object o : parts.keySet()) {\n          if (!wildCardNames.contains(o.toString()))\n            throw new RuntimeException(\"\" + o + \" is not a valid part name\");\n          ValidatingJsonMap pathMeta = parts.getMap(o.toString(), NOT_NULL);\n          pathMeta.get(\"type\", ENUM_OF, ImmutableSet.of(\"enum\", \"string\", \"int\", \"number\", \"boolean\"));\n        }\n      }\n      verifyCommands(api.getSpec());\n      for (String path : paths) {\n        registry.insert(path, nameSubstitutes, api);\n        registerIntrospect(nameSubstitutes, registry, path, introspect);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}