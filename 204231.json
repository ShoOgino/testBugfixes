{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter#getReader().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter#getReader().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: returns a readonly reader, covering all\n   * committed as well as un-committed changes to the index.\n   * This provides \"near real-time\" searching, in that\n   * changes made during an IndexWriter session can be\n   * quickly made available for searching without closing\n   * the writer nor calling {@link #commit}.\n   *\n   * <p>Note that this is functionally equivalent to calling\n   * {#commit} and then using {@link IndexReader#open} to\n   * open a new reader.  But the turarnound time of this\n   * method should be faster since it avoids the potentially\n   * costly {@link #commit}.<p>\n   *\n   * <p>It's <i>near</i> real-time because there is no hard\n   * guarantee on how quickly you can get a new reader after\n   * making changes with IndexWriter.  You'll have to\n   * experiment in your situation to determine if it's\n   * fast enough.  As this is a new and experimental\n   * feature, please report back on your findings so we can\n   * learn, improve and iterate.</p>\n   *\n   * <p>The resulting reader supports {@link\n   * IndexReader#reopen}, but that call will simply forward\n   * back to this method (though this may change in the\n   * future).</p>\n   *\n   * <p>The very first time this method is called, this\n   * writer instance will make every effort to pool the\n   * readers that it opens for doing merges, applying\n   * deletes, etc.  This means additional resources (RAM,\n   * file descriptors, CPU time) will be consumed.</p>\n   *\n   * <p>For lower latency on reopening a reader, you should\n   * call {@link #setMergedSegmentWarmer} to\n   * pre-warm a newly merged segment before it's committed\n   * to the index.  This is important for minimizing\n   * index-to-search delay after a large merge.  </p>\n   *\n   * <p>If an addIndexes* call is running in another thread,\n   * then this reader will only search those segments from\n   * the foreign index that have been successfully copied\n   * over, so far</p>.\n   *\n   * <p><b>NOTE</b>: Once the writer is closed, any\n   * outstanding readers may continue to be used.  However,\n   * if you attempt to reopen any of those readers, you'll\n   * hit an {@link AlreadyClosedException}.</p>\n   *\n   * <p><b>NOTE:</b> This API is experimental and might\n   * change in incompatible ways in the next release.</p>\n   *\n   * @return IndexReader that covers entire index plus all\n   * changes made so far by this IndexWriter instance\n   *\n   * @throws IOException\n   */\n  public IndexReader getReader() throws IOException {\n    return getReader(IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#getReader().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#getReader().mjava","sourceNew":"  /**\n   * Expert: returns a readonly reader, covering all\n   * committed as well as un-committed changes to the index.\n   * This provides \"near real-time\" searching, in that\n   * changes made during an IndexWriter session can be\n   * quickly made available for searching without closing\n   * the writer nor calling {@link #commit}.\n   *\n   * <p>Note that this is functionally equivalent to calling\n   * {#commit} and then using {@link IndexReader#open} to\n   * open a new reader.  But the turarnound time of this\n   * method should be faster since it avoids the potentially\n   * costly {@link #commit}.<p>\n   *\n   * <p>It's <i>near</i> real-time because there is no hard\n   * guarantee on how quickly you can get a new reader after\n   * making changes with IndexWriter.  You'll have to\n   * experiment in your situation to determine if it's\n   * fast enough.  As this is a new and experimental\n   * feature, please report back on your findings so we can\n   * learn, improve and iterate.</p>\n   *\n   * <p>The resulting reader supports {@link\n   * IndexReader#reopen}, but that call will simply forward\n   * back to this method (though this may change in the\n   * future).</p>\n   *\n   * <p>The very first time this method is called, this\n   * writer instance will make every effort to pool the\n   * readers that it opens for doing merges, applying\n   * deletes, etc.  This means additional resources (RAM,\n   * file descriptors, CPU time) will be consumed.</p>\n   *\n   * <p>For lower latency on reopening a reader, you should\n   * call {@link #setMergedSegmentWarmer} to\n   * pre-warm a newly merged segment before it's committed\n   * to the index.  This is important for minimizing\n   * index-to-search delay after a large merge.  </p>\n   *\n   * <p>If an addIndexes* call is running in another thread,\n   * then this reader will only search those segments from\n   * the foreign index that have been successfully copied\n   * over, so far</p>.\n   *\n   * <p><b>NOTE</b>: Once the writer is closed, any\n   * outstanding readers may continue to be used.  However,\n   * if you attempt to reopen any of those readers, you'll\n   * hit an {@link AlreadyClosedException}.</p>\n   *\n   * <p><b>NOTE:</b> This API is experimental and might\n   * change in incompatible ways in the next release.</p>\n   *\n   * @return IndexReader that covers entire index plus all\n   * changes made so far by this IndexWriter instance\n   *\n   * @throws IOException\n   */\n  public IndexReader getReader() throws IOException {\n    return getReader(IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","sourceOld":"  /**\n   * Expert: returns a readonly reader, covering all\n   * committed as well as un-committed changes to the index.\n   * This provides \"near real-time\" searching, in that\n   * changes made during an IndexWriter session can be\n   * quickly made available for searching without closing\n   * the writer nor calling {@link #commit}.\n   *\n   * <p>Note that this is functionally equivalent to calling\n   * {#commit} and then using {@link IndexReader#open} to\n   * open a new reader.  But the turarnound time of this\n   * method should be faster since it avoids the potentially\n   * costly {@link #commit}.<p>\n   *\n   * <p>It's <i>near</i> real-time because there is no hard\n   * guarantee on how quickly you can get a new reader after\n   * making changes with IndexWriter.  You'll have to\n   * experiment in your situation to determine if it's\n   * fast enough.  As this is a new and experimental\n   * feature, please report back on your findings so we can\n   * learn, improve and iterate.</p>\n   *\n   * <p>The resulting reader supports {@link\n   * IndexReader#reopen}, but that call will simply forward\n   * back to this method (though this may change in the\n   * future).</p>\n   *\n   * <p>The very first time this method is called, this\n   * writer instance will make every effort to pool the\n   * readers that it opens for doing merges, applying\n   * deletes, etc.  This means additional resources (RAM,\n   * file descriptors, CPU time) will be consumed.</p>\n   *\n   * <p>For lower latency on reopening a reader, you should\n   * call {@link #setMergedSegmentWarmer} to\n   * pre-warm a newly merged segment before it's committed\n   * to the index.  This is important for minimizing\n   * index-to-search delay after a large merge.  </p>\n   *\n   * <p>If an addIndexes* call is running in another thread,\n   * then this reader will only search those segments from\n   * the foreign index that have been successfully copied\n   * over, so far</p>.\n   *\n   * <p><b>NOTE</b>: Once the writer is closed, any\n   * outstanding readers may continue to be used.  However,\n   * if you attempt to reopen any of those readers, you'll\n   * hit an {@link AlreadyClosedException}.</p>\n   *\n   * <p><b>NOTE:</b> This API is experimental and might\n   * change in incompatible ways in the next release.</p>\n   *\n   * @return IndexReader that covers entire index plus all\n   * changes made so far by this IndexWriter instance\n   *\n   * @throws IOException\n   */\n  public IndexReader getReader() throws IOException {\n    return getReader(IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}