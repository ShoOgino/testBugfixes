{"path":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testInvalidJsonProducesBadRequestSolrException().mjava","commits":[{"id":"edca3939219468f2ba2563c20d6ae96f01f6f1ff","date":1458064520,"type":0,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testInvalidJsonProducesBadRequestSolrException().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidJsonProducesBadRequestSolrException() throws Exception\n  {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    String invalidJsonString = \"}{\";\n    \n    try(SolrQueryRequest req = req()) {\n      try {\n        loader.load(req, rsp, new ContentStreamBase.StringStream(invalidJsonString), p);\n        fail(\"Expected invalid JSON to produce a SolrException.\");\n      } catch (SolrException expectedException) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, expectedException.code());\n        assertTrue(expectedException.getMessage().contains(\"Cannot parse\"));\n        assertTrue(expectedException.getMessage().contains(\"JSON\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testInvalidJsonProducesBadRequestSolrException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testInvalidJsonProducesBadRequestSolrException().mjava","sourceNew":"  @Test\n  public void testInvalidJsonProducesBadRequestSolrException() throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    String invalidJsonString = \"}{\";\n\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      loader.load(req(), rsp, new ContentStreamBase.StringStream(invalidJsonString), p);\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Cannot parse\"));\n    assertTrue(ex.getMessage().contains(\"JSON\"));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidJsonProducesBadRequestSolrException() throws Exception\n  {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    String invalidJsonString = \"}{\";\n    \n    try(SolrQueryRequest req = req()) {\n      try {\n        loader.load(req, rsp, new ContentStreamBase.StringStream(invalidJsonString), p);\n        fail(\"Expected invalid JSON to produce a SolrException.\");\n      } catch (SolrException expectedException) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, expectedException.code());\n        assertTrue(expectedException.getMessage().contains(\"Cannot parse\"));\n        assertTrue(expectedException.getMessage().contains(\"JSON\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testInvalidJsonProducesBadRequestSolrException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testInvalidJsonProducesBadRequestSolrException().mjava","sourceNew":"  @Test\n  public void testInvalidJsonProducesBadRequestSolrException() throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    String invalidJsonString = \"}{\";\n\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      loader.load(req(), rsp, new ContentStreamBase.StringStream(invalidJsonString), p);\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Cannot parse\"));\n    assertTrue(ex.getMessage().contains(\"JSON\"));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidJsonProducesBadRequestSolrException() throws Exception\n  {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    String invalidJsonString = \"}{\";\n    \n    try(SolrQueryRequest req = req()) {\n      try {\n        loader.load(req, rsp, new ContentStreamBase.StringStream(invalidJsonString), p);\n        fail(\"Expected invalid JSON to produce a SolrException.\");\n      } catch (SolrException expectedException) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, expectedException.code());\n        assertTrue(expectedException.getMessage().contains(\"Cannot parse\"));\n        assertTrue(expectedException.getMessage().contains(\"JSON\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testInvalidJsonProducesBadRequestSolrException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testInvalidJsonProducesBadRequestSolrException().mjava","sourceNew":"  @Test\n  public void testInvalidJsonProducesBadRequestSolrException() throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    String invalidJsonString = \"}{\";\n\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      loader.load(req(), rsp, new ContentStreamBase.StringStream(invalidJsonString), p);\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Cannot parse\"));\n    assertTrue(ex.getMessage().contains(\"JSON\"));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidJsonProducesBadRequestSolrException() throws Exception\n  {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    String invalidJsonString = \"}{\";\n    \n    try(SolrQueryRequest req = req()) {\n      try {\n        loader.load(req, rsp, new ContentStreamBase.StringStream(invalidJsonString), p);\n        fail(\"Expected invalid JSON to produce a SolrException.\");\n      } catch (SolrException expectedException) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, expectedException.code());\n        assertTrue(expectedException.getMessage().contains(\"Cannot parse\"));\n        assertTrue(expectedException.getMessage().contains(\"JSON\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"edca3939219468f2ba2563c20d6ae96f01f6f1ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["edca3939219468f2ba2563c20d6ae96f01f6f1ff"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["edca3939219468f2ba2563c20d6ae96f01f6f1ff","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["edca3939219468f2ba2563c20d6ae96f01f6f1ff","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"edca3939219468f2ba2563c20d6ae96f01f6f1ff":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edca3939219468f2ba2563c20d6ae96f01f6f1ff"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}