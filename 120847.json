{"path":"src/java/org/apache/solr/util/OpenBitSet#equals(Object).mjava","commits":[{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/OpenBitSet#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /** returns true if both sets have the same bits set */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(this instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92fbd1a3636fbb7f40cb6fdf1524a4eb5b773f6f","date":1155410084,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/OpenBitSet#equals(Object).mjava","pathOld":"src/java/org/apache/solr/util/OpenBitSet#equals(Object).mjava","sourceNew":"  /** returns true if both sets have the same bits set */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** returns true if both sets have the same bits set */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(this instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5108097d840f85a1779a41d0e412efb8130546e6","date":1228575321,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/util/OpenBitSet#equals(Object).mjava","sourceNew":null,"sourceOld":"  /** returns true if both sets have the same bits set */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof OpenBitSet)) return false;\n    OpenBitSet a;\n    OpenBitSet b = (OpenBitSet)o;\n    // make a the larger set.\n    if (b.wlen > this.wlen) {\n      a = b; b=this;\n    } else {\n      a=this;\n    }\n\n    // check for any set bits out of the range of b\n    for (int i=a.wlen-1; i>=b.wlen; i--) {\n      if (a.bits[i]!=0) return false;\n    }\n\n    for (int i=b.wlen-1; i>=0; i--) {\n      if (a.bits[i] != b.bits[i]) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21400778a0bf704d187a4848279049f5d90276c8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5108097d840f85a1779a41d0e412efb8130546e6":["92fbd1a3636fbb7f40cb6fdf1524a4eb5b773f6f"],"92fbd1a3636fbb7f40cb6fdf1524a4eb5b773f6f":["21400778a0bf704d187a4848279049f5d90276c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"21400778a0bf704d187a4848279049f5d90276c8":["92fbd1a3636fbb7f40cb6fdf1524a4eb5b773f6f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["21400778a0bf704d187a4848279049f5d90276c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5108097d840f85a1779a41d0e412efb8130546e6":[],"92fbd1a3636fbb7f40cb6fdf1524a4eb5b773f6f":["5108097d840f85a1779a41d0e412efb8130546e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5108097d840f85a1779a41d0e412efb8130546e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}