{"path":"lucene/core/src/java/org/apache/lucene/util/MapOfSets#put(K,V).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MapOfSets#put(K,V).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/MapOfSets#put(K,V).mjava","sourceNew":"  /**\n   * Adds val to the Set associated with key in the Map.  If key is not \n   * already in the map, a new Set will first be created.\n   * @return the size of the Set associated with key once val is added to it.\n   */\n  public int put(K key, V val) {\n    final Set<V> theSet;\n    if (theMap.containsKey(key)) {\n      theSet = theMap.get(key);\n    } else {\n      theSet = new HashSet<V>(23);\n      theMap.put(key, theSet);\n    }\n    theSet.add(val);\n    return theSet.size();\n  }\n\n","sourceOld":"  /**\n   * Adds val to the Set associated with key in the Map.  If key is not \n   * already in the map, a new Set will first be created.\n   * @return the size of the Set associated with key once val is added to it.\n   */\n  public int put(K key, V val) {\n    final Set<V> theSet;\n    if (theMap.containsKey(key)) {\n      theSet = theMap.get(key);\n    } else {\n      theSet = new HashSet<V>(23);\n      theMap.put(key, theSet);\n    }\n    theSet.add(val);\n    return theSet.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MapOfSets#put(K,V).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/MapOfSets#put(K,V).mjava","sourceNew":"  /**\n   * Adds val to the Set associated with key in the Map.  If key is not \n   * already in the map, a new Set will first be created.\n   * @return the size of the Set associated with key once val is added to it.\n   */\n  public int put(K key, V val) {\n    final Set<V> theSet;\n    if (theMap.containsKey(key)) {\n      theSet = theMap.get(key);\n    } else {\n      theSet = new HashSet<>(23);\n      theMap.put(key, theSet);\n    }\n    theSet.add(val);\n    return theSet.size();\n  }\n\n","sourceOld":"  /**\n   * Adds val to the Set associated with key in the Map.  If key is not \n   * already in the map, a new Set will first be created.\n   * @return the size of the Set associated with key once val is added to it.\n   */\n  public int put(K key, V val) {\n    final Set<V> theSet;\n    if (theMap.containsKey(key)) {\n      theSet = theMap.get(key);\n    } else {\n      theSet = new HashSet<V>(23);\n      theMap.put(key, theSet);\n    }\n    theSet.add(val);\n    return theSet.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}