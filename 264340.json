{"path":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.StringOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.StringValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.StringOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.StringValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.StringOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.StringValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff1421d1974cfd5072e195bbb63592657da2f66e","date":1285733489,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer)missingValue );\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator)creator, (Float)missingValue );\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntIndexValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatIndexValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer)missingValue );\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator)creator, (Float)missingValue );\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer)missingValue );\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator)creator, (Float)missingValue );\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85130289d2ed101fcc2d8798511c7c5b020ffab4","date":1297239859,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntIndexValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatIndexValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer)missingValue );\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator)creator, (Float)missingValue );\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer)missingValue );\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator)creator, (Float)missingValue );\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer)missingValue );\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator)creator, (Float)missingValue );\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer)missingValue );\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator)creator, (Float)missingValue );\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field, (Integer) missingValue);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field, (Float) missingValue);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7d432db6b63a4974306a3d1bc4e9a09d00eb4d5","date":1307284877,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field, (Integer) missingValue);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field, (Float) missingValue);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer)missingValue );\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator)creator, (Float)missingValue );\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer)missingValue );\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator)creator, (Float)missingValue );\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4695700bae5ad81cf229df09a73758433f9e8371","date":1308574155,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case SortField.REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e16bf7641024ed2270064ba9a6037c49266bcfb1","date":1308579310,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case SortField.REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718f8730b97959cb87aaeadc9fafb9513f3c1bfe","date":1308670382,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case SortField.REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case SortField.REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case SortField.REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case SortField.FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case SortField.REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, field, parser, (Integer) missingValue);\n      }\n\n    case FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, field, parser, (Float) missingValue);\n      }\n\n    case LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser, (Long) missingValue);\n\n    case DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser, (Double) missingValue);\n\n    case BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser, (Byte) missingValue);\n\n    case SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser, (Short) missingValue);\n\n    case CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);\n      }\n\n    case FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);\n      }\n\n    case LONG:\n      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );\n\n    case DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );\n\n    case BYTE:\n      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );\n\n    case SHORT:\n      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );\n\n    case CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28088b0a688977b79dec2cc9119cff2fb4aab7ee","date":1321197996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, field, parser, (Integer) missingValue);\n      }\n\n    case FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, field, parser, (Float) missingValue);\n      }\n\n    case LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser, (Long) missingValue);\n\n    case DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser, (Double) missingValue);\n\n    case BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser, (Byte) missingValue);\n\n    case SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser, (Short) missingValue);\n\n    case CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case STRING:\n      if (useIndexValues) {\n        return new FieldComparator.TermOrdValDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.TermOrdValComparator(numHits, field);\n      }\n\n    case STRING_VAL:\n      if (useIndexValues) {\n        return new FieldComparator.TermValDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.TermValComparator(numHits, field);\n      }\n\n    case REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, field, parser, (Integer) missingValue);\n      }\n\n    case FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, field, parser, (Float) missingValue);\n      }\n\n    case LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser, (Long) missingValue);\n\n    case DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser, (Double) missingValue);\n\n    case BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser, (Byte) missingValue);\n\n    case SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser, (Short) missingValue);\n\n    case CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case STRING:\n      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);\n\n    case STRING_VAL:\n      return new FieldComparator.TermValComparator(numHits, field);\n\n    case REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, field, parser, (Integer) missingValue);\n      }\n\n    case FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, field, parser, (Float) missingValue);\n      }\n\n    case LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser, (Long) missingValue);\n\n    case DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser, (Double) missingValue);\n\n    case BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser, (Byte) missingValue);\n\n    case SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser, (Short) missingValue);\n\n    case CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case STRING:\n      if (useIndexValues) {\n        return new FieldComparator.TermOrdValDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.TermOrdValComparator(numHits, field);\n      }\n\n    case STRING_VAL:\n      if (useIndexValues) {\n        return new FieldComparator.TermValDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.TermValComparator(numHits, field);\n      }\n\n    case REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * @lucene.experimental\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    switch (type) {\n    case SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case INT:\n      if (useIndexValues) {\n        return new FieldComparator.IntDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.IntComparator(numHits, field, parser, (Integer) missingValue);\n      }\n\n    case FLOAT:\n      if (useIndexValues) {\n        return new FieldComparator.FloatDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.FloatComparator(numHits, field, parser, (Float) missingValue);\n      }\n\n    case LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser, (Long) missingValue);\n\n    case DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser, (Double) missingValue);\n\n    case BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser, (Byte) missingValue);\n\n    case SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser, (Short) missingValue);\n\n    case CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case STRING:\n      if (useIndexValues) {\n        return new FieldComparator.TermOrdValDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.TermOrdValComparator(numHits, field);\n      }\n\n    case STRING_VAL:\n      if (useIndexValues) {\n        return new FieldComparator.TermValDocValuesComparator(numHits, field);\n      } else {\n        return new FieldComparator.TermValComparator(numHits, field);\n      }\n\n    case REWRITEABLE:\n      throw new IllegalStateException(\"SortField needs to be rewritten through Sort.rewrite(..) and SortField.rewrite(..)\");\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["3e492fb0f2bb0b4b47208286f9331ff55963c656","2e8d7ba2175f47e280231533f7d3016249cea88b"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"e16bf7641024ed2270064ba9a6037c49266bcfb1":["2e8d7ba2175f47e280231533f7d3016249cea88b","4695700bae5ad81cf229df09a73758433f9e8371"],"2553b00f699380c64959ccb27991289aae87be2e":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe","090a0320e4de4a3674376aef96b9701f47564f86"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","ff1421d1974cfd5072e195bbb63592657da2f66e"],"382fe3a6ca9745891afebda9b9a57cc158305545":["090a0320e4de4a3674376aef96b9701f47564f86"],"4695700bae5ad81cf229df09a73758433f9e8371":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["ff1421d1974cfd5072e195bbb63592657da2f66e"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e16bf7641024ed2270064ba9a6037c49266bcfb1","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["4695700bae5ad81cf229df09a73758433f9e8371"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["3e492fb0f2bb0b4b47208286f9331ff55963c656","e7d432db6b63a4974306a3d1bc4e9a09d00eb4d5"],"e7d432db6b63a4974306a3d1bc4e9a09d00eb4d5":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["85130289d2ed101fcc2d8798511c7c5b020ffab4","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","4695700bae5ad81cf229df09a73758433f9e8371"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["382fe3a6ca9745891afebda9b9a57cc158305545"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["ff1421d1974cfd5072e195bbb63592657da2f66e"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ff1421d1974cfd5072e195bbb63592657da2f66e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e16bf7641024ed2270064ba9a6037c49266bcfb1":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"382fe3a6ca9745891afebda9b9a57cc158305545":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"4695700bae5ad81cf229df09a73758433f9e8371":["e16bf7641024ed2270064ba9a6037c49266bcfb1","090a0320e4de4a3674376aef96b9701f47564f86","718f8730b97959cb87aaeadc9fafb9513f3c1bfe"],"ff1421d1974cfd5072e195bbb63592657da2f66e":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","01f60198ece724a6e96cd0b45f289cf42ff83d4f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["2553b00f699380c64959ccb27991289aae87be2e","382fe3a6ca9745891afebda9b9a57cc158305545","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["e7d432db6b63a4974306a3d1bc4e9a09d00eb4d5"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","e16bf7641024ed2270064ba9a6037c49266bcfb1","4695700bae5ad81cf229df09a73758433f9e8371"],"e7d432db6b63a4974306a3d1bc4e9a09d00eb4d5":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}