{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(AtomicReader,String,Parser,boolean).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(AtomicReader,String,Parser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getLongs(AtomicReader,String,LongParser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link AtomicReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link LongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(AtomicReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Longs} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link AtomicReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link LongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public Longs getLongs(AtomicReader reader, String field, LongParser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(AtomicReader,String,Parser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getLongs(AtomicReader,String,LongParser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link AtomicReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link LongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(AtomicReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Longs} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link AtomicReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link LongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public Longs getLongs(AtomicReader reader, String field, LongParser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(AtomicReader,String,Parser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getLongs(AtomicReader,String,LongParser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link AtomicReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link LongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(AtomicReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Longs} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link AtomicReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link LongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public Longs getLongs(AtomicReader reader, String field, LongParser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(AtomicReader,String,Parser,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link AtomicReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link LongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(AtomicReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}