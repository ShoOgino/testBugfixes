{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetsConfig).mjava","commits":[{"id":"da07b17df48cd6809d50473d39ce15f3c54a7773","date":1405858094,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetsConfig).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[]).mjava","sourceNew":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap, using\n   * the provided {@link FacetsConfig} which was used to build the wrapped\n   * reader.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetsConfig srcConfig) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    facetsConfig = new InnerFacetsConfig();\n    facetFields = new HashSet<>();\n    for (DimConfig dc : srcConfig.getDimConfigs().values()) {\n      facetFields.add(dc.indexFieldName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap,\n   * using the provided indexingParams.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    facetsConfig = new InnerFacetsConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826915a1a26e283898ce16169b6e05ebeca4287f","date":1405926462,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetsConfig).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetsConfig).mjava","sourceNew":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap, using\n   * the provided {@link FacetsConfig} which was used to build the wrapped\n   * reader.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetsConfig srcConfig) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    facetsConfig = new InnerFacetsConfig();\n    facetFields = new HashSet<>();\n    for (DimConfig dc : srcConfig.getDimConfigs().values()) {\n      facetFields.add(dc.indexFieldName);\n    }\n    // always add the default indexFieldName. This is because FacetsConfig does\n    // not explicitly record dimensions that were indexed under the default\n    // DimConfig, unless they have a custome DimConfig.\n    facetFields.add(FacetsConfig.DEFAULT_DIM_CONFIG.indexFieldName);\n  }\n\n","sourceOld":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap, using\n   * the provided {@link FacetsConfig} which was used to build the wrapped\n   * reader.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetsConfig srcConfig) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    facetsConfig = new InnerFacetsConfig();\n    facetFields = new HashSet<>();\n    for (DimConfig dc : srcConfig.getDimConfigs().values()) {\n      facetFields.add(dc.indexFieldName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/OrdinalMappingAtomicReader#OrdinalMappingAtomicReader(AtomicReader,int[],FacetsConfig).mjava","sourceNew":null,"sourceOld":"  /**\n   * Wraps an AtomicReader, mapping ordinals according to the ordinalMap, using\n   * the provided {@link FacetsConfig} which was used to build the wrapped\n   * reader.\n   */\n  public OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetsConfig srcConfig) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    facetsConfig = new InnerFacetsConfig();\n    facetFields = new HashSet<>();\n    for (DimConfig dc : srcConfig.getDimConfigs().values()) {\n      facetFields.add(dc.indexFieldName);\n    }\n    // always add the default indexFieldName. This is because FacetsConfig does\n    // not explicitly record dimensions that were indexed under the default\n    // DimConfig, unless they have a custome DimConfig.\n    facetFields.add(FacetsConfig.DEFAULT_DIM_CONFIG.indexFieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da07b17df48cd6809d50473d39ce15f3c54a7773":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"826915a1a26e283898ce16169b6e05ebeca4287f":["da07b17df48cd6809d50473d39ce15f3c54a7773"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["826915a1a26e283898ce16169b6e05ebeca4287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"da07b17df48cd6809d50473d39ce15f3c54a7773":["826915a1a26e283898ce16169b6e05ebeca4287f"],"826915a1a26e283898ce16169b6e05ebeca4287f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da07b17df48cd6809d50473d39ce15f3c54a7773"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}