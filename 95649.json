{"path":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4346940138bc1085f62b4535467e6724d604bc50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","sourceNew":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":["4346940138bc1085f62b4535467e6724d604bc50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","sourceNew":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","sourceNew":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b0085a9ec29ebc27be992a3712f4bd5d65d2106","date":1450912573,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","sourceNew":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n\n    SolrQueryRequest req = req();\n    RefCounted<SolrIndexSearcher> realtimeHolder = req.getCore().getRealtimeSearcher();\n\n    //\n    // filters\n    //\n    assertU(adoc(\"id\", \"12\"));\n    assertU(adoc(\"id\", \"13\"));\n\n    // this should not need to open another realtime searcher\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\", \"fqX\",\"id:11\") // nocommit\n        ,\"=={doc:{id:'11'}}\"\n    );\n\n    // assert that the same realtime searcher is still in effect (i.e. that we didn't\n    // open a new searcher when we didn't have to).\n    RefCounted<SolrIndexSearcher> realtimeHolder2 = req.getCore().getRealtimeSearcher();\n    assertEquals(realtimeHolder.get(), realtimeHolder2.get());  // Autocommit could possibly cause this to fail?\n    realtimeHolder2.decref();\n\n    // filter most likely different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:null}\"\n    );\n\n    // filter most likely same different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:13\")\n        ,\"=={doc:null}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:12\")\n        ,\"=={doc:{id:'12'}}\"\n    );\n\n    assertU(adoc(\"id\", \"14\"));\n    assertU(adoc(\"id\", \"15\"));\n\n    // id list, with some in index and some not, first id from index. Also test mutiple fq params.\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"12,14,13,15\", \"fl\",\"id\", \"fq\",\"id:[10 TO 14]\", \"fq\",\"id:[13 TO 19]\")\n        ,\"/response/docs==[{id:'14'},{id:'13'}]\"\n    );\n\n    assertU(adoc(\"id\", \"16\"));\n    assertU(adoc(\"id\", \"17\"));\n\n    // id list, with some in index and some not, first id from tlog\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"id:[15 TO 16]\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    // more complex filter\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"{!frange l=15 u=16}id\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    realtimeHolder.decref();\n    req.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea8d8339ec90c5a800f74c366414c1d2adbcb5aa","date":1450925993,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","sourceNew":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n\n    SolrQueryRequest req = req();\n    RefCounted<SolrIndexSearcher> realtimeHolder = req.getCore().getRealtimeSearcher();\n\n    //\n    // filters\n    //\n    assertU(adoc(\"id\", \"12\"));\n    assertU(adoc(\"id\", \"13\"));\n\n    // this should not need to open another realtime searcher\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:{id:'11'}}\"\n    );\n\n    // assert that the same realtime searcher is still in effect (i.e. that we didn't\n    // open a new searcher when we didn't have to).\n    RefCounted<SolrIndexSearcher> realtimeHolder2 = req.getCore().getRealtimeSearcher();\n    assertEquals(realtimeHolder.get(), realtimeHolder2.get());  // Autocommit could possibly cause this to fail?\n    realtimeHolder2.decref();\n\n    // filter most likely different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:null}\"\n    );\n\n    // filter most likely same different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:13\")\n        ,\"=={doc:null}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:12\")\n        ,\"=={doc:{id:'12'}}\"\n    );\n\n    assertU(adoc(\"id\", \"14\"));\n    assertU(adoc(\"id\", \"15\"));\n\n    // id list, with some in index and some not, first id from index. Also test mutiple fq params.\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"12,14,13,15\", \"fl\",\"id\", \"fq\",\"id:[10 TO 14]\", \"fq\",\"id:[13 TO 19]\")\n        ,\"/response/docs==[{id:'14'},{id:'13'}]\"\n    );\n\n    assertU(adoc(\"id\", \"16\"));\n    assertU(adoc(\"id\", \"17\"));\n\n    // id list, with some in index and some not, first id from tlog\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"id:[15 TO 16]\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    // more complex filter\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"{!frange l=15 u=16}id\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    realtimeHolder.decref();\n    req.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n\n    SolrQueryRequest req = req();\n    RefCounted<SolrIndexSearcher> realtimeHolder = req.getCore().getRealtimeSearcher();\n\n    //\n    // filters\n    //\n    assertU(adoc(\"id\", \"12\"));\n    assertU(adoc(\"id\", \"13\"));\n\n    // this should not need to open another realtime searcher\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\", \"fqX\",\"id:11\") // nocommit\n        ,\"=={doc:{id:'11'}}\"\n    );\n\n    // assert that the same realtime searcher is still in effect (i.e. that we didn't\n    // open a new searcher when we didn't have to).\n    RefCounted<SolrIndexSearcher> realtimeHolder2 = req.getCore().getRealtimeSearcher();\n    assertEquals(realtimeHolder.get(), realtimeHolder2.get());  // Autocommit could possibly cause this to fail?\n    realtimeHolder2.decref();\n\n    // filter most likely different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:null}\"\n    );\n\n    // filter most likely same different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:13\")\n        ,\"=={doc:null}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:12\")\n        ,\"=={doc:{id:'12'}}\"\n    );\n\n    assertU(adoc(\"id\", \"14\"));\n    assertU(adoc(\"id\", \"15\"));\n\n    // id list, with some in index and some not, first id from index. Also test mutiple fq params.\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"12,14,13,15\", \"fl\",\"id\", \"fq\",\"id:[10 TO 14]\", \"fq\",\"id:[13 TO 19]\")\n        ,\"/response/docs==[{id:'14'},{id:'13'}]\"\n    );\n\n    assertU(adoc(\"id\", \"16\"));\n    assertU(adoc(\"id\", \"17\"));\n\n    // id list, with some in index and some not, first id from tlog\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"id:[15 TO 16]\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    // more complex filter\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"{!frange l=15 u=16}id\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    realtimeHolder.decref();\n    req.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4346940138bc1085f62b4535467e6724d604bc50","date":1458915511,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","sourceNew":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\",\n        \"a_f\",\"-1.5\", \"a_fd\",\"-1.5\", \"a_fdS\",\"-1.5\",                        \"a_fs\",\"1.0\",\"a_fs\",\"2.5\", \"a_fds\",\"1.0\",\"a_fds\",\"2.5\",  \"a_fdsS\",\"1.0\",\"a_fdsS\",\"2.5\",\n        \"a_d\",\"-1.2E99\", \"a_dd\",\"-1.2E99\", \"a_ddS\",\"-1.2E99\",               \"a_ds\",\"1.0\",\"a_ds\",\"2.5\", \"a_dds\",\"1.0\",\"a_dds\",\"2.5\",  \"a_ddsS\",\"1.0\",\"a_ddsS\",\"2.5\",\n        \"a_i\",\"-1\", \"a_id\",\"-1\", \"a_idS\",\"-1\",                              \"a_is\",\"1\",\"a_is\",\"2\",     \"a_ids\",\"1\",\"a_ids\",\"2\",      \"a_idsS\",\"1\",\"a_idsS\",\"2\",\n        \"a_l\",\"-9999999999\", \"a_ld\",\"-9999999999\", \"a_ldS\",\"-9999999999\",   \"a_ls\",\"1\",\"a_ls\",\"9999999999\",     \"a_lds\",\"1\",\"a_lds\",\"9999999999\",      \"a_ldsS\",\"1\",\"a_ldsS\",\"9999999999\"\n    ));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, a_f,a_fd,a_fdS   a_fs,a_fds,a_fdsS,  a_d,a_dd,a_ddS,  a_ds,a_dds,a_ddsS,  a_i,a_id,a_idS   a_is,a_ids,a_idsS,   a_l,a_ld,a_ldS   a_ls,a_lds,a_ldsS\")\n        ,\"=={'doc':{'id':'1'\" +\n            \", a_f:-1.5, a_fd:-1.5, a_fdS:-1.5,  a_fs:[1.0,2.5],      a_fds:[1.0,2.5],a_fdsS:[1.0,2.5]\" +\n            \", a_d:-1.2E99, a_dd:-1.2E99, a_ddS:-1.2E99,              a_ds:[1.0,2.5],a_dds:[1.0,2.5],a_ddsS:[1.0,2.5]\" +\n            \", a_i:-1, a_id:-1, a_idS:-1,                             a_is:[1,2],a_ids:[1,2],a_idsS:[1,2]\" +\n            \", a_l:-9999999999, a_ld:-9999999999, a_ldS:-9999999999,  a_ls:[1,9999999999],a_lds:[1,9999999999],a_ldsS:[1,9999999999]\" +\n            \"       }}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n\n    // a cut-n-paste of the first big query, but this time it will be retrieved from the index rather than the transaction log\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, a_f,a_fd,a_fdS   a_fs,a_fds,a_fdsS,  a_d,a_dd,a_ddS,  a_ds,a_dds,a_ddsS,  a_i,a_id,a_idS   a_is,a_ids,a_idsS,   a_l,a_ld,a_ldS   a_ls,a_lds,a_ldsS\")\n        ,\"=={'doc':{'id':'1'\" +\n            \", a_f:-1.5, a_fd:-1.5, a_fdS:-1.5,  a_fs:[1.0,2.5],      a_fds:[1.0,2.5],a_fdsS:[1.0,2.5]\" +\n            \", a_d:-1.2E99, a_dd:-1.2E99, a_ddS:-1.2E99,              a_ds:[1.0,2.5],a_dds:[1.0,2.5],a_ddsS:[1.0,2.5]\" +\n            \", a_i:-1, a_id:-1, a_idS:-1,                             a_is:[1,2],a_ids:[1,2],a_idsS:[1,2]\" +\n            \", a_l:-9999999999, a_ld:-9999999999, a_ldS:-9999999999,  a_ls:[1,9999999999],a_lds:[1,9999999999],a_ldsS:[1,9999999999]\" +\n            \"       }}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 foo_s:abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n    // multivalued field\n    assertU(adoc(\"id\",\"12\", \"val_ls\",\"1\", \"val_ls\",\"2\"));\n    assertJQ(req(\"q\",\"id:12\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"12\", \"fl\",\"id,val_ls\")\n        ,\"=={'doc':{'id':'12', 'val_ls':[1,2]}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"12\", \"fl\",\"id,val_ls\")\n        ,\"=={'doc':{'id':'12', 'val_ls':[1,2]}}\"\n    );\n    assertJQ(req(\"q\",\"id:12\")\n        ,\"/response/numFound==1\"\n    );\n\n\n    SolrQueryRequest req = req();\n    RefCounted<SolrIndexSearcher> realtimeHolder = req.getCore().getRealtimeSearcher();\n\n    //\n    // filters\n    //\n    assertU(adoc(\"id\", \"12\"));\n    assertU(adoc(\"id\", \"13\"));\n\n    // this should not need to open another realtime searcher\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:{id:'11'}}\"\n    );\n\n    // assert that the same realtime searcher is still in effect (i.e. that we didn't\n    // open a new searcher when we didn't have to).\n    RefCounted<SolrIndexSearcher> realtimeHolder2 = req.getCore().getRealtimeSearcher();\n    assertEquals(realtimeHolder.get(), realtimeHolder2.get());  // Autocommit could possibly cause this to fail?\n    realtimeHolder2.decref();\n\n    // filter most likely different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:null}\"\n    );\n\n    // filter most likely same different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:13\")\n        ,\"=={doc:null}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:12\")\n        ,\"=={doc:{id:'12'}}\"\n    );\n\n    assertU(adoc(\"id\", \"14\"));\n    assertU(adoc(\"id\", \"15\"));\n\n    // id list, with some in index and some not, first id from index. Also test mutiple fq params.\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"12,14,13,15\", \"fl\",\"id\", \"fq\",\"id:[10 TO 14]\", \"fq\",\"id:[13 TO 19]\")\n        ,\"/response/docs==[{id:'14'},{id:'13'}]\"\n    );\n\n    assertU(adoc(\"id\", \"16\"));\n    assertU(adoc(\"id\", \"17\"));\n\n    // id list, with some in index and some not, first id from tlog\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"id:[15 TO 16]\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    // more complex filter\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"{!frange l=15 u=16}id\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    realtimeHolder.decref();\n    req.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\"));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n\n    SolrQueryRequest req = req();\n    RefCounted<SolrIndexSearcher> realtimeHolder = req.getCore().getRealtimeSearcher();\n\n    //\n    // filters\n    //\n    assertU(adoc(\"id\", \"12\"));\n    assertU(adoc(\"id\", \"13\"));\n\n    // this should not need to open another realtime searcher\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:{id:'11'}}\"\n    );\n\n    // assert that the same realtime searcher is still in effect (i.e. that we didn't\n    // open a new searcher when we didn't have to).\n    RefCounted<SolrIndexSearcher> realtimeHolder2 = req.getCore().getRealtimeSearcher();\n    assertEquals(realtimeHolder.get(), realtimeHolder2.get());  // Autocommit could possibly cause this to fail?\n    realtimeHolder2.decref();\n\n    // filter most likely different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:null}\"\n    );\n\n    // filter most likely same different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:13\")\n        ,\"=={doc:null}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:12\")\n        ,\"=={doc:{id:'12'}}\"\n    );\n\n    assertU(adoc(\"id\", \"14\"));\n    assertU(adoc(\"id\", \"15\"));\n\n    // id list, with some in index and some not, first id from index. Also test mutiple fq params.\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"12,14,13,15\", \"fl\",\"id\", \"fq\",\"id:[10 TO 14]\", \"fq\",\"id:[13 TO 19]\")\n        ,\"/response/docs==[{id:'14'},{id:'13'}]\"\n    );\n\n    assertU(adoc(\"id\", \"16\"));\n    assertU(adoc(\"id\", \"17\"));\n\n    // id list, with some in index and some not, first id from tlog\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"id:[15 TO 16]\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    // more complex filter\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"{!frange l=15 u=16}id\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    realtimeHolder.decref();\n    req.close();\n\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","bd0ef6574805f3cb9880e0983b7548a6aa933508"],"bugIntro":["adad543a700f6d0ed5cc6e09ed0e334639e5a786"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","sourceNew":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\",\n        \"a_f\",\"-1.5\", \"a_fd\",\"-1.5\", \"a_fdS\",\"-1.5\",                        \"a_fs\",\"1.0\",\"a_fs\",\"2.5\", \"a_fds\",\"1.0\",\"a_fds\",\"2.5\",  \"a_fdsS\",\"1.0\",\"a_fdsS\",\"2.5\",\n        \"a_d\",\"-1.2E99\", \"a_dd\",\"-1.2E99\", \"a_ddS\",\"-1.2E99\",               \"a_ds\",\"1.0\",\"a_ds\",\"2.5\", \"a_dds\",\"1.0\",\"a_dds\",\"2.5\",  \"a_ddsS\",\"1.0\",\"a_ddsS\",\"2.5\",\n        \"a_i\",\"-1\", \"a_id\",\"-1\", \"a_idS\",\"-1\",                              \"a_is\",\"1\",\"a_is\",\"2\",     \"a_ids\",\"1\",\"a_ids\",\"2\",      \"a_idsS\",\"1\",\"a_idsS\",\"2\",\n        \"a_l\",\"-9999999999\", \"a_ld\",\"-9999999999\", \"a_ldS\",\"-9999999999\",   \"a_ls\",\"1\",\"a_ls\",\"9999999999\",     \"a_lds\",\"1\",\"a_lds\",\"9999999999\",      \"a_ldsS\",\"1\",\"a_ldsS\",\"9999999999\"\n    ));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, a_f,a_fd,a_fdS   a_fs,a_fds,a_fdsS,  a_d,a_dd,a_ddS,  a_ds,a_dds,a_ddsS,  a_i,a_id,a_idS   a_is,a_ids,a_idsS,   a_l,a_ld,a_ldS   a_ls,a_lds,a_ldsS\")\n        ,\"=={'doc':{'id':'1'\" +\n            \", a_f:-1.5, a_fd:-1.5, a_fdS:-1.5,  a_fs:[1.0,2.5],      a_fds:[1.0,2.5],a_fdsS:[1.0,2.5]\" +\n            \", a_d:-1.2E99, a_dd:-1.2E99, a_ddS:-1.2E99,              a_ds:[1.0,2.5],a_dds:[1.0,2.5],a_ddsS:[1.0,2.5]\" +\n            \", a_i:-1, a_id:-1, a_idS:-1,                             a_is:[1,2],a_ids:[1,2],a_idsS:[1,2]\" +\n            \", a_l:-9999999999, a_ld:-9999999999, a_ldS:-9999999999,  a_ls:[1,9999999999],a_lds:[1,9999999999],a_ldsS:[1,9999999999]\" +\n            \"       }}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'numFoundExact':true,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n\n    // a cut-n-paste of the first big query, but this time it will be retrieved from the index rather than the transaction log\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, a_f,a_fd,a_fdS   a_fs,a_fds,a_fdsS,  a_d,a_dd,a_ddS,  a_ds,a_dds,a_ddsS,  a_i,a_id,a_idS   a_is,a_ids,a_idsS,   a_l,a_ld,a_ldS   a_ls,a_lds,a_ldsS\")\n        ,\"=={'doc':{'id':'1'\" +\n            \", a_f:-1.5, a_fd:-1.5, a_fdS:-1.5,  a_fs:[1.0,2.5],      a_fds:[1.0,2.5],a_fdsS:[1.0,2.5]\" +\n            \", a_d:-1.2E99, a_dd:-1.2E99, a_ddS:-1.2E99,              a_ds:[1.0,2.5],a_dds:[1.0,2.5],a_ddsS:[1.0,2.5]\" +\n            \", a_i:-1, a_id:-1, a_idS:-1,                             a_is:[1,2],a_ids:[1,2],a_idsS:[1,2]\" +\n            \", a_l:-9999999999, a_ld:-9999999999, a_ldS:-9999999999,  a_ls:[1,9999999999],a_lds:[1,9999999999],a_ldsS:[1,9999999999]\" +\n            \"       }}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'numFoundExact':true,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'numFoundExact':true,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 foo_s:abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n    // multivalued field\n    assertU(adoc(\"id\",\"12\", \"val_ls\",\"1\", \"val_ls\",\"2\"));\n    assertJQ(req(\"q\",\"id:12\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"12\", \"fl\",\"id,val_ls\")\n        ,\"=={'doc':{'id':'12', 'val_ls':[1,2]}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"12\", \"fl\",\"id,val_ls\")\n        ,\"=={'doc':{'id':'12', 'val_ls':[1,2]}}\"\n    );\n    assertJQ(req(\"q\",\"id:12\")\n        ,\"/response/numFound==1\"\n    );\n\n\n    SolrQueryRequest req = req();\n    RefCounted<SolrIndexSearcher> realtimeHolder = req.getCore().getRealtimeSearcher();\n\n    //\n    // filters\n    //\n    assertU(adoc(\"id\", \"12\"));\n    assertU(adoc(\"id\", \"13\"));\n\n    // this should not need to open another realtime searcher\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:{id:'11'}}\"\n    );\n\n    // assert that the same realtime searcher is still in effect (i.e. that we didn't\n    // open a new searcher when we didn't have to).\n    RefCounted<SolrIndexSearcher> realtimeHolder2 = req.getCore().getRealtimeSearcher();\n    assertEquals(realtimeHolder.get(), realtimeHolder2.get());  // Autocommit could possibly cause this to fail?\n    realtimeHolder2.decref();\n\n    // filter most likely different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:null}\"\n    );\n\n    // filter most likely same different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:13\")\n        ,\"=={doc:null}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:12\")\n        ,\"=={doc:{id:'12'}}\"\n    );\n\n    assertU(adoc(\"id\", \"14\"));\n    assertU(adoc(\"id\", \"15\"));\n\n    // id list, with some in index and some not, first id from index. Also test mutiple fq params.\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"12,14,13,15\", \"fl\",\"id\", \"fq\",\"id:[10 TO 14]\", \"fq\",\"id:[13 TO 19]\")\n        ,\"/response/docs==[{id:'14'},{id:'13'}]\"\n    );\n\n    assertU(adoc(\"id\", \"16\"));\n    assertU(adoc(\"id\", \"17\"));\n\n    // id list, with some in index and some not, first id from tlog\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"id:[15 TO 16]\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    // more complex filter\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"{!frange l=15 u=16}id\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    realtimeHolder.decref();\n    req.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\",\n        \"a_f\",\"-1.5\", \"a_fd\",\"-1.5\", \"a_fdS\",\"-1.5\",                        \"a_fs\",\"1.0\",\"a_fs\",\"2.5\", \"a_fds\",\"1.0\",\"a_fds\",\"2.5\",  \"a_fdsS\",\"1.0\",\"a_fdsS\",\"2.5\",\n        \"a_d\",\"-1.2E99\", \"a_dd\",\"-1.2E99\", \"a_ddS\",\"-1.2E99\",               \"a_ds\",\"1.0\",\"a_ds\",\"2.5\", \"a_dds\",\"1.0\",\"a_dds\",\"2.5\",  \"a_ddsS\",\"1.0\",\"a_ddsS\",\"2.5\",\n        \"a_i\",\"-1\", \"a_id\",\"-1\", \"a_idS\",\"-1\",                              \"a_is\",\"1\",\"a_is\",\"2\",     \"a_ids\",\"1\",\"a_ids\",\"2\",      \"a_idsS\",\"1\",\"a_idsS\",\"2\",\n        \"a_l\",\"-9999999999\", \"a_ld\",\"-9999999999\", \"a_ldS\",\"-9999999999\",   \"a_ls\",\"1\",\"a_ls\",\"9999999999\",     \"a_lds\",\"1\",\"a_lds\",\"9999999999\",      \"a_ldsS\",\"1\",\"a_ldsS\",\"9999999999\"\n    ));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, a_f,a_fd,a_fdS   a_fs,a_fds,a_fdsS,  a_d,a_dd,a_ddS,  a_ds,a_dds,a_ddsS,  a_i,a_id,a_idS   a_is,a_ids,a_idsS,   a_l,a_ld,a_ldS   a_ls,a_lds,a_ldsS\")\n        ,\"=={'doc':{'id':'1'\" +\n            \", a_f:-1.5, a_fd:-1.5, a_fdS:-1.5,  a_fs:[1.0,2.5],      a_fds:[1.0,2.5],a_fdsS:[1.0,2.5]\" +\n            \", a_d:-1.2E99, a_dd:-1.2E99, a_ddS:-1.2E99,              a_ds:[1.0,2.5],a_dds:[1.0,2.5],a_ddsS:[1.0,2.5]\" +\n            \", a_i:-1, a_id:-1, a_idS:-1,                             a_is:[1,2],a_ids:[1,2],a_idsS:[1,2]\" +\n            \", a_l:-9999999999, a_ld:-9999999999, a_ldS:-9999999999,  a_ls:[1,9999999999],a_lds:[1,9999999999],a_ldsS:[1,9999999999]\" +\n            \"       }}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n\n    // a cut-n-paste of the first big query, but this time it will be retrieved from the index rather than the transaction log\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, a_f,a_fd,a_fdS   a_fs,a_fds,a_fdsS,  a_d,a_dd,a_ddS,  a_ds,a_dds,a_ddsS,  a_i,a_id,a_idS   a_is,a_ids,a_idsS,   a_l,a_ld,a_ldS   a_ls,a_lds,a_ldsS\")\n        ,\"=={'doc':{'id':'1'\" +\n            \", a_f:-1.5, a_fd:-1.5, a_fdS:-1.5,  a_fs:[1.0,2.5],      a_fds:[1.0,2.5],a_fdsS:[1.0,2.5]\" +\n            \", a_d:-1.2E99, a_dd:-1.2E99, a_ddS:-1.2E99,              a_ds:[1.0,2.5],a_dds:[1.0,2.5],a_ddsS:[1.0,2.5]\" +\n            \", a_i:-1, a_id:-1, a_idS:-1,                             a_is:[1,2],a_ids:[1,2],a_idsS:[1,2]\" +\n            \", a_l:-9999999999, a_ld:-9999999999, a_ldS:-9999999999,  a_ls:[1,9999999999],a_lds:[1,9999999999],a_ldsS:[1,9999999999]\" +\n            \"       }}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 foo_s:abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n    // multivalued field\n    assertU(adoc(\"id\",\"12\", \"val_ls\",\"1\", \"val_ls\",\"2\"));\n    assertJQ(req(\"q\",\"id:12\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"12\", \"fl\",\"id,val_ls\")\n        ,\"=={'doc':{'id':'12', 'val_ls':[1,2]}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"12\", \"fl\",\"id,val_ls\")\n        ,\"=={'doc':{'id':'12', 'val_ls':[1,2]}}\"\n    );\n    assertJQ(req(\"q\",\"id:12\")\n        ,\"/response/numFound==1\"\n    );\n\n\n    SolrQueryRequest req = req();\n    RefCounted<SolrIndexSearcher> realtimeHolder = req.getCore().getRealtimeSearcher();\n\n    //\n    // filters\n    //\n    assertU(adoc(\"id\", \"12\"));\n    assertU(adoc(\"id\", \"13\"));\n\n    // this should not need to open another realtime searcher\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:{id:'11'}}\"\n    );\n\n    // assert that the same realtime searcher is still in effect (i.e. that we didn't\n    // open a new searcher when we didn't have to).\n    RefCounted<SolrIndexSearcher> realtimeHolder2 = req.getCore().getRealtimeSearcher();\n    assertEquals(realtimeHolder.get(), realtimeHolder2.get());  // Autocommit could possibly cause this to fail?\n    realtimeHolder2.decref();\n\n    // filter most likely different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:null}\"\n    );\n\n    // filter most likely same different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:13\")\n        ,\"=={doc:null}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:12\")\n        ,\"=={doc:{id:'12'}}\"\n    );\n\n    assertU(adoc(\"id\", \"14\"));\n    assertU(adoc(\"id\", \"15\"));\n\n    // id list, with some in index and some not, first id from index. Also test mutiple fq params.\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"12,14,13,15\", \"fl\",\"id\", \"fq\",\"id:[10 TO 14]\", \"fq\",\"id:[13 TO 19]\")\n        ,\"/response/docs==[{id:'14'},{id:'13'}]\"\n    );\n\n    assertU(adoc(\"id\", \"16\"));\n    assertU(adoc(\"id\", \"17\"));\n\n    // id list, with some in index and some not, first id from tlog\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"id:[15 TO 16]\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    // more complex filter\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"{!frange l=15 u=16}id\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    realtimeHolder.decref();\n    req.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"adad543a700f6d0ed5cc6e09ed0e334639e5a786","date":1596206141,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testGetRealtime().mjava","sourceNew":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\",\n        \"a_f\",\"-1.5\", \"a_fd\",\"-1.5\", \"a_fdS\",\"-1.5\",                        \"a_fs\",\"1.0\",\"a_fs\",\"2.5\", \"a_fds\",\"1.0\",\"a_fds\",\"2.5\",  \"a_fdsS\",\"1.0\",\"a_fdsS\",\"2.5\",\n        \"a_d\",\"-1.2E99\", \"a_dd\",\"-1.2E99\", \"a_ddS\",\"-1.2E99\",               \"a_ds\",\"1.0\",\"a_ds\",\"2.5\", \"a_dds\",\"1.0\",\"a_dds\",\"2.5\",  \"a_ddsS\",\"1.0\",\"a_ddsS\",\"2.5\",\n        \"a_i\",\"-1\", \"a_id\",\"-1\", \"a_idS\",\"-1\",                              \"a_is\",\"1\",\"a_is\",\"2\",     \"a_ids\",\"1\",\"a_ids\",\"2\",      \"a_idsS\",\"1\",\"a_idsS\",\"2\",\n        \"a_l\",\"-9999999999\", \"a_ld\",\"-9999999999\", \"a_ldS\",\"-9999999999\",   \"a_ls\",\"1\",\"a_ls\",\"9999999999\",     \"a_lds\",\"1\",\"a_lds\",\"9999999999\",      \"a_ldsS\",\"1\",\"a_ldsS\",\"9999999999\",\n        \"a_s\", \"abc\", \"a_sd\", \"bcd\", \"a_sdS\", \"cde\",                        \"a_ss\",\"def\",\"a_ss\", \"efg\",    \"a_sds\",\"fgh\",\"a_sds\",\"ghi\",   \"a_sdsS\",\"hij\",\"a_sdsS\",\"ijk\",\n        \"a_b\", \"false\", \"a_bd\", \"true\", \"a_bdS\", \"false\",                    \"a_bs\",\"true\",\"a_bs\", \"false\",    \"a_bds\",\"true\",\"a_bds\",\"false\",   \"a_bdsS\",\"true\",\"a_bdsS\",\"false\"\n    ));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, a_f,a_fd,a_fdS   a_fs,a_fds,a_fdsS,  \" +\n            \"a_d,a_dd,a_ddS,  a_ds,a_dds,a_ddsS,  a_i,a_id,a_idS   a_is,a_ids,a_idsS,   \" +\n            \"a_l,a_ld,a_ldS,   a_ls,a_lds,a_ldsS,  a_s,a_sd,a_sdS   a_ss,a_sds,a_sdsS,   \" +\n            \"a_b,a_bd,a_bdS,   a_bs,a_bds,a_bdsS\"\n        )\n        ,\"=={'doc':{'id':'1'\" +\n            \", a_f:-1.5, a_fd:-1.5, a_fdS:-1.5,  a_fs:[1.0,2.5],      a_fds:[1.0,2.5],a_fdsS:[1.0,2.5]\" +\n            \", a_d:-1.2E99, a_dd:-1.2E99, a_ddS:-1.2E99,              a_ds:[1.0,2.5],a_dds:[1.0,2.5],a_ddsS:[1.0,2.5]\" +\n            \", a_i:-1, a_id:-1, a_idS:-1,                             a_is:[1,2],a_ids:[1,2],a_idsS:[1,2]\" +\n            \", a_l:-9999999999, a_ld:-9999999999, a_ldS:-9999999999,  a_ls:[1,9999999999],a_lds:[1,9999999999],a_ldsS:[1,9999999999]\" +\n            \", a_s:'abc', a_sd:'bcd', a_sdS:'cde',  a_ss:['def','efg'],a_sds:['fgh','ghi'],a_sdsS:['hij','ijk']\" +\n            \", a_b:false, a_bd:true, a_bdS:false,  a_bs:[true,false],a_bds:[true,false],a_bdsS:[true,false]\" +\n            \"       }}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'numFoundExact':true,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n\n    // a cut-n-paste of the first big query, but this time it will be retrieved from the index rather than the transaction log\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, a_f,a_fd,a_fdS   a_fs,a_fds,a_fdsS,  a_d,a_dd,a_ddS,  a_ds,a_dds,a_ddsS,  a_i,a_id,a_idS   a_is,a_ids,a_idsS,   a_l,a_ld,a_ldS   a_ls,a_lds,a_ldsS\")\n        ,\"=={'doc':{'id':'1'\" +\n            \", a_f:-1.5, a_fd:-1.5, a_fdS:-1.5,  a_fs:[1.0,2.5],      a_fds:[1.0,2.5],a_fdsS:[1.0,2.5]\" +\n            \", a_d:-1.2E99, a_dd:-1.2E99, a_ddS:-1.2E99,              a_ds:[1.0,2.5],a_dds:[1.0,2.5],a_ddsS:[1.0,2.5]\" +\n            \", a_i:-1, a_id:-1, a_idS:-1,                             a_is:[1,2],a_ids:[1,2],a_idsS:[1,2]\" +\n            \", a_l:-9999999999, a_ld:-9999999999, a_ldS:-9999999999,  a_ls:[1,9999999999],a_lds:[1,9999999999],a_ldsS:[1,9999999999]\" +\n            \"       }}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'numFoundExact':true,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'numFoundExact':true,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 foo_s:abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n    // multivalued field\n    assertU(adoc(\"id\",\"12\", \"val_ls\",\"1\", \"val_ls\",\"2\"));\n    assertJQ(req(\"q\",\"id:12\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"12\", \"fl\",\"id,val_ls\")\n        ,\"=={'doc':{'id':'12', 'val_ls':[1,2]}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"12\", \"fl\",\"id,val_ls\")\n        ,\"=={'doc':{'id':'12', 'val_ls':[1,2]}}\"\n    );\n    assertJQ(req(\"q\",\"id:12\")\n        ,\"/response/numFound==1\"\n    );\n\n\n    SolrQueryRequest req = req();\n    RefCounted<SolrIndexSearcher> realtimeHolder = req.getCore().getRealtimeSearcher();\n\n    //\n    // filters\n    //\n    assertU(adoc(\"id\", \"12\"));\n    assertU(adoc(\"id\", \"13\"));\n\n    // this should not need to open another realtime searcher\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:{id:'11'}}\"\n    );\n\n    // assert that the same realtime searcher is still in effect (i.e. that we didn't\n    // open a new searcher when we didn't have to).\n    RefCounted<SolrIndexSearcher> realtimeHolder2 = req.getCore().getRealtimeSearcher();\n    assertEquals(realtimeHolder.get(), realtimeHolder2.get());  // Autocommit could possibly cause this to fail?\n    realtimeHolder2.decref();\n\n    // filter most likely different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:null}\"\n    );\n\n    // filter most likely same different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:13\")\n        ,\"=={doc:null}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:12\")\n        ,\"=={doc:{id:'12'}}\"\n    );\n\n    assertU(adoc(\"id\", \"14\"));\n    assertU(adoc(\"id\", \"15\"));\n\n    // id list, with some in index and some not, first id from index. Also test mutiple fq params.\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"12,14,13,15\", \"fl\",\"id\", \"fq\",\"id:[10 TO 14]\", \"fq\",\"id:[13 TO 19]\")\n        ,\"/response/docs==[{id:'14'},{id:'13'}]\"\n    );\n\n    assertU(adoc(\"id\", \"16\"));\n    assertU(adoc(\"id\", \"17\"));\n\n    // id list, with some in index and some not, first id from tlog\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"id:[15 TO 16]\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    // more complex filter\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"{!frange l=15 u=16}id\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    realtimeHolder.decref();\n    req.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGetRealtime() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"1\",\n        \"a_f\",\"-1.5\", \"a_fd\",\"-1.5\", \"a_fdS\",\"-1.5\",                        \"a_fs\",\"1.0\",\"a_fs\",\"2.5\", \"a_fds\",\"1.0\",\"a_fds\",\"2.5\",  \"a_fdsS\",\"1.0\",\"a_fdsS\",\"2.5\",\n        \"a_d\",\"-1.2E99\", \"a_dd\",\"-1.2E99\", \"a_ddS\",\"-1.2E99\",               \"a_ds\",\"1.0\",\"a_ds\",\"2.5\", \"a_dds\",\"1.0\",\"a_dds\",\"2.5\",  \"a_ddsS\",\"1.0\",\"a_ddsS\",\"2.5\",\n        \"a_i\",\"-1\", \"a_id\",\"-1\", \"a_idS\",\"-1\",                              \"a_is\",\"1\",\"a_is\",\"2\",     \"a_ids\",\"1\",\"a_ids\",\"2\",      \"a_idsS\",\"1\",\"a_idsS\",\"2\",\n        \"a_l\",\"-9999999999\", \"a_ld\",\"-9999999999\", \"a_ldS\",\"-9999999999\",   \"a_ls\",\"1\",\"a_ls\",\"9999999999\",     \"a_lds\",\"1\",\"a_lds\",\"9999999999\",      \"a_ldsS\",\"1\",\"a_ldsS\",\"9999999999\"\n    ));\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, a_f,a_fd,a_fdS   a_fs,a_fds,a_fdsS,  a_d,a_dd,a_ddS,  a_ds,a_dds,a_ddsS,  a_i,a_id,a_idS   a_is,a_ids,a_idsS,   a_l,a_ld,a_ldS   a_ls,a_lds,a_ldsS\")\n        ,\"=={'doc':{'id':'1'\" +\n            \", a_f:-1.5, a_fd:-1.5, a_fdS:-1.5,  a_fs:[1.0,2.5],      a_fds:[1.0,2.5],a_fdsS:[1.0,2.5]\" +\n            \", a_d:-1.2E99, a_dd:-1.2E99, a_ddS:-1.2E99,              a_ds:[1.0,2.5],a_dds:[1.0,2.5],a_ddsS:[1.0,2.5]\" +\n            \", a_i:-1, a_id:-1, a_idS:-1,                             a_is:[1,2],a_ids:[1,2],a_idsS:[1,2]\" +\n            \", a_l:-9999999999, a_ld:-9999999999, a_ldS:-9999999999,  a_ls:[1,9999999999],a_lds:[1,9999999999],a_ldsS:[1,9999999999]\" +\n            \"       }}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'numFoundExact':true,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n\n    // a cut-n-paste of the first big query, but this time it will be retrieved from the index rather than the transaction log\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, a_f,a_fd,a_fdS   a_fs,a_fds,a_fdsS,  a_d,a_dd,a_ddS,  a_ds,a_dds,a_ddsS,  a_i,a_id,a_idS   a_is,a_ids,a_idsS,   a_l,a_ld,a_ldS   a_ls,a_lds,a_ldsS\")\n        ,\"=={'doc':{'id':'1'\" +\n            \", a_f:-1.5, a_fd:-1.5, a_fdS:-1.5,  a_fs:[1.0,2.5],      a_fds:[1.0,2.5],a_fdsS:[1.0,2.5]\" +\n            \", a_d:-1.2E99, a_dd:-1.2E99, a_ddS:-1.2E99,              a_ds:[1.0,2.5],a_dds:[1.0,2.5],a_ddsS:[1.0,2.5]\" +\n            \", a_i:-1, a_id:-1, a_idS:-1,                             a_is:[1,2],a_ids:[1,2],a_idsS:[1,2]\" +\n            \", a_l:-9999999999, a_ld:-9999999999, a_ldS:-9999999999,  a_ls:[1,9999999999],a_lds:[1,9999999999],a_ldsS:[1,9999999999]\" +\n            \"       }}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'1'}}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\", \"fl\",\"id\")\n        ,\"=={\" +\n        \"  'response':{'numFound':1,'start':0,'numFoundExact':true,'docs':[\" +\n        \"      {\" +\n        \"        'id':'1'}]\" +\n        \"  }}}\"\n    );\n\n    assertU(delI(\"1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"1\")\n        ,\"=={'response':{'numFound':0,'start':0,'numFoundExact':true,'docs':[]}}\"\n    );\n\n\n    assertU(adoc(\"id\",\"10\"));\n    assertU(adoc(\"id\",\"11\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'10'}}\"\n    );\n    assertU(delQ(\"id:10 foo_s:abcdef\"));\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"10\")\n        ,\"=={'doc':null}\"\n    );\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\")\n        ,\"=={'doc':{'id':'11'}}\"\n    );\n\n    // multivalued field\n    assertU(adoc(\"id\",\"12\", \"val_ls\",\"1\", \"val_ls\",\"2\"));\n    assertJQ(req(\"q\",\"id:12\")\n        ,\"/response/numFound==0\"\n    );\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"12\", \"fl\",\"id,val_ls\")\n        ,\"=={'doc':{'id':'12', 'val_ls':[1,2]}}\"\n    );\n\n    assertU(commit());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"12\", \"fl\",\"id,val_ls\")\n        ,\"=={'doc':{'id':'12', 'val_ls':[1,2]}}\"\n    );\n    assertJQ(req(\"q\",\"id:12\")\n        ,\"/response/numFound==1\"\n    );\n\n\n    SolrQueryRequest req = req();\n    RefCounted<SolrIndexSearcher> realtimeHolder = req.getCore().getRealtimeSearcher();\n\n    //\n    // filters\n    //\n    assertU(adoc(\"id\", \"12\"));\n    assertU(adoc(\"id\", \"13\"));\n\n    // this should not need to open another realtime searcher\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"11\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:{id:'11'}}\"\n    );\n\n    // assert that the same realtime searcher is still in effect (i.e. that we didn't\n    // open a new searcher when we didn't have to).\n    RefCounted<SolrIndexSearcher> realtimeHolder2 = req.getCore().getRealtimeSearcher();\n    assertEquals(realtimeHolder.get(), realtimeHolder2.get());  // Autocommit could possibly cause this to fail?\n    realtimeHolder2.decref();\n\n    // filter most likely different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:11\")\n        ,\"=={doc:null}\"\n    );\n\n    // filter most likely same different segment\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:13\")\n        ,\"=={doc:null}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"12\", \"fl\",\"id\", \"fq\",\"id:12\")\n        ,\"=={doc:{id:'12'}}\"\n    );\n\n    assertU(adoc(\"id\", \"14\"));\n    assertU(adoc(\"id\", \"15\"));\n\n    // id list, with some in index and some not, first id from index. Also test mutiple fq params.\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"12,14,13,15\", \"fl\",\"id\", \"fq\",\"id:[10 TO 14]\", \"fq\",\"id:[13 TO 19]\")\n        ,\"/response/docs==[{id:'14'},{id:'13'}]\"\n    );\n\n    assertU(adoc(\"id\", \"16\"));\n    assertU(adoc(\"id\", \"17\"));\n\n    // id list, with some in index and some not, first id from tlog\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"id:[15 TO 16]\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    // more complex filter\n    assertJQ(req(\"qt\",\"/get\",\"ids\",\"17,16,15,14\", \"fl\",\"id\", \"fq\",\"{!frange l=15 u=16}id\")\n        ,\"/response/docs==[{id:'16'},{id:'15'}]\"\n    );\n\n    realtimeHolder.decref();\n    req.close();\n\n  }\n\n","bugFix":["4346940138bc1085f62b4535467e6724d604bc50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"adad543a700f6d0ed5cc6e09ed0e334639e5a786":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["4346940138bc1085f62b4535467e6724d604bc50"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"4346940138bc1085f62b4535467e6724d604bc50":["ea8d8339ec90c5a800f74c366414c1d2adbcb5aa"],"2b0085a9ec29ebc27be992a3712f4bd5d65d2106":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["adad543a700f6d0ed5cc6e09ed0e334639e5a786"],"ea8d8339ec90c5a800f74c366414c1d2adbcb5aa":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106"]},"commit2Childs":{"adad543a700f6d0ed5cc6e09ed0e334639e5a786":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["adad543a700f6d0ed5cc6e09ed0e334639e5a786"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2b0085a9ec29ebc27be992a3712f4bd5d65d2106"],"4346940138bc1085f62b4535467e6724d604bc50":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"2b0085a9ec29ebc27be992a3712f4bd5d65d2106":["ea8d8339ec90c5a800f74c366414c1d2adbcb5aa"],"ea8d8339ec90c5a800f74c366414c1d2adbcb5aa":["4346940138bc1085f62b4535467e6724d604bc50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}