{"path":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.WrappedPositionArray#get(int).mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.WrappedPositionArray#get(int).mjava","pathOld":"/dev/null","sourceNew":"    /** Get Position instance for this absolute position;\n     *  this is allowed to be arbitrarily far \"in the\n     *  future\" but cannot be before the last freeBefore. */\n    public Position get(int pos) {\n      while(pos >= nextPos) {\n        //System.out.println(\"count=\" + count + \" vs len=\" + positions.length);\n        if (count == positions.length) {\n          Position[] newPositions = new Position[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          //System.out.println(\"grow positions \" + newPositions.length);\n          System.arraycopy(positions, nextWrite, newPositions, 0, positions.length-nextWrite);\n          System.arraycopy(positions, 0, newPositions, positions.length-nextWrite, nextWrite);\n          for(int i=positions.length;i<newPositions.length;i++) {\n            newPositions[i] = new Position();\n          }\n          nextWrite = positions.length;\n          positions = newPositions;\n        }\n        if (nextWrite == positions.length) {\n          nextWrite = 0;\n        }\n        // Should have already been reset:\n        assert positions[nextWrite].count == 0;\n        positions[nextWrite++].pos = nextPos++;\n        count++;\n      }\n      assert inBounds(pos);\n      final int index = getIndex(pos);\n      assert positions[index].pos == pos;\n      return positions[index];\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.WrappedPositionArray#get(int).mjava","pathOld":"/dev/null","sourceNew":"    /** Get Position instance for this absolute position;\n     *  this is allowed to be arbitrarily far \"in the\n     *  future\" but cannot be before the last freeBefore. */\n    public Position get(int pos) {\n      while(pos >= nextPos) {\n        //System.out.println(\"count=\" + count + \" vs len=\" + positions.length);\n        if (count == positions.length) {\n          Position[] newPositions = new Position[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          //System.out.println(\"grow positions \" + newPositions.length);\n          System.arraycopy(positions, nextWrite, newPositions, 0, positions.length-nextWrite);\n          System.arraycopy(positions, 0, newPositions, positions.length-nextWrite, nextWrite);\n          for(int i=positions.length;i<newPositions.length;i++) {\n            newPositions[i] = new Position();\n          }\n          nextWrite = positions.length;\n          positions = newPositions;\n        }\n        if (nextWrite == positions.length) {\n          nextWrite = 0;\n        }\n        // Should have already been reset:\n        assert positions[nextWrite].count == 0;\n        positions[nextWrite++].pos = nextPos++;\n        count++;\n      }\n      assert inBounds(pos);\n      final int index = getIndex(pos);\n      assert positions[index].pos == pos;\n      return positions[index];\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c6453827f947004a68ad9db7418781e9df2f660"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c6453827f947004a68ad9db7418781e9df2f660":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}