{"path":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","pathOld":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], TextField.TYPE_STORED));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum]));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], TextField.TYPE_STORED));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum]));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new TextField(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], Field.Store.YES));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum], Field.Store.NO));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], TextField.TYPE_STORED));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum]));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4","7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxo);\n    \n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        associations.setAssociation(path, null);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n        ++nFacetsAdded;\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      CategoryAssociation[] associationsValues = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        associations.setAssociation(associationsPaths[i], associationsValues[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationsValues[i]\n            + \")\");\n        ++nFacetsAdded;\n      }\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new TextField(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], Field.Store.YES));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum], Field.Store.NO));\n\n      // invoke the category document builder for adding categories to the\n      // document and, as required, to the taxonomy index\n      assocFacetFields.addFields(doc, associations);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \" + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new TextField(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], Field.Store.YES));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum], Field.Store.NO));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxo);\n    \n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        associations.setAssociation(path, null);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n        ++nFacetsAdded;\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      CategoryAssociation[] associationsValues = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        associations.setAssociation(associationsPaths[i], associationsValues[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationsValues[i]\n            + \")\");\n        ++nFacetsAdded;\n      }\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new TextField(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], Field.Store.YES));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum], Field.Store.NO));\n\n      // invoke the category document builder for adding categories to the\n      // document and, as required, to the taxonomy index\n      assocFacetFields.addFields(doc, associations);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \" + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new TextField(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], Field.Store.YES));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum], Field.Store.NO));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/CategoryAssociationsIndexer#index(Directory,Directory).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxo);\n    \n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        associations.setAssociation(path, null);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n        ++nFacetsAdded;\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = CategoryAssociationsUtils.categories[docNum];\n      CategoryAssociation[] associationsValues = CategoryAssociationsUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        associations.setAssociation(associationsPaths[i], associationsValues[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\" + associationsPaths[i] + \",\" + associationsValues[i] + \")\");\n        ++nFacetsAdded;\n      }\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new TextField(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], Field.Store.YES));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum], Field.Store.NO));\n\n      // invoke the category document builder for adding categories to the\n      // document and, as required, to the taxonomy index\n      assocFacetFields.addFields(doc, associations);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \" + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxo);\n    \n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        associations.setAssociation(path, null);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n        ++nFacetsAdded;\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      CategoryAssociation[] associationsValues = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        associations.setAssociation(associationsPaths[i], associationsValues[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationsValues[i]\n            + \")\");\n        ++nFacetsAdded;\n      }\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new TextField(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], Field.Store.YES));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum], Field.Store.NO));\n\n      // invoke the category document builder for adding categories to the\n      // document and, as required, to the taxonomy index\n      assocFacetFields.addFields(doc, associations);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \" + nFacetsAdded + \" facets.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/CategoryAssociationsIndexer#index(Directory,Directory).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxo);\n    \n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        associations.setAssociation(path, null);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n        ++nFacetsAdded;\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = CategoryAssociationsUtils.categories[docNum];\n      CategoryAssociation[] associationsValues = CategoryAssociationsUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        associations.setAssociation(associationsPaths[i], associationsValues[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\" + associationsPaths[i] + \",\" + associationsValues[i] + \")\");\n        ++nFacetsAdded;\n      }\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new TextField(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], Field.Store.YES));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum], Field.Store.NO));\n\n      // invoke the category document builder for adding categories to the\n      // document and, as required, to the taxonomy index\n      assocFacetFields.addFields(doc, associations);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \" + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    AssociationsFacetFields assocFacetFields = new AssociationsFacetFields(taxo);\n    \n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryAssociationsContainer associations = new CategoryAssociationsContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        associations.setAssociation(path, null);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n        ++nFacetsAdded;\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      CategoryAssociation[] associationsValues = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        associations.setAssociation(associationsPaths[i], associationsValues[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationsValues[i]\n            + \")\");\n        ++nFacetsAdded;\n      }\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new TextField(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], Field.Store.YES));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum], Field.Store.NO));\n\n      // invoke the category document builder for adding categories to the\n      // document and, as required, to the taxonomy index\n      assocFacetFields.addFields(doc, associations);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \" + nFacetsAdded + \" facets.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["04f07771a2a7dd3a395700665ed839c3dae2def2","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}