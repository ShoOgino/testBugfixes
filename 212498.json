{"path":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testTargetCFS().mjava","commits":[{"id":"fa5b6a0cc759497b9d71a1745b55ed981ec1cdd5","date":1244724733,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testTargetCFS().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1642: make sure CFS of destination indexwriter\n  // is respected when copying tail segments\n  public void testTargetCFS() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = newWriter(dir, true);\n    writer.setUseCompoundFile(false);\n    addDocs(writer, 1);\n    writer.close();\n\n    Directory other = new RAMDirectory();\n    writer = newWriter(other, true);\n    writer.setUseCompoundFile(true);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    assertTrue(writer.newestSegment().getUseCompoundFile());\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testTargetCFS().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testTargetCFS().mjava","sourceNew":"  // LUCENE-1642: make sure CFS of destination indexwriter\n  // is respected when copying tail segments\n  public void testTargetCFS() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    addDocs(writer, 1);\n    writer.close();\n\n    Directory other = new RAMDirectory();\n    writer = newWriter(other, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(true);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(true);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    assertTrue(writer.newestSegment().getUseCompoundFile());\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1642: make sure CFS of destination indexwriter\n  // is respected when copying tail segments\n  public void testTargetCFS() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = newWriter(dir, true);\n    writer.setUseCompoundFile(false);\n    addDocs(writer, 1);\n    writer.close();\n\n    Directory other = new RAMDirectory();\n    writer = newWriter(other, true);\n    writer.setUseCompoundFile(true);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    assertTrue(writer.newestSegment().getUseCompoundFile());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testTargetCFS().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testTargetCFS().mjava","sourceNew":"  // LUCENE-1642: make sure CFS of destination indexwriter\n  // is respected when copying tail segments\n  public void testTargetCFS() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = newWriter(dir, true);\n    writer.setUseCompoundFile(false);\n    addDocs(writer, 1);\n    writer.close();\n\n    Directory other = new RAMDirectory();\n    writer = newWriter(other, true);\n    writer.setUseCompoundFile(true);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    assertTrue(writer.newestSegment().getUseCompoundFile());\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1642: make sure CFS of destination indexwriter\n  // is respected when copying tail segments\n  public void testTargetCFS() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    addDocs(writer, 1);\n    writer.close();\n\n    Directory other = new RAMDirectory();\n    writer = newWriter(other, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(true);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(true);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    assertTrue(writer.newestSegment().getUseCompoundFile());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testTargetCFS().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testTargetCFS().mjava","sourceNew":"  // LUCENE-1642: make sure CFS of destination indexwriter\n  // is respected when copying tail segments\n  public void testTargetCFS() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    addDocs(writer, 1);\n    writer.close();\n\n    Directory other = new RAMDirectory();\n    writer = newWriter(other, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(true);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(true);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    assertTrue(writer.newestSegment().getUseCompoundFile());\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1642: make sure CFS of destination indexwriter\n  // is respected when copying tail segments\n  public void testTargetCFS() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = newWriter(dir, true);\n    writer.setUseCompoundFile(false);\n    addDocs(writer, 1);\n    writer.close();\n\n    Directory other = new RAMDirectory();\n    writer = newWriter(other, true);\n    writer.setUseCompoundFile(true);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    assertTrue(writer.newestSegment().getUseCompoundFile());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testTargetCFS().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testTargetCFS().mjava","sourceNew":"  // LUCENE-1642: make sure CFS of destination indexwriter\n  // is respected when copying tail segments\n  public void testTargetCFS() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    addDocs(writer, 1);\n    writer.close();\n\n    Directory other = new RAMDirectory();\n    writer = newWriter(other, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(true);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(true);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    assertTrue(writer.newestSegment().getUseCompoundFile());\n    writer.close();\n  }\n\n","sourceOld":"  // LUCENE-1642: make sure CFS of destination indexwriter\n  // is respected when copying tail segments\n  public void testTargetCFS() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    addDocs(writer, 1);\n    writer.close();\n\n    Directory other = new RAMDirectory();\n    writer = newWriter(other, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(true);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(true);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    assertTrue(writer.newestSegment().getUseCompoundFile());\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["fa5b6a0cc759497b9d71a1745b55ed981ec1cdd5"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fa5b6a0cc759497b9d71a1745b55ed981ec1cdd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa5b6a0cc759497b9d71a1745b55ed981ec1cdd5"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fa5b6a0cc759497b9d71a1745b55ed981ec1cdd5":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}