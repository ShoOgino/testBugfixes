{"path":"backwards/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    if (!uncaughtExceptions.isEmpty()) {\n      System.err.println(\"The following exceptions were thrown by threads:\");\n      for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n        System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n        entry.exception.printStackTrace(System.err);\n      }\n      fail(\"Some threads throwed uncaught exceptions!\");\n    }\n    \n    super.tearDown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/LuceneTestCase#tearDown().mjava","sourceNew":"  @Override\n  protected void tearDown() throws Exception {\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    if (!uncaughtExceptions.isEmpty()) {\n      System.err.println(\"The following exceptions were thrown by threads:\");\n      for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n        System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n        entry.exception.printStackTrace(System.err);\n      }\n      fail(\"Some threads throwed uncaught exceptions!\");\n    }\n    \n    super.tearDown();\n  }\n\n","sourceOld":"  @Override\n  protected void tearDown() throws Exception {\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n    try {\n      // this isn't as useful as calling directly from the scope where the \n      // index readers are used, because they could be gc'ed just before\n      // tearDown is called.\n      // But it's better then nothing.\n      assertSaneFieldCaches(getTestLabel());\n      \n      if (ConcurrentMergeScheduler.anyUnhandledExceptions()) {\n        // Clear the failure so that we don't just keep\n        // failing subsequent test cases\n        ConcurrentMergeScheduler.clearUnhandledExceptions();\n        fail(\"ConcurrentMergeScheduler hit unhandled exceptions\");\n      }\n    } finally {\n      purgeFieldCache(FieldCache.DEFAULT);\n    }\n    \n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    if (!uncaughtExceptions.isEmpty()) {\n      System.err.println(\"The following exceptions were thrown by threads:\");\n      for (UncaughtExceptionEntry entry : uncaughtExceptions) {\n        System.err.println(\"*** Thread: \" + entry.thread.getName() + \" ***\");\n        entry.exception.printStackTrace(System.err);\n      }\n      fail(\"Some threads throwed uncaught exceptions!\");\n    }\n    \n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}