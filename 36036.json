{"path":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = (int) readerOrds.get(doc);\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = (int) readerOrds.get(doc);\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = (int) readerOrds.get(doc);\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = (int) readerOrds.get(doc);\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = (int) readerOrds.get(doc);\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = (int) readerOrds.get(doc);\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      if (order == -1) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) {\n          return 0;\n        }\n\n        // and at this point we know that neither value is null, so safe to compare\n        if (order == NULL_ORD) {\n          return bottomValue.compareTo(parent.NULL_VAL);\n        } else {\n          termsIndex.lookup(order, tempBR);\n          return bottomValue.compareTo(tempBR);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = (int) readerOrds.get(doc);\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      if (order == -1) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) {\n          return 0;\n        }\n\n        // and at this point we know that neither value is null, so safe to compare\n        if (order == NULL_ORD) {\n          return bottomValue.compareTo(parent.NULL_VAL);\n        } else {\n          termsIndex.lookupOrd(order, tempBR);\n          return bottomValue.compareTo(tempBR);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      if (order == -1) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) {\n          return 0;\n        }\n\n        // and at this point we know that neither value is null, so safe to compare\n        if (order == NULL_ORD) {\n          return bottomValue.compareTo(parent.NULL_VAL);\n        } else {\n          termsIndex.lookup(order, tempBR);\n          return bottomValue.compareTo(tempBR);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      if (order == -1) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) {\n          return 0;\n        }\n\n        // and at this point we know that neither value is null, so safe to compare\n        if (order == NULL_ORD) {\n          return bottomValue.compareTo(parent.NULL_VAL);\n        } else {\n          termsIndex.lookupOrd(order, tempBR);\n          return bottomValue.compareTo(tempBR);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = (int) readerOrds.get(doc);\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n\n    }\n\n","bugFix":["a05818166782d252a03edc21cda3f0f186170b70","0c81a8899ecd6e225389876dfeac34c6873c4516"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int docOrd = termsIndex.getOrd(doc);\n      if (docOrd == -1) docOrd = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - docOrd;\n      } else if (bottomOrd >= docOrd) {\n        // the equals case always means bottom is > doc\n        // (because we set bottomOrd to the lower bound in\n        // setBottom):\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      if (order == -1) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) {\n          return 0;\n        }\n\n        // and at this point we know that neither value is null, so safe to compare\n        if (order == NULL_ORD) {\n          return bottomValue.compareTo(parent.NULL_VAL);\n        } else {\n          termsIndex.lookupOrd(order, tempBR);\n          return bottomValue.compareTo(tempBR);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea252e5e61c9d1ca6595deb9168914574963e5c3","date":1389815046,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int docOrd = termsIndex.getOrd(doc);\n      if (docOrd == -1) docOrd = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - docOrd;\n      } else if (bottomOrd >= docOrd) {\n        // the equals case always means bottom is > doc\n        // (because we set bottomOrd to the lower bound in\n        // setBottom):\n        return 1;\n      } else {\n        return -1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].AnyOrdComparator#compareBottom(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = termsIndex.getOrd(doc);\n      if (order == -1) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal\n        // case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) {\n          return 0;\n        }\n\n        // and at this point we know that neither value is null, so safe to compare\n        if (order == NULL_ORD) {\n          return bottomValue.compareTo(parent.NULL_VAL);\n        } else {\n          termsIndex.lookupOrd(order, tempBR);\n          return bottomValue.compareTo(tempBR);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["c26f00b574427b55127e869b935845554afde1fa","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["c26f00b574427b55127e869b935845554afde1fa"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["d4d69c535930b5cce125cff868d40f6373dc27d4","ea252e5e61c9d1ca6595deb9168914574963e5c3"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea252e5e61c9d1ca6595deb9168914574963e5c3":["7615b855702e008d91a95a2578bf05d27372f599"],"7615b855702e008d91a95a2578bf05d27372f599":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27ab7b234eab0cbc020836989b96ed430e1065bb"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ea252e5e61c9d1ca6595deb9168914574963e5c3":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"7615b855702e008d91a95a2578bf05d27372f599":["ea252e5e61c9d1ca6595deb9168914574963e5c3"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}