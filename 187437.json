{"path":"solr/src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","pathOld":"/dev/null","sourceNew":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","sourceNew":null,"sourceOld":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","sourceNew":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","sourceOld":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","pathOld":"/dev/null","sourceNew":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/AutoCommitTest#testMaxDocs().mjava","pathOld":"solr/src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","sourceNew":"  public void testMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 14;\n    core.registerNewSearcherListener(trigger);\n  \n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(trigger.waitForNewSearcher(10000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","sourceOld":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":6,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/AutoCommitTest#testSoftCommitMaxDocs().mjava","pathOld":"solr/src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","sourceNew":"  public void testSoftCommitMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    NewSearcherListener trigger = new NewSearcherListener();\n\n    DirectUpdateHandler2 updateHandler = (DirectUpdateHandler2)core.getUpdateHandler();\n    CommitTracker tracker = updateHandler.commitTracker;\n    tracker.timeUpperBound = -1;\n    tracker.docsUpperBound = 8;\n \n    \n    NewSearcherListener softTrigger = new NewSearcherListener();\n\n    CommitTracker softTracker = updateHandler.softCommitTracker;\n    softTracker.timeUpperBound = -1;\n    softTracker.docsUpperBound = 4;\n    core.registerNewSearcherListener(softTrigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add documents\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<4; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"4\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertTrue(softTrigger.waitForNewSearcher(10000));\n    \n    core.registerNewSearcherListener(trigger);\n    \n    assertQ(\"should find 5\", req(\"*:*\") ,\"//result[@numFound=5]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 0, tracker.getCommitCount());\n    \n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"5\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:4\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:5\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    \n    for( int i=6; i<10; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", Integer.toString(i), \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    req.close();\n    \n    \n    assertTrue(trigger.waitForNewSearcher(10000));\n    assertQ(\"should find 10\", req(\"*:*\") ,\"//result[@numFound=10]\" );\n    assertEquals( 1, softTracker.getCommitCount());\n    assertEquals( 1, tracker.getCommitCount());\n  }\n\n","sourceOld":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","sourceNew":null,"sourceOld":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/update/AutoCommitTest#XXXtestMaxDocs().mjava","sourceNew":null,"sourceOld":"  /* This test is causing too many failures on one of the build slaves.\n     Temporarily disabled. -Mike Klaas */\n  public void XXXtestMaxDocs() throws Exception {\n\n    SolrCore core = h.getCore();\n    CommitListener trigger = new CommitListener(core);\n\n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)core.getUpdateHandler();\n    DirectUpdateHandler2.CommitTracker tracker = updater.tracker;\n    tracker.timeUpperBound = 100000;\n    tracker.docsUpperBound = 14;\n    // updater.commitCallbacks.add(trigger);\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    // It should not be there right away\n    assertQ(\"shouldn't find any\", req(\"id:A1\") ,\"//result[@numFound=0]\" );\n    assertEquals( 0, tracker.getCommitCount());\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n    // Wait longer than the autocommit time\n    assertTrue(trigger.waitForCommit(20000));\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A15\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n      \n    // Now make sure we can find it\n    assertQ(\"should find one\", req(\"id:A14\") ,\"//result[@numFound=1]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    // But not the one added afterward\n    assertQ(\"should not find one\", req(\"id:A15\") ,\"//result[@numFound=0]\" );\n    assertEquals( 1, tracker.getCommitCount());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1da8d55113b689b06716246649de6f62430f15c0","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["1da8d55113b689b06716246649de6f62430f15c0","7a71a0b2d4be2299a163f60626729852d81a8e02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"7a71a0b2d4be2299a163f60626729852d81a8e02":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}