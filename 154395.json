{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,Directory,Long,FieldInfos).mjava","commits":[{"id":"240c2c222c1b7eb253bd7e596c2d4731355836ef","date":1416366514,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,Directory,Long,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,IOContext,Directory,DocValuesFormat,Long,FieldInfos).mjava","sourceNew":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, Directory dir, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, IOContext.READ, segmentSuffix);\n    DocValuesFormat dvFormat = si.info.getCodec().docValuesFormat();\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, IOContext context, Directory dir,\n      DocValuesFormat dvFormat, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, context, segmentSuffix);\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790693f23f4e88a59fbb25e47cc25f6d493b03cb","date":1553077690,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,Directory,Long,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,Directory,Long,FieldInfos).mjava","sourceNew":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, Directory dir, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, false, IOContext.READ, segmentSuffix);\n    DocValuesFormat dvFormat = si.info.getCodec().docValuesFormat();\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, Directory dir, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, IOContext.READ, segmentSuffix);\n    DocValuesFormat dvFormat = si.info.getCodec().docValuesFormat();\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,Directory,Long,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,Directory,Long,FieldInfos).mjava","sourceNew":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, Directory dir, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, false, IOContext.READ, segmentSuffix, Collections.emptyMap());\n    DocValuesFormat dvFormat = si.info.getCodec().docValuesFormat();\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, Directory dir, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, false, IOContext.READ, segmentSuffix);\n    DocValuesFormat dvFormat = si.info.getCodec().docValuesFormat();\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,Directory,Long,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,Directory,Long,FieldInfos).mjava","sourceNew":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, Directory dir, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, false, IOContext.READ, segmentSuffix);\n    DocValuesFormat dvFormat = si.info.getCodec().docValuesFormat();\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, Directory dir, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, false, IOContext.READ, segmentSuffix, Collections.emptyMap());\n    DocValuesFormat dvFormat = si.info.getCodec().docValuesFormat();\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bec68e7c41fed133827595747d853cad504e481e","date":1583501052,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,Directory,Long,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#newDocValuesProducer(SegmentCommitInfo,Directory,Long,FieldInfos).mjava","sourceNew":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, Directory dir, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, IOContext.READ, segmentSuffix);\n    DocValuesFormat dvFormat = si.info.getCodec().docValuesFormat();\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private RefCount<DocValuesProducer> newDocValuesProducer(SegmentCommitInfo si, Directory dir, final Long gen, FieldInfos infos) throws IOException {\n    Directory dvDir = dir;\n    String segmentSuffix = \"\";\n    if (gen.longValue() != -1) {\n      dvDir = si.info.dir; // gen'd files are written outside CFS, so use SegInfo directory\n      segmentSuffix = Long.toString(gen.longValue(), Character.MAX_RADIX);\n    }\n\n    // set SegmentReadState to list only the fields that are relevant to that gen\n    SegmentReadState srs = new SegmentReadState(dvDir, si.info, infos, false, IOContext.READ, segmentSuffix);\n    DocValuesFormat dvFormat = si.info.getCodec().docValuesFormat();\n    return new RefCount<DocValuesProducer>(dvFormat.fieldsProducer(srs)) {\n      @SuppressWarnings(\"synthetic-access\")\n      @Override\n      protected void release() throws IOException {\n        object.close();\n        synchronized (SegmentDocValues.this) {\n          genDVProducers.remove(gen);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["240c2c222c1b7eb253bd7e596c2d4731355836ef"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bec68e7c41fed133827595747d853cad504e481e":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"240c2c222c1b7eb253bd7e596c2d4731355836ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bec68e7c41fed133827595747d853cad504e481e"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"]},"commit2Childs":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["240c2c222c1b7eb253bd7e596c2d4731355836ef"],"bec68e7c41fed133827595747d853cad504e481e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"240c2c222c1b7eb253bd7e596c2d4731355836ef":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["bec68e7c41fed133827595747d853cad504e481e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}