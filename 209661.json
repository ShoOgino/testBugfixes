{"path":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","sourceNew":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","sourceOld":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3491d1030513020096bfb21ebca26fd57070ff8","date":1401733016,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","sourceNew":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(new IOContext(new FlushInfo(0, entry.length))), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","sourceOld":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#prunePendingEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","sourceNew":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(new IOContext(new FlushInfo(0, entry.length))), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","sourceOld":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(new IOContext(new FlushInfo(0, entry.length))), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileWriter#prunePendingEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","sourceNew":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(new IOContext(new FlushInfo(0, entry.length))), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","sourceOld":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(new IOContext(new FlushInfo(0, entry.length))), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#prunePendingEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#prunePendingEntries().mjava","sourceNew":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(this.context), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","sourceOld":"  private final void prunePendingEntries() throws IOException {\n    // claim the output and copy all pending files in\n    if (outputTaken.compareAndSet(false, true)) {\n      try {\n        while (!pendingEntries.isEmpty()) {\n          FileEntry entry = pendingEntries.poll();\n          copyFileEntry(getOutput(new IOContext(new FlushInfo(0, entry.length))), entry);\n          entries.put(entry.file, entry);\n        }\n      } finally {\n        final boolean compareAndSet = outputTaken.compareAndSet(true, false);\n        assert compareAndSet;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["a3491d1030513020096bfb21ebca26fd57070ff8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a3491d1030513020096bfb21ebca26fd57070ff8","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3491d1030513020096bfb21ebca26fd57070ff8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a3491d1030513020096bfb21ebca26fd57070ff8"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3491d1030513020096bfb21ebca26fd57070ff8":["989d940c4bf402188f4f0ae13736836885227383","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}