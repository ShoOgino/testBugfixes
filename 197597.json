{"path":"lucene/src/test/org/apache/lucene/util/LineFileDocs#open(Random).mjava","commits":[{"id":"f3b2c50e54fbd02d573055c75580702f3d68cda5","date":1294494344,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#open().mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open() throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n    }\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#open(Random).mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LineFileDocs#open(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LineFileDocs#open(Random).mjava","sourceNew":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","sourceOld":"  private synchronized void open(Random random) throws IOException {\n    InputStream is = getClass().getResourceAsStream(path);\n    if (is == null) {\n      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)\n      is = new FileInputStream(path);\n    }\n    File file = new File(path);\n    long size;\n    if (file.exists()) {\n      size = file.length();\n    } else {\n      size = is.available();\n    }\n    if (path.endsWith(\".gz\")) {\n      is = new GZIPInputStream(is);\n      // guestimate:\n      size *= 2.8;\n    }\n\n    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);\n    reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"), BUFFER_SIZE);\n\n    // Override sizes for currently \"known\" line files:\n    if (path.equals(\"europarl.lines.txt.gz\")) {\n      size = 15129506L;\n    } else if (path.equals(\"/home/hudson/lucene-data/enwiki.random.lines.txt.gz\")) {\n      size = 3038178822L;\n    }\n\n    // Randomly seek to starting point:\n    if (random != null && size > 3) {\n      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"TEST: LineFileDocs: seek to fp=\" + seekTo + \" on open\");\n      }\n      reader.skip(seekTo);\n      reader.readLine();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f3b2c50e54fbd02d573055c75580702f3d68cda5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3b2c50e54fbd02d573055c75580702f3d68cda5"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["f3b2c50e54fbd02d573055c75580702f3d68cda5"]},"commit2Childs":{"f3b2c50e54fbd02d573055c75580702f3d68cda5":["868da859b43505d9d2a023bfeae6dd0c795f5295","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f3b2c50e54fbd02d573055c75580702f3d68cda5","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}