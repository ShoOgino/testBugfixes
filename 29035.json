{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidExpression().mjava","commits":[{"id":"40b789607c421011dabf36a935528a74fb8b2032","date":1492023606,"type":1,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidExpression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DateEvaluatorTest#testInvalidExpression().mjava","sourceNew":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"nope(a)\");\n      evaluator.evaluate(new Tuple(null));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid date expression nope\"));\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one of [year, month, day\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"nope(a)\");\n      evaluator.evaluate(new Tuple(null));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid date expression nope\"));\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one of [year, month, day\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33835f41305f4d46c2a650da7c564ac99f485ab1","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidExpression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidExpression().mjava","sourceNew":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"nope(a)\");\n      evaluator.evaluate(new Tuple(null));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid date expression nope\"));\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one of [year, month, day\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"nope(a)\");\n      evaluator.evaluate(new Tuple(null));\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid date expression nope\"));\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one of [year, month, day\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      assertTrue(false);\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ff6b743fd4051da7ebb3d397d1ef80833a741a","date":1492023891,"type":5,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidExpression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidExpression().mjava","sourceNew":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"nope(a)\");\n      evaluator.evaluate(new Tuple(null));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid date expression nope\"));\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one of [year, month, day\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"nope(a)\");\n      evaluator.evaluate(new Tuple(null));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid date expression nope\"));\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one of [year, month, day\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["33835f41305f4d46c2a650da7c564ac99f485ab1"],"33835f41305f4d46c2a650da7c564ac99f485ab1":["40b789607c421011dabf36a935528a74fb8b2032"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40b789607c421011dabf36a935528a74fb8b2032":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"]},"commit2Childs":{"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33835f41305f4d46c2a650da7c564ac99f485ab1":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40b789607c421011dabf36a935528a74fb8b2032"],"40b789607c421011dabf36a935528a74fb8b2032":["33835f41305f4d46c2a650da7c564ac99f485ab1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}