{"path":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","commits":[{"id":"5613a70439d5d429f0689c2c5a21615e58deff97","date":1512102314,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimePartitionedUpdateProcessor#TimePartitionedUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.aliasName = aliasName;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  protected TimePartitionedUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.aliasName = aliasName;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.aliasName = aliasName;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n    intervalDateMath = aliasMetadata.getOrDefault(ROUTER_INTERVAL_METADATA, \"+1DAY\");\n    String futureTimeStr = aliasMetadata.get(ROUTER_MAX_FUTURE_TIME_METADATA);\n    if (futureTimeStr != null) {\n      maxFutureMs = Long.parseLong(futureTimeStr);\n    } else {\n      maxFutureMs = TimeUnit.MINUTES.toMillis(10);\n    }\n    intervalTimeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.aliasName = aliasName;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.aliasName = aliasName;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n    intervalDateMath = aliasMetadata.getOrDefault(ROUTER_INTERVAL_METADATA, \"+1DAY\");\n    String futureTimeStr = aliasMetadata.get(ROUTER_MAX_FUTURE_TIME_METADATA);\n    if (futureTimeStr != null) {\n      maxFutureMs = Long.parseLong(futureTimeStr);\n    } else {\n      maxFutureMs = TimeUnit.MINUTES.toMillis(10);\n    }\n    intervalTimeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.aliasName = aliasName;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46589ed5cc841861bf6b5e2afc55f718ebcd02a0","date":1516984620,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid metadata: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.aliasName = aliasName;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    routeField = aliasMetadata.get(ROUTER_FIELD_METADATA);\n    intervalDateMath = aliasMetadata.getOrDefault(ROUTER_INTERVAL_METADATA, \"+1DAY\");\n    String futureTimeStr = aliasMetadata.get(ROUTER_MAX_FUTURE_TIME_METADATA);\n    if (futureTimeStr != null) {\n      maxFutureMs = Long.parseLong(futureTimeStr);\n    } else {\n      maxFutureMs = TimeUnit.MINUTES.toMillis(10);\n    }\n    intervalTimeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767","date":1520865397,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasMetadata = zkController.getZkStateReader().getAliases().getCollectionAliasMetadata(aliasName);\n    if (aliasMetadata == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasMetadata);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid metadata: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b45f127b5537b5bf62181784ef28b52f4b6a08","date":1529595959,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    this.thisCollection = cloudDesc.getCollectionName();\n    this.req = req;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    this.thisCollection = cloudDesc.getCollectionName();\n    this.req = req;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    this.thisCollection = cloudDesc.getCollectionName();\n    this.req = req;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849083f8095b1ffaff05a66e0b1e024617b9968d","date":1536291524,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  private TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, UpdateRequestProcessor next,\n                                         String aliasName,\n                                         DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.req = req;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    this.thisCollection = cloudDesc.getCollectionName();\n    this.req = req;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["5613a70439d5d429f0689c2c5a21615e58deff97","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767","60b45f127b5537b5bf62181784ef28b52f4b6a08"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["5613a70439d5d429f0689c2c5a21615e58deff97"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["60b45f127b5537b5bf62181784ef28b52f4b6a08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5613a70439d5d429f0689c2c5a21615e58deff97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767","60b45f127b5537b5bf62181784ef28b52f4b6a08"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","60b45f127b5537b5bf62181784ef28b52f4b6a08","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5613a70439d5d429f0689c2c5a21615e58deff97"],"5613a70439d5d429f0689c2c5a21615e58deff97":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","849083f8095b1ffaff05a66e0b1e024617b9968d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}