{"path":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","sourceNew":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, _TestUtil.getTempDir(\"index.TestLockFactory6\"));\n    }\n\n","sourceOld":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, _TestUtil.getTempDir(\"index.TestLockFactory6\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","sourceNew":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, _TestUtil.getTempDir(\"index.TestLockFactory6\"));\n    }\n\n","sourceOld":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, _TestUtil.getTempDir(\"index.TestLockFactory6\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","sourceNew":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, _TestUtil.getTempDir(\"index.TestLockFactory6\"));\n    }\n\n","sourceOld":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, _TestUtil.getTempDir(\"index.TestLockFactory6\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","sourceNew":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, TestUtil.getTempDir(\"index.TestLockFactory6\"));\n    }\n\n","sourceOld":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, _TestUtil.getTempDir(\"index.TestLockFactory6\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","sourceNew":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, TestUtil.createTempDir(\"index.TestLockFactory6\"));\n    }\n\n","sourceOld":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, TestUtil.getTempDir(\"index.TestLockFactory6\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","sourceNew":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, createTempDir(\"index.TestLockFactory6\"));\n    }\n\n","sourceOld":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, TestUtil.createTempDir(\"index.TestLockFactory6\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","sourceNew":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, createTempDir(\"index.TestLockFactory6\"));\n    }\n\n","sourceOld":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, TestUtil.getTempDir(\"index.TestLockFactory6\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f934cf15a2ab8f42391940bba0a4374771dd199d","date":1415554735,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocksSimpleFSLockFactory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testStressLocks().mjava","sourceNew":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocksSimpleFSLockFactory() throws Exception {\n      _testStressLocks(SimpleFSLockFactory.INSTANCE, createTempDir(\"index.TestLockFactory6\"));\n    }\n\n","sourceOld":"    // Verify: do stress test, by opening IndexReaders and\n    // IndexWriters over & over in 2 threads and making sure\n    // no unexpected exceptions are raised:\n    @Nightly\n    public void testStressLocks() throws Exception {\n      _testStressLocks(null, createTempDir(\"index.TestLockFactory6\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f934cf15a2ab8f42391940bba0a4374771dd199d":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f934cf15a2ab8f42391940bba0a4374771dd199d"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f934cf15a2ab8f42391940bba0a4374771dd199d"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"f934cf15a2ab8f42391940bba0a4374771dd199d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}