{"path":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>int</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeQuery<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeQuery<Integer>(field, precisionStep, DataType.INT, min, max, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>int</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeQuery<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeQuery<Integer>(field, precisionStep, DataType.INT, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>int</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeQuery<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeQuery<Integer>(field, precisionStep, NumericType.INT, min, max, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>int</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeQuery<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeQuery<Integer>(field, precisionStep, DataType.INT, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":["7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>int</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeQuery<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeQuery<>(field, precisionStep, NumericType.INT, min, max, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>int</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeQuery<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeQuery<Integer>(field, precisionStep, NumericType.INT, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>int</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, precisionStep, FieldType.LegacyNumericType.INT, min, max, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>int</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeQuery<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeQuery<>(field, precisionStep, NumericType.INT, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["770342641f7b505eaa8dccdc666158bff2419109"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}