{"path":"lucene/sandbox/src/java/org/apache/lucene/search/PhraseWildcardQuery#collectSingleTermData(SingleTerm,IndexSearcher,List[LeafReaderContext],TermsData).mjava","commits":[{"id":"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e","date":1574848425,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/PhraseWildcardQuery#collectSingleTermData(SingleTerm,IndexSearcher,List[LeafReaderContext],TermsData).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Collects the {@link TermState} and {@link TermStatistics} for a single-term\n   * without expansion.\n   *\n   * @param termsData receives the collected data.\n   */\n  protected int collectSingleTermData(\n      SingleTerm singleTerm,\n      IndexSearcher searcher,\n      List<LeafReaderContext> segments,\n      TermsData termsData) throws IOException {\n    TermData termData = termsData.getOrCreateTermData(singleTerm.termPosition);\n    Term term = singleTerm.term;\n    termData.terms.add(term);\n    TermStates termStates = TermStates.build(searcher.getIndexReader().getContext(), term, true);\n\n    // Collect TermState per segment.\n    int numMatches = 0;\n    Iterator<LeafReaderContext> segmentIterator = segments.iterator();\n    while (segmentIterator.hasNext()) {\n      LeafReaderContext leafReaderContext = segmentIterator.next();\n      assert TestCounters.get().incSegmentUseCount();\n      boolean termMatchesInSegment = false;\n      Terms terms = leafReaderContext.reader().terms(term.field());\n      if (terms != null) {\n        checkTermsHavePositions(terms);\n        TermState termState = termStates.get(leafReaderContext);\n        if (termState != null) {\n          termMatchesInSegment = true;\n          numMatches++;\n          termData.setTermStatesForSegment(leafReaderContext, Collections.singletonList(new TermBytesTermState(term.bytes(), termState)));\n        }\n      }\n      if (!termMatchesInSegment && shouldOptimizeSegments()) {\n        // Remove this segment from the list because the phrase cannot match on it.\n        segmentIterator.remove();\n        assert TestCounters.get().incSegmentSkipCount();\n      }\n    }\n    // Collect the term stats across all segments.\n    if (termStates.docFreq() > 0) {\n      termsData.termStatsList.add(searcher.termStatistics(term, termStates.docFreq(), termStates.totalTermFreq()));\n    }\n    return numMatches;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"]},"commit2Childs":{"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}