{"path":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","commits":[{"id":"e4b5867a57b32674ce740e66e6a7da8db3d4dd33","date":1148163441,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"/dev/null","sourceNew":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   bq.getClauses().length);\n      Query sub = bq.getClauses()[0].getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = bq.getClauses()[1].getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   bq.getClauses().length);\n      Query sub = bq.getClauses()[0].getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = bq.getClauses()[1].getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27adc06684d74d32d4d07537a81903ffbf816d27","date":1178648148,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   bq.getClauses().length);\n      Query sub = bq.getClauses()[0].getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = bq.getClauses()[1].getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   bq.getClauses().length);\n      Query sub = bq.getClauses()[0].getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = bq.getClauses()[1].getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getSolrQueryParser(null).getField(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbca8d36fa6e78e5f32059dc9c80da83e66470de","date":1249752043,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getSolrQueryParser(null).getField(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n        \n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(h.getCore().getSchema());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["27adc06684d74d32d4d07537a81903ffbf816d27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"27adc06684d74d32d4d07537a81903ffbf816d27":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["27adc06684d74d32d4d07537a81903ffbf816d27"],"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["ad94625fb8d088209f46650c8097196fec67f00c"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"27adc06684d74d32d4d07537a81903ffbf816d27":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}