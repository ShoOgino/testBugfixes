{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testUniformIntegerDistribution().mjava","commits":[{"id":"9e0b0bd2390447c6bd25cf9e62be59a117394eab","date":1504711924,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testUniformIntegerDistribution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUniformIntegerDistribution() throws Exception {\n    String cexpr = \"let(a=uniformIntegerDistribution(1, 10),\" +\n        \"               b=sample(a, 10000),\" +\n        \"               tuple(d=describe(b), \" +\n        \"                     p=probability(a, 5), \" +\n        \"                     c=cumulativeProbability(a, 5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map map = (Map)tuples.get(0).get(\"d\");\n    Number N = (Number)map.get(\"N\");\n    assertEquals(N.intValue(), 10000);\n    Number prob = (Number)tuples.get(0).get(\"p\");\n    assertEquals(prob.doubleValue(), 0.1, 0.0);\n    Number cprob = (Number)tuples.get(0).get(\"c\");\n    assertEquals(cprob.doubleValue(), 0.5, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testUniformIntegerDistribution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUniformIntegerDistribution() throws Exception {\n    String cexpr = \"let(a=uniformIntegerDistribution(1, 10),\" +\n        \"               b=sample(a, 10000),\" +\n        \"               tuple(d=describe(b), \" +\n        \"                     p=probability(a, 5), \" +\n        \"                     c=cumulativeProbability(a, 5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map map = (Map)tuples.get(0).get(\"d\");\n    Number N = (Number)map.get(\"N\");\n    assertEquals(N.intValue(), 10000);\n    Number prob = (Number)tuples.get(0).get(\"p\");\n    assertEquals(prob.doubleValue(), 0.1, 0.0);\n    Number cprob = (Number)tuples.get(0).get(\"c\");\n    assertEquals(cprob.doubleValue(), 0.5, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testUniformIntegerDistribution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUniformIntegerDistribution() throws Exception {\n    String cexpr = \"let(a=uniformIntegerDistribution(1, 10),\" +\n        \"               b=sample(a, 10000),\" +\n        \"               tuple(d=describe(b), \" +\n        \"                     p=probability(a, 5), \" +\n        \"                     c=cumulativeProbability(a, 5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map map = (Map)tuples.get(0).get(\"d\");\n    Number N = (Number)map.get(\"N\");\n    assertEquals(N.intValue(), 10000);\n    Number prob = (Number)tuples.get(0).get(\"p\");\n    assertEquals(prob.doubleValue(), 0.1, 0.0);\n    Number cprob = (Number)tuples.get(0).get(\"c\");\n    assertEquals(cprob.doubleValue(), 0.5, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testUniformIntegerDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testUniformIntegerDistribution().mjava","sourceNew":"  @Test\n  public void testUniformIntegerDistribution() throws Exception {\n    String cexpr = \"let(a=uniformIntegerDistribution(1, 10),\" +\n        \"               b=sample(a, 10000),\" +\n        \"               tuple(d=describe(b), \" +\n        \"                     p=probability(a, 5), \" +\n        \"                     c=cumulativeProbability(a, 5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map map = (Map)tuples.get(0).get(\"d\");\n    Number N = (Number)map.get(\"N\");\n    assertEquals(N.intValue(), 10000);\n    Number prob = (Number)tuples.get(0).get(\"p\");\n    assertEquals(prob.doubleValue(), 0.1, 0.0);\n    Number cprob = (Number)tuples.get(0).get(\"c\");\n    assertEquals(cprob.doubleValue(), 0.5, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testUniformIntegerDistribution() throws Exception {\n    String cexpr = \"let(a=uniformIntegerDistribution(1, 10),\" +\n        \"               b=sample(a, 10000),\" +\n        \"               tuple(d=describe(b), \" +\n        \"                     p=probability(a, 5), \" +\n        \"                     c=cumulativeProbability(a, 5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map map = (Map)tuples.get(0).get(\"d\");\n    Number N = (Number)map.get(\"N\");\n    assertEquals(N.intValue(), 10000);\n    Number prob = (Number)tuples.get(0).get(\"p\");\n    assertEquals(prob.doubleValue(), 0.1, 0.0);\n    Number cprob = (Number)tuples.get(0).get(\"c\");\n    assertEquals(cprob.doubleValue(), 0.5, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}