{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","sourceNew":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   * \n   * @throws IOException\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    iw.close();\n\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)));\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n\t\t\n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(pr);\n\t\t\n    iwOut.forceMerge(1);\n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   * \n   * @throws IOException\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    iw.close();\n\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)));\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n\t\t\n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(pr);\n\t\t\n    iwOut.forceMerge(1);\n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","sourceNew":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   * \n   * @throws IOException\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   * \n   * @throws IOException\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    iw.close();\n\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)));\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n\t\t\n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(pr);\n\t\t\n    iwOut.forceMerge(1);\n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","sourceNew":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   * \n   * @throws IOException\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   * \n   * @throws IOException\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","sourceNew":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   * \n   * @throws IOException\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","sourceNew":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    iw.shutdown();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.shutdown();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","sourceNew":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));\n    iw.shutdown();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig(new MockAnalyzer(random())));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.shutdown();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    iw.shutdown();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.shutdown();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","sourceNew":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig(new MockAnalyzer(random())));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));\n    iw.shutdown();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig(new MockAnalyzer(random())));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.shutdown();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","sourceNew":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig(new MockAnalyzer(random())));\n    \n    ParallelLeafReader apr = new ParallelLeafReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelLeafReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig(new MockAnalyzer(random())));\n    \n    ParallelAtomicReader apr = new ParallelAtomicReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelAtomicReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","sourceNew":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig(new MockAnalyzer(random())));\n    \n    ParallelLeafReader apr = new ParallelLeafReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelLeafReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    List<LeafReader> leaves = new ArrayList<>();\n    for (LeafReaderContext leaf : cpr.leaves()) {\n      leaves.add(leaf.reader());\n    }\n    iwOut.addIndexes(leaves.toArray(new LeafReader[0]));\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig(new MockAnalyzer(random())));\n    \n    ParallelLeafReader apr = new ParallelLeafReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelLeafReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(cpr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelCompositeReader());\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":["6e09a3a223be07d75777515a717312813221fe58"],"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","sourceNew":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig(new MockAnalyzer(random())));\n    \n    ParallelLeafReader apr = new ParallelLeafReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(SlowCodecReaderWrapper.wrap(apr));\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(SlowCodecReaderWrapper.wrap(new ParallelLeafReader()));\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    List<CodecReader> leaves = new ArrayList<>();\n    for (LeafReaderContext leaf : cpr.leaves()) {\n      leaves.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n    }\n    iwOut.addIndexes(leaves.toArray(new CodecReader[0]));\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig(new MockAnalyzer(random())));\n    \n    ParallelLeafReader apr = new ParallelLeafReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(apr);\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(new ParallelLeafReader());\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    List<LeafReader> leaves = new ArrayList<>();\n    for (LeafReaderContext leaf : cpr.leaves()) {\n      leaves.add(leaf.reader());\n    }\n    iwOut.addIndexes(leaves.toArray(new LeafReader[0]));\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","6e09a3a223be07d75777515a717312813221fe58"],"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex#testEmptyIndex().mjava","sourceNew":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig(new MockAnalyzer(random())));\n    \n    // add a readerless parallel reader\n    iwOut.addIndexes(SlowCodecReaderWrapper.wrap(new ParallelLeafReader()));\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    List<CodecReader> leaves = new ArrayList<>();\n    for (LeafReaderContext leaf : cpr.leaves()) {\n      leaves.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n    }\n    iwOut.addIndexes(leaves.toArray(new CodecReader[0]));\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","sourceOld":"  /**\n   * Creates two empty indexes and wraps a ParallelReader around. Adding this\n   * reader to a new index should not throw any exception.\n   */\n  public void testEmptyIndex() throws IOException {\n    Directory rd1 = newDirectory();\n    IndexWriter iw = new IndexWriter(rd1, newIndexWriterConfig(new MockAnalyzer(random())));\n    iw.close();\n    // create a copy:\n    Directory rd2 = newDirectory(rd1);\n\n    Directory rdOut = newDirectory();\n\n    IndexWriter iwOut = new IndexWriter(rdOut, newIndexWriterConfig(new MockAnalyzer(random())));\n    \n    ParallelLeafReader apr = new ParallelLeafReader(\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd1)),\n        SlowCompositeReaderWrapper.wrap(DirectoryReader.open(rd2)));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    iwOut.addIndexes(SlowCodecReaderWrapper.wrap(apr));\n    iwOut.forceMerge(1);\n    \n    // 2nd try with a readerless parallel reader\n    iwOut.addIndexes(SlowCodecReaderWrapper.wrap(new ParallelLeafReader()));\n    iwOut.forceMerge(1);\n\n    ParallelCompositeReader cpr = new ParallelCompositeReader(\n        DirectoryReader.open(rd1),\n        DirectoryReader.open(rd2));\n    \n    // When unpatched, Lucene crashes here with a NoSuchElementException (caused by ParallelTermEnum)\n    List<CodecReader> leaves = new ArrayList<>();\n    for (LeafReaderContext leaf : cpr.leaves()) {\n      leaves.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n    }\n    iwOut.addIndexes(leaves.toArray(new CodecReader[0]));\n    iwOut.forceMerge(1);\n    \n    iwOut.close();\n    rdOut.close();\n    rd1.close();\n    rd2.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","910bb2b4a9549c76f89ce57a3cec7563c44aa561","505bff044e47a553f461b6f4484d1d08faf4ac85","6e09a3a223be07d75777515a717312813221fe58","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6e09a3a223be07d75777515a717312813221fe58":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6e09a3a223be07d75777515a717312813221fe58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6e09a3a223be07d75777515a717312813221fe58"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"6e09a3a223be07d75777515a717312813221fe58":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}