{"path":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#waitForAliasesUpdate(int,ClusterStateProvider).mjava","commits":[{"id":"f93fd9cfb33387060fae71bf27ed17402277f910","date":1565843798,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#waitForAliasesUpdate(int,ClusterStateProvider).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Does a \"grey box\" assertion that the ClusterStateProvider is a ZkClientClusterStateProvider\n   * and then waits for it's underlying ZkStateReader to see the updated aliases, \n   * returning the current ZNodeVersion for the aliases\n   */\n  private int waitForAliasesUpdate(int lastVersion, ClusterStateProvider stateProvider)\n    throws Exception {\n\n    assertTrue(\"this method does grey box introspection which requires that \" +\n               \"the stateProvider be a ZkClientClusterStateProvider\",\n               stateProvider instanceof ZkClientClusterStateProvider);\n    return waitForAliasesUpdate(lastVersion,\n                                ((ZkClientClusterStateProvider)stateProvider).getZkStateReader());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f93fd9cfb33387060fae71bf27ed17402277f910":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f93fd9cfb33387060fae71bf27ed17402277f910"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f93fd9cfb33387060fae71bf27ed17402277f910"],"f93fd9cfb33387060fae71bf27ed17402277f910":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}