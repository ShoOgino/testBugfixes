{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","commits":[{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      int maxDoc = reader.maxDoc();\n      final float[] values;\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        // nocommit should we throw exc if parser isn't\n        // null?  if setDocsWithField is true?\n        values = new float[maxDoc];\n        for(int docID=0;docID<maxDoc;docID++) {\n          // nocommit somewhat dangerous ... eg if user had\n          // indexed as DV.BYTE ...\n          values[docID] = Float.intBitsToFloat((int) valuesIn.get(docID));\n        }\n      } else {\n\n        final FloatParser parser = (FloatParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser =\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n          // cache key includes\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n          try {\n            return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n          } catch (NumberFormatException ne) {\n            return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n          }\n        }\n\n        // nocommit how to avoid double alloc in numeric field\n        // case ...\n        values = new float[reader.maxDoc()];\n\n        Uninvert u = new Uninvert() {\n            private float currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseFloat(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n      }\n\n      return new FloatsFromArray(values);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"418d15a87ecd752b76a13c08a5e08cbd7b14ef5a","date":1353336547,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        final NumericDocValues ramInstance = valuesIn.newRAMInstance();\n        return new Floats() {\n          @Override\n          public float get(int docID) {\n            return Float.intBitsToFloat((int) ramInstance.get(docID));\n          }\n        };\n        // nocommit should we throw exc if parser isn't\n        // null?  if setDocsWithField is true?\n      } else {\n        int maxDoc = reader.maxDoc();\n        final float[] values;\n        final FloatParser parser = (FloatParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser =\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n          // cache key includes\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n          try {\n            return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n          } catch (NumberFormatException ne) {\n            return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n          }\n        }\n\n        // nocommit how to avoid double alloc in numeric field\n        // case ...\n        values = new float[reader.maxDoc()];\n\n        Uninvert u = new Uninvert() {\n            private float currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseFloat(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new FloatsFromArray(values);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      int maxDoc = reader.maxDoc();\n      final float[] values;\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        // nocommit should we throw exc if parser isn't\n        // null?  if setDocsWithField is true?\n        values = new float[maxDoc];\n        for(int docID=0;docID<maxDoc;docID++) {\n          // nocommit somewhat dangerous ... eg if user had\n          // indexed as DV.BYTE ...\n          values[docID] = Float.intBitsToFloat((int) valuesIn.get(docID));\n        }\n      } else {\n\n        final FloatParser parser = (FloatParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser =\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n          // cache key includes\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n          try {\n            return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n          } catch (NumberFormatException ne) {\n            return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n          }\n        }\n\n        // nocommit how to avoid double alloc in numeric field\n        // case ...\n        values = new float[reader.maxDoc()];\n\n        Uninvert u = new Uninvert() {\n            private float currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseFloat(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n      }\n\n      return new FloatsFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        final NumericDocValues ramInstance = valuesIn.newRAMInstance();\n        return new Floats() {\n          @Override\n          public float get(int docID) {\n            return Float.intBitsToFloat((int) ramInstance.get(docID));\n          }\n        };\n        // nocommit should we throw exc if parser isn't\n        // null?  if setDocsWithField is true?\n      } else {\n        final float[] values;\n        final FloatParser parser = (FloatParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser =\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n          // cache key includes\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n          try {\n            return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n          } catch (NumberFormatException ne) {\n            return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n          }\n        }\n\n        // nocommit how to avoid double alloc in numeric field\n        // case ...\n        values = new float[reader.maxDoc()];\n\n        Uninvert u = new Uninvert() {\n            private float currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseFloat(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new FloatsFromArray(values);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        final NumericDocValues ramInstance = valuesIn.newRAMInstance();\n        return new Floats() {\n          @Override\n          public float get(int docID) {\n            return Float.intBitsToFloat((int) ramInstance.get(docID));\n          }\n        };\n        // nocommit should we throw exc if parser isn't\n        // null?  if setDocsWithField is true?\n      } else {\n        int maxDoc = reader.maxDoc();\n        final float[] values;\n        final FloatParser parser = (FloatParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser =\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n          // cache key includes\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n          try {\n            return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n          } catch (NumberFormatException ne) {\n            return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n          }\n        }\n\n        // nocommit how to avoid double alloc in numeric field\n        // case ...\n        values = new float[reader.maxDoc()];\n\n        Uninvert u = new Uninvert() {\n            private float currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseFloat(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new FloatsFromArray(values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7178a82d1134111f4511f28bb9ad57573a57d93","date":1354112608,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        final NumericDocValues ramInstance = valuesIn.newRAMInstance();\n        return new Floats() {\n          @Override\n          public float get(int docID) {\n            return Float.intBitsToFloat((int) ramInstance.get(docID));\n          }\n        };\n      } else {\n        final float[] values;\n        final FloatParser parser = (FloatParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser =\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n          // cache key includes\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n          try {\n            return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n          } catch (NumberFormatException ne) {\n            return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n          }\n        }\n\n        // nocommit how to avoid double alloc in numeric field\n        // case ...\n        values = new float[reader.maxDoc()];\n\n        Uninvert u = new Uninvert() {\n            private float currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseFloat(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new FloatsFromArray(values);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        final NumericDocValues ramInstance = valuesIn.newRAMInstance();\n        return new Floats() {\n          @Override\n          public float get(int docID) {\n            return Float.intBitsToFloat((int) ramInstance.get(docID));\n          }\n        };\n        // nocommit should we throw exc if parser isn't\n        // null?  if setDocsWithField is true?\n      } else {\n        final float[] values;\n        final FloatParser parser = (FloatParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser =\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n          // cache key includes\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n          try {\n            return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n          } catch (NumberFormatException ne) {\n            return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n          }\n        }\n\n        // nocommit how to avoid double alloc in numeric field\n        // case ...\n        values = new float[reader.maxDoc()];\n\n        Uninvert u = new Uninvert() {\n            private float currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseFloat(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new FloatsFromArray(values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2","date":1354573582,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        return new Floats() {\n          @Override\n          public float get(int docID) {\n            return Float.intBitsToFloat((int) valuesIn.get(docID));\n          }\n        };\n      } else {\n        final float[] values;\n        final FloatParser parser = (FloatParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser =\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n          // cache key includes\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n          try {\n            return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n          } catch (NumberFormatException ne) {\n            return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n          }\n        }\n\n        // nocommit how to avoid double alloc in numeric field\n        // case ...\n        values = new float[reader.maxDoc()];\n\n        Uninvert u = new Uninvert() {\n            private float currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseFloat(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new FloatsFromArray(values);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        final NumericDocValues ramInstance = valuesIn.newRAMInstance();\n        return new Floats() {\n          @Override\n          public float get(int docID) {\n            return Float.intBitsToFloat((int) ramInstance.get(docID));\n          }\n        };\n      } else {\n        final float[] values;\n        final FloatParser parser = (FloatParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser =\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n          // cache key includes\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n          try {\n            return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n          } catch (NumberFormatException ne) {\n            return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n          }\n        }\n\n        // nocommit how to avoid double alloc in numeric field\n        // case ...\n        values = new float[reader.maxDoc()];\n\n        Uninvert u = new Uninvert() {\n            private float currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseFloat(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new FloatsFromArray(values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6312aec6ba581f919d406ceff362bef430382c31","date":1358775555,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final float[] values;\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser =\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n        try {\n          return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n        } catch (NumberFormatException ne) {\n          return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n        }\n      }\n\n      // nocommit how to avoid double alloc in numeric field\n      // case ...\n      values = new float[reader.maxDoc()];\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      return new FloatsFromArray(values);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        return new Floats() {\n          @Override\n          public float get(int docID) {\n            return Float.intBitsToFloat((int) valuesIn.get(docID));\n          }\n        };\n      } else {\n        final float[] values;\n        final FloatParser parser = (FloatParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser =\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n          // cache key includes\n          // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n          try {\n            return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n          } catch (NumberFormatException ne) {\n            return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n          }\n        }\n\n        // nocommit how to avoid double alloc in numeric field\n        // case ...\n        values = new float[reader.maxDoc()];\n\n        Uninvert u = new Uninvert() {\n            private float currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseFloat(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new FloatsFromArray(values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfc9a1c0f8c40dae949281597c97e61defe903fc","date":1359040461,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser =\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n        try {\n          return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n        } catch (NumberFormatException ne) {\n          return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n        }\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<float[]>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final float[] values;\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser =\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n        try {\n          return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n        } catch (NumberFormatException ne) {\n          return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n        }\n      }\n\n      // nocommit how to avoid double alloc in numeric field\n      // case ...\n      values = new float[reader.maxDoc()];\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      return new FloatsFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser =\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n        try {\n          return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n        } catch (NumberFormatException ne) {\n          return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n        }\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<float[]>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser =\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n        try {\n          return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n        } catch (NumberFormatException ne) {\n          return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n        }\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<float[]>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser =\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n        try {\n          return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n        } catch (NumberFormatException ne) {\n          return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n        }\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<float[]>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes NUMERIC_UTILS_FLOAT_PARSER:\n        return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<float[]>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser =\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n        try {\n          return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n        } catch (NumberFormatException ne) {\n          return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n        }\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<float[]>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes NUMERIC_UTILS_FLOAT_PARSER:\n        return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<float[]>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser =\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes\n        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:\n        try {\n          return wrapper.getFloats(reader, key.field, DEFAULT_FLOAT_PARSER, setDocsWithField);\n        } catch (NumberFormatException ne) {\n          return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n        }\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<float[]>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes NUMERIC_UTILS_FLOAT_PARSER:\n        return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes NUMERIC_UTILS_FLOAT_PARSER:\n        return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<float[]>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes NUMERIC_UTILS_FLOAT_PARSER:\n        return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes NUMERIC_UTILS_FLOAT_PARSER:\n        return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.FloatCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected Object createValue(final AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final FloatParser parser = (FloatParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = NUMERIC_UTILS_FLOAT_PARSER) so\n        // cache key includes NUMERIC_UTILS_FLOAT_PARSER:\n        return wrapper.getFloats(reader, key.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);\n      }\n\n      final HoldsOneThing<float[]> valuesRef = new HoldsOneThing<>();\n\n      Uninvert u = new Uninvert() {\n          private float currentValue;\n          private float[] values;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseFloat(term);\n            if (values == null) {\n              // Lazy alloc so for the numeric field case\n              // (which will hit a NumberFormatException\n              // when we first try the DEFAULT_INT_PARSER),\n              // we don't double-alloc:\n              values = new float[reader.maxDoc()];\n              valuesRef.set(values);\n            }\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n          \n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      float[] values = valuesRef.get();\n      if (values == null) {\n        values = new float[reader.maxDoc()];\n      }\n      return new FloatsFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d4d69c535930b5cce125cff868d40f6373dc27d4","59a0020b413d44dd79d85d7a66ed5004265fb453"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["dfc9a1c0f8c40dae949281597c97e61defe903fc","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"418d15a87ecd752b76a13c08a5e08cbd7b14ef5a":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"56572ec06f1407c066d6b7399413178b33176cd8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","93dd449115a9247533e44bab47e8429e5dccbc6d"],"dfc9a1c0f8c40dae949281597c97e61defe903fc":["6312aec6ba581f919d406ceff362bef430382c31"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6312aec6ba581f919d406ceff362bef430382c31":["4bc9c79bf95b1262e0a6908ffbd895de19e33dc2"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["418d15a87ecd752b76a13c08a5e08cbd7b14ef5a"],"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"f7178a82d1134111f4511f28bb9ad57573a57d93":["4bc9c79bf95b1262e0a6908ffbd895de19e33dc2"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["418d15a87ecd752b76a13c08a5e08cbd7b14ef5a"],"418d15a87ecd752b76a13c08a5e08cbd7b14ef5a":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"dfc9a1c0f8c40dae949281597c97e61defe903fc":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","a4d374b2bebd0d52acaa61038fbf23068620fba7","d4d69c535930b5cce125cff868d40f6373dc27d4"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"6312aec6ba581f919d406ceff362bef430382c31":["dfc9a1c0f8c40dae949281597c97e61defe903fc"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2":["6312aec6ba581f919d406ceff362bef430382c31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}