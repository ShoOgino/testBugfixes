{"path":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.flush();\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = (IndexInput) input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(directory.fileExists(\"testing.test.other\"));\n    assertTrue(directory.fileExists(\"testing.test\"));\n    directory.deleteFile(\"testing.test\");\n    assertFalse(directory.fileExists(\"testing.test\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.flush();\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = (IndexInput) input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(directory.fileExists(\"testing.test.other\"));\n    assertTrue(directory.fileExists(\"testing.test\"));\n    directory.deleteFile(\"testing.test\");\n    assertFalse(directory.fileExists(\"testing.test\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","sourceNew":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.flush();\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = (IndexInput) input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(slowFileExists(directory, \"testing.test.other\"));\n    assertTrue(slowFileExists(directory, \"testing.test\"));\n    directory.deleteFile(\"testing.test\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n  }\n\n","sourceOld":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.flush();\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = (IndexInput) input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(directory.fileExists(\"testing.test.other\"));\n    assertTrue(directory.fileExists(\"testing.test\"));\n    directory.deleteFile(\"testing.test\");\n    assertFalse(directory.fileExists(\"testing.test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72feb75398b9bcb44dddbdbf9fd81f6ab6646d0f","date":1397994222,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","sourceNew":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = (IndexInput) input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(slowFileExists(directory, \"testing.test.other\"));\n    assertTrue(slowFileExists(directory, \"testing.test\"));\n    directory.deleteFile(\"testing.test\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n  }\n\n","sourceOld":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.flush();\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = (IndexInput) input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(slowFileExists(directory, \"testing.test.other\"));\n    assertTrue(slowFileExists(directory, \"testing.test\"));\n    directory.deleteFile(\"testing.test\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","sourceNew":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    directory.deleteFiles(Arrays.asList(listAll));\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = (IndexInput) input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(slowFileExists(directory, \"testing.test.other\"));\n    assertTrue(slowFileExists(directory, \"testing.test\"));\n    directory.deleteFiles(Collections.singleton(\"testing.test\"));\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n  }\n\n","sourceOld":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = (IndexInput) input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(slowFileExists(directory, \"testing.test.other\"));\n    assertTrue(slowFileExists(directory, \"testing.test\"));\n    directory.deleteFile(\"testing.test\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44a0466296f4b2d9deac60e3e524628c97aa5191","date":1454532248,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","sourceNew":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = (IndexInput) input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(slowFileExists(directory, \"testing.test.other\"));\n    assertTrue(slowFileExists(directory, \"testing.test\"));\n    directory.deleteFile(\"testing.test\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n  }\n\n","sourceOld":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    directory.deleteFiles(Arrays.asList(listAll));\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = (IndexInput) input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(slowFileExists(directory, \"testing.test.other\"));\n    assertTrue(slowFileExists(directory, \"testing.test\"));\n    directory.deleteFiles(Collections.singleton(\"testing.test\"));\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testWritingAndReadingAFile().mjava","sourceNew":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(slowFileExists(directory, \"testing.test.other\"));\n    assertTrue(slowFileExists(directory, \"testing.test\"));\n    directory.deleteFile(\"testing.test\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n  }\n\n","sourceOld":"  @Test\n  public void testWritingAndReadingAFile() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n\n    IndexInput input = directory.openInput(\"testing.test\", new IOContext());\n    assertEquals(12345, input.readInt());\n    input.close();\n\n    listAll = directory.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"testing.test\", listAll[0]);\n\n    assertEquals(4, directory.fileLength(\"testing.test\"));\n\n    IndexInput input1 = directory.openInput(\"testing.test\", new IOContext());\n\n    IndexInput input2 = (IndexInput) input1.clone();\n    assertEquals(12345, input2.readInt());\n    input2.close();\n\n    assertEquals(12345, input1.readInt());\n    input1.close();\n\n    assertFalse(slowFileExists(directory, \"testing.test.other\"));\n    assertTrue(slowFileExists(directory, \"testing.test\"));\n    directory.deleteFile(\"testing.test\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["72feb75398b9bcb44dddbdbf9fd81f6ab6646d0f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"72feb75398b9bcb44dddbdbf9fd81f6ab6646d0f":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["72feb75398b9bcb44dddbdbf9fd81f6ab6646d0f"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["72feb75398b9bcb44dddbdbf9fd81f6ab6646d0f"],"72feb75398b9bcb44dddbdbf9fd81f6ab6646d0f":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"44a0466296f4b2d9deac60e3e524628c97aa5191":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","44a0466296f4b2d9deac60e3e524628c97aa5191","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}