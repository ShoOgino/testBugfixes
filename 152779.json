{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeLostTrigger#testActionLifecycle().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeLostTrigger#testActionLifecycle().mjava","pathOld":"/dev/null","sourceNew":"  public void testActionLifecycle() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_added_trigger\", props, cluster.getLoader(), cluster)) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeLostTrigger#testActionLifecycle().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeLostTrigger#testActionLifecycle().mjava","sourceNew":"  public void testActionLifecycle() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":"  public void testActionLifecycle() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_added_trigger\", props, cluster.getLoader(), cluster)) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeLostTrigger#testActionLifecycle().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeLostTrigger#testActionLifecycle().mjava","sourceNew":"  public void testActionLifecycle() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":"  public void testActionLifecycle() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}