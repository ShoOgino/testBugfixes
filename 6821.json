{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (Character.BYTES * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (Character.BYTES * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = deleteTerms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    deleteTerms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (Character.BYTES * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (Character.BYTES * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = deleteTerms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    deleteTerms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (Character.BYTES * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (Character.BYTES * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = deleteTerms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    deleteTerms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (Character.BYTES * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (Character.BYTES * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f10eec8bf984dab2325e55aa277645e80bf195f4","date":1586514647,"type":3,"author":"YuBinglei","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = deleteTerms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    deleteTerms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      termsBytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (Character.BYTES * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = deleteTerms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    deleteTerms.put(term, Integer.valueOf(docIDUpto));\n    // note that if current != null then it means there's already a buffered\n    // delete on that term, therefore we seem to over-count. this over-counting\n    // is done to respect IndexWriterConfig.setMaxBufferedDeleteTerms.\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (Character.BYTES * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"f10eec8bf984dab2325e55aa277645e80bf195f4":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["419a8f52c6635419beb951255cacbbb281044c57","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["419a8f52c6635419beb951255cacbbb281044c57","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f10eec8bf984dab2325e55aa277645e80bf195f4"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"419a8f52c6635419beb951255cacbbb281044c57":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"f10eec8bf984dab2325e55aa277645e80bf195f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["f10eec8bf984dab2325e55aa277645e80bf195f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}