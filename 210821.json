{"path":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","sourceNew":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","sourceOld":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4879790608519b344f4cad50c6b8246d6d25ee","date":1381784666,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","sourceNew":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","sourceOld":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","sourceNew":null,"sourceOld":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#flip(long,long).mjava","sourceNew":null,"sourceOld":"  /** Flips a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to flip\n   */\n  public void flip(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord = expandingWordNum(endIndex-1);\n\n    /*** Grrr, java shifting wraps around so -1L>>>64 == -1\n     * for that reason, make sure not to use endmask if the bits to flip will\n     * be zero in the last word (redefine endWord to be the last changed...)\n    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000\n    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111\n    ***/\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] ^= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] ^= startmask;\n\n    for (int i=startWord+1; i<endWord; i++) {\n      bits[i] = ~bits[i];\n    }\n\n    bits[endWord] ^= endmask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["cd4879790608519b344f4cad50c6b8246d6d25ee","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["cd4879790608519b344f4cad50c6b8246d6d25ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"cd4879790608519b344f4cad50c6b8246d6d25ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd4879790608519b344f4cad50c6b8246d6d25ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd4879790608519b344f4cad50c6b8246d6d25ee":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}