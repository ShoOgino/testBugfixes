{"path":"lucene/src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#incrementToken().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#incrementToken().mjava","sourceNew":"        @Override\n        public boolean incrementToken() throws IOException {\n            boolean hasNext = input.incrementToken();\n            if (hasNext) {\n                if (offset + length <= data.length) {\n                    Payload p = new Payload();\n                    payloadAtt.setPayload(p);\n                    p.setData(data, offset, length);\n                    offset += length;                \n                } else {\n                    payloadAtt.setPayload(null);\n                }\n            }\n            \n            return hasNext;\n        }\n\n","sourceOld":"        @Override\n        public boolean incrementToken() throws IOException {\n            boolean hasNext = input.incrementToken();\n            if (hasNext) {\n                if (offset + length <= data.length) {\n                    Payload p = new Payload();\n                    payloadAtt.setPayload(p);\n                    p.setData(data, offset, length);\n                    offset += length;                \n                } else {\n                    payloadAtt.setPayload(null);\n                }\n            }\n            \n            return hasNext;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca8d536ba2e4aab4623a172a22cc2885ec7cb3d","date":1315818042,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#incrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#incrementToken().mjava","sourceNew":"        @Override\n        public boolean incrementToken() throws IOException {\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) {\n              return false;\n            }\n\n            // Some values of the same field are to have payloads and others not\n            if (offset + length <= data.length && !termAttribute.toString().endsWith(\"NO PAYLOAD\")) {\n              Payload p = new Payload();\n              payloadAtt.setPayload(p);\n              p.setData(data, offset, length);\n              offset += length;\n            } else {\n              payloadAtt.setPayload(null);\n            }\n\n            return true;\n        }\n\n","sourceOld":"        @Override\n        public boolean incrementToken() throws IOException {\n            boolean hasNext = input.incrementToken();\n            if (hasNext) {\n                if (offset + length <= data.length) {\n                    Payload p = new Payload();\n                    payloadAtt.setPayload(p);\n                    p.setData(data, offset, length);\n                    offset += length;                \n                } else {\n                    payloadAtt.setPayload(null);\n                }\n            }\n            \n            return hasNext;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#incrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads.PayloadFilter#incrementToken().mjava","sourceNew":"        @Override\n        public boolean incrementToken() throws IOException {\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) {\n              return false;\n            }\n\n            // Some values of the same field are to have payloads and others not\n            if (offset + length <= data.length && !termAttribute.toString().endsWith(\"NO PAYLOAD\")) {\n              Payload p = new Payload();\n              payloadAtt.setPayload(p);\n              p.setData(data, offset, length);\n              offset += length;\n            } else {\n              payloadAtt.setPayload(null);\n            }\n\n            return true;\n        }\n\n","sourceOld":"        @Override\n        public boolean incrementToken() throws IOException {\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) {\n              return false;\n            }\n\n            // Some values of the same field are to have payloads and others not\n            if (offset + length <= data.length && !termAttribute.toString().endsWith(\"NO PAYLOAD\")) {\n              Payload p = new Payload();\n              payloadAtt.setPayload(p);\n              p.setData(data, offset, length);\n              offset += length;\n            } else {\n              payloadAtt.setPayload(null);\n            }\n\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dca8d536ba2e4aab4623a172a22cc2885ec7cb3d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dca8d536ba2e4aab4623a172a22cc2885ec7cb3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"dca8d536ba2e4aab4623a172a22cc2885ec7cb3d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["dca8d536ba2e4aab4623a172a22cc2885ec7cb3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}