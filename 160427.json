{"path":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(reader, field, \"2\", \"7\", true, true, null) {\n          final MultiTermQuery.BoostAttribute boostAtt =\n            attributes().addAttribute(MultiTermQuery.BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\" multi segment: \" + q2);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d8b3f2faaf05547a6ed4e2769b664522af9514b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(reader, field, \"2\", \"7\", true, true, null) {\n          final MultiTermQuery.BoostAttribute boostAtt =\n            attributes().addAttribute(MultiTermQuery.BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\" multi segment: \" + q2);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(reader, field, \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\" multi segment: \" + q2);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(reader, field, \"2\", \"7\", true, true, null) {\n          final MultiTermQuery.BoostAttribute boostAtt =\n            attributes().addAttribute(MultiTermQuery.BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\" multi segment: \" + q2);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"101117eb159dcdbcaa90405b08170aab248e5b2c","date":1289816139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(reader, field, \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(reader, field, \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\" multi segment: \" + q2);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n  }\n\n","bugFix":null,"bugIntro":["d8b3f2faaf05547a6ed4e2769b664522af9514b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(reader, field, \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(reader, field, \"2\", \"7\", true, true, null) {\n          final MultiTermQuery.BoostAttribute boostAtt =\n            attributes().addAttribute(MultiTermQuery.BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\" multi segment: \" + q2);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(), \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(reader, field, \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(), \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(reader, field, \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(), \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(), new BytesRef(\"2\"), new BytesRef(\"7\"), true, true) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(), \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(), new BytesRef(\"2\"), new BytesRef(\"7\"), true, true) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(), \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(), new BytesRef(\"2\"), new BytesRef(\"7\"), true, true) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(), \"2\", \"7\", true, true, null) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(null), new BytesRef(\"2\"), new BytesRef(\"7\"), true, true) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(), new BytesRef(\"2\"), new BytesRef(\"7\"), true, true) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermQueryRewrites#checkBoosts(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(null), new BytesRef(\"2\"), new BytesRef(\"7\"), true, true) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","sourceOld":"  private void checkBoosts(MultiTermQuery.RewriteMethod method) throws Exception {\n    final MultiTermQuery mtq = new MultiTermQuery(\"data\") {\n      @Override\n      protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n        return new TermRangeTermsEnum(terms.iterator(null), new BytesRef(\"2\"), new BytesRef(\"7\"), true, true) {\n          final BoostAttribute boostAtt =\n            attributes().addAttribute(BoostAttribute.class);\n        \n          @Override\n          protected AcceptStatus accept(BytesRef term) {\n            boostAtt.setBoost(Float.parseFloat(term.utf8ToString()));\n            return super.accept(term);\n          }\n        };\n      }\n      \n      @Override\n      public String toString(String field) {\n        return \"dummy\";\n      }\n    };\n    mtq.setRewriteMethod(method);\n    final Query q1 = searcher.rewrite(mtq);\n    final Query q2 = multiSearcher.rewrite(mtq);\n    final Query q3 = multiSearcherDupls.rewrite(mtq);\n    if (VERBOSE) {\n      System.out.println();\n      System.out.println(\"single segment: \" + q1);\n      System.out.println(\"multi segment: \" + q2);\n      System.out.println(\"multi segment with duplicates: \" + q3);\n    }\n    assertEquals(\"The multi-segment case must produce same rewritten query\", q1, q2);\n    assertEquals(\"The multi-segment case with duplicates must produce same rewritten query\", q1, q3);\n    checkBooleanQueryBoosts((BooleanQuery) q1);\n    checkBooleanQueryBoosts((BooleanQuery) q2);\n    checkBooleanQueryBoosts((BooleanQuery) q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"101117eb159dcdbcaa90405b08170aab248e5b2c":["744486748bc5bee772100e49230e5bca39bac99a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","101117eb159dcdbcaa90405b08170aab248e5b2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"33a8b1f99104f4144f210f5d068411c297cd7163":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["3bb13258feba31ab676502787ab2e1779f129b7a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33a8b1f99104f4144f210f5d068411c297cd7163"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["101117eb159dcdbcaa90405b08170aab248e5b2c"],"744486748bc5bee772100e49230e5bca39bac99a":["33a8b1f99104f4144f210f5d068411c297cd7163"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"101117eb159dcdbcaa90405b08170aab248e5b2c":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"33a8b1f99104f4144f210f5d068411c297cd7163":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","744486748bc5bee772100e49230e5bca39bac99a"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["3cc749c053615f5871f3b95715fe292f34e70a53","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"744486748bc5bee772100e49230e5bca39bac99a":["101117eb159dcdbcaa90405b08170aab248e5b2c"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}