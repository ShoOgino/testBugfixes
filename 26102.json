{"path":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","commits":[{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(term, docFreq)));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(term, docFreq)));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(term, docFreq)));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f","date":1293976079,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","sourceNew":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new TermQuery(term, docFreq));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","sourceOld":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(term, docFreq)));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","sourceNew":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new TermQuery(term, docFreq));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","sourceOld":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(term, docFreq)));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","sourceNew":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new TermQuery(term, docFreq));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","sourceOld":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(term, docFreq)));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float,PerReaderTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","sourceNew":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost, PerReaderTermState states) {\n      final Query q = new ConstantScoreQuery(new TermQuery(term, states));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","sourceOld":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new TermQuery(term, docFreq));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new TermQuery(term, docFreq));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docFreq, float boost) {\n      final Query q = new ConstantScoreQuery(new TermQuery(term, docFreq));\n      q.setBoost(boost);\n      topLevel.add(q, BooleanClause.Occur.SHOULD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","744486748bc5bee772100e49230e5bca39bac99a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["744486748bc5bee772100e49230e5bca39bac99a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","744486748bc5bee772100e49230e5bca39bac99a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"744486748bc5bee772100e49230e5bca39bac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa1a999d6674423e5c4ac858b410283f6fe03f20"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["70ad682703b8585f5d0a637efec044d57ec05efb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","744486748bc5bee772100e49230e5bca39bac99a"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}