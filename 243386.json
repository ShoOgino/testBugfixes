{"path":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    fieldInfos = fn;\n\n    cloneableFieldsStream = d.openInput(segment + \".fdt\", readBufferSize);\n    fieldsStream = (IndexInput)cloneableFieldsStream.clone();\n    indexStream = d.openInput(segment + \".fdx\", readBufferSize);\n\n    if (docStoreOffset != -1) {\n      // We read only a slice out of this shared fields file\n      this.docStoreOffset = docStoreOffset;\n      this.size = size;\n\n      // Verify the file is long enough to hold all of our\n      // docs\n      assert ((int) (indexStream.length()/8)) >= size + this.docStoreOffset;\n    } else {\n      this.docStoreOffset = 0;\n      this.size = (int) (indexStream.length() / 8);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0c95bb07ec2e477432344309d35ab2d6b7c9aeff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"290ddf70ef4230015d4b5ff6758c630a466d757c","date":1183739680,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    fieldInfos = fn;\n\n    cloneableFieldsStream = d.openInput(segment + \".fdt\", readBufferSize);\n    fieldsStream = (IndexInput)cloneableFieldsStream.clone();\n    indexStream = d.openInput(segment + \".fdx\", readBufferSize);\n\n    if (docStoreOffset != -1) {\n      // We read only a slice out of this shared fields file\n      this.docStoreOffset = docStoreOffset;\n      this.size = size;\n\n      // Verify the file is long enough to hold all of our\n      // docs\n      assert ((int) (indexStream.length()/8)) >= size + this.docStoreOffset;\n    } else {\n      this.docStoreOffset = 0;\n      this.size = (int) (indexStream.length() >> 3);\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    fieldInfos = fn;\n\n    cloneableFieldsStream = d.openInput(segment + \".fdt\", readBufferSize);\n    fieldsStream = (IndexInput)cloneableFieldsStream.clone();\n    indexStream = d.openInput(segment + \".fdx\", readBufferSize);\n\n    if (docStoreOffset != -1) {\n      // We read only a slice out of this shared fields file\n      this.docStoreOffset = docStoreOffset;\n      this.size = size;\n\n      // Verify the file is long enough to hold all of our\n      // docs\n      assert ((int) (indexStream.length()/8)) >= size + this.docStoreOffset;\n    } else {\n      this.docStoreOffset = 0;\n      this.size = (int) (indexStream.length() / 8);\n    }\n  }\n\n","bugFix":null,"bugIntro":["0c95bb07ec2e477432344309d35ab2d6b7c9aeff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c95bb07ec2e477432344309d35ab2d6b7c9aeff","date":1187430141,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".fdt\", readBufferSize);\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n      indexStream = d.openInput(segment + \".fdx\", readBufferSize);\n\n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexStream.length() / 8)) >= size + this.docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexStream.length() >> 3);\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    fieldInfos = fn;\n\n    cloneableFieldsStream = d.openInput(segment + \".fdt\", readBufferSize);\n    fieldsStream = (IndexInput)cloneableFieldsStream.clone();\n    indexStream = d.openInput(segment + \".fdx\", readBufferSize);\n\n    if (docStoreOffset != -1) {\n      // We read only a slice out of this shared fields file\n      this.docStoreOffset = docStoreOffset;\n      this.size = size;\n\n      // Verify the file is long enough to hold all of our\n      // docs\n      assert ((int) (indexStream.length()/8)) >= size + this.docStoreOffset;\n    } else {\n      this.docStoreOffset = 0;\n      this.size = (int) (indexStream.length() >> 3);\n    }\n  }\n\n","bugFix":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c","290ddf70ef4230015d4b5ff6758c630a466d757c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b248d9b80f6b2fceade80b3c8683d1cca6e4c98","date":1194520024,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".fdt\", readBufferSize);\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n      indexStream = d.openInput(segment + \".fdx\", readBufferSize);\n\n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexStream.length() / 8)) >= size + this.docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexStream.length() >> 3);\n      }\n\n      numTotalDocs = (int) (indexStream.length() >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".fdt\", readBufferSize);\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n      indexStream = d.openInput(segment + \".fdx\", readBufferSize);\n\n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexStream.length() / 8)) >= size + this.docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexStream.length() >> 3);\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_EXTENSION, readBufferSize);\n      indexStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION, readBufferSize);\n\n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = indexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = indexStream.length()-formatSize;\n\n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".fdt\", readBufferSize);\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n      indexStream = d.openInput(segment + \".fdx\", readBufferSize);\n\n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexStream.length() / 8)) >= size + this.docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexStream.length() >> 3);\n      }\n\n      numTotalDocs = (int) (indexStream.length() >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_EXTENSION, readBufferSize);\n      indexStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION, readBufferSize);\n\n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = indexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = indexStream.length()-formatSize;\n\n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_EXTENSION, readBufferSize);\n      indexStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION, readBufferSize);\n\n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = indexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = indexStream.length()-formatSize;\n\n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de9999a287e59e079489cd445c376fa0dab501ba","date":1229510190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_EXTENSION, readBufferSize);\n      cloneableIndexStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION, readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_EXTENSION, readBufferSize);\n      indexStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION, readBufferSize);\n\n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = indexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = indexStream.length()-formatSize;\n\n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775efee7f959e0dd3df7960b93767d9e00b78751","date":1267203159,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      cloneableIndexStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_INDEX_EXTENSION), readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_EXTENSION, readBufferSize);\n      cloneableIndexStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION, readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      cloneableIndexStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_INDEX_EXTENSION), readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_EXTENSION), readBufferSize);\n      cloneableIndexStream = d.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FIELDS_INDEX_EXTENSION), readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"775efee7f959e0dd3df7960b93767d9e00b78751":["de9999a287e59e079489cd445c376fa0dab501ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["3b248d9b80f6b2fceade80b3c8683d1cca6e4c98"],"3b248d9b80f6b2fceade80b3c8683d1cca6e4c98":["0c95bb07ec2e477432344309d35ab2d6b7c9aeff"],"de9999a287e59e079489cd445c376fa0dab501ba":["5350389bf83287111f7760b9e3db3af8e3648474"],"290ddf70ef4230015d4b5ff6758c630a466d757c":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"5350389bf83287111f7760b9e3db3af8e3648474":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["775efee7f959e0dd3df7960b93767d9e00b78751"],"0c95bb07ec2e477432344309d35ab2d6b7c9aeff":["290ddf70ef4230015d4b5ff6758c630a466d757c"]},"commit2Childs":{"775efee7f959e0dd3df7960b93767d9e00b78751":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["5350389bf83287111f7760b9e3db3af8e3648474"],"3b248d9b80f6b2fceade80b3c8683d1cca6e4c98":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"de9999a287e59e079489cd445c376fa0dab501ba":["775efee7f959e0dd3df7960b93767d9e00b78751"],"290ddf70ef4230015d4b5ff6758c630a466d757c":["0c95bb07ec2e477432344309d35ab2d6b7c9aeff"],"5350389bf83287111f7760b9e3db3af8e3648474":["de9999a287e59e079489cd445c376fa0dab501ba"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["290ddf70ef4230015d4b5ff6758c630a466d757c"],"0c95bb07ec2e477432344309d35ab2d6b7c9aeff":["3b248d9b80f6b2fceade80b3c8683d1cca6e4c98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}