{"path":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","sourceNew":"      @Override\n      protected Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","sourceOld":"      @Override\n      protected Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","sourceNew":null,"sourceOld":"      @Override\n      protected Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","sourceNew":null,"sourceOld":"      @Override\n      protected Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#explain(int).mjava","sourceNew":null,"sourceOld":"      @Override\n      protected Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        // QUESTION: Is there a way to avoid this skipTo call? We need to know\n        // whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        // GSI: I suppose we could toString the payload, but I don't think that\n        // would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue() == 0 ? Boolean.FALSE\n            : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["9454a6510e2db155fb01faa5c049b06ece95fab9","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["9454a6510e2db155fb01faa5c049b06ece95fab9","0f3cee3d20b0c786e6fca20539454262e29edcab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}