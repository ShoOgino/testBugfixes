{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"first number of hits\", 14, hits.length());\n      searcher.close();\n\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length());\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false);\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"didn't see changes after close\", 218, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"first number of hits\", 14, hits.length());\n      searcher.close();\n\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length());\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(10);\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"didn't see changes after close\", 218, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"first number of hits\", 14, hits.length());\n      searcher.close();\n\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length());\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false);\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"didn't see changes after close\", 218, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"first number of hits\", 14, hits.length());\n      searcher.close();\n\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length());\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"didn't see changes after close\", 218, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"first number of hits\", 14, hits.length());\n      searcher.close();\n\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length());\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(10);\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"didn't see changes after close\", 218, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"first number of hits\", 14, hits.length());\n      searcher.close();\n\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length());\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"didn't see changes after close\", 218, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"first number of hits\", 14, hits.length());\n      searcher.close();\n\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length());\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"didn't see changes after close\", 218, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      Hits hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"first number of hits\", 14, hits.length());\n      searcher.close();\n\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length());\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm));\n      assertEquals(\"didn't see changes after close\", 218, hits.length());\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void xxxtestCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void xxxtestCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.abort();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after abort()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseAbort().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer, then\n     * add a bunch of docs, making sure reader does not see\n     * them until writer has closed.  Then instead of\n     * closing the writer, call abort and verify reader sees\n     * nothing was added.  Then verify we can open the index\n     * and add docs to it.\n     */\n    public void testCommitOnCloseAbort() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n      for (int i = 0; i < 14; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"first number of hits\", 14, hits.length);\n      searcher.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n      for(int j=0;j<17;j++) {\n        addDoc(writer);\n      }\n      // Delete all docs:\n      writer.deleteDocuments(searchTerm);\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n      searcher.close();\n\n      // Now, close the writer:\n      writer.rollback();\n\n      assertNoUnreferencedFiles(dir, \"unreferenced files remain after rollback()\");\n\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"saw changes after writer.abort\", 14, hits.length);\n      searcher.close();\n          \n      // Now make sure we can re-open the index, add docs,\n      // and all is good:\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n\n      // On abort, writer in fact may write to the same\n      // segments_N file:\n      dir.setPreventDoubleWrite(false);\n\n      for(int i=0;i<12;i++) {\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n        searcher.close();\n      }\n\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"didn't see changes after close\", 218, hits.length);\n      searcher.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["87c966e9308847938a7c905c2e46a56d8df788b8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["8b6187898fc4413ccd18229711786550a280383c"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["e82780afe6097066eb5befb86e9432f077667e3d"],"e82780afe6097066eb5befb86e9432f077667e3d":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["e82780afe6097066eb5befb86e9432f077667e3d"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"8b6187898fc4413ccd18229711786550a280383c":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"e82780afe6097066eb5befb86e9432f077667e3d":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"87c966e9308847938a7c905c2e46a56d8df788b8":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}