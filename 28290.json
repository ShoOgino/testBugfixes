{"path":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,long).mjava","commits":[{"id":"69a6d2d525aeab53c867ed26934185e5bb627d0e","date":1296516902,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,long).mjava","pathOld":"/dev/null","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, long gen) {\n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n    this.gen = gen;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["982b2ae363d5aff7345ceab8c236e1066031710b","982b2ae363d5aff7345ceab8c236e1066031710b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,long).mjava","pathOld":"/dev/null","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, long gen) {\n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n    this.gen = gen;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,long).mjava","pathOld":"/dev/null","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, long gen) {\n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n    this.gen = gen;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,long).mjava","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","sourceOld":"  public FrozenBufferedDeletes(BufferedDeletes deletes, long gen) {\n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n    this.gen = gen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,long).mjava","sourceNew":"  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {\n    this.isSegmentPrivate = isSegmentPrivate;\n    assert !isSegmentPrivate || deletes.terms.size() == 0 : \"segment private package should only have del queries\"; \n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n  }\n\n","sourceOld":"  public FrozenBufferedDeletes(BufferedDeletes deletes, long gen) {\n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n    this.gen = gen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,long).mjava","sourceNew":null,"sourceOld":"  public FrozenBufferedDeletes(BufferedDeletes deletes, long gen) {\n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n    this.gen = gen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FrozenBufferedDeletes#FrozenBufferedDeletes(BufferedDeletes,long).mjava","sourceNew":null,"sourceOld":"  public FrozenBufferedDeletes(BufferedDeletes deletes, long gen) {\n    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);\n    queries = new Query[deletes.queries.size()];\n    queryLimits = new int[deletes.queries.size()];\n    int upto = 0;\n    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {\n      queries[upto] = ent.getKey();\n      queryLimits[upto] = ent.getValue();\n      upto++;\n    }\n    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY;\n    numTermDeletes = deletes.numTermDeletes.get();\n    this.gen = gen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3776dccca01c11e7046323cfad46a3b4a471233":["69a6d2d525aeab53c867ed26934185e5bb627d0e","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["69a6d2d525aeab53c867ed26934185e5bb627d0e","327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"]},"commit2Childs":{"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","69a6d2d525aeab53c867ed26934185e5bb627d0e","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}