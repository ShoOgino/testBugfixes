{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (rb.doStats) {\n      SolrParams params = rb.req.getParams();\n      SimpleStats s = new SimpleStats(rb.req,\n              rb.getResults().docSet,\n              params );\n\n      // TODO ???? add this directly to the response, or to the builder?\n      rb.rsp.add( \"stats\", s.getStatsCounts() );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (rb.doStats) {\n      SolrParams params = rb.req.getParams();\n      SimpleStats s = new SimpleStats(rb.req,\n              rb.getResults().docSet,\n              params );\n\n      // TODO ???? add this directly to the response, or to the builder?\n      rb.rsp.add( \"stats\", s.getStatsCounts() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (rb.doStats) {\n      SolrParams params = rb.req.getParams();\n      SimpleStats s = new SimpleStats(rb.req,\n              rb.getResults().docSet,\n              params );\n\n      // TODO ???? add this directly to the response, or to the builder?\n      rb.rsp.add( \"stats\", s.getStatsCounts() );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (rb.doStats) {\n      SolrParams params = rb.req.getParams();\n      SimpleStats s = new SimpleStats(rb.req,\n              rb.getResults().docSet,\n              params );\n\n      // TODO ???? add this directly to the response, or to the builder?\n      rb.rsp.add( \"stats\", s.getStatsCounts() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (rb.doStats) {\n      SolrParams params = rb.req.getParams();\n      SimpleStats s = new SimpleStats(rb.req,\n              rb.getResults().docSet,\n              params );\n\n      // TODO ???? add this directly to the response, or to the builder?\n      rb.rsp.add( \"stats\", s.getStatsCounts() );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (rb.doStats) {\n      SolrParams params = rb.req.getParams();\n      SimpleStats s = new SimpleStats(rb.req,\n              rb.getResults().docSet,\n              params );\n\n      // TODO ???? add this directly to the response, or to the builder?\n      rb.rsp.add( \"stats\", s.getStatsCounts() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c20e2f66487155554bc2d8bc489e0ff1686ba915","date":1394942287,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (rb.doStats) {\n      SolrParams params = rb.req.getParams();\n      SimpleStats s = new SimpleStats(rb.req,\n              rb.getResults().docSet,\n              params,\n              rb );\n\n      // TODO ???? add this directly to the response, or to the builder?\n      rb.rsp.add( \"stats\", s.getStatsCounts() );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (rb.doStats) {\n      SolrParams params = rb.req.getParams();\n      SimpleStats s = new SimpleStats(rb.req,\n              rb.getResults().docSet,\n              params );\n\n      // TODO ???? add this directly to the response, or to the builder?\n      rb.rsp.add( \"stats\", s.getStatsCounts() );\n    }\n  }\n\n","bugFix":null,"bugIntro":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"610c97b96420e614c67797fd43822ebc1d4b7ee2","date":1410814832,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doStats) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n    NamedList<Object> out = new SimpleOrderedMap<>();\n    NamedList<Object> stats_fields = new SimpleOrderedMap<>();\n\n    for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n      DocSet docs = statsField.computeBaseDocSet();\n      NamedList<?> stv = statsField.computeLocalStatsValues(docs).getStatsValues();\n      \n      if (isShard == true || (Long) stv.get(\"count\") > 0) {\n        stats_fields.add(statsField.getOutputKey(), stv);\n      } else {\n        stats_fields.add(statsField.getOutputKey(), null);\n      }\n    }\n    \n    out.add(\"stats_fields\", stats_fields);\n    rb.rsp.add( \"stats\", out );\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (rb.doStats) {\n      SolrParams params = rb.req.getParams();\n      SimpleStats s = new SimpleStats(rb.req,\n              rb.getResults().docSet,\n              params,\n              rb );\n\n      // TODO ???? add this directly to the response, or to the builder?\n      rb.rsp.add( \"stats\", s.getStatsCounts() );\n    }\n  }\n\n","bugFix":["758a0ba5e213f4d1fc89087ae6e4678f7879e450","c20e2f66487155554bc2d8bc489e0ff1686ba915"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doStats) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n    Map<String, StatsValues> statsValues = new LinkedHashMap<>();\n\n    for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n      DocSet docs = statsField.computeBaseDocSet();\n      statsValues.put(statsField.getOutputKey(), statsField.computeLocalStatsValues(docs));\n    }\n    \n    rb.rsp.add( \"stats\", convertToResponse(isShard, statsValues) );\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doStats) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n    NamedList<Object> out = new SimpleOrderedMap<>();\n    NamedList<Object> stats_fields = new SimpleOrderedMap<>();\n\n    for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n      DocSet docs = statsField.computeBaseDocSet();\n      NamedList<?> stv = statsField.computeLocalStatsValues(docs).getStatsValues();\n      \n      if (isShard == true || (Long) stv.get(\"count\") > 0) {\n        stats_fields.add(statsField.getOutputKey(), stv);\n      } else {\n        stats_fields.add(statsField.getOutputKey(), null);\n      }\n    }\n    \n    out.add(\"stats_fields\", stats_fields);\n    rb.rsp.add( \"stats\", out );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doStats) return;\n    \n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n    Map<String, StatsValues> statsValues = new LinkedHashMap<>();\n\n    for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n      DocSet docs = statsField.computeBaseDocSet();\n      statsValues.put(statsField.getOutputKey(), statsField.computeLocalStatsValues(docs));\n    }\n    \n    rb.rsp.add( \"stats\", convertToResponse(statsValues) );\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doStats) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n    Map<String, StatsValues> statsValues = new LinkedHashMap<>();\n\n    for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n      DocSet docs = statsField.computeBaseDocSet();\n      statsValues.put(statsField.getOutputKey(), statsField.computeLocalStatsValues(docs));\n    }\n    \n    rb.rsp.add( \"stats\", convertToResponse(isShard, statsValues) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1002283cfd29923d517db7c33e07bb54aac7acd4","date":1427211199,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doStats) return;\n    Map<String, StatsValues> statsValues = new LinkedHashMap<>();\n\n    for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n      DocSet docs = statsField.computeBaseDocSet();\n      statsValues.put(statsField.getOutputKey(), statsField.computeLocalStatsValues(docs));\n    }\n    \n    rb.rsp.add( \"stats\", convertToResponse(statsValues) );\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doStats) return;\n    \n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n    Map<String, StatsValues> statsValues = new LinkedHashMap<>();\n\n    for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n      DocSet docs = statsField.computeBaseDocSet();\n      statsValues.put(statsField.getOutputKey(), statsField.computeLocalStatsValues(docs));\n    }\n    \n    rb.rsp.add( \"stats\", convertToResponse(statsValues) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doStats) return;\n    Map<String, StatsValues> statsValues = new LinkedHashMap<>();\n\n    for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n      DocSet docs = statsField.computeBaseDocSet();\n      statsValues.put(statsField.getOutputKey(), statsField.computeLocalStatsValues(docs));\n    }\n    \n    rb.rsp.add( \"stats\", convertToResponse(statsValues) );\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doStats) return;\n\n    boolean isShard = rb.req.getParams().getBool(ShardParams.IS_SHARD, false);\n    Map<String, StatsValues> statsValues = new LinkedHashMap<>();\n\n    for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n      DocSet docs = statsField.computeBaseDocSet();\n      statsValues.put(statsField.getOutputKey(), statsField.computeLocalStatsValues(docs));\n    }\n    \n    rb.rsp.add( \"stats\", convertToResponse(isShard, statsValues) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doStats) return;\n    Map<String, StatsValues> statsValues = new LinkedHashMap<>();\n\n    for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n      DocSet docs = statsField.computeBaseDocSet();\n      statsValues.put(statsField.getOutputKey(), statsField.computeLocalStatsValues(docs));\n    }\n\n    rb.rsp.add(\"stats\", convertToResponse(statsValues));\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doStats) return;\n    Map<String, StatsValues> statsValues = new LinkedHashMap<>();\n\n    for (StatsField statsField : rb._statsInfo.getStatsFields()) {\n      DocSet docs = statsField.computeBaseDocSet();\n      statsValues.put(statsField.getOutputKey(), statsField.computeLocalStatsValues(docs));\n    }\n    \n    rb.rsp.add( \"stats\", convertToResponse(statsValues) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4c18a95e9168a30be855f5d5e7d61a863186fdc5","1002283cfd29923d517db7c33e07bb54aac7acd4"],"610c97b96420e614c67797fd43822ebc1d4b7ee2":["c20e2f66487155554bc2d8bc489e0ff1686ba915"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c20e2f66487155554bc2d8bc489e0ff1686ba915":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["d12bbc45d641864ffe03291bc30f178eb34e434c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"610c97b96420e614c67797fd43822ebc1d4b7ee2":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"c26f00b574427b55127e869b935845554afde1fa":["c20e2f66487155554bc2d8bc489e0ff1686ba915"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c20e2f66487155554bc2d8bc489e0ff1686ba915":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ba33781da68babcaa5828121b443d3eb5c9d8480"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}