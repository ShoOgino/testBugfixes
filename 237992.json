{"path":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#checkAZombieServer(ServerWrapper).mjava","commits":[{"id":"d0e21d913dd196ddb03bd8eba703d966f9aead69","date":1237540237,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#checkAZombieServer(ServerWrapper).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Takes up one dead server and check for aliveness. The check is done in a roundrobin. Each server is checked for\n   * aliveness once in 'x' millis where x is decided by the setAliveCheckinterval() or it is defaulted to 1 minute\n   *\n   * @param zombieServer a server in the dead pool\n   */\n  private void checkAZombieServer(ServerWrapper zombieServer) {\n    long currTime = System.currentTimeMillis();\n    checkLock.lock();\n    try {\n      zombieServer.lastChecked = currTime;\n      QueryResponse resp = zombieServer.solrServer.query(solrQuery);\n      if (resp.getStatus() == 0) {\n        //server has come back up\n        zombieServer.lastUsed = currTime;\n        zombieServers.remove(zombieServer);\n        aliveServers.add(zombieServer);\n        zombieServer.failedPings = 0;\n      }\n    } catch (Exception e) {\n      zombieServer.failedPings++;\n      //Expected . The server is still down\n    } finally {\n      checkLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#checkAZombieServer(ServerWrapper).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#checkAZombieServer(ServerWrapper).mjava","sourceNew":"  /**\n   * Takes up one dead server and check for aliveness. The check is done in a roundrobin. Each server is checked for\n   * aliveness once in 'x' millis where x is decided by the setAliveCheckinterval() or it is defaulted to 1 minute\n   *\n   * @param zombieServer a server in the dead pool\n   */\n  private void checkAZombieServer(ServerWrapper zombieServer) {\n    long currTime = System.currentTimeMillis();\n    checkLock.lock();\n    try {\n      zombieServer.lastChecked = currTime;\n      QueryResponse resp = zombieServer.solrServer.query(solrQuery);\n      if (resp.getStatus() == 0) {\n        //server has come back up\n        zombieServer.lastUsed = currTime;\n        zombieServers.remove(zombieServer);\n        aliveServers.add(zombieServer);\n        zombieServer.failedPings = 0;\n      }\n    } catch (Exception e) {\n      zombieServer.failedPings++;\n      //Expected . The server is still down\n    } finally {\n      checkLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Takes up one dead server and check for aliveness. The check is done in a roundrobin. Each server is checked for\n   * aliveness once in 'x' millis where x is decided by the setAliveCheckinterval() or it is defaulted to 1 minute\n   *\n   * @param zombieServer a server in the dead pool\n   */\n  private void checkAZombieServer(ServerWrapper zombieServer) {\n    long currTime = System.currentTimeMillis();\n    checkLock.lock();\n    try {\n      zombieServer.lastChecked = currTime;\n      QueryResponse resp = zombieServer.solrServer.query(solrQuery);\n      if (resp.getStatus() == 0) {\n        //server has come back up\n        zombieServer.lastUsed = currTime;\n        zombieServers.remove(zombieServer);\n        aliveServers.add(zombieServer);\n        zombieServer.failedPings = 0;\n      }\n    } catch (Exception e) {\n      zombieServer.failedPings++;\n      //Expected . The server is still down\n    } finally {\n      checkLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0e21d913dd196ddb03bd8eba703d966f9aead69":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d0e21d913dd196ddb03bd8eba703d966f9aead69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0e21d913dd196ddb03bd8eba703d966f9aead69":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d0e21d913dd196ddb03bd8eba703d966f9aead69"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}