{"path":"src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","commits":[{"id":"b8b3b526542a07c380e03ce642edd7ca82ac961f","date":1226443334,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"/dev/null","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our needs here.\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(!r.isDeleted(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our needs here.\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(!r.isDeleted(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our needs here.\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(!r.isDeleted(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our needs here.\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(!r.isDeleted(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our needs here.\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(!r.isDeleted(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our needs here.\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(!r.isDeleted(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our needs here.\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(!r.isDeleted(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b8b3b526542a07c380e03ce642edd7ca82ac961f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["b8b3b526542a07c380e03ce642edd7ca82ac961f","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"b8b3b526542a07c380e03ce642edd7ca82ac961f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8b3b526542a07c380e03ce642edd7ca82ac961f"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b8b3b526542a07c380e03ce642edd7ca82ac961f":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}