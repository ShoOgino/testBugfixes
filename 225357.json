{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","commits":[{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"/dev/null","sourceNew":"  void markForFullFlush() {\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        if (next.perThread.getNumDocsInRAM() > 0) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1","32f306edd62f81390a6e263e8b913f089f3e98a1","c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d45e9e2ad7f57776540627c78f5e22e469ccdc1","date":1302784878,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      documentsWriter.deleteQueue = new DocumentsWriterDeleteQueue(new BufferedDeletes(false));\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        if (next.perThread.getNumDocsInRAM() > 0) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n    \n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"bugIntro":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      documentsWriter.deleteQueue = new DocumentsWriterDeleteQueue(new BufferedDeletes(false));\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      documentsWriter.deleteQueue = new DocumentsWriterDeleteQueue(new BufferedDeletes(false));\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc","date":1303831082,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      documentsWriter.deleteQueue = new DocumentsWriterDeleteQueue(new BufferedDeletes(false));\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue || next.perThread.deleteQueue == documentsWriter.deleteQueue;\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      documentsWriter.deleteQueue = new DocumentsWriterDeleteQueue(new BufferedDeletes(false));\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","bugFix":null,"bugIntro":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1477af122a18e85a144a60c6b1d8da8260490b78","date":1303917083,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue();\n      newQueue.generation = flushingQueue.generation + 1;\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      documentsWriter.deleteQueue = new DocumentsWriterDeleteQueue(new BufferedDeletes(false));\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue || next.perThread.deleteQueue == documentsWriter.deleteQueue;\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78248211b373c5a9b53071bf888805d4fab51bd3","date":1303919265,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue();\n      newQueue.generation = flushingQueue.generation + 1;\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"/dev/null","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"/dev/null","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ab0e311d00c794eac70d67151d50cbb45ff810b","date":1304664391,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n          }\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","bugFix":null,"bugIntro":["32f306edd62f81390a6e263e8b913f089f3e98a1","c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n          }\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32f306edd62f81390a6e263e8b913f089f3e98a1","date":1305615519,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n            final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n            assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n            assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n            toFlush.add(flushingDWPT);\n          }\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(toFlush);\n      stallControl.updateStalled(this);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n          }\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b","f4f6945f5eb72bd7d9722ab064a98eb1d8543afc","6ab0e311d00c794eac70d67151d50cbb45ff810b"],"bugIntro":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n            final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n            assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n            assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n            toFlush.add(flushingDWPT);\n          }\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(toFlush);\n      stallControl.updateStalled(this);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n          }\n          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n          assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n          assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n          toFlush.add(flushingDWPT);\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      assert assertBlockedFlushes(flushingQueue);\n      flushQueue.addAll(blockedFlushes);\n      blockedFlushes.clear();\n      flushQueue.addAll(toFlush);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"/dev/null","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n            final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n            assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n            assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n            toFlush.add(flushingDWPT);\n          }\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(toFlush);\n      stallControl.updateStalled(this);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a8a3c395573f31971a415972824d76a5c772cd8","date":1306706129,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n            final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n            assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n            assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n            toFlush.add(flushingDWPT);\n          }\n        } else {\n          if (closed) {\n            next.resetWriter(null); // make this state inactive\n          } else {\n            // get the new delete queue from DW\n            next.perThread.initialize();\n          }\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(toFlush);\n      stallControl.updateStalled(this);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n            final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n            assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n            assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n            toFlush.add(flushingDWPT);\n          }\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(toFlush);\n      stallControl.updateStalled(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n            final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n            assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n            assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n            toFlush.add(flushingDWPT);\n          }\n        } else {\n          if (closed) {\n            next.resetWriter(null); // make this state inactive\n          } else {\n            // get the new delete queue from DW\n            next.perThread.initialize();\n          }\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(toFlush);\n      stallControl.updateStalled(this);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n            final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n            assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n            assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n            toFlush.add(flushingDWPT);\n          }\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(toFlush);\n      stallControl.updateStalled(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n            final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n            assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n            assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n            toFlush.add(flushingDWPT);\n          }\n        } else {\n          if (closed) {\n            next.resetWriter(null); // make this state inactive\n          } else {\n            // get the new delete queue from DW\n            next.perThread.initialize();\n          }\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(toFlush);\n      stallControl.updateStalled(this);\n    }\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n            final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n            assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n            assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n            toFlush.add(flushingDWPT);\n          }\n        } else {\n          // get the new delete queue from DW\n          next.perThread.initialize();\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(toFlush);\n      stallControl.updateStalled(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush : \"called DWFC#markForFullFlush() while full flush is still running\";\n      assert fullFlushBuffer.isEmpty() : \"full flush buffer should be empty: \"+ fullFlushBuffer;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool.getActivePerThreadsIterator();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        addFlushableState(next);\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(fullFlushBuffer);\n      fullFlushBuffer.clear();\n      stallControl.updateStalled(this);\n    }\n    assert assertActiveDeleteQueue(documentsWriter.deleteQueue);\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool\n    .getActivePerThreadsIterator();\n    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        if (next.perThread.getNumDocsInRAM() > 0 ) {\n          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert\n          synchronized (this) {\n            if (!next.flushPending) {\n              setFlushPending(next);\n            }\n            final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next);\n            assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n            assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n            toFlush.add(flushingDWPT);\n          }\n        } else {\n          if (closed) {\n            next.resetWriter(null); // make this state inactive\n          } else {\n            // get the new delete queue from DW\n            next.perThread.initialize();\n          }\n        }\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(toFlush);\n      stallControl.updateStalled(this);\n    }\n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b","6ab0e311d00c794eac70d67151d50cbb45ff810b","32f306edd62f81390a6e263e8b913f089f3e98a1","7d45e9e2ad7f57776540627c78f5e22e469ccdc1","6a8a3c395573f31971a415972824d76a5c772cd8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#markForFullFlush().mjava","sourceNew":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush : \"called DWFC#markForFullFlush() while full flush is still running\";\n      assert fullFlushBuffer.isEmpty() : \"full flush buffer should be empty: \"+ fullFlushBuffer;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool.getActivePerThreadsIterator();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        addFlushableState(next);\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(fullFlushBuffer);\n      fullFlushBuffer.clear();\n      stallControl.updateStalled(this);\n    }\n    assert assertActiveDeleteQueue(documentsWriter.deleteQueue);\n  }\n\n","sourceOld":"  void markForFullFlush() {\n    final DocumentsWriterDeleteQueue flushingQueue;\n    synchronized (this) {\n      assert !fullFlush : \"called DWFC#markForFullFlush() while full flush is still running\";\n      assert fullFlushBuffer.isEmpty() : \"full flush buffer should be empty: \"+ fullFlushBuffer;\n      fullFlush = true;\n      flushingQueue = documentsWriter.deleteQueue;\n      // Set a new delete queue - all subsequent DWPT will use this queue until\n      // we do another full flush\n      DocumentsWriterDeleteQueue newQueue = new DocumentsWriterDeleteQueue(flushingQueue.generation+1);\n      documentsWriter.deleteQueue = newQueue;\n    }\n    final Iterator<ThreadState> allActiveThreads = perThreadPool.getActivePerThreadsIterator();\n    while (allActiveThreads.hasNext()) {\n      final ThreadState next = allActiveThreads.next();\n      next.lock();\n      try {\n        if (!next.isActive()) {\n          continue; \n        }\n        assert next.perThread.deleteQueue == flushingQueue\n            || next.perThread.deleteQueue == documentsWriter.deleteQueue : \" flushingQueue: \"\n            + flushingQueue\n            + \" currentqueue: \"\n            + documentsWriter.deleteQueue\n            + \" perThread queue: \"\n            + next.perThread.deleteQueue\n            + \" numDocsInRam: \" + next.perThread.getNumDocsInRAM();\n        if (next.perThread.deleteQueue != flushingQueue) {\n          // this one is already a new DWPT\n          continue;\n        }\n        addFlushableState(next);\n      } finally {\n        next.unlock();\n      }\n    }\n    synchronized (this) {\n      /* make sure we move all DWPT that are where concurrently marked as\n       * pending and moved to blocked are moved over to the flushQueue. There is\n       * a chance that this happens since we marking DWPT for full flush without\n       * blocking indexing.*/\n      pruneBlockedQueue(flushingQueue);   \n      assert assertBlockedFlushes(documentsWriter.deleteQueue);\n      flushQueue.addAll(fullFlushBuffer);\n      fullFlushBuffer.clear();\n      stallControl.updateStalled(this);\n    }\n    assert assertActiveDeleteQueue(documentsWriter.deleteQueue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"6a8a3c395573f31971a415972824d76a5c772cd8":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","78248211b373c5a9b53071bf888805d4fab51bd3"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6f4cae61e16730201371ab7e9912721c19324e7":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["6a8a3c395573f31971a415972824d76a5c772cd8"],"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["f6f4cae61e16730201371ab7e9912721c19324e7"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","32f306edd62f81390a6e263e8b913f089f3e98a1"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","6a8a3c395573f31971a415972824d76a5c772cd8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["6ab0e311d00c794eac70d67151d50cbb45ff810b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","6ab0e311d00c794eac70d67151d50cbb45ff810b"],"6ab0e311d00c794eac70d67151d50cbb45ff810b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"78248211b373c5a9b53071bf888805d4fab51bd3":["1477af122a18e85a144a60c6b1d8da8260490b78"],"1477af122a18e85a144a60c6b1d8da8260490b78":["f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c3a8a449466c1ff7ce2274fe73dab487256964b4","6a8a3c395573f31971a415972824d76a5c772cd8"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6a8a3c395573f31971a415972824d76a5c772cd8":["c00afe74a80796ed1f30a9509b150ff104746a1f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","6ab0e311d00c794eac70d67151d50cbb45ff810b"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"f6f4cae61e16730201371ab7e9912721c19324e7":["f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["f6f4cae61e16730201371ab7e9912721c19324e7"],"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["1477af122a18e85a144a60c6b1d8da8260490b78"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["6a8a3c395573f31971a415972824d76a5c772cd8","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","327863a2fd61e831028b6c56c8fef6b00a44eb0b","a3776dccca01c11e7046323cfad46a3b4a471233"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"6ab0e311d00c794eac70d67151d50cbb45ff810b":["32f306edd62f81390a6e263e8b913f089f3e98a1","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"78248211b373c5a9b53071bf888805d4fab51bd3":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1477af122a18e85a144a60c6b1d8da8260490b78":["78248211b373c5a9b53071bf888805d4fab51bd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}