{"path":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","commits":[{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult) throws Exception {\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    assertNotNull(classificationResult.getAssignedClass());\n    assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7161a776f504e35697e4bcb672862f679a4c2a9d","date":1439207410,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","sourceNew":"  protected ClassificationResult<T> checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult) throws Exception {\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    assertNotNull(classificationResult.getAssignedClass());\n    assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n    return classificationResult;\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult) throws Exception {\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    assertNotNull(classificationResult.getAssignedClass());\n    assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n  }\n\n","bugFix":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c7e09cbbdff0b2669bf1887ff607e19e88954c6","date":1491923533,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","sourceNew":"  protected ClassificationResult<T> checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult) throws Exception {\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    T assignedClass = classificationResult.getAssignedClass();\n    assertNotNull(assignedClass);\n    assertEquals(\"got an assigned class of \" + assignedClass, expectedResult instanceof BytesRef ? ((BytesRef) expectedResult).utf8ToString() : expectedResult, assignedClass instanceof BytesRef ? ((BytesRef) assignedClass).utf8ToString() : assignedClass);\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n    return classificationResult;\n  }\n\n","sourceOld":"  protected ClassificationResult<T> checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult) throws Exception {\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    assertNotNull(classificationResult.getAssignedClass());\n    assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n    return classificationResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","sourceNew":"  protected ClassificationResult<T> checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult) throws Exception {\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    T assignedClass = classificationResult.getAssignedClass();\n    assertNotNull(assignedClass);\n    assertEquals(\"got an assigned class of \" + assignedClass, expectedResult instanceof BytesRef ? ((BytesRef) expectedResult).utf8ToString() : expectedResult, assignedClass instanceof BytesRef ? ((BytesRef) assignedClass).utf8ToString() : assignedClass);\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n    return classificationResult;\n  }\n\n","sourceOld":"  protected ClassificationResult<T> checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult) throws Exception {\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    assertNotNull(classificationResult.getAssignedClass());\n    assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n    return classificationResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90b29a9f289766d43d9ab57359c809365b18b690","date":1506692092,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","sourceNew":"  protected ClassificationResult<T> checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult) throws Exception {\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    assertNotNull(classificationResult);\n    T assignedClass = classificationResult.getAssignedClass();\n    assertNotNull(assignedClass);\n    assertEquals(\"got an assigned class of \" + assignedClass, expectedResult instanceof BytesRef ? ((BytesRef) expectedResult).utf8ToString() : expectedResult, assignedClass instanceof BytesRef ? ((BytesRef) assignedClass).utf8ToString() : assignedClass);\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n    return classificationResult;\n  }\n\n","sourceOld":"  protected ClassificationResult<T> checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult) throws Exception {\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    T assignedClass = classificationResult.getAssignedClass();\n    assertNotNull(assignedClass);\n    assertEquals(\"got an assigned class of \" + assignedClass, expectedResult instanceof BytesRef ? ((BytesRef) expectedResult).utf8ToString() : expectedResult, assignedClass instanceof BytesRef ? ((BytesRef) assignedClass).utf8ToString() : assignedClass);\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n    return classificationResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T).mjava","sourceNew":"  protected ClassificationResult<T> checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult) throws Exception {\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    assertNotNull(classificationResult);\n    T assignedClass = classificationResult.getAssignedClass();\n    assertNotNull(assignedClass);\n    assertEquals(\"got an assigned class of \" + assignedClass, expectedResult instanceof BytesRef ? ((BytesRef) expectedResult).utf8ToString() : expectedResult, assignedClass instanceof BytesRef ? ((BytesRef) assignedClass).utf8ToString() : assignedClass);\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n    return classificationResult;\n  }\n\n","sourceOld":"  protected ClassificationResult<T> checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult) throws Exception {\n    ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n    T assignedClass = classificationResult.getAssignedClass();\n    assertNotNull(assignedClass);\n    assertEquals(\"got an assigned class of \" + assignedClass, expectedResult instanceof BytesRef ? ((BytesRef) expectedResult).utf8ToString() : expectedResult, assignedClass instanceof BytesRef ? ((BytesRef) assignedClass).utf8ToString() : assignedClass);\n    double score = classificationResult.getScore();\n    assertTrue(\"score should be between 0 and 1, got:\" + score, score <= 1 && score >= 0);\n    return classificationResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","90b29a9f289766d43d9ab57359c809365b18b690"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7161a776f504e35697e4bcb672862f679a4c2a9d":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"6c7e09cbbdff0b2669bf1887ff607e19e88954c6":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"90b29a9f289766d43d9ab57359c809365b18b690":["6c7e09cbbdff0b2669bf1887ff607e19e88954c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90b29a9f289766d43d9ab57359c809365b18b690"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"7161a776f504e35697e4bcb672862f679a4c2a9d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","6c7e09cbbdff0b2669bf1887ff607e19e88954c6"],"6c7e09cbbdff0b2669bf1887ff607e19e88954c6":["90b29a9f289766d43d9ab57359c809365b18b690"],"90b29a9f289766d43d9ab57359c809365b18b690":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}