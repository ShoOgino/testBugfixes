{"path":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#generateBiSegGraph(SegGraph).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#generateBiSegGraph(SegGraph).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#generateBiSegGraph(SegGraph).mjava","sourceNew":"  /*\n   * Generate a BiSegGraph based upon a SegGraph\n   */\n  private void generateBiSegGraph(SegGraph segGraph) {\n    double smooth = 0.1;\n    int wordPairFreq = 0;\n    int maxStart = segGraph.getMaxStart();\n    double oneWordFreq, weight, tinyDouble = 1.0 / Utility.MAX_FREQUENCE;\n\n    int next;\n    char[] idBuffer;\n    // get the list of tokens ordered and indexed\n    segTokenList = segGraph.makeIndex();\n    // Because the beginning position of startToken is -1, therefore startToken can be obtained when key = -1\n    int key = -1;\n    List<SegToken> nextTokens = null;\n    while (key < maxStart) {\n      if (segGraph.isStartExist(key)) {\n\n        List<SegToken> tokenList = segGraph.getStartList(key);\n\n        // Calculate all tokens for a given key.\n        for (SegToken t1 : tokenList) {\n          oneWordFreq = t1.weight;\n          next = t1.endOffset;\n          nextTokens = null;\n          // Find the next corresponding Token.\n          // For example: \"Sunny seashore\", the present Token is \"sunny\", next one should be \"sea\" or \"seashore\".\n          // If we cannot find the next Token, then go to the end and repeat the same cycle.\n          while (next <= maxStart) {\n            // Because the beginning position of endToken is sentenceLen, so equal to sentenceLen can find endToken.\n            if (segGraph.isStartExist(next)) {\n              nextTokens = segGraph.getStartList(next);\n              break;\n            }\n            next++;\n          }\n          if (nextTokens == null) {\n            break;\n          }\n          for (SegToken t2 : nextTokens) {\n            idBuffer = new char[t1.charArray.length + t2.charArray.length + 1];\n            System.arraycopy(t1.charArray, 0, idBuffer, 0, t1.charArray.length);\n            idBuffer[t1.charArray.length] = BigramDictionary.WORD_SEGMENT_CHAR;\n            System.arraycopy(t2.charArray, 0, idBuffer,\n                t1.charArray.length + 1, t2.charArray.length);\n\n            // Two linked Words frequency\n            wordPairFreq = bigramDict.getFrequency(idBuffer);\n\n            // Smoothing\n\n            // -log{a*P(Ci-1)+(1-a)P(Ci|Ci-1)} Note 0<a<1\n            weight = -Math\n                .log(smooth\n                    * (1.0 + oneWordFreq)\n                    / (Utility.MAX_FREQUENCE + 0.0)\n                    + (1.0 - smooth)\n                    * ((1.0 - tinyDouble) * wordPairFreq / (1.0 + oneWordFreq) + tinyDouble));\n\n            SegTokenPair tokenPair = new SegTokenPair(idBuffer, t1.index,\n                t2.index, weight);\n            this.addSegTokenPair(tokenPair);\n          }\n        }\n      }\n      key++;\n    }\n\n  }\n\n","sourceOld":"  /*\n   * Generate a BiSegGraph based upon a SegGraph\n   */\n  private void generateBiSegGraph(SegGraph segGraph) {\n    double smooth = 0.1;\n    int wordPairFreq = 0;\n    int maxStart = segGraph.getMaxStart();\n    double oneWordFreq, weight, tinyDouble = 1.0 / Utility.MAX_FREQUENCE;\n\n    int next;\n    char[] idBuffer;\n    // get the list of tokens ordered and indexed\n    segTokenList = segGraph.makeIndex();\n    // Because the beginning position of startToken is -1, therefore startToken can be obtained when key = -1\n    int key = -1;\n    List<SegToken> nextTokens = null;\n    while (key < maxStart) {\n      if (segGraph.isStartExist(key)) {\n\n        List<SegToken> tokenList = segGraph.getStartList(key);\n\n        // Calculate all tokens for a given key.\n        for (SegToken t1 : tokenList) {\n          oneWordFreq = t1.weight;\n          next = t1.endOffset;\n          nextTokens = null;\n          // Find the next corresponding Token.\n          // For example: \"Sunny seashore\", the present Token is \"sunny\", next one should be \"sea\" or \"seashore\".\n          // If we cannot find the next Token, then go to the end and repeat the same cycle.\n          while (next <= maxStart) {\n            // Because the beginning position of endToken is sentenceLen, so equal to sentenceLen can find endToken.\n            if (segGraph.isStartExist(next)) {\n              nextTokens = segGraph.getStartList(next);\n              break;\n            }\n            next++;\n          }\n          if (nextTokens == null) {\n            break;\n          }\n          for (SegToken t2 : nextTokens) {\n            idBuffer = new char[t1.charArray.length + t2.charArray.length + 1];\n            System.arraycopy(t1.charArray, 0, idBuffer, 0, t1.charArray.length);\n            idBuffer[t1.charArray.length] = BigramDictionary.WORD_SEGMENT_CHAR;\n            System.arraycopy(t2.charArray, 0, idBuffer,\n                t1.charArray.length + 1, t2.charArray.length);\n\n            // Two linked Words frequency\n            wordPairFreq = bigramDict.getFrequency(idBuffer);\n\n            // Smoothing\n\n            // -log{a*P(Ci-1)+(1-a)P(Ci|Ci-1)} Note 0<a<1\n            weight = -Math\n                .log(smooth\n                    * (1.0 + oneWordFreq)\n                    / (Utility.MAX_FREQUENCE + 0.0)\n                    + (1.0 - smooth)\n                    * ((1.0 - tinyDouble) * wordPairFreq / (1.0 + oneWordFreq) + tinyDouble));\n\n            SegTokenPair tokenPair = new SegTokenPair(idBuffer, t1.index,\n                t2.index, weight);\n            this.addSegTokenPair(tokenPair);\n          }\n        }\n      }\n      key++;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#generateBiSegGraph(SegGraph).mjava","pathOld":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#generateBiSegGraph(SegGraph).mjava","sourceNew":"  /*\n   * Generate a BiSegGraph based upon a SegGraph\n   */\n  private void generateBiSegGraph(SegGraph segGraph) {\n    double smooth = 0.1;\n    int wordPairFreq = 0;\n    int maxStart = segGraph.getMaxStart();\n    double oneWordFreq, weight, tinyDouble = 1.0 / Utility.MAX_FREQUENCE;\n\n    int next;\n    char[] idBuffer;\n    // get the list of tokens ordered and indexed\n    segTokenList = segGraph.makeIndex();\n    // Because the beginning position of startToken is -1, therefore startToken can be obtained when key = -1\n    int key = -1;\n    List<SegToken> nextTokens = null;\n    while (key < maxStart) {\n      if (segGraph.isStartExist(key)) {\n\n        List<SegToken> tokenList = segGraph.getStartList(key);\n\n        // Calculate all tokens for a given key.\n        for (SegToken t1 : tokenList) {\n          oneWordFreq = t1.weight;\n          next = t1.endOffset;\n          nextTokens = null;\n          // Find the next corresponding Token.\n          // For example: \"Sunny seashore\", the present Token is \"sunny\", next one should be \"sea\" or \"seashore\".\n          // If we cannot find the next Token, then go to the end and repeat the same cycle.\n          while (next <= maxStart) {\n            // Because the beginning position of endToken is sentenceLen, so equal to sentenceLen can find endToken.\n            if (segGraph.isStartExist(next)) {\n              nextTokens = segGraph.getStartList(next);\n              break;\n            }\n            next++;\n          }\n          if (nextTokens == null) {\n            break;\n          }\n          for (SegToken t2 : nextTokens) {\n            idBuffer = new char[t1.charArray.length + t2.charArray.length + 1];\n            System.arraycopy(t1.charArray, 0, idBuffer, 0, t1.charArray.length);\n            idBuffer[t1.charArray.length] = BigramDictionary.WORD_SEGMENT_CHAR;\n            System.arraycopy(t2.charArray, 0, idBuffer,\n                t1.charArray.length + 1, t2.charArray.length);\n\n            // Two linked Words frequency\n            wordPairFreq = bigramDict.getFrequency(idBuffer);\n\n            // Smoothing\n\n            // -log{a*P(Ci-1)+(1-a)P(Ci|Ci-1)} Note 0<a<1\n            weight = -Math\n                .log(smooth\n                    * (1.0 + oneWordFreq)\n                    / (Utility.MAX_FREQUENCE + 0.0)\n                    + (1.0 - smooth)\n                    * ((1.0 - tinyDouble) * wordPairFreq / (1.0 + oneWordFreq) + tinyDouble));\n\n            SegTokenPair tokenPair = new SegTokenPair(idBuffer, t1.index,\n                t2.index, weight);\n            this.addSegTokenPair(tokenPair);\n          }\n        }\n      }\n      key++;\n    }\n\n  }\n\n","sourceOld":"  /*\n   * Generate a BiSegGraph based upon a SegGraph\n   */\n  private void generateBiSegGraph(SegGraph segGraph) {\n    double smooth = 0.1;\n    int wordPairFreq = 0;\n    int maxStart = segGraph.getMaxStart();\n    double oneWordFreq, weight, tinyDouble = 1.0 / Utility.MAX_FREQUENCE;\n\n    int next;\n    char[] idBuffer;\n    // get the list of tokens ordered and indexed\n    segTokenList = segGraph.makeIndex();\n    // Because the beginning position of startToken is -1, therefore startToken can be obtained when key = -1\n    int key = -1;\n    List<SegToken> nextTokens = null;\n    while (key < maxStart) {\n      if (segGraph.isStartExist(key)) {\n\n        List<SegToken> tokenList = segGraph.getStartList(key);\n\n        // Calculate all tokens for a given key.\n        for (SegToken t1 : tokenList) {\n          oneWordFreq = t1.weight;\n          next = t1.endOffset;\n          nextTokens = null;\n          // Find the next corresponding Token.\n          // For example: \"Sunny seashore\", the present Token is \"sunny\", next one should be \"sea\" or \"seashore\".\n          // If we cannot find the next Token, then go to the end and repeat the same cycle.\n          while (next <= maxStart) {\n            // Because the beginning position of endToken is sentenceLen, so equal to sentenceLen can find endToken.\n            if (segGraph.isStartExist(next)) {\n              nextTokens = segGraph.getStartList(next);\n              break;\n            }\n            next++;\n          }\n          if (nextTokens == null) {\n            break;\n          }\n          for (SegToken t2 : nextTokens) {\n            idBuffer = new char[t1.charArray.length + t2.charArray.length + 1];\n            System.arraycopy(t1.charArray, 0, idBuffer, 0, t1.charArray.length);\n            idBuffer[t1.charArray.length] = BigramDictionary.WORD_SEGMENT_CHAR;\n            System.arraycopy(t2.charArray, 0, idBuffer,\n                t1.charArray.length + 1, t2.charArray.length);\n\n            // Two linked Words frequency\n            wordPairFreq = bigramDict.getFrequency(idBuffer);\n\n            // Smoothing\n\n            // -log{a*P(Ci-1)+(1-a)P(Ci|Ci-1)} Note 0<a<1\n            weight = -Math\n                .log(smooth\n                    * (1.0 + oneWordFreq)\n                    / (Utility.MAX_FREQUENCE + 0.0)\n                    + (1.0 - smooth)\n                    * ((1.0 - tinyDouble) * wordPairFreq / (1.0 + oneWordFreq) + tinyDouble));\n\n            SegTokenPair tokenPair = new SegTokenPair(idBuffer, t1.index,\n                t2.index, weight);\n            this.addSegTokenPair(tokenPair);\n          }\n        }\n      }\n      key++;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}