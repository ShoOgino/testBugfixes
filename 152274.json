{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          termAtt.setTermLength(i); // simply set a new length\n          return true;\n        }\n      }\n      // we have not seen the delimiter\n      payAtt.setPayload(null);\n      return true;\n    } else return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          termAtt.setTermLength(i); // simply set a new length\n          return true;\n        }\n      }\n      // we have not seen the delimiter\n      payAtt.setPayload(null);\n      return true;\n    } else return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.buffer();\n      final int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          termAtt.setLength(i); // simply set a new length\n          return true;\n        }\n      }\n      // we have not seen the delimiter\n      payAtt.setPayload(null);\n      return true;\n    } else return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      final int length = termAtt.termLength();\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          termAtt.setTermLength(i); // simply set a new length\n          return true;\n        }\n      }\n      // we have not seen the delimiter\n      payAtt.setPayload(null);\n      return true;\n    } else return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.buffer();\n      final int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          termAtt.setLength(i); // simply set a new length\n          return true;\n        }\n      }\n      // we have not seen the delimiter\n      payAtt.setPayload(null);\n      return true;\n    } else return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.buffer();\n      final int length = termAtt.length();\n      for (int i = 0; i < length; i++) {\n        if (buffer[i] == delimiter) {\n          payAtt.setPayload(encoder.encode(buffer, i + 1, (length - (i + 1))));\n          termAtt.setLength(i); // simply set a new length\n          return true;\n        }\n      }\n      // we have not seen the delimiter\n      payAtt.setPayload(null);\n      return true;\n    } else return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}