{"path":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","commits":[{"id":"c5c06a413042e52dc241808ed12b0a1324acaffd","date":1315790003,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"/dev/null","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + simProvider, Float.isInfinite(score));\n    }\n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","b97002ca487af397e493405ced0c73acdabd86ca","c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + simProvider, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + simProvider, Float.isInfinite(score));\n    }\n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + simProvider, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + simProvider, Float.isInfinite(score));\n    }\n    is.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (SimilarityProvider simProvider : simProviders) {\n      is.setSimilarityProvider(simProvider);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + simProvider, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarity2#testCrazySpans().mjava","sourceNew":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    doc.add(newField(\"foo\", \"bar\", ft));\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    for (Similarity sim : sims) {\n      is.setSimilarity(sim);\n      SpanTermQuery s1 = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n      SpanTermQuery s2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n      Query query = new SpanOrQuery(s1, s2);\n      TopDocs td = is.search(query, 10);\n      assertEquals(1, td.totalHits);\n      float score = td.scoreDocs[0].score;\n      assertTrue(score >= 0.0f);\n      assertFalse(\"inf score for \" + sim, Float.isInfinite(score));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["c5c06a413042e52dc241808ed12b0a1324acaffd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"c5c06a413042e52dc241808ed12b0a1324acaffd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["c5c06a413042e52dc241808ed12b0a1324acaffd","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"c5c06a413042e52dc241808ed12b0a1324acaffd":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5c06a413042e52dc241808ed12b0a1324acaffd"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}