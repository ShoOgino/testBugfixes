{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","commits":[{"id":"fcef5771aee556e6c886946095ae4485a392526b","date":1304005192,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads(boolean).mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      while (flushControl.anyFlushing()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads(final boolean flushDeletes)\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      while (flushControl.anyFlushing()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed && flushDeletes) {\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      while (flushControl.anyFlushing()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      while (flushControl.anyFlushing()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32f306edd62f81390a6e263e8b913f089f3e98a1","date":1305615519,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      while (flushControl.anyFlushing()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":["f6f4cae61e16730201371ab7e9912721c19324e7","7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      while (flushControl.anyFlushing()) {\n        flushControl.waitForFlush();  \n      }\n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream != null) {\n      message(Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        if (infoStream != null) {\n         message(Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n\n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a4aa30c1d033538915f8f047faa2eb746afa54a","date":1320174184,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream != null) {\n      message(Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        if (infoStream != null) {\n         message(Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n      assert !flushingDeleteQueue.anyChanges();\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream != null) {\n      message(Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        if (infoStream != null) {\n         message(Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":["33e096accda90a8bd2279f890efe2e287f47c743"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","date":1320437768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream != null) {\n      message(Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      pendingChangesInCurrentFullFlush = anyChanges();\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed && flushingDeleteQueue.anyChanges()) { // apply deletes if we did not flush any document\n        if (infoStream != null) {\n         message(Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        synchronized (ticketQueue) {\n          ticketQueue.incTicketCount(); // first inc the ticket count - freeze opens a window for #anyChanges to fail\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n      assert !flushingDeleteQueue.anyChanges();\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream != null) {\n      message(Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed) { // apply deletes if we did not flush any document\n        if (infoStream != null) {\n         message(Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        synchronized (ticketQueue) {\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n      assert !flushingDeleteQueue.anyChanges();\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":["fcef5771aee556e6c886946095ae4485a392526b"],"bugIntro":["33e096accda90a8bd2279f890efe2e287f47c743"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream != null) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      pendingChangesInCurrentFullFlush = anyChanges();\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed && flushingDeleteQueue.anyChanges()) { // apply deletes if we did not flush any document\n        if (infoStream != null) {\n          infoStream.message(\"DW\", Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        synchronized (ticketQueue) {\n          ticketQueue.incTicketCount(); // first inc the ticket count - freeze opens a window for #anyChanges to fail\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n      assert !flushingDeleteQueue.anyChanges();\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream != null) {\n      message(Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      pendingChangesInCurrentFullFlush = anyChanges();\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed && flushingDeleteQueue.anyChanges()) { // apply deletes if we did not flush any document\n        if (infoStream != null) {\n         message(Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        synchronized (ticketQueue) {\n          ticketQueue.incTicketCount(); // first inc the ticket count - freeze opens a window for #anyChanges to fail\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n      assert !flushingDeleteQueue.anyChanges();\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      pendingChangesInCurrentFullFlush = anyChanges();\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed && flushingDeleteQueue.anyChanges()) { // apply deletes if we did not flush any document\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        synchronized (ticketQueue) {\n          ticketQueue.incTicketCount(); // first inc the ticket count - freeze opens a window for #anyChanges to fail\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n      assert !flushingDeleteQueue.anyChanges();\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream != null) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      pendingChangesInCurrentFullFlush = anyChanges();\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed && flushingDeleteQueue.anyChanges()) { // apply deletes if we did not flush any document\n        if (infoStream != null) {\n          infoStream.message(\"DW\", Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        synchronized (ticketQueue) {\n          ticketQueue.incTicketCount(); // first inc the ticket count - freeze opens a window for #anyChanges to fail\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n      assert !flushingDeleteQueue.anyChanges();\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33e096accda90a8bd2279f890efe2e287f47c743","date":1326726424,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      pendingChangesInCurrentFullFlush = anyChanges();\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed && flushingDeleteQueue.anyChanges()) { // apply deletes if we did not flush any document\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        ticketQueue.addDeletesAndPurge(this, flushingDeleteQueue);\n      } else {\n        ticketQueue.forcePurge(this);\n      }\n      assert !flushingDeleteQueue.anyChanges() && !ticketQueue.hasTickets();\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      pendingChangesInCurrentFullFlush = anyChanges();\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed && flushingDeleteQueue.anyChanges()) { // apply deletes if we did not flush any document\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        synchronized (ticketQueue) {\n          ticketQueue.incTicketCount(); // first inc the ticket count - freeze opens a window for #anyChanges to fail\n          ticketQueue.add(new FlushTicket(flushingDeleteQueue.freezeGlobalBuffer(null), false));\n        }\n        applyFlushTickets();\n      }\n      assert !flushingDeleteQueue.anyChanges();\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":["f6f4cae61e16730201371ab7e9912721c19324e7","761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","7d45e9e2ad7f57776540627c78f5e22e469ccdc1","a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","0a4aa30c1d033538915f8f047faa2eb746afa54a"],"bugIntro":["fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef","fdc3f2b9a4e1c1aacfa53b304c4e42c13a1677ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flushAllThreads().mjava","sourceNew":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      pendingChangesInCurrentFullFlush = anyChanges();\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed && flushingDeleteQueue.anyChanges()) { // apply deletes if we did not flush any document\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        ticketQueue.addDeletesAndPurge(this, flushingDeleteQueue);\n      } else {\n        ticketQueue.forcePurge(this);\n      }\n      assert !flushingDeleteQueue.anyChanges() && !ticketQueue.hasTickets();\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","sourceOld":"  /*\n   * FlushAllThreads is synced by IW fullFlushLock. Flushing all threads is a\n   * two stage operation; the caller must ensure (in try/finally) that finishFlush\n   * is called after this method, to release the flush lock in DWFlushControl\n   */\n  final boolean flushAllThreads()\n    throws IOException {\n    final DocumentsWriterDeleteQueue flushingDeleteQueue;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \" startFullFlush\");\n    }\n    \n    synchronized (this) {\n      pendingChangesInCurrentFullFlush = anyChanges();\n      flushingDeleteQueue = deleteQueue;\n      /* Cutover to a new delete queue.  This must be synced on the flush control\n       * otherwise a new DWPT could sneak into the loop with an already flushing\n       * delete queue */\n      flushControl.markForFullFlush(); // swaps the delQueue synced on FlushControl\n      assert setFlushingDeleteQueue(flushingDeleteQueue);\n    }\n    assert currentFullFlushDelQueue != null;\n    assert currentFullFlushDelQueue != deleteQueue;\n    \n    boolean anythingFlushed = false;\n    try {\n      DocumentsWriterPerThread flushingDWPT;\n      // Help out with flushing:\n      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {\n        anythingFlushed |= doFlush(flushingDWPT);\n      }\n      // If a concurrent flush is still in flight wait for it\n      flushControl.waitForFlush();  \n      if (!anythingFlushed && flushingDeleteQueue.anyChanges()) { // apply deletes if we did not flush any document\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", Thread.currentThread().getName() + \": flush naked frozen global deletes\");\n        }\n        ticketQueue.addDeletesAndPurge(this, flushingDeleteQueue);\n      } else {\n        ticketQueue.forcePurge(this);\n      }\n      assert !flushingDeleteQueue.anyChanges() && !ticketQueue.hasTickets();\n    } finally {\n      assert flushingDeleteQueue == currentFullFlushDelQueue;\n    }\n    return anythingFlushed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["33e096accda90a8bd2279f890efe2e287f47c743"],"06584e6e98d592b34e1329b384182f368d2025e8":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcef5771aee556e6c886946095ae4485a392526b"],"fcef5771aee556e6c886946095ae4485a392526b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"0a4aa30c1d033538915f8f047faa2eb746afa54a":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["135621f3a0670a9394eb563224a3b76cc4dddc0f","32f306edd62f81390a6e263e8b913f089f3e98a1"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["0a4aa30c1d033538915f8f047faa2eb746afa54a"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33e096accda90a8bd2279f890efe2e287f47c743":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["33e096accda90a8bd2279f890efe2e287f47c743"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","32f306edd62f81390a6e263e8b913f089f3e98a1"],"fcef5771aee556e6c886946095ae4485a392526b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["0a4aa30c1d033538915f8f047faa2eb746afa54a"],"0a4aa30c1d033538915f8f047faa2eb746afa54a":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["06584e6e98d592b34e1329b384182f368d2025e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","fcef5771aee556e6c886946095ae4485a392526b","a3776dccca01c11e7046323cfad46a3b4a471233"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["c00afe74a80796ed1f30a9509b150ff104746a1f","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"33e096accda90a8bd2279f890efe2e287f47c743":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}