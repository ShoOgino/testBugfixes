{"path":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexDocValues.Source source = readerContext.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final IndexDocValues.Source source = context.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexDocValues.Source source = readerContext.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexDocValues.Source source = readerContext.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader.docValues(field)\n        .getSource();\n    Type type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexDocValues.Source source = readerContext.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader.docValues(field)\n        .getSource();\n    Type type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader.docValues(field)\n        .getSource();\n    Type type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader.docValues(field)\n        .getSource();\n    Type type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexDocValues.Source source = readerContext.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader.docValues(field)\n        .getSource();\n    Type type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader.docValues(field)\n        .getSource();\n    Type type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd0f953fbccd59aa346f280fe7e30a698f5ecb04","date":1331511349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.getType();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.getType();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.getType();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.getType();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["5cab9a86bd67202d20b6adc463008c8e982b070a","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d638301ad1cfcae567b681b893bc8781f0ee48a5","61e20f33ce8ff701576366fdb03955eded5f209b"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","32e7c2a80dad193a76a03ec46b878969d469ff6c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"61e20f33ce8ff701576366fdb03955eded5f209b":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["5cab9a86bd67202d20b6adc463008c8e982b070a","61e20f33ce8ff701576366fdb03955eded5f209b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","d638301ad1cfcae567b681b893bc8781f0ee48a5","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"61e20f33ce8ff701576366fdb03955eded5f209b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["32e7c2a80dad193a76a03ec46b878969d469ff6c"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}