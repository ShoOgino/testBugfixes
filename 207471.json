{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#createSetWithRandomBlocks(int).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#createSetWithRandomBlocks(int).mjava","pathOld":"/dev/null","sourceNew":"  private FixedBitSet createSetWithRandomBlocks(int blockCount) {\n    final int B = 65536;\n    FixedBitSet set = new FixedBitSet(blockCount * B);\n    for (int block = 0; block < blockCount; block++) {\n      switch (random().nextInt(4)) {\n        case 0: { // EMPTY\n          break;\n        }\n        case 1: { // ALL\n          for (int docID = block* B; docID < (block+1)* B; docID++) {\n            set.set(docID);\n          }\n          break;\n        }\n        case 2: { // SPARSE ( < 4096 )\n          for (int docID = block* B; docID < (block+1)* B; docID += 101) {\n            set.set(docID);\n          }\n          break;\n        }\n        case 3: { // DENSE ( >= 4096 )\n          for (int docID = block* B; docID < (block+1)* B; docID += 3) {\n            set.set(docID);\n          }\n          break;\n        }\n        default: throw new IllegalStateException(\"Modulo logic error: there should only be 4 possibilities\");\n      }\n    }\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#createSetWithRandomBlocks(int).mjava","pathOld":"/dev/null","sourceNew":"  private FixedBitSet createSetWithRandomBlocks(int blockCount) {\n    final int B = 65536;\n    FixedBitSet set = new FixedBitSet(blockCount * B);\n    for (int block = 0; block < blockCount; block++) {\n      switch (random().nextInt(4)) {\n        case 0: { // EMPTY\n          break;\n        }\n        case 1: { // ALL\n          for (int docID = block* B; docID < (block+1)* B; docID++) {\n            set.set(docID);\n          }\n          break;\n        }\n        case 2: { // SPARSE ( < 4096 )\n          for (int docID = block* B; docID < (block+1)* B; docID += 101) {\n            set.set(docID);\n          }\n          break;\n        }\n        case 3: { // DENSE ( >= 4096 )\n          for (int docID = block* B; docID < (block+1)* B; docID += 3) {\n            set.set(docID);\n          }\n          break;\n        }\n        default: throw new IllegalStateException(\"Modulo logic error: there should only be 4 possibilities\");\n      }\n    }\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#createSetWithRandomBlocks(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#createSetWithRandomBlocks(int).mjava","sourceNew":"  private BitSet createSetWithRandomBlocks(int blockCount) {\n    final int B = 65536;\n    BitSet set = new SparseFixedBitSet(blockCount * B);\n    for (int block = 0; block < blockCount; block++) {\n      switch (random().nextInt(4)) {\n        case 0: { // EMPTY\n          break;\n        }\n        case 1: { // ALL\n          for (int docID = block* B; docID < (block+1)* B; docID++) {\n            set.set(docID);\n          }\n          break;\n        }\n        case 2: { // SPARSE ( < 4096 )\n          for (int docID = block* B; docID < (block+1)* B; docID += 101) {\n            set.set(docID);\n          }\n          break;\n        }\n        case 3: { // DENSE ( >= 4096 )\n          for (int docID = block* B; docID < (block+1)* B; docID += 3) {\n            set.set(docID);\n          }\n          break;\n        }\n        default: throw new IllegalStateException(\"Modulo logic error: there should only be 4 possibilities\");\n      }\n    }\n    return set;\n  }\n\n","sourceOld":"  private FixedBitSet createSetWithRandomBlocks(int blockCount) {\n    final int B = 65536;\n    FixedBitSet set = new FixedBitSet(blockCount * B);\n    for (int block = 0; block < blockCount; block++) {\n      switch (random().nextInt(4)) {\n        case 0: { // EMPTY\n          break;\n        }\n        case 1: { // ALL\n          for (int docID = block* B; docID < (block+1)* B; docID++) {\n            set.set(docID);\n          }\n          break;\n        }\n        case 2: { // SPARSE ( < 4096 )\n          for (int docID = block* B; docID < (block+1)* B; docID += 101) {\n            set.set(docID);\n          }\n          break;\n        }\n        case 3: { // DENSE ( >= 4096 )\n          for (int docID = block* B; docID < (block+1)* B; docID += 3) {\n            set.set(docID);\n          }\n          break;\n        }\n        default: throw new IllegalStateException(\"Modulo logic error: there should only be 4 possibilities\");\n      }\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}