{"path":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","commits":[{"id":"ab10d7c14ce9f8db61956611a57a5a377362a633","date":1413903184,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\",false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields) throws IOException {\n      if(split == null) split = \"/\";\n      if(fields == null || fields.length ==0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[]).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\",false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields) throws IOException {\n      if(split == null) split = \"/\";\n      if(fields == null || fields.length ==0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals( req.getParams().get(\"echo\"));\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser,new JsonRecordReader.Handler() {\n        ArrayList docs =null;\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          if(echo){\n            if(docs ==null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\",docs);\n            }\n            docs.add(record);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc =  new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : record.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a63f62e9f506b7a15c76fddc8ad5f22112070c2","date":1423521689,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\",false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\",false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error inserting doc\",e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f5f8e831e266692b649e39dad7a64f525aa6d21","date":1427506910,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(), entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\",false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(), entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\",false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(),entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e08e2b6886d78c91752d82ea2b436c4324cd55","date":1464786234,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String childSplit, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, childSplit, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(), entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f7ea4eee5babadf4129bfa5fbae964738cd7c","date":1464787051,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String childSplit, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, childSplit, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(), entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String childSplit, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, childSplit, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(), entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String childSplit, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, childSplit, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(), entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d9512babbd72795eb013cdd392dad2e2b2313e","date":1465331500,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String childSplit, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, childSplit, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dbf1742cf31777011ef976c17df1c8507c3de9f","date":1465452246,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            changeChildDoc(copy);\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            if (copy.containsKey(null)) {\n              copy.put(CHILD_DOC_KEY, copy.get(null));\n              copy.remove(null);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            changeChildDoc(copy);\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = new SolrInputDocument();\n            for (Map.Entry<String, Object> entry : copy.entrySet()) {\n              cmd.solrDoc.setField(entry.getKey(), entry.getValue());\n            }\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleSplitMode(String,String[],Reader).mjava","sourceNew":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList<Map<String, Object>> docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList<>();\n              rsp.add(\"docs\", docs);\n            }\n            changeChildDoc(copy);\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","sourceOld":"    private void handleSplitMode(String split, String[] fields, final Reader reader) throws IOException {\n      if (split == null) split = \"/\";\n      if (fields == null || fields.length == 0) fields = new String[]{\"$FQN:/**\"};\n      final boolean echo = \"true\".equals(req.getParams().get(\"echo\"));\n      final String srcField = req.getParams().get(\"srcField\");\n      final boolean mapUniqueKeyOnly = req.getParams().getBool(\"mapUniqueKeyOnly\", false);\n      if (srcField != null) {\n        if (!\"/\".equals(split))\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Raw data can be stored only if split=/\");\n        parser = new RecordingJSONParser(reader);\n      } else {\n        parser = new JSONParser(reader);\n\n      }\n\n      JsonRecordReader jsonRecordReader = JsonRecordReader.getInst(split, Arrays.asList(fields));\n      jsonRecordReader.streamRecords(parser, new JsonRecordReader.Handler() {\n        ArrayList docs = null;\n\n        @Override\n        public void handle(Map<String, Object> record, String path) {\n          Map<String, Object> copy = getDocMap(record, parser, srcField, mapUniqueKeyOnly);\n\n          if (echo) {\n            if (docs == null) {\n              docs = new ArrayList();\n              rsp.add(\"docs\", docs);\n            }\n            changeChildDoc(copy);\n            docs.add(copy);\n          } else {\n            AddUpdateCommand cmd = new AddUpdateCommand(req);\n            cmd.commitWithin = commitWithin;\n            cmd.overwrite = overwrite;\n            cmd.solrDoc = buildDoc(copy);\n            try {\n              processor.processAdd(cmd);\n            } catch (IOException e) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error inserting document: \", e);\n            }\n          }\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["6f5f8e831e266692b649e39dad7a64f525aa6d21"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["6f5f8e831e266692b649e39dad7a64f525aa6d21","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6f5f8e831e266692b649e39dad7a64f525aa6d21","9dbf1742cf31777011ef976c17df1c8507c3de9f"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["6f5f8e831e266692b649e39dad7a64f525aa6d21","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["9dbf1742cf31777011ef976c17df1c8507c3de9f"],"d8d9512babbd72795eb013cdd392dad2e2b2313e":["b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["2a63f62e9f506b7a15c76fddc8ad5f22112070c2","6f5f8e831e266692b649e39dad7a64f525aa6d21"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab10d7c14ce9f8db61956611a57a5a377362a633"],"9dbf1742cf31777011ef976c17df1c8507c3de9f":["d8d9512babbd72795eb013cdd392dad2e2b2313e"],"6f5f8e831e266692b649e39dad7a64f525aa6d21":["2a63f62e9f506b7a15c76fddc8ad5f22112070c2"],"ab10d7c14ce9f8db61956611a57a5a377362a633":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a63f62e9f506b7a15c76fddc8ad5f22112070c2":["ab10d7c14ce9f8db61956611a57a5a377362a633"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["6f5f8e831e266692b649e39dad7a64f525aa6d21","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"]},"commit2Childs":{"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["d8d9512babbd72795eb013cdd392dad2e2b2313e","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8d9512babbd72795eb013cdd392dad2e2b2313e":["9dbf1742cf31777011ef976c17df1c8507c3de9f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"6f5f8e831e266692b649e39dad7a64f525aa6d21":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"9dbf1742cf31777011ef976c17df1c8507c3de9f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"ab10d7c14ce9f8db61956611a57a5a377362a633":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2a63f62e9f506b7a15c76fddc8ad5f22112070c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","ab10d7c14ce9f8db61956611a57a5a377362a633"],"2a63f62e9f506b7a15c76fddc8ad5f22112070c2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6f5f8e831e266692b649e39dad7a64f525aa6d21"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}