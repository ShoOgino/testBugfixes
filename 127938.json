{"path":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","commits":[{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"/dev/null","sourceNew":"  // inherit javadoc\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort)\n      throws IOException {\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final FieldSortedHitQueue hq =\n      new FieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c88b3d0bf235942b9ead3322cac5fcee1e732d8","date":1133977717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  // inherit javadoc\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort)\n      throws IOException {\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields, Float.NEGATIVE_INFINITY);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final FieldSortedHitQueue hq =\n      new FieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields(), hq.getMaxScore());\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort)\n      throws IOException {\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final FieldSortedHitQueue hq =\n      new FieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","bugFix":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9792120b189197625a243c2b501e802851a69c79","date":1136239207,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  // inherit javadoc\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort)\n      throws IOException {\n\n    TopFieldDocCollector collector =\n      new TopFieldDocCollector(reader, sort, nDocs);\n    search(weight, filter, collector);\n    return (TopFieldDocs)collector.topDocs();\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort)\n      throws IOException {\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields, Float.NEGATIVE_INFINITY);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final FieldSortedHitQueue hq =\n      new FieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields(), hq.getMaxScore());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  // inherit javadoc\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort)\n      throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort)\n      throws IOException {\n\n    TopFieldDocCollector collector =\n      new TopFieldDocCollector(reader, sort, nDocs);\n    search(weight, filter, collector);\n    return (TopFieldDocs)collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":null,"sourceOld":"  // inherit javadoc\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort)\n      throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,int,Sort).mjava","sourceNew":"  public TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","sourceOld":"  public TopFieldDocs search(QueryWeight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  @Override\n  public TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","sourceOld":"  public TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort).mjava","sourceNew":"  @Override\n  public TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","sourceOld":"  @Override\n  public TopFieldDocs search(Weight weight, Filter filter,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, filter, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9792120b189197625a243c2b501e802851a69c79":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fe941135bdfc28c81e20b4d21422f8726af34925"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["63bc3238545c6012bd44f5d294077997f236bc4e"],"63bc3238545c6012bd44f5d294077997f236bc4e":["9792120b189197625a243c2b501e802851a69c79"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"9792120b189197625a243c2b501e802851a69c79":["63bc3238545c6012bd44f5d294077997f236bc4e"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe941135bdfc28c81e20b4d21422f8726af34925":["8a9e385641d717e641408d8fbbc62be8fc766357"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["9792120b189197625a243c2b501e802851a69c79"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"63bc3238545c6012bd44f5d294077997f236bc4e":["052fac7830290bd38a04cddee1a121ee07656b56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}