{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#scan(int).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#scan(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#scan(int).mjava","sourceNew":"    /**\n     * Scans ({@code termsEnum.next()}) terms until a term is found that does\n     * not start with curVNode's cell. If it finds a leaf cell or a cell at\n     * level {@code scanDetailLevel} then it calls {@link\n     * #visitScanned(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void scan(int scanDetailLevel) throws IOException {\n      //note: this can be a do-while instead in 6x; 5x has a back-compat with redundant leaves -- LUCENE-4942\n      while (curVNode.cell.isPrefixOf(indexedCell)) {\n        if (indexedCell.getLevel() == scanDetailLevel\n            || (indexedCell.getLevel() < scanDetailLevel && indexedCell.isLeaf())) {\n          visitScanned(indexedCell);\n        }\n        //advance\n        if (!nextTerm()) break;\n      }\n    }\n\n","sourceOld":"    /**\n     * Scans ({@code termsEnum.next()}) terms until a term is found that does\n     * not start with curVNode's cell. If it finds a leaf cell or a cell at\n     * level {@code scanDetailLevel} then it calls {@link\n     * #visitScanned(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void scan(int scanDetailLevel) throws IOException {\n      //note: this can be a do-while instead in 6x; 5x has a back-compat with redundant leaves -- LUCENE-4942\n      while (curVNode.cell.isPrefixOf(indexedCell)) {\n        if (indexedCell.getLevel() == scanDetailLevel\n            || (indexedCell.getLevel() < scanDetailLevel && indexedCell.isLeaf())) {\n          visitScanned(indexedCell);\n        }\n        //advance\n        if (!nextTerm()) break;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#scan(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#scan(int).mjava","sourceNew":"    /**\n     * Scans ({@code termsEnum.next()}) terms until a term is found that does\n     * not start with curVNode's cell. If it finds a leaf cell or a cell at\n     * level {@code scanDetailLevel} then it calls {@link\n     * #visitScanned(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void scan(int scanDetailLevel) throws IOException {\n      //note: this can be a do-while instead in 6x; 5x has a back-compat with redundant leaves -- LUCENE-4942\n      while (curVNode.cell.isPrefixOf(indexedCell)) {\n        if (indexedCell.getLevel() == scanDetailLevel\n            || (indexedCell.getLevel() < scanDetailLevel && indexedCell.isLeaf())) {\n          visitScanned(indexedCell);\n        }\n        //advance\n        if (!nextTerm()) break;\n      }\n    }\n\n","sourceOld":"    /**\n     * Scans ({@code termsEnum.next()}) terms until a term is found that does\n     * not start with curVNode's cell. If it finds a leaf cell or a cell at\n     * level {@code scanDetailLevel} then it calls {@link\n     * #visitScanned(org.apache.lucene.spatial.prefix.tree.Cell)}.\n     */\n    protected void scan(int scanDetailLevel) throws IOException {\n      //note: this can be a do-while instead in 6x; 5x has a back-compat with redundant leaves -- LUCENE-4942\n      while (curVNode.cell.isPrefixOf(indexedCell)) {\n        if (indexedCell.getLevel() == scanDetailLevel\n            || (indexedCell.getLevel() < scanDetailLevel && indexedCell.isLeaf())) {\n          visitScanned(indexedCell);\n        }\n        //advance\n        if (!nextTerm()) break;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}