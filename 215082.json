{"path":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","commits":[{"id":"67748b41458c73d49a48168362cc7f4c960a2542","date":1272890662,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  public void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["989634d06bbb0922e9fd38706f0a5497bd647402"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","pathOld":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Trie#add(CharSequence,CharSequence).mjava","sourceNew":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  public void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","sourceOld":"  /**\n   * Add the given key associated with the given patch command. If either\n   * parameter is null this method will return without executing.\n   * \n   * @param key the key\n   * @param cmd the patch command\n   */\n  public void add(CharSequence key, CharSequence cmd) {\n    if (key == null || cmd == null) {\n      return;\n    }\n    if (cmd.length() == 0) {\n      return;\n    }\n    int id_cmd = cmds.indexOf(cmd);\n    if (id_cmd == -1) {\n      id_cmd = cmds.size();\n      cmds.add(cmd);\n    }\n    \n    int node = root;\n    Row r = getRow(node);\n    \n    StrEnum e = new StrEnum(key, forward);\n    \n    for (int i = 0; i < e.length() - 1; i++) {\n      Character ch = new Character(e.next());\n      node = r.getRef(ch);\n      if (node >= 0) {\n        r = getRow(node);\n      } else {\n        node = rows.size();\n        Row n;\n        rows.add(n = new Row());\n        r.setRef(ch, node);\n        r = n;\n      }\n    }\n    r.setCmd(new Character(e.next()), id_cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67748b41458c73d49a48168362cc7f4c960a2542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["67748b41458c73d49a48168362cc7f4c960a2542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67748b41458c73d49a48168362cc7f4c960a2542"],"67748b41458c73d49a48168362cc7f4c960a2542":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}