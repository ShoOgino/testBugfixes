{"path":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityProvider#queryNorm(float).mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityProvider#queryNorm(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SimilarityProvider#queryNorm(float).mjava","sourceNew":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is multiplied into the\n   * weight of each query term. While the classic query normalization factor is\n   * computed as 1/sqrt(sumOfSquaredWeights), other implementations might\n   * completely ignore sumOfSquaredWeights (ie return 1).\n   *\n   * <p>This does not affect ranking, but the default implementation does make scores\n   * from different queries more comparable than they would be by eliminating the\n   * magnitude of the Query vector as a factor in the score.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","sourceOld":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is multiplied into the\n   * weight of each query term. While the classic query normalization factor is\n   * computed as 1/sqrt(sumOfSquaredWeights), other implementations might\n   * completely ignore sumOfSquaredWeights (ie return 1).\n   *\n   * <p>This does not affect ranking, but the default implementation does make scores\n   * from different queries more comparable than they would be by eliminating the\n   * magnitude of the Query vector as a factor in the score.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#queryNorm(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityProvider#queryNorm(float).mjava","sourceNew":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is multiplied into the\n   * weight of each query term. While the classic query normalization factor is\n   * computed as 1/sqrt(sumOfSquaredWeights), other implementations might\n   * completely ignore sumOfSquaredWeights (ie return 1).\n   *\n   * <p>This does not affect ranking, but the default implementation does make scores\n   * from different queries more comparable than they would be by eliminating the\n   * magnitude of the Query vector as a factor in the score.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  @Override\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","sourceOld":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is multiplied into the\n   * weight of each query term. While the classic query normalization factor is\n   * computed as 1/sqrt(sumOfSquaredWeights), other implementations might\n   * completely ignore sumOfSquaredWeights (ie return 1).\n   *\n   * <p>This does not affect ranking, but the default implementation does make scores\n   * from different queries more comparable than they would be by eliminating the\n   * magnitude of the Query vector as a factor in the score.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}