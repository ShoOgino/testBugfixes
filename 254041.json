{"path":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","commits":[{"id":"23f5d7aaa47d47c5e74c651e07bcba20d9a8cc05","date":1063745772,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingrWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.bits(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.bits(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.bits(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.bits(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.bits(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.bits(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1dab6a073497f68cd618ed4a55d491e65dd0c569","date":1227302226,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong bitset\n    cacher.bits(reader);\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n }\n\n","bugFix":["0a19e21a5a8ea5a4f13f445837d8b9d4c541a952"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong bitset\n    cacher.bits(reader);\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong bitset\n    cacher.bits(reader);\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong bitset\n    cacher.bits(reader);\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong bitset\n    cacher.bits(reader);\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bd365049a486e1ddff4a17c8aaab9b002969a0","date":1254951825,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong bitset\n    cacher.bits(reader);\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n\n    // first time, nested filter is called\n    cacher.getDocIdSet(reader);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(reader);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(reader);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23f5d7aaa47d47c5e74c651e07bcba20d9a8cc05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1dab6a073497f68cd618ed4a55d491e65dd0c569","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["1dab6a073497f68cd618ed4a55d491e65dd0c569"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["23f5d7aaa47d47c5e74c651e07bcba20d9a8cc05"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["0a046c0c310bc77931fc8441bd920053b607dd14"],"1dab6a073497f68cd618ed4a55d491e65dd0c569":["0018e7a0579df5d3de71d0bd878322a7abef04d9"]},"commit2Childs":{"23f5d7aaa47d47c5e74c651e07bcba20d9a8cc05":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["1dab6a073497f68cd618ed4a55d491e65dd0c569"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23f5d7aaa47d47c5e74c651e07bcba20d9a8cc05"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"1dab6a073497f68cd618ed4a55d491e65dd0c569":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}