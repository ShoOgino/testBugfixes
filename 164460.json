{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],int).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n      if (singleValuePerDoc == false) {\n        if (ordsLong != null) {\n          ordsLong = ArrayUtil.growExact(ordsLong, nextSize);\n        } else {\n          ords = ArrayUtil.growExact(ords, nextSize);\n        }\n      }\n    }\n    writePackedValue(nextWrite, packedValue);\n    if (singleValuePerDoc == false) {\n      if (ordsLong != null) {\n        ordsLong[nextWrite] = ord;\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        ords[nextWrite] = (int) ord;\n      }\n    }\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, int docID) {\n    assert closed == false : \"point writer is already closed\";\n    assert packedValue.length == packedBytesLength : \"[packedValue] must have length [\" + packedBytesLength + \"] but was [\" + packedValue.length + \"]\";\n    assert nextWrite < size : \"nextWrite=\" + (nextWrite + 1) + \" vs size=\" + size;\n    System.arraycopy(packedValue, 0, block, nextWrite * packedBytesLength, packedBytesLength);\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, int docID) {\n    assert closed == false;\n    assert packedValue.length == packedBytesLength;\n    if (docIDs.length == nextWrite) {\n      int nextSize = Math.min(maxSize, ArrayUtil.oversize(nextWrite+1, Integer.BYTES));\n      assert nextSize > nextWrite: \"nextSize=\" + nextSize + \" vs nextWrite=\" + nextWrite;\n      docIDs = ArrayUtil.growExact(docIDs, nextSize);\n    }\n    writePackedValue(nextWrite, packedValue);\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, int docID) {\n    assert closed == false : \"point writer is already closed\";\n    assert packedValue.length == packedBytesLength : \"[packedValue] must have length [\" + packedBytesLength + \"] but was [\" + packedValue.length + \"]\";\n    assert nextWrite < size : \"nextWrite=\" + (nextWrite + 1) + \" vs size=\" + size;\n    System.arraycopy(packedValue, 0, block, nextWrite * packedBytesDocIDLength, packedBytesLength);\n    int position = nextWrite * packedBytesDocIDLength + packedBytesLength;\n    block[position] = (byte) (docID >> 24);\n    block[++position] = (byte) (docID >> 16);\n    block[++position] = (byte) (docID >> 8);\n    block[++position] = (byte) (docID >> 0);\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, int docID) {\n    assert closed == false : \"point writer is already closed\";\n    assert packedValue.length == packedBytesLength : \"[packedValue] must have length [\" + packedBytesLength + \"] but was [\" + packedValue.length + \"]\";\n    assert nextWrite < size : \"nextWrite=\" + (nextWrite + 1) + \" vs size=\" + size;\n    System.arraycopy(packedValue, 0, block, nextWrite * packedBytesLength, packedBytesLength);\n    docIDs[nextWrite] = docID;\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#append(byte[],int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, int docID) {\n    assert closed == false : \"point writer is already closed\";\n    assert packedValue.length == config.packedBytesLength : \"[packedValue] must have length [\" + config.packedBytesLength + \"] but was [\" + packedValue.length + \"]\";\n    assert nextWrite < size : \"nextWrite=\" + (nextWrite + 1) + \" vs size=\" + size;\n    System.arraycopy(packedValue, 0, block, nextWrite * config.bytesPerDoc, config.packedBytesLength);\n    int position = nextWrite * config.bytesPerDoc + config.packedBytesLength;\n    block[position] = (byte) (docID >> 24);\n    block[++position] = (byte) (docID >> 16);\n    block[++position] = (byte) (docID >> 8);\n    block[++position] = (byte) (docID >> 0);\n    nextWrite++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, int docID) {\n    assert closed == false : \"point writer is already closed\";\n    assert packedValue.length == packedBytesLength : \"[packedValue] must have length [\" + packedBytesLength + \"] but was [\" + packedValue.length + \"]\";\n    assert nextWrite < size : \"nextWrite=\" + (nextWrite + 1) + \" vs size=\" + size;\n    System.arraycopy(packedValue, 0, block, nextWrite * packedBytesDocIDLength, packedBytesLength);\n    int position = nextWrite * packedBytesDocIDLength + packedBytesLength;\n    block[position] = (byte) (docID >> 24);\n    block[++position] = (byte) (docID >> 16);\n    block[++position] = (byte) (docID >> 8);\n    block[++position] = (byte) (docID >> 0);\n    nextWrite++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["c7f06758793500ca773d0df1037290e6e404fb33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}