{"path":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#hasNorms(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#hasNorms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AtomicReader#hasNorms(String).mjava","sourceNew":"  /** Returns true if there are norms stored for this field. */\n  public boolean hasNorms(String field) throws IOException {\n    // backward compatible implementation.\n    // SegmentReader has an efficient implementation.\n    ensureOpen();\n    return normValues(field) != null;\n  }\n\n","sourceOld":"  /** Returns true if there are norms stored for this field. */\n  public boolean hasNorms(String field) throws IOException {\n    // backward compatible implementation.\n    // SegmentReader has an efficient implementation.\n    ensureOpen();\n    return normValues(field) != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46818a810eab72123f0e37e6ec5f2d426bd47be1","date":1331482161,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#hasNorms(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#hasNorms(String).mjava","sourceNew":"  /** \n   * Returns true if there are norms stored for this field.\n   * @deprecated (4.0) use {@link #getFieldInfos()} and check {@link FieldInfo#hasNorms()} \n   *                   for the field instead.\n   */\n  @Deprecated\n  public final boolean hasNorms(String field) throws IOException {\n    ensureOpen();\n    // note: using normValues(field) != null would potentially cause i/o\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    return fi != null && fi.hasNorms();\n  }\n\n","sourceOld":"  /** Returns true if there are norms stored for this field. */\n  public boolean hasNorms(String field) throws IOException {\n    // backward compatible implementation.\n    // SegmentReader has an efficient implementation.\n    ensureOpen();\n    return normValues(field) != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#hasNorms(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#hasNorms(String).mjava","sourceNew":"  /** \n   * Returns true if there are norms stored for this field.\n   * @deprecated (4.0) use {@link #getFieldInfos()} and check {@link FieldInfo#hasNorms()} \n   *                   for the field instead.\n   */\n  @Deprecated\n  public final boolean hasNorms(String field) throws IOException {\n    ensureOpen();\n    // note: using normValues(field) != null would potentially cause i/o\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    return fi != null && fi.hasNorms();\n  }\n\n","sourceOld":"  /** Returns true if there are norms stored for this field. */\n  public boolean hasNorms(String field) throws IOException {\n    // backward compatible implementation.\n    // SegmentReader has an efficient implementation.\n    ensureOpen();\n    return normValues(field) != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#hasNorms(String).mjava","sourceNew":null,"sourceOld":"  /** \n   * Returns true if there are norms stored for this field.\n   * @deprecated (4.0) use {@link #getFieldInfos()} and check {@link FieldInfo#hasNorms()} \n   *                   for the field instead.\n   */\n  @Deprecated\n  public final boolean hasNorms(String field) throws IOException {\n    ensureOpen();\n    // note: using normValues(field) != null would potentially cause i/o\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    return fi != null && fi.hasNorms();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","46818a810eab72123f0e37e6ec5f2d426bd47be1"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["46818a810eab72123f0e37e6ec5f2d426bd47be1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"46818a810eab72123f0e37e6ec5f2d426bd47be1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","46818a810eab72123f0e37e6ec5f2d426bd47be1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"46818a810eab72123f0e37e6ec5f2d426bd47be1":["38e3b736c7ca086d61b7dbb841c905ee115490da","e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}