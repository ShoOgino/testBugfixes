{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInversePointRange().mjava","commits":[{"id":"15fe6782474c00ec2ccc636052a025f8fe0bdb8b","date":1484743707,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInversePointRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testInversePointRange() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    final int numDocs = atLeast(10 * BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE); // we need multiple leaves to enable this optimization\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int[] values = new int[numDims];\n      Arrays.fill(values, i);\n      doc.add(new IntPoint(\"f\", values));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    int[] low = new int[numDims];\n    int[] high = new int[numDims];\n    Arrays.fill(high, numDocs - 2);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE + 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInversePointRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testInversePointRange() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    final int numDocs = atLeast(10 * BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE); // we need multiple leaves to enable this optimization\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int[] values = new int[numDims];\n      Arrays.fill(values, i);\n      doc.add(new IntPoint(\"f\", values));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    int[] low = new int[numDims];\n    int[] high = new int[numDims];\n    Arrays.fill(high, numDocs - 2);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE + 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInversePointRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInversePointRange().mjava","sourceNew":"  @Nightly\n  public void testInversePointRange() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    final int numDocs = atLeast(10 * BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE); // we need multiple leaves to enable this optimization\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int[] values = new int[numDims];\n      Arrays.fill(values, i);\n      doc.add(new IntPoint(\"f\", values));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    int[] low = new int[numDims];\n    int[] high = new int[numDims];\n    Arrays.fill(high, numDocs - 2);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE + 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testInversePointRange() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    final int numDocs = atLeast(10 * BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE); // we need multiple leaves to enable this optimization\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int[] values = new int[numDims];\n      Arrays.fill(values, i);\n      doc.add(new IntPoint(\"f\", values));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    int[] low = new int[numDims];\n    int[] high = new int[numDims];\n    Arrays.fill(high, numDocs - 2);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE + 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInversePointRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInversePointRange().mjava","sourceNew":"  @Nightly\n  public void testInversePointRange() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    final int numDocs = atLeast(10 * BKDConfig.DEFAULT_MAX_POINTS_IN_LEAF_NODE); // we need multiple leaves to enable this optimization\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int[] values = new int[numDims];\n      Arrays.fill(values, i);\n      doc.add(new IntPoint(\"f\", values));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    int[] low = new int[numDims];\n    int[] high = new int[numDims];\n    Arrays.fill(high, numDocs - 2);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, BKDConfig.DEFAULT_MAX_POINTS_IN_LEAF_NODE + 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - BKDConfig.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testInversePointRange() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    final int numDims = TestUtil.nextInt(random(), 1, 3);\n    final int numDocs = atLeast(10 * BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE); // we need multiple leaves to enable this optimization\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int[] values = new int[numDims];\n      Arrays.fill(values, i);\n      doc.add(new IntPoint(\"f\", values));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    int[] low = new int[numDims];\n    int[] high = new int[numDims];\n    Arrays.fill(high, numDocs - 2);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(low, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE + 1);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n    Arrays.fill(high, numDocs - BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n    assertEquals(high[0] - low[0] + 1, searcher.count(IntPoint.newRangeQuery(\"f\", low, high)));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["71da933d30aea361ccc224d6544c451cbf49916d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15fe6782474c00ec2ccc636052a025f8fe0bdb8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"71da933d30aea361ccc224d6544c451cbf49916d":["15fe6782474c00ec2ccc636052a025f8fe0bdb8b"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","15fe6782474c00ec2ccc636052a025f8fe0bdb8b"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15fe6782474c00ec2ccc636052a025f8fe0bdb8b","302d34f2c66e8d489ee13078305c330cbf67b226"],"15fe6782474c00ec2ccc636052a025f8fe0bdb8b":["71da933d30aea361ccc224d6544c451cbf49916d","302d34f2c66e8d489ee13078305c330cbf67b226"],"71da933d30aea361ccc224d6544c451cbf49916d":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}