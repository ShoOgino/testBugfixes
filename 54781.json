{"path":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","commits":[{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiCore() throws Exception\n  {\n    SolrServer solr = getSolrServer();\n\n    MultiCoreRequest.setDefault( \"core1\", solr );\n    MultiCoreRequest.setDefault( \"core0\", solr );\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.setCore( \"core0\" );\n    up.deleteByQuery( \"*:*\" );\n    up.process( solr );\n    up.setCore( \"core1\" );\n    up.process( solr );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.setCore( \"core0\" );\n    up.add( doc );\n    up.process( solr );\n\n    // You can't add it to core1\n    try {\n      up.setCore( \"core1\" );\n      up.process( solr );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    up.setCore( \"core1\" );\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( solr );\n\n    // You can't add it to core1\n    try {\n      up.setCore( \"core0\" );\n      up.process( solr );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    r.setCore( \"core0\" );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( solr ).getResults().size() );\n    r.setCore( \"core1\" );\n    assertEquals( 0, r.process( solr ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, solr.query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, solr.query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    MultiCoreRequest.setDefault( \"core1\", solr );\n    assertEquals( 0, solr.query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, solr.query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  \n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    MultiCoreResponse mcr = MultiCoreRequest.getStatus( name, solr );\n    long before = mcr.getStartTime( name ).getTime();\n    MultiCoreRequest.reloadCore( name, solr );\n    \n    mcr = MultiCoreRequest.getStatus( name, solr );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1a45fbd60083428b1b13884c5c8c2e33e7e71ee7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a45fbd60083428b1b13884c5c8c2e33e7e71ee7","date":1198275819,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  public void testMultiCore() throws Exception\n  {\n    SolrServer solr = getSolrServer();\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.setCore( \"core0\" );\n    up.deleteByQuery( \"*:*\" );\n    up.process( solr );\n    up.setCore( \"core1\" );\n    up.process( solr );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.setCore( \"core0\" );\n    up.add( doc );\n    up.process( solr );\n\n    // You can't add it to core1\n    try {\n      up.setCore( \"core1\" );\n      up.process( solr );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    up.setCore( \"core1\" );\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( solr );\n\n    // You can't add it to core1\n    try {\n      up.setCore( \"core0\" );\n      up.process( solr );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    r.setCore( \"core0\" );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( solr ).getResults().size() );\n    r.setCore( \"core1\" );\n    assertEquals( 0, r.process( solr ).getResults().size() );\n    \n    // Now test Changing the default core\n    solr.setDefaultCore( \"core0\" );\n    assertEquals( 1, solr.query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, solr.query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    solr.setDefaultCore( \"core1\" );\n    assertEquals( 0, solr.query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, solr.query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  \n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    MultiCoreResponse mcr = MultiCoreRequest.getStatus( name, solr );\n    long before = mcr.getStartTime( name ).getTime();\n    MultiCoreRequest.reloadCore( name, solr );\n    \n    mcr = MultiCoreRequest.getStatus( name, solr );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n  }\n\n","sourceOld":"  public void testMultiCore() throws Exception\n  {\n    SolrServer solr = getSolrServer();\n\n    MultiCoreRequest.setDefault( \"core1\", solr );\n    MultiCoreRequest.setDefault( \"core0\", solr );\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.setCore( \"core0\" );\n    up.deleteByQuery( \"*:*\" );\n    up.process( solr );\n    up.setCore( \"core1\" );\n    up.process( solr );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.setCore( \"core0\" );\n    up.add( doc );\n    up.process( solr );\n\n    // You can't add it to core1\n    try {\n      up.setCore( \"core1\" );\n      up.process( solr );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    up.setCore( \"core1\" );\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( solr );\n\n    // You can't add it to core1\n    try {\n      up.setCore( \"core0\" );\n      up.process( solr );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    r.setCore( \"core0\" );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( solr ).getResults().size() );\n    r.setCore( \"core1\" );\n    assertEquals( 0, r.process( solr ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, solr.query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, solr.query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    MultiCoreRequest.setDefault( \"core1\", solr );\n    assertEquals( 0, solr.query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, solr.query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  \n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    MultiCoreResponse mcr = MultiCoreRequest.getStatus( name, solr );\n    long before = mcr.getStartTime( name ).getTime();\n    MultiCoreRequest.reloadCore( name, solr );\n    \n    mcr = MultiCoreRequest.getStatus( name, solr );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n  }\n\n","bugFix":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41bffa147dec8d55cfa362ef9aca41509819ae04","date":1201997733,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  \n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    MultiCoreResponse mcr = MultiCoreRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    MultiCoreRequest.reloadCore( name, coreadmin );\n    \n    mcr = MultiCoreRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n  }\n\n","sourceOld":"  public void testMultiCore() throws Exception\n  {\n    SolrServer solr = getSolrServer();\n    \n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.setCore( \"core0\" );\n    up.deleteByQuery( \"*:*\" );\n    up.process( solr );\n    up.setCore( \"core1\" );\n    up.process( solr );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.setCore( \"core0\" );\n    up.add( doc );\n    up.process( solr );\n\n    // You can't add it to core1\n    try {\n      up.setCore( \"core1\" );\n      up.process( solr );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    up.setCore( \"core1\" );\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( solr );\n\n    // You can't add it to core1\n    try {\n      up.setCore( \"core0\" );\n      up.process( solr );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    r.setCore( \"core0\" );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( solr ).getResults().size() );\n    r.setCore( \"core1\" );\n    assertEquals( 0, r.process( solr ).getResults().size() );\n    \n    // Now test Changing the default core\n    solr.setDefaultCore( \"core0\" );\n    assertEquals( 1, solr.query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, solr.query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    solr.setDefaultCore( \"core1\" );\n    assertEquals( 0, solr.query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, solr.query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  \n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    MultiCoreResponse mcr = MultiCoreRequest.getStatus( name, solr );\n    long before = mcr.getStartTime( name ).getTime();\n    MultiCoreRequest.reloadCore( name, solr );\n    \n    mcr = MultiCoreRequest.getStatus( name, solr );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2284f4281eb212e60f8318c30e1d67c7d25422a7","date":1218739496,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  \n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n  }\n\n","sourceOld":"  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  \n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    MultiCoreResponse mcr = MultiCoreRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    MultiCoreRequest.reloadCore( name, coreadmin );\n    \n    mcr = MultiCoreRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03a23d883b818d258c0eac4c2a49ef05ea534979","date":1219162051,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test alias\n    CoreAdminRequest.aliasCore(\"core1\",\"corefoo\",coreadmin);\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // test close\n    CoreAdminRequest.unloadCore(\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"corefoo should be gone\" );\n    }\n    catch( Exception ex ) {}\n    // aliased core should still work\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    \n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  }\n\n","sourceOld":"  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  \n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n  }\n\n","bugFix":null,"bugIntro":["4c7856260bc28f285ae7bfefa99b28db4dca6daf","4c7856260bc28f285ae7bfefa99b28db4dca6daf","4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11d6687279b5df49f295b1ad6ce87b5fb80fe1b9","date":1219846840,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test alias\n    CoreAdminRequest.aliasCore(\"core1\",\"corefoo\",coreadmin);\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // test that reload affects aliases\n    CoreAdminRequest.reloadCore(\"core1\", coreadmin);\n\n    // this is only an effective test for embedded, where we have\n    // direct access to the core container.\n    SolrCore c1 = cores.getCore(\"core1\");\n    SolrCore c2 = cores.getCore(\"corefoo\");\n    assertTrue(c1 == c2);\n    if (c1 != null) c1.close();\n    if (c2 != null) c2.close();\n\n    // retest core query\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // test close\n    CoreAdminRequest.unloadCore(\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"corefoo should be gone\" );\n    }\n    catch( Exception ex ) {}\n    // aliased core should still work\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    \n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  }\n\n","sourceOld":"  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test alias\n    CoreAdminRequest.aliasCore(\"core1\",\"corefoo\",coreadmin);\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // test close\n    CoreAdminRequest.unloadCore(\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"corefoo should be gone\" );\n    }\n    catch( Exception ex ) {}\n    // aliased core should still work\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    \n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/MultiCoreExampleTestBase#testMultiCore().mjava","sourceNew":"  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test alias\n    CoreAdminRequest.aliasCore(\"core1\",\"corefoo\",coreadmin);\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // test that reload affects aliases\n    CoreAdminRequest.reloadCore(\"core1\", coreadmin);\n\n    // this is only an effective test for embedded, where we have\n    // direct access to the core container.\n    SolrCore c1 = cores.getCore(\"core1\");\n    SolrCore c2 = cores.getCore(\"corefoo\");\n    assertTrue(c1 == c2);\n    if (c1 != null) c1.close();\n    if (c2 != null) c2.close();\n\n    // retest core query\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // test close\n    CoreAdminRequest.unloadCore(\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"corefoo should be gone\" );\n    }\n    catch( Exception ex ) {}\n    // aliased core should still work\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    \n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  }\n\n","sourceOld":"  public void testMultiCore() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField( \"id\", \"AAA\" );\n    doc.setField( \"core0\", \"yup\" );\n   \n    // Add to core0\n    up.add( doc );\n    up.process( getSolrCore0() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore1() );\n      fail( \"Can't add core0 field to core1!\" );\n    }\n    catch( Exception ex ) {}\n\n    // Add to core1\n    doc.setField( \"id\", \"BBB\" );\n    doc.setField( \"core1\", \"yup\" );\n    doc.removeField( \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n\n    // You can't add it to core1\n    try {\n      up.process( getSolrCore0() );\n      fail( \"Can't add core1 field to core0!\" );\n    }\n    catch( Exception ex ) {}\n    \n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"id:AAA\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 0, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Now test Changing the default core\n    assertEquals( 1, getSolrCore0().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 0, getSolrCore0().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    assertEquals( 0, getSolrCore1().query( new SolrQuery( \"id:AAA\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long before = mcr.getStartTime( name ).getTime();\n    CoreAdminRequest.reloadCore( name, coreadmin );\n    \n    mcr = CoreAdminRequest.getStatus( name, coreadmin );\n    long after = mcr.getStartTime( name ).getTime();\n    assertTrue( \"should have more recent time: \"+after+\",\"+before, after > before );\n\n    // test alias\n    CoreAdminRequest.aliasCore(\"core1\",\"corefoo\",coreadmin);\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // test that reload affects aliases\n    CoreAdminRequest.reloadCore(\"core1\", coreadmin);\n\n    // this is only an effective test for embedded, where we have\n    // direct access to the core container.\n    SolrCore c1 = cores.getCore(\"core1\");\n    SolrCore c2 = cores.getCore(\"corefoo\");\n    assertTrue(c1 == c2);\n    if (c1 != null) c1.close();\n    if (c2 != null) c2.close();\n\n    // retest core query\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n\n    // test close\n    CoreAdminRequest.unloadCore(\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"corefoo should be gone\" );\n    }\n    catch( Exception ex ) {}\n    // aliased core should still work\n    assertEquals( 1, getSolrCore1().query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n    \n    // test move\n    CoreAdminRequest.renameCore(\"core1\",\"corea\",coreadmin);\n    CoreAdminRequest.renameCore(\"corea\",\"coreb\",coreadmin);\n    CoreAdminRequest.renameCore(\"coreb\",\"corec\",coreadmin);\n    CoreAdminRequest.renameCore(\"corec\",\"cored\",coreadmin);\n    CoreAdminRequest.renameCore(\"cored\",\"corefoo\",coreadmin);\n    try {\n      getSolrCore(\"core1\").query( new SolrQuery( \"id:BBB\" ) );\n      fail( \"core1 should be gone\" );\n    }\n    catch( Exception ex ) {}\n    assertEquals( 1, getSolrCore(\"corefoo\").query( new SolrQuery( \"id:BBB\" ) ).getResults().size() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["11d6687279b5df49f295b1ad6ce87b5fb80fe1b9"],"2284f4281eb212e60f8318c30e1d67c7d25422a7":["41bffa147dec8d55cfa362ef9aca41509819ae04"],"41bffa147dec8d55cfa362ef9aca41509819ae04":["1a45fbd60083428b1b13884c5c8c2e33e7e71ee7"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"03a23d883b818d258c0eac4c2a49ef05ea534979":["2284f4281eb212e60f8318c30e1d67c7d25422a7"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"11d6687279b5df49f295b1ad6ce87b5fb80fe1b9":["03a23d883b818d258c0eac4c2a49ef05ea534979"],"1a45fbd60083428b1b13884c5c8c2e33e7e71ee7":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"2284f4281eb212e60f8318c30e1d67c7d25422a7":["03a23d883b818d258c0eac4c2a49ef05ea534979"],"41bffa147dec8d55cfa362ef9aca41509819ae04":["2284f4281eb212e60f8318c30e1d67c7d25422a7"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["1a45fbd60083428b1b13884c5c8c2e33e7e71ee7"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03a23d883b818d258c0eac4c2a49ef05ea534979":["11d6687279b5df49f295b1ad6ce87b5fb80fe1b9"],"11d6687279b5df49f295b1ad6ce87b5fb80fe1b9":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"1a45fbd60083428b1b13884c5c8c2e33e7e71ee7":["41bffa147dec8d55cfa362ef9aca41509819ae04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}