{"path":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#collectConflicts(IvyNodeElement,IvyNodeElement,String).mjava","commits":[{"id":"b3e4bd3aed493904d0bbb6c6e0394f619e175087","date":1401446035,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#collectConflicts(IvyNodeElement,IvyNodeElement,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recursively finds indirect dependencies that have a version conflict with a direct dependency.\n   * Returns true if one or more conflicts are found, false otherwise\n   */\n  private boolean collectConflicts(IvyNodeElement root, IvyNodeElement parent, String moduleName) {\n    boolean conflicts = false;\n    for (IvyNodeElement child : parent.getDependencies()) {\n      String coordinate = \"/\" + child.getOrganization() + \"/\" + child.getName();\n      Versions versions = directDependencies.get(coordinate);\n      if (null != versions) { // Ignore this indirect dependency if it's not also a direct dependency\n        String indirectVersion = child.getRevision();\n        if (isConflict(coordinate, versions.direct, indirectVersion)) {\n          conflicts = true;\n          Set<String> moduleNames = versions.conflictLocations.get(root);\n          if (null == moduleNames) {\n            moduleNames = new HashSet<>();\n            versions.conflictLocations.put(root, moduleNames);\n          }\n          moduleNames.add(moduleName);\n        }\n        conflicts |= collectConflicts(root, child, moduleName);\n      }\n    }\n    return conflicts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151d28379beec3adbc4c091c633cb33e496a2de3","date":1401909314,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#collectConflicts(IvyNodeElement,IvyNodeElement,String).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#collectConflicts(IvyNodeElement,IvyNodeElement,String).mjava","sourceNew":"  /**\n   * Recursively finds indirect dependencies that have a version conflict with a direct dependency.\n   * Returns true if one or more conflicts are found, false otherwise\n   */\n  private boolean collectConflicts(IvyNodeElement root, IvyNodeElement parent, String moduleName) {\n    boolean conflicts = false;\n    for (IvyNodeElement child : parent.getDependencies()) {\n      String coordinate = \"/\" + child.getOrganization() + \"/\" + child.getName();\n      Dependency dependency = directDependencies.get(coordinate);\n      if (null != dependency) { // Ignore this indirect dependency if it's not also a direct dependency\n        String indirectVersion = child.getRevision();\n        if (isConflict(coordinate, dependency.directVersion, indirectVersion)) {\n          conflicts = true;\n          Set<String> moduleNames = dependency.conflictLocations.get(root);\n          if (null == moduleNames) {\n            moduleNames = new HashSet<>();\n            dependency.conflictLocations.put(root, moduleNames);\n          }\n          moduleNames.add(moduleName);\n        }\n        conflicts |= collectConflicts(root, child, moduleName);\n      }\n    }\n    return conflicts;\n  }\n\n","sourceOld":"  /**\n   * Recursively finds indirect dependencies that have a version conflict with a direct dependency.\n   * Returns true if one or more conflicts are found, false otherwise\n   */\n  private boolean collectConflicts(IvyNodeElement root, IvyNodeElement parent, String moduleName) {\n    boolean conflicts = false;\n    for (IvyNodeElement child : parent.getDependencies()) {\n      String coordinate = \"/\" + child.getOrganization() + \"/\" + child.getName();\n      Versions versions = directDependencies.get(coordinate);\n      if (null != versions) { // Ignore this indirect dependency if it's not also a direct dependency\n        String indirectVersion = child.getRevision();\n        if (isConflict(coordinate, versions.direct, indirectVersion)) {\n          conflicts = true;\n          Set<String> moduleNames = versions.conflictLocations.get(root);\n          if (null == moduleNames) {\n            moduleNames = new HashSet<>();\n            versions.conflictLocations.put(root, moduleNames);\n          }\n          moduleNames.add(moduleName);\n        }\n        conflicts |= collectConflicts(root, child, moduleName);\n      }\n    }\n    return conflicts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#collectConflicts(IvyNodeElement,IvyNodeElement,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Recursively finds indirect dependencies that have a version conflict with a direct dependency.\n   * Returns true if one or more conflicts are found, false otherwise\n   */\n  private boolean collectConflicts(IvyNodeElement root, IvyNodeElement parent, String moduleName) {\n    boolean conflicts = false;\n    for (IvyNodeElement child : parent.getDependencies()) {\n      String coordinate = \"/\" + child.getOrganization() + \"/\" + child.getName();\n      Dependency dependency = directDependencies.get(coordinate);\n      if (null != dependency) { // Ignore this indirect dependency if it's not also a direct dependency\n        String indirectVersion = child.getRevision();\n        if (isConflict(coordinate, dependency.directVersion, indirectVersion)) {\n          conflicts = true;\n          Set<String> moduleNames = dependency.conflictLocations.get(root);\n          if (null == moduleNames) {\n            moduleNames = new HashSet<>();\n            dependency.conflictLocations.put(root, moduleNames);\n          }\n          moduleNames.add(moduleName);\n        }\n        conflicts |= collectConflicts(root, child, moduleName);\n      }\n    }\n    return conflicts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"151d28379beec3adbc4c091c633cb33e496a2de3":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["151d28379beec3adbc4c091c633cb33e496a2de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"151d28379beec3adbc4c091c633cb33e496a2de3":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["151d28379beec3adbc4c091c633cb33e496a2de3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}