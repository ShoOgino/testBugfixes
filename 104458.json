{"path":"lucene/core/src/test/org/apache/lucene/index/TestFrozenBufferedUpdates#testTermDocsIterator().mjava","commits":[{"id":"83b6ce113ec151d7bf9175578d92d5320f91ab2e","date":1544711434,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFrozenBufferedUpdates#testTermDocsIterator().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermDocsIterator() throws IOException {\n    for (int j = 0; j < 5; j++) {\n      try (Directory dir = newDirectory(); IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig())) {\n        boolean duplicates = random().nextBoolean();\n        boolean nonMatches = random().nextBoolean();\n        BytesRefArray array = new BytesRefArray(Counter.newCounter());\n        int numDocs = 10 + random().nextInt(1000);\n        Set<BytesRef> randomIds = new HashSet<>();\n        for (int i = 0; i < numDocs; i++) {\n          BytesRef id;\n          do {\n             id = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n          } while (randomIds.add(id) == false);\n        }\n        List<BytesRef> asList = new ArrayList<>(randomIds);\n        for (BytesRef ref : randomIds) {\n          Document doc = new Document();\n          doc.add(new StringField(\"field\", ref, Field.Store.NO));\n          array.append(ref);\n          if (duplicates && rarely()) {\n            array.append(RandomPicks.randomFrom(random(), asList));\n          }\n          if (nonMatches && rarely()) {\n            BytesRef id;\n            do {\n              id = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n            } while (randomIds.contains(id));\n            array.append(id);\n          }\n          writer.addDocument(doc);\n        }\n        writer.forceMerge(1);\n        writer.commit();\n        try (DirectoryReader reader = DirectoryReader.open(dir)) {\n          boolean sorted = random().nextBoolean();\n          BytesRefIterator values = sorted ? array.iterator(Comparator.naturalOrder()) : array.iterator();\n          assertEquals(1, reader.leaves().size());\n          TermDocsIterator iterator = new TermDocsIterator(reader.leaves().get(0).reader(), sorted);\n          FixedBitSet bitSet = new FixedBitSet(reader.maxDoc());\n          BytesRef ref;\n          while ((ref = values.next()) != null) {\n            DocIdSetIterator docIdSetIterator = iterator.nextTerm(\"field\", ref);\n            if (nonMatches == false) {\n              assertNotNull(docIdSetIterator);\n            }\n            if (docIdSetIterator != null) {\n              int doc;\n              while ((doc = docIdSetIterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                if (duplicates == false) {\n                  assertFalse(bitSet.get(doc));\n                }\n                bitSet.set(doc);\n              }\n            }\n          }\n          assertEquals(reader.maxDoc(), bitSet.cardinality());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83b6ce113ec151d7bf9175578d92d5320f91ab2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83b6ce113ec151d7bf9175578d92d5320f91ab2e"]},"commit2Childs":{"83b6ce113ec151d7bf9175578d92d5320f91ab2e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83b6ce113ec151d7bf9175578d92d5320f91ab2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}