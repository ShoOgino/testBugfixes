{"path":"src/java/org/apache/lucene/util/Parameter#readResolve().mjava","commits":[{"id":"6d70aede7b1d1b2d0d1e5ecf089b153caf8c99ce","date":1097054344,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/Parameter#readResolve().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Resolves the deserialized instance to the local reference for accurate\n   * equals() and == comparisons.\n   * \n   * @return a reference to Parameter as resolved in the local VM\n   * @throws ObjectStreamException\n   */\n  private Object readResolve() throws ObjectStreamException {\n    Object par = allParameters.get(makeKey(name));\n    \n    if(par == null)\n      throw new StreamCorruptedException(\"Unknown parameter value: \" + name);\n      \n    return par;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0380be9d5528e154174460954513b5ba713c66e1","date":1097062003,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/Parameter#readResolve().mjava","pathOld":"src/java/org/apache/lucene/util/Parameter#readResolve().mjava","sourceNew":"  /**\n   * Resolves the deserialized instance to the local reference for accurate\n   * equals() and == comparisons.\n   * \n   * @return a reference to Parameter as resolved in the local VM\n   * @throws ObjectStreamException\n   */\n  protected Object readResolve() throws ObjectStreamException {\n    Object par = allParameters.get(makeKey(name));\n    \n    if(par == null)\n      throw new StreamCorruptedException(\"Unknown parameter value: \" + name);\n      \n    return par;\n    }\n\n","sourceOld":"  /**\n   * Resolves the deserialized instance to the local reference for accurate\n   * equals() and == comparisons.\n   * \n   * @return a reference to Parameter as resolved in the local VM\n   * @throws ObjectStreamException\n   */\n  private Object readResolve() throws ObjectStreamException {\n    Object par = allParameters.get(makeKey(name));\n    \n    if(par == null)\n      throw new StreamCorruptedException(\"Unknown parameter value: \" + name);\n      \n    return par;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84017049b88da20330e87e7b81b36930058f05f9","date":1108584948,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/Parameter#readResolve().mjava","pathOld":"src/java/org/apache/lucene/util/Parameter#readResolve().mjava","sourceNew":"  /**\n   * Resolves the deserialized instance to the local reference for accurate\n   * equals() and == comparisons.\n   * \n   * @return a reference to Parameter as resolved in the local VM\n   * @throws ObjectStreamException\n   */\n  protected Object readResolve() throws ObjectStreamException {\n    Object par = allParameters.get(makeKey(name));\n    \n    if(par == null)\n      throw new StreamCorruptedException(\"Unknown parameter value: \" + name);\n      \n    return par;\n  }\n\n","sourceOld":"  /**\n   * Resolves the deserialized instance to the local reference for accurate\n   * equals() and == comparisons.\n   * \n   * @return a reference to Parameter as resolved in the local VM\n   * @throws ObjectStreamException\n   */\n  protected Object readResolve() throws ObjectStreamException {\n    Object par = allParameters.get(makeKey(name));\n    \n    if(par == null)\n      throw new StreamCorruptedException(\"Unknown parameter value: \" + name);\n      \n    return par;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/Parameter#readResolve().mjava","pathOld":"src/java/org/apache/lucene/util/Parameter#readResolve().mjava","sourceNew":"  /**\n   * Resolves the deserialized instance to the local reference for accurate\n   * equals() and == comparisons.\n   * \n   * @return a reference to Parameter as resolved in the local VM\n   * @throws ObjectStreamException\n   */\n  protected Object readResolve() throws ObjectStreamException {\n    Object par = allParameters.get(makeKey(name));\n    \n    if(par == null)\n      throw new StreamCorruptedException(\"Unknown parameter value: \" + name);\n      \n    return par;\n  }\n\n","sourceOld":"  /**\n   * Resolves the deserialized instance to the local reference for accurate\n   * equals() and == comparisons.\n   * \n   * @return a reference to Parameter as resolved in the local VM\n   * @throws ObjectStreamException\n   */\n  protected Object readResolve() throws ObjectStreamException {\n    Object par = allParameters.get(makeKey(name));\n    \n    if(par == null)\n      throw new StreamCorruptedException(\"Unknown parameter value: \" + name);\n      \n    return par;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d70aede7b1d1b2d0d1e5ecf089b153caf8c99ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0380be9d5528e154174460954513b5ba713c66e1":["6d70aede7b1d1b2d0d1e5ecf089b153caf8c99ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84017049b88da20330e87e7b81b36930058f05f9":["0380be9d5528e154174460954513b5ba713c66e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84017049b88da20330e87e7b81b36930058f05f9"]},"commit2Childs":{"6d70aede7b1d1b2d0d1e5ecf089b153caf8c99ce":["0380be9d5528e154174460954513b5ba713c66e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d70aede7b1d1b2d0d1e5ecf089b153caf8c99ce"],"0380be9d5528e154174460954513b5ba713c66e1":["84017049b88da20330e87e7b81b36930058f05f9"],"84017049b88da20330e87e7b81b36930058f05f9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}