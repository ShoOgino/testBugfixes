{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,boolean,String,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,boolean,String,boolean).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,boolean,String,boolean).mjava","sourceNew":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result, boolean allowLeadingWildcard)\n    throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setLowercaseExpandedTerms(lowercase);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    Query q = qp.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","sourceOld":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result, boolean allowLeadingWildcard)\n    throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setLowercaseExpandedTerms(lowercase);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    Query q = qp.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,boolean,String,boolean).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,boolean,String,boolean).mjava","sourceNew":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result, boolean allowLeadingWildcard)\n    throws Exception {\n    CommonQueryParserConfiguration cqpC = getParserConfig(null);\n    cqpC.setLowercaseExpandedTerms(lowercase);\n    cqpC.setAllowLeadingWildcard(allowLeadingWildcard);\n    Query q = getQuery(query, cqpC);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","sourceOld":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result, boolean allowLeadingWildcard)\n    throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setLowercaseExpandedTerms(lowercase);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    Query q = qp.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","bugFix":["df63e0c4264f6da210aa1c1c3cb609554f4f43af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,boolean,String,boolean).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,boolean,String,boolean).mjava","sourceNew":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result, boolean allowLeadingWildcard)\n    throws Exception {\n    CommonQueryParserConfiguration cqpC = getParserConfig(null);\n    cqpC.setLowercaseExpandedTerms(lowercase);\n    cqpC.setAllowLeadingWildcard(allowLeadingWildcard);\n    Query q = getQuery(query, cqpC);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","sourceOld":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result, boolean allowLeadingWildcard)\n    throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setLowercaseExpandedTerms(lowercase);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    Query q = qp.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,boolean,String,boolean).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,boolean,String,boolean).mjava","sourceNew":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result, boolean allowLeadingWildcard)\n    throws Exception {\n    CommonQueryParserConfiguration cqpC = getParserConfig(null);\n    cqpC.setLowercaseExpandedTerms(lowercase);\n    cqpC.setAllowLeadingWildcard(allowLeadingWildcard);\n    Query q = getQuery(query, cqpC);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","sourceOld":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result, boolean allowLeadingWildcard)\n    throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setLowercaseExpandedTerms(lowercase);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    Query q = qp.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,String,boolean).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,boolean,String,boolean).mjava","sourceNew":"  public void assertWildcardQueryEquals(String query, String result, boolean allowLeadingWildcard)\n    throws Exception {\n    CommonQueryParserConfiguration cqpC = getParserConfig(null);\n    cqpC.setAllowLeadingWildcard(allowLeadingWildcard);\n    Query q = getQuery(query, cqpC);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","sourceOld":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result, boolean allowLeadingWildcard)\n    throws Exception {\n    CommonQueryParserConfiguration cqpC = getParserConfig(null);\n    cqpC.setLowercaseExpandedTerms(lowercase);\n    cqpC.setAllowLeadingWildcard(allowLeadingWildcard);\n    Query q = getQuery(query, cqpC);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertWildcardQueryEquals(String,boolean,String,boolean).mjava","sourceNew":null,"sourceOld":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result, boolean allowLeadingWildcard)\n    throws Exception {\n    CommonQueryParserConfiguration cqpC = getParserConfig(null);\n    cqpC.setLowercaseExpandedTerms(lowercase);\n    cqpC.setAllowLeadingWildcard(allowLeadingWildcard);\n    Query q = getQuery(query, cqpC);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"ea4107f60b9f95623c16025c9c247412ff809092":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}