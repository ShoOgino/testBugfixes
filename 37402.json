{"path":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next(Token).mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next().mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList();\n      fillCache(reusableToken);\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return null\n      return null;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    Token nextToken = (Token) iterator.next();\n    return (Token) nextToken.clone();\n  }\n\n","sourceOld":"  public Token next() throws IOException {\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList();\n      fillCache();\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return null\n      return null;\n    }\n    \n    return (Token) iterator.next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next(Token).mjava","sourceNew":"  /** @deprecated */\n  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList();\n      fillCache(reusableToken);\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return null\n      return null;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    Token nextToken = (Token) iterator.next();\n    return (Token) nextToken.clone();\n  }\n\n","sourceOld":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList();\n      fillCache(reusableToken);\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return null\n      return null;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    Token nextToken = (Token) iterator.next();\n    return (Token) nextToken.clone();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next(Token).mjava","sourceNew":"  /** @deprecated Will be removed in Lucene 3.0. This method is final, as it should\n   * not be overridden. Delegates to the backwards compatibility layer. */\n  public final Token next(final Token reusableToken) throws IOException {\n    return super.next(reusableToken);\n  }\n\n","sourceOld":"  /** @deprecated */\n  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (cache == null) {\n      // fill cache lazily\n      cache = new LinkedList();\n      fillCache(reusableToken);\n      iterator = cache.iterator();\n    }\n    \n    if (!iterator.hasNext()) {\n      // the cache is exhausted, return null\n      return null;\n    }\n    // Since the TokenFilter can be reset, the tokens need to be preserved as immutable.\n    Token nextToken = (Token) iterator.next();\n    return (Token) nextToken.clone();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/CachingTokenFilter#next(Token).mjava","sourceNew":null,"sourceOld":"  /** @deprecated Will be removed in Lucene 3.0. This method is final, as it should\n   * not be overridden. Delegates to the backwards compatibility layer. */\n  public final Token next(final Token reusableToken) throws IOException {\n    return super.next(reusableToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}