{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a66bd69cd26cbc71647b0971089f240b2ea82edc","date":1312150123,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":["99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id_i:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id_i:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id_i:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0141f86b1794b911ab8e3eac773bf583e5cf784","date":1509377191,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id_i:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\",    \"1\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"100\", \"1_s\", \"a\",\n                 \"x:x_i\", \"100\", \"1-1_s\", \"a\"));\n    assertU(adoc(\"id\",    \"2\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"300\", \"1_s\", \"c\",\n                 \"x:x_i\", \"300\", \"1-1_s\", \"c\"));\n    assertU(adoc(\"id\",    \"3\",   \"const_s\", \"xx\", \n                 \"x_i\",   \"200\", \"1_s\", \"b\",\n                 \"x:x_i\", \"200\", \"1-1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id_i:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"x:x_i desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1-1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["28288370235ed02234a64753cdbf0c6ec096304a"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a66bd69cd26cbc71647b0971089f240b2ea82edc","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a66bd69cd26cbc71647b0971089f240b2ea82edc":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a66bd69cd26cbc71647b0971089f240b2ea82edc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["19275ba31e621f6da1b83bf13af75233876fd3d4","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["19275ba31e621f6da1b83bf13af75233876fd3d4","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0141f86b1794b911ab8e3eac773bf583e5cf784"]},"commit2Childs":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a66bd69cd26cbc71647b0971089f240b2ea82edc":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a66bd69cd26cbc71647b0971089f240b2ea82edc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["f0141f86b1794b911ab8e3eac773bf583e5cf784"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}