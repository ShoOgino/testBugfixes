{"path":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc3_Query1_All_Slops_Should_match().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc3_Query1_All_Slops_Should_match().mjava","pathOld":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc3_Query1_All_Slops_Should_match().mjava","sourceNew":"  /**\n   * Test DOC_3 and QUERY_1.\n   * QUERY_1 has an exact match to DOC_3, so all slop values should succeed.\n   */\n  public void testDoc3_Query1_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      float score1 = checkPhraseQuery(DOC_3, QUERY_1, slop, 1);\n      float score2 = checkPhraseQuery(DOC_3_B, QUERY_1, slop, 1);\n      assertTrue(\"slop=\"+slop+\" score2=\"+score2+\" should be greater than score1 \"+score1, score2>score1);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test DOC_3 and QUERY_1.\n   * QUERY_1 has an exact match to DOC_3, so all slop values should succeed.\n   */\n  public void testDoc3_Query1_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      float score1 = checkPhraseQuery(DOC_3, QUERY_1, slop, 1);\n      float score2 = checkPhraseQuery(DOC_3_B, QUERY_1, slop, 1);\n      assertTrue(\"slop=\"+slop+\" score2=\"+score2+\" should be greater than score1 \"+score1, score2>score1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc3_Query1_All_Slops_Should_match().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc3_Query1_All_Slops_Should_match().mjava","sourceNew":"  /**\n   * Test DOC_3 and QUERY_1.\n   * QUERY_1 has an exact match to DOC_3, so all slop values should succeed.\n   */\n  public void testDoc3_Query1_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      float freq1 = checkPhraseQuery(DOC_3, QUERY_1, slop, 1);\n      float freq2 = checkPhraseQuery(DOC_3_B, QUERY_1, slop, 1);\n      assertTrue(\"slop=\"+slop+\" freq2=\"+freq2+\" should be greater than freq1 \"+freq1, freq2>freq1);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test DOC_3 and QUERY_1.\n   * QUERY_1 has an exact match to DOC_3, so all slop values should succeed.\n   */\n  public void testDoc3_Query1_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      float score1 = checkPhraseQuery(DOC_3, QUERY_1, slop, 1);\n      float score2 = checkPhraseQuery(DOC_3_B, QUERY_1, slop, 1);\n      assertTrue(\"slop=\"+slop+\" score2=\"+score2+\" should be greater than score1 \"+score1, score2>score1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc3_Query1_All_Slops_Should_match().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc3_Query1_All_Slops_Should_match().mjava","sourceNew":"  /**\n   * Test DOC_3 and QUERY_1.\n   * QUERY_1 has an exact match to DOC_3, so all slop values should succeed.\n   */\n  public void testDoc3_Query1_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      float freq1 = checkPhraseQuery(DOC_3, QUERY_1, slop, 1);\n      float freq2 = checkPhraseQuery(DOC_3_B, QUERY_1, slop, 1);\n      assertTrue(\"slop=\"+slop+\" freq2=\"+freq2+\" should be greater than freq1 \"+freq1, freq2>freq1);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test DOC_3 and QUERY_1.\n   * QUERY_1 has an exact match to DOC_3, so all slop values should succeed.\n   */\n  public void testDoc3_Query1_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      float freq1 = checkPhraseQuery(DOC_3, QUERY_1, slop, 1);\n      float freq2 = checkPhraseQuery(DOC_3_B, QUERY_1, slop, 1);\n      assertTrue(\"slop=\"+slop+\" freq2=\"+freq2+\" should be greater than freq1 \"+freq1, freq2>freq1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}