{"path":"src/java/org/apache/solr/analysis/HTMLStripReader#readComment(boolean).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripReader#readComment(boolean).mjava","pathOld":"/dev/null","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n\n    while (true) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"187b932e3f791668d245124e03d899af557d22df","date":1199907679,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripReader#readComment(boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#readComment(boolean).mjava","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < readAheadLimitMinus1 -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","sourceOld":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n\n    while (true) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc8463025ae069ea6b9e8206613cb2d0d6f372f","date":1242140461,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripReader#readComment(boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#readComment(boolean).mjava","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","sourceOld":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < readAheadLimitMinus1 -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd69280df0902763e47cb14745388ee17a2fb602","date":1249686305,"type":5,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readComment(boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#readComment(boolean).mjava","sourceNew":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","sourceOld":"  // tries to read comments the way browsers do, not\n  // strictly by the standards.\n  //\n  // GRRRR.  it turns out that in the wild, a <script> can have a HTML comment\n  // that contains a script that contains a quoted comment.\n  // <script><!-- document.write(\"<!--embedded comment-->\") --></script>\n  //\n  private int readComment(boolean inScript) throws IOException {\n    // at this point \"<!\" has  been read\n    int ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      return MISMATCH;\n    }\n\n    ch = next();\n      if (ch!='-') {\n      // not a comment\n      push(ch);\n      push('-');\n      return MISMATCH;\n    }\n    /*two extra calls to next() here, so make sure we don't read past our mark*/\n    while ((numRead - lastMark) < safeReadAheadLimit -3 ) {\n      ch = next();\n      if (ch<0) return MISMATCH;\n      if (ch=='-') {\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='-') {\n          push(ch);\n          continue;\n        }\n\n        ch = next();\n        if (ch<0) return MISMATCH;\n        if (ch!='>') {\n          push(ch);\n          push('-');\n          continue;\n        }\n\n        return MATCH;\n      } else if ((ch=='\\'' || ch=='\"') && inScript) {\n        push(ch);\n        int ret=readScriptString();\n        // if this wasn't a string, there's not much we can do\n        // at this point without having a stack of stream states in\n        // order to \"undo\" just the latest.\n      } else if (ch=='<') {\n        eatSSI();\n      }\n\n    }\n    return MISMATCH;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc8463025ae069ea6b9e8206613cb2d0d6f372f":["187b932e3f791668d245124e03d899af557d22df"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"bd69280df0902763e47cb14745388ee17a2fb602":["6dc8463025ae069ea6b9e8206613cb2d0d6f372f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"187b932e3f791668d245124e03d899af557d22df":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"]},"commit2Childs":{"6dc8463025ae069ea6b9e8206613cb2d0d6f372f":["bd69280df0902763e47cb14745388ee17a2fb602"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["187b932e3f791668d245124e03d899af557d22df"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd69280df0902763e47cb14745388ee17a2fb602":[],"187b932e3f791668d245124e03d899af557d22df":["6dc8463025ae069ea6b9e8206613cb2d0d6f372f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bd69280df0902763e47cb14745388ee17a2fb602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}