{"path":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38cf2ff411b3f7342febd22163907bafb5342a6f","date":1316126478,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":["64cae353de680169c133e0a9f4debee071ad3241"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3a7218407032c06bc1d6c57edf979e7788f5def","date":1326793293,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream, processor);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","date":1426252395,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n        req.getCore().getUpdateProcessorChain(params);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream, processor);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream, processor);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n        req.getCore().getUpdateProcessorChain(params);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream, processor);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream, processor);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6","date":1487775028,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n        req.getCore().getUpdateProcessorChain(params);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream, processor);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      try {\n        processor.finish();\n      } finally {\n        processor.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n        req.getCore().getUpdateProcessorChain(params);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream, processor);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["042e4d934397657ba04c82b46cc5665076bc5c58"],"38cf2ff411b3f7342febd22163907bafb5342a6f":["c26f00b574427b55127e869b935845554afde1fa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["042e4d934397657ba04c82b46cc5665076bc5c58","3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"042e4d934397657ba04c82b46cc5665076bc5c58":["f3a7218407032c06bc1d6c57edf979e7788f5def"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"f3a7218407032c06bc1d6c57edf979e7788f5def":["38cf2ff411b3f7342febd22163907bafb5342a6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6"]},"commit2Childs":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6"],"38cf2ff411b3f7342febd22163907bafb5342a6f":["f3a7218407032c06bc1d6c57edf979e7788f5def"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"042e4d934397657ba04c82b46cc5665076bc5c58":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["38cf2ff411b3f7342febd22163907bafb5342a6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f3a7218407032c06bc1d6c57edf979e7788f5def":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}