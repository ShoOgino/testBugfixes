{"path":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","commits":[{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Just like {@link #search(Weight, Filter, int, Sort)},\n   * but you choose whether or not the fields in the\n   * returned {@link FieldDoc} instances should be set by\n   * specifying fillFields.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = FieldValueHitQueue.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopScoreDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      collector.setNextReader(reader, 0);\n      doSearch(reader, weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // Search each sub-reader\n      TopFieldCollector collector = new TopFieldCollector(sort, nDocs, sortedSubReaders, fillFields);\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = FieldValueHitQueue.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      doSearch(reader, weight, filter, hcw);\n      return (TopFieldDocs) collector.topDocs();\n    }\n    // Search each sub-reader\n    // TODO: by default we should create a TopFieldCollector which does not\n    // track document scores and maxScore. Currently the default is set to true,\n    // however it will change in 3.0.\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs, fillFields, true, true);\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /** \n   * Just like {@link #search(Weight, Filter, int, Sort)},\n   * but you choose whether or not the fields in the\n   * returned {@link FieldDoc} instances should be set by\n   * specifying fillFields.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = FieldValueHitQueue.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopScoreDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      collector.setNextReader(reader, 0);\n      doSearch(reader, weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    } else {\n      // Search each sub-reader\n      TopFieldCollector collector = new TopFieldCollector(sort, nDocs, sortedSubReaders, fillFields);\n      search(weight, filter, collector);\n      return (TopFieldDocs) collector.topDocs();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f370c4a3d417af27f52201463cabee5da61e5a","date":1240595944,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      doSearch(reader, weight, filter, hcw);\n      return (TopFieldDocs) collector.topDocs();\n    }\n    // Search each sub-reader\n    // TODO: by default we should create a TopFieldCollector which does not\n    // track document scores and maxScore. Currently the default is set to true,\n    // however it will change in 3.0.\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs, fillFields, true, true);\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = FieldValueHitQueue.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      doSearch(reader, weight, filter, hcw);\n      return (TopFieldDocs) collector.topDocs();\n    }\n    // Search each sub-reader\n    // TODO: by default we should create a TopFieldCollector which does not\n    // track document scores and maxScore. Currently the default is set to true,\n    // however it will change in 3.0.\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs, fillFields, true, true);\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      doSearch(reader, weight, filter, hcw);\n      return (TopFieldDocs) collector.topDocs();\n    }\n    // Search each sub-reader\n    // TODO (3.0): by default we should create a TopFieldCollector which does\n    // not track document scores and maxScore. Currently the default is set to\n    // true, however it will change in 3.0.\n    // TODO: The following should be changed to first obtain a Scorer and then ask it\n    // if it's going to return in-order or out-of-order docs, and create TSDC\n    // accordingly.\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, true, true, false);\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      doSearch(reader, weight, filter, hcw);\n      return (TopFieldDocs) collector.topDocs();\n    }\n    // Search each sub-reader\n    // TODO: by default we should create a TopFieldCollector which does not\n    // track document scores and maxScore. Currently the default is set to true,\n    // however it will change in 3.0.\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs, fillFields, true, true);\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3965529a7891904512492d9c6a0c4dc6323899bc","date":1243970180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      doSearch(reader, weight, filter, hcw);\n      return (TopFieldDocs) collector.topDocs();\n    }\n    // Search each sub-reader\n    // TODO: The following should be changed to first obtain a Scorer and then ask it\n    // if it's going to return in-order or out-of-order docs, and create TSDC\n    // accordingly.\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, false);\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      doSearch(reader, weight, filter, hcw);\n      return (TopFieldDocs) collector.topDocs();\n    }\n    // Search each sub-reader\n    // TODO (3.0): by default we should create a TopFieldCollector which does\n    // not track document scores and maxScore. Currently the default is set to\n    // true, however it will change in 3.0.\n    // TODO: The following should be changed to first obtain a Scorer and then ask it\n    // if it's going to return in-order or out-of-order docs, and create TSDC\n    // accordingly.\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, true, true, false);\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(QueryWeight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(QueryWeight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(QueryWeight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      if (filter == null) {\n        Scorer scorer = weight.scorer(reader, true, true);\n        scorer.score(hcw);\n      } else {\n        searchWithFilter(reader, weight, filter, hcw);\n      }\n      return (TopFieldDocs) collector.topDocs();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      doSearch(reader, weight, filter, hcw);\n      return (TopFieldDocs) collector.topDocs();\n    }\n    // Search each sub-reader\n    // TODO: The following should be changed to first obtain a Scorer and then ask it\n    // if it's going to return in-order or out-of-order docs, and create TSDC\n    // accordingly.\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, false);\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      if (filter == null) {\n        Scorer scorer = weight.scorer(reader, true, true);\n        if (scorer != null) {\n          scorer.score(hcw);\n        }\n      } else {\n        searchWithFilter(reader, weight, filter, hcw);\n      }\n      return (TopFieldDocs) collector.topDocs();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(QueryWeight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(QueryWeight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(QueryWeight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      if (filter == null) {\n        Scorer scorer = weight.scorer(reader, true, true);\n        if (scorer != null) {\n          scorer.score(hcw);\n        }\n      } else {\n        searchWithFilter(reader, weight, filter, hcw);\n      }\n      return (TopFieldDocs) collector.topDocs();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    boolean legacy = false;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n      // Resolve AUTO into its true type\n      if (type == SortField.AUTO) {\n        int autotype = SortField.detectFieldType(reader, fieldname);\n        if (autotype == SortField.STRING) {\n          fields[i] = new SortField (fieldname, field.getLocale(), field.getReverse());\n        } else {\n          fields[i] = new SortField (fieldname, autotype, field.getReverse());\n        }\n      }\n\n      if (field.getUseLegacySearch()) {\n        legacy = true;\n      }\n    }\n    \n    if (legacy) {\n      // Search the single top-level reader\n      TopDocCollector collector = new TopFieldDocCollector(reader, sort, nDocs);\n      HitCollectorWrapper hcw = new HitCollectorWrapper(collector);\n      hcw.setNextReader(reader, 0);\n      if (filter == null) {\n        Scorer scorer = weight.scorer(reader, true, true);\n        if (scorer != null) {\n          scorer.score(hcw);\n        }\n      } else {\n        searchWithFilter(reader, weight, filter, hcw);\n      }\n      return (TopFieldDocs) collector.topDocs();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a500dd22dc0d0067549985770141cbb3f3e27e81","date":1255630939,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.<br>\n   * <b>NOTE:</b> currently, this method tracks document scores and sets them in\n   * the returned {@link FieldDoc}, however in 3.0 it will move to not track\n   * document scores. If document scores tracking is still needed, you can use\n   * {@link #search(Weight, Filter, Collector)} and pass in a\n   * {@link TopFieldCollector} instance.\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39a470b4b315091ba7fd0f20d586faba3bb8ef25","date":1258310849,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    \n    SortField[] fields = sort.fields;\n    for(int i = 0; i < fields.length; i++) {\n      SortField field = fields[i];\n      String fieldname = field.getField();\n      int type = field.getType();\n    }\n    \n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34086bd39404420e6e5699d7c5f35c1c146bb2a4","date":1260099686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.maxDoc());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, final int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fac04ca9f7d283216cb7716937deecb68f4a5cc1","date":1260143791,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.numDocs());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.maxDoc());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.numDocs());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(Weight, Filter,\n   * Collector)}.</p>\n   */\n  public TopFieldDocs search(Weight weight, Filter filter, int nDocs,\n                             Sort sort, boolean fillFields)\n      throws IOException {\n\n    nDocs = Math.min(nDocs, reader.numDocs());\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n        fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39a470b4b315091ba7fd0f20d586faba3bb8ef25":["a500dd22dc0d0067549985770141cbb3f3e27e81"],"3965529a7891904512492d9c6a0c4dc6323899bc":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"fac04ca9f7d283216cb7716937deecb68f4a5cc1":["34086bd39404420e6e5699d7c5f35c1c146bb2a4"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["fe941135bdfc28c81e20b4d21422f8726af34925"],"03f370c4a3d417af27f52201463cabee5da61e5a":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["03f370c4a3d417af27f52201463cabee5da61e5a"],"a500dd22dc0d0067549985770141cbb3f3e27e81":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34086bd39404420e6e5699d7c5f35c1c146bb2a4":["39a470b4b315091ba7fd0f20d586faba3bb8ef25"],"052fac7830290bd38a04cddee1a121ee07656b56":["3965529a7891904512492d9c6a0c4dc6323899bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fac04ca9f7d283216cb7716937deecb68f4a5cc1"]},"commit2Childs":{"39a470b4b315091ba7fd0f20d586faba3bb8ef25":["34086bd39404420e6e5699d7c5f35c1c146bb2a4"],"3965529a7891904512492d9c6a0c4dc6323899bc":["052fac7830290bd38a04cddee1a121ee07656b56"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["03f370c4a3d417af27f52201463cabee5da61e5a"],"fac04ca9f7d283216cb7716937deecb68f4a5cc1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe941135bdfc28c81e20b4d21422f8726af34925":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["a500dd22dc0d0067549985770141cbb3f3e27e81"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"03f370c4a3d417af27f52201463cabee5da61e5a":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["3965529a7891904512492d9c6a0c4dc6323899bc"],"a500dd22dc0d0067549985770141cbb3f3e27e81":["39a470b4b315091ba7fd0f20d586faba3bb8ef25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63bc3238545c6012bd44f5d294077997f236bc4e"],"34086bd39404420e6e5699d7c5f35c1c146bb2a4":["fac04ca9f7d283216cb7716937deecb68f4a5cc1"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}