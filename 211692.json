{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","commits":[{"id":"1fa60a501961bce2ff07ee1cde7c78699025547e","date":1307054117,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#SecondPassGroupingCollector(String,Collection[SearchGroup],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","sourceOld":"  public SecondPassGroupingCollector(String groupField, Collection<SearchGroup> groups, Sort groupSort, Sort withinGroupSort,\n                                     int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.groupField = groupField;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n\n    groupMap = new HashMap<BytesRef, SearchGroupDocs>(groups.size());\n\n    for (SearchGroup group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n                   new SearchGroupDocs(group.groupValue,\n                                       collector));\n    }\n\n    ordSet = new SentinelIntSet(groupMap.size(), -1);\n    groupDocs = new SearchGroupDocs[ordSet.keys.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#SecondPassGroupingCollector(String,Collection[SearchGroup],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","sourceOld":"  public SecondPassGroupingCollector(String groupField, Collection<SearchGroup> groups, Sort groupSort, Sort withinGroupSort,\n                                     int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.groupField = groupField;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n\n    groupMap = new HashMap<BytesRef, SearchGroupDocs>(groups.size());\n\n    for (SearchGroup group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n                   new SearchGroupDocs(group.groupValue,\n                                       collector));\n    }\n\n    ordSet = new SentinelIntSet(groupMap.size(), -1);\n    groupDocs = new SearchGroupDocs[ordSet.keys.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48","date":1331199997,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.size() == 0) {\n      throw new IllegalArgumentException(\"no groups to collect (groups.size() is 0)\");\n    }\n\n    this.groupSort = groupSort;\n    this.withinGroupSort = withinGroupSort;\n    this.groups = groups;\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    groupMap = new HashMap<GROUP_VALUE_TYPE, SearchGroupDocs<GROUP_VALUE_TYPE>>(groups.size());\n\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores, true);\n      }\n      groupMap.put(group.groupValue,\n          new SearchGroupDocs<GROUP_VALUE_TYPE>(group.groupValue,\n              collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["1fa60a501961bce2ff07ee1cde7c78699025547e","eb008c8f8fc29e5deccfa43d8a054268ba1c5e48"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["eb008c8f8fc29e5deccfa43d8a054268ba1c5e48"],"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48":["1fa60a501961bce2ff07ee1cde7c78699025547e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fa60a501961bce2ff07ee1cde7c78699025547e"],"1fa60a501961bce2ff07ee1cde7c78699025547e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fa60a501961bce2ff07ee1cde7c78699025547e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c715a0f99152be7566591f323c6c5a25725a1bcb","1fa60a501961bce2ff07ee1cde7c78699025547e","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"1fa60a501961bce2ff07ee1cde7c78699025547e":["38e3b736c7ca086d61b7dbb841c905ee115490da","eb008c8f8fc29e5deccfa43d8a054268ba1c5e48","c715a0f99152be7566591f323c6c5a25725a1bcb","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","c715a0f99152be7566591f323c6c5a25725a1bcb","1e7c99bd45fa88a3d93a03fdd773053bef72268e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}