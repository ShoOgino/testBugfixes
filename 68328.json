{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f53e9fd13e87d7c57ce6de171f06897037ead8dc","date":1537351110,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    String result = response.get(\"result\").toString();\n    if (!\"success\".equals(result) && !result.contains(\"No trigger exists\")) {\n      fail(\"Unexpected response: \" + result);\n    }\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8254aa20264eb7a88d556bbe0346667937ed9c2a","date":1538494545,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    String result = response.get(\"result\").toString();\n    if (!\"success\".equals(result) && !result.contains(\"No trigger exists\")) {\n      fail(\"Unexpected response: \" + result);\n    }\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n    cluster.getTimeSource().sleep(10000);\n    // do this in advance if missing\n    cluster.getSimClusterStateProvider().createSystemCollection();\n    CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2, false, true));\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    String result = response.get(\"result\").toString();\n    if (!\"success\".equals(result) && !result.contains(\"No trigger exists\")) {\n      fail(\"Unexpected response: \" + result);\n    }\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    String result = response.get(\"result\").toString();\n    if (!\"success\".equals(result) && !result.contains(\"No trigger exists\")) {\n      fail(\"Unexpected response: \" + result);\n    }\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    cluster.getLiveNodesSet().removeAllLiveNodesListeners();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n      cluster.getTimeSource().sleep(1000);\n    }\n    cluster.getTimeSource().sleep(10000);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    String result = response.get(\"result\").toString();\n    if (!\"success\".equals(result) && !result.contains(\"No trigger exists\")) {\n      fail(\"Unexpected response: \" + result);\n    }\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n    cluster.getTimeSource().sleep(10000);\n    // do this in advance if missing\n    cluster.getSimClusterStateProvider().createSystemCollection();\n    CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2, false, true));\n  }\n\n","bugFix":["8254aa20264eb7a88d556bbe0346667937ed9c2a","042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"967a6347853ee35b432c965743a902d42f24e697","date":1544662223,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n    \n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    String result = response.get(\"result\").toString();\n    if (!\"success\".equals(result) && !result.contains(\"No trigger exists\")) {\n      fail(\"Unexpected response: \" + result);\n    }\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    String result = response.get(\"result\").toString();\n    if (!\"success\".equals(result) && !result.contains(\"No trigger exists\")) {\n      fail(\"Unexpected response: \" + result);\n    }\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    cluster.getLiveNodesSet().removeAllLiveNodesListeners();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < 2) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n      cluster.getTimeSource().sleep(1000);\n    }\n    cluster.getTimeSource().sleep(10000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    \n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n    \n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    String result = response.get(\"result\").toString();\n    if (!\"success\".equals(result) && !result.contains(\"No trigger exists\")) {\n      fail(\"Unexpected response: \" + result);\n    }\n\n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3904abfa513b750aabc2b2fba5336ba86ed32490","date":1547515000,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    \n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    allListenerEvents.clear();\n    failDummyAction = false;\n    listenerCreated = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(0);\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    \n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#setupTest().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    configureCluster(2, TimeSource.get(\"simTime:\" + SPEED));\n\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(cluster, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(cluster, \".scheduled_maintenance\");\n    \n    waitForSeconds = 1 + random().nextInt(3);\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired = new AtomicBoolean(false);\n    actionStarted = new CountDownLatch(1);\n    actionInterrupted = new CountDownLatch(1);\n    actionCompleted = new CountDownLatch(1);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    triggerStartedCount = new AtomicInteger();\n    triggerFinishedCount = new AtomicInteger();\n    events.clear();\n    listenerEvents.clear();\n    allListenerEvents.clear();\n    failDummyAction = false;\n    listenerCreated = new CountDownLatch(1);\n    listenerEventLatch = new CountDownLatch(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f53e9fd13e87d7c57ce6de171f06897037ead8dc":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["f53e9fd13e87d7c57ce6de171f06897037ead8dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["967a6347853ee35b432c965743a902d42f24e697"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["89948af0461fead48f44ba8fb7866f107ce83f22"],"967a6347853ee35b432c965743a902d42f24e697":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"f53e9fd13e87d7c57ce6de171f06897037ead8dc":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["f53e9fd13e87d7c57ce6de171f06897037ead8dc"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["967a6347853ee35b432c965743a902d42f24e697"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"89948af0461fead48f44ba8fb7866f107ce83f22":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["3f504512a03d978990cbff30db0522b354e846db"],"967a6347853ee35b432c965743a902d42f24e697":["89948af0461fead48f44ba8fb7866f107ce83f22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}