{"path":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","date":1341673943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c8719b2c0b382be11f5b193b6fc14bc310e906b","date":1344770591,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"testConcurrentAccess\"));\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"testConcurrentAccess\"));\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"testConcurrentAccess\"));\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"testConcurrentAccess\"));\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"testConcurrentAccess\"));\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"testConcurrentAccess\"));\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = DirectoryReader.open(userindex);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + random().nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory(\"testConcurrentAccess\"));\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random().nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(Locale.ROOT, \"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(Locale.ROOT, \"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19275ba31e621f6da1b83bf13af75233876fd3d4":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"2acf500f78aa12b92e371fd89c719291986b6b90":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b"],"46d8ada1fff8d18cb197c38c7983225162599948":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["46d8ada1fff8d18cb197c38c7983225162599948","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"46d8ada1fff8d18cb197c38c7983225162599948":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["19275ba31e621f6da1b83bf13af75233876fd3d4","c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}