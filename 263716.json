{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","commits":[{"id":"7734ce13985aba556e3623d51c2d870ed8142847","date":1360796678,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a base URL consisting of the protocal, host, and port for a \n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      Connector c = conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = (c instanceof SslConnector) ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a base URL consisting of the protocal, host, and port for a \n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      Connector c = conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = (c instanceof SslConnector) ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","date":1420472758,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","sourceNew":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().equals(\"SSL-http/1.1\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a base URL consisting of the protocal, host, and port for a \n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      Connector c = conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = (c instanceof SslConnector) ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c66158bb16e902a21272772f1b911f04b1a55abb","date":1424959524,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","sourceNew":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().equals(\"SSL-http/1.1\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), config.context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().equals(\"SSL-http/1.1\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","sourceNew":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().equals(\"SSL-http/1.1\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), config.context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().equals(\"SSL-http/1.1\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"549bb709866b53c2535cf5420caec3190c7f225c","date":1448943694,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","sourceNew":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().startsWith(\"SSL\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), config.context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().equals(\"SSL-http/1.1\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), config.context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49bee3135753f5a129ce7f3eef9151efbb39fb27","date":1452189117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","sourceNew":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().equals(\"SSL-http/1.1\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), config.context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().startsWith(\"SSL\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), config.context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee3cfd8b5963fd43298f37bd602c8bf77896e72e","date":1455656470,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","sourceNew":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().startsWith(\"SSL\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), config.context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().equals(\"SSL-http/1.1\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), config.context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getBaseUrl().mjava","sourceNew":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    try {\n      return new URL(protocol, host, jettyPort, config.context);\n    } catch (MalformedURLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a base URL consisting of the protocol, host, and port for a\n   * Connector in use by the Jetty Server contained in this runner.\n   */\n  public URL getBaseUrl() {\n    String protocol = null;\n    try {\n      Connector[] conns = server.getConnectors();\n      if (0 == conns.length) {\n        throw new IllegalStateException(\"Jetty Server has no Connectors\");\n      }\n      ServerConnector c = (ServerConnector) conns[0];\n      if (c.getLocalPort() < 0) {\n        throw new IllegalStateException(\"Jetty Connector is not open: \" + \n                                        c.getLocalPort());\n      }\n      protocol = c.getDefaultProtocol().startsWith(\"SSL\")  ? \"https\" : \"http\";\n      return new URL(protocol, c.getHost(), c.getLocalPort(), config.context);\n\n    } catch (MalformedURLException e) {\n      throw new  IllegalStateException\n        (\"Java could not make sense of protocol: \" + protocol, e);\n    }\n  }\n\n","bugFix":["ee3cfd8b5963fd43298f37bd602c8bf77896e72e","d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","c66158bb16e902a21272772f1b911f04b1a55abb","7734ce13985aba556e3623d51c2d870ed8142847"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"549bb709866b53c2535cf5420caec3190c7f225c":["c66158bb16e902a21272772f1b911f04b1a55abb"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","c66158bb16e902a21272772f1b911f04b1a55abb"],"ee3cfd8b5963fd43298f37bd602c8bf77896e72e":["49bee3135753f5a129ce7f3eef9151efbb39fb27"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ee3cfd8b5963fd43298f37bd602c8bf77896e72e"],"7734ce13985aba556e3623d51c2d870ed8142847":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b41f996b22bd5518650f897d050088ff808ec03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7734ce13985aba556e3623d51c2d870ed8142847"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"49bee3135753f5a129ce7f3eef9151efbb39fb27":["549bb709866b53c2535cf5420caec3190c7f225c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c66158bb16e902a21272772f1b911f04b1a55abb":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["7734ce13985aba556e3623d51c2d870ed8142847"]},"commit2Childs":{"549bb709866b53c2535cf5420caec3190c7f225c":["49bee3135753f5a129ce7f3eef9151efbb39fb27"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ee3cfd8b5963fd43298f37bd602c8bf77896e72e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7734ce13985aba556e3623d51c2d870ed8142847":["3b41f996b22bd5518650f897d050088ff808ec03","d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7734ce13985aba556e3623d51c2d870ed8142847","3b41f996b22bd5518650f897d050088ff808ec03"],"49bee3135753f5a129ce7f3eef9151efbb39fb27":["ee3cfd8b5963fd43298f37bd602c8bf77896e72e"],"c66158bb16e902a21272772f1b911f04b1a55abb":["549bb709866b53c2535cf5420caec3190c7f225c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c66158bb16e902a21272772f1b911f04b1a55abb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}