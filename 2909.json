{"path":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#markLeftTree(int,PathSlice,LongBitSet,int[],int,int,int,int).mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#markLeftTree(int,PathSlice,LongBitSet,int[],int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Marks bits for the ords (points) that belong in the left sub tree. */\n  private long markLeftTree(int splitDim, PathSlice source, LongBitSet bitSet, int[] splitValueRet,\n                            int minLatEnc, int maxLatEnc, int minLonEnc, int maxLonEnc) throws IOException {\n\n    // This is the initital size of our left tree, but we may lower it below for == case:\n    long leftCount = source.count / 2;\n\n    // Read the split value:\n    //if (DEBUG) System.out.println(\"  leftCount=\" + leftCount + \" vs \" + source.count);\n    LatLonReader reader = source.writer.getReader(source.start + leftCount);\n    boolean success = false;\n    int splitValue;\n    try {\n      boolean result = reader.next();\n      assert result;\n\n      int latSplitEnc = reader.latEnc();\n      assert latSplitEnc >= minLatEnc && latSplitEnc < maxLatEnc: \"latSplitEnc=\" + latSplitEnc + \" minLatEnc=\" + minLatEnc + \" maxLatEnc=\" + maxLatEnc;\n\n      int lonSplitEnc = reader.lonEnc();\n      assert lonSplitEnc >= minLonEnc && lonSplitEnc < maxLonEnc: \"lonSplitEnc=\" + lonSplitEnc + \" minLonEnc=\" + minLonEnc + \" maxLonEnc=\" + maxLonEnc;\n\n      if (splitDim == 0) {\n        splitValue = latSplitEnc;\n        //if (DEBUG) System.out.println(\"  splitValue=\" + decodeLat(splitValue));\n      } else {\n        splitValue = lonSplitEnc;\n        //if (DEBUG) System.out.println(\"  splitValue=\" + decodeLon(splitValue));\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    splitValueRet[0] = splitValue;\n\n    // Mark ords that fall into the left half, and also handle the == boundary case:\n    assert bitSet.cardinality() == 0: \"cardinality=\" + bitSet.cardinality();\n\n    success = false;\n    reader = source.writer.getReader(source.start);\n    try {\n      int lastValue = Integer.MIN_VALUE;\n      for (int i=0;i<leftCount;i++) {\n        boolean result = reader.next();\n        assert result;\n        int latEnc = reader.latEnc();\n        int lonEnc = reader.lonEnc();\n\n        int value;\n        if (splitDim == 0) {\n          value = latEnc;\n        } else {\n          value = lonEnc;\n        }\n\n        // Our input source is supposed to be sorted on the incoming dimension:\n        assert value >= lastValue;\n        lastValue = value;\n\n        if (value == splitValue) {\n          // If we have identical points at the split, we move the count back to before the identical points:\n          leftCount = i;\n          break;\n        }\n        assert value < splitValue: \"i=\" + i + \" value=\" + value + \" vs splitValue=\" + splitValue;\n        long ord = reader.ord();\n        int docID = reader.docID();\n        assert docID >= 0: \"docID=\" + docID + \" reader=\" + reader;\n\n        // We should never see dup ords:\n        assert bitSet.get(ord) == false;\n        bitSet.set(ord);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    assert leftCount == bitSet.cardinality(): \"leftCount=\" + leftCount + \" cardinality=\" + bitSet.cardinality();\n\n    return leftCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b268bd80fbb9f6c6ab5b033d2aca29588788a0e","date":1433719594,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#markLeftTree(int,PathSlice,LongBitSet,int[],int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#markLeftTree(int,PathSlice,LongBitSet,int[],int,int,int,int).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the left sub tree. */\n  private long markLeftTree(int splitDim, PathSlice source, LongBitSet bitSet, int[] splitValueRet,\n                            int minLatEnc, int maxLatEnc, int minLonEnc, int maxLonEnc) throws IOException {\n\n    // This is the initital size of our left tree, but we may lower it below for == case:\n    long leftCount = source.count / 2;\n\n    // Read the split value:\n    //if (DEBUG) System.out.println(\"  leftCount=\" + leftCount + \" vs \" + source.count);\n    LatLonReader reader = source.writer.getReader(source.start + leftCount);\n    boolean success = false;\n    int splitValue;\n    try {\n      boolean result = reader.next();\n      assert result;\n\n      int latSplitEnc = reader.latEnc();\n      assert latSplitEnc >= minLatEnc && latSplitEnc < maxLatEnc: \"latSplitEnc=\" + latSplitEnc + \" minLatEnc=\" + minLatEnc + \" maxLatEnc=\" + maxLatEnc;\n\n      int lonSplitEnc = reader.lonEnc();\n      assert lonSplitEnc >= minLonEnc && lonSplitEnc < maxLonEnc: \"lonSplitEnc=\" + lonSplitEnc + \" minLonEnc=\" + minLonEnc + \" maxLonEnc=\" + maxLonEnc;\n\n      if (splitDim == 0) {\n        splitValue = latSplitEnc;\n        //if (DEBUG) System.out.println(\"  splitValue=\" + decodeLat(splitValue));\n      } else {\n        splitValue = lonSplitEnc;\n        //if (DEBUG) System.out.println(\"  splitValue=\" + decodeLon(splitValue));\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    splitValueRet[0] = splitValue;\n\n    // Mark ords that fall into the left half, and also handle the == boundary case:\n    assert bitSet.cardinality() == 0: \"cardinality=\" + bitSet.cardinality();\n\n    success = false;\n    reader = source.writer.getReader(source.start);\n    try {\n      int lastValue = Integer.MIN_VALUE;\n      for (int i=0;i<leftCount;i++) {\n        boolean result = reader.next();\n        assert result;\n        int latEnc = reader.latEnc();\n        int lonEnc = reader.lonEnc();\n\n        int value;\n        if (splitDim == 0) {\n          value = latEnc;\n        } else {\n          value = lonEnc;\n        }\n\n        // Our input source is supposed to be sorted on the incoming dimension:\n        assert value >= lastValue;\n        lastValue = value;\n\n        if (value == splitValue) {\n          // TODO: we could simplify this, by allowing splitValue to be on either side?\n          // If we have identical points at the split, we move the count back to before the identical points:\n          leftCount = i;\n          break;\n        }\n        assert value < splitValue: \"i=\" + i + \" value=\" + value + \" vs splitValue=\" + splitValue;\n        long ord = reader.ord();\n        int docID = reader.docID();\n        assert docID >= 0: \"docID=\" + docID + \" reader=\" + reader;\n\n        // We should never see dup ords:\n        assert bitSet.get(ord) == false;\n        bitSet.set(ord);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    assert leftCount == bitSet.cardinality(): \"leftCount=\" + leftCount + \" cardinality=\" + bitSet.cardinality();\n\n    return leftCount;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the left sub tree. */\n  private long markLeftTree(int splitDim, PathSlice source, LongBitSet bitSet, int[] splitValueRet,\n                            int minLatEnc, int maxLatEnc, int minLonEnc, int maxLonEnc) throws IOException {\n\n    // This is the initital size of our left tree, but we may lower it below for == case:\n    long leftCount = source.count / 2;\n\n    // Read the split value:\n    //if (DEBUG) System.out.println(\"  leftCount=\" + leftCount + \" vs \" + source.count);\n    LatLonReader reader = source.writer.getReader(source.start + leftCount);\n    boolean success = false;\n    int splitValue;\n    try {\n      boolean result = reader.next();\n      assert result;\n\n      int latSplitEnc = reader.latEnc();\n      assert latSplitEnc >= minLatEnc && latSplitEnc < maxLatEnc: \"latSplitEnc=\" + latSplitEnc + \" minLatEnc=\" + minLatEnc + \" maxLatEnc=\" + maxLatEnc;\n\n      int lonSplitEnc = reader.lonEnc();\n      assert lonSplitEnc >= minLonEnc && lonSplitEnc < maxLonEnc: \"lonSplitEnc=\" + lonSplitEnc + \" minLonEnc=\" + minLonEnc + \" maxLonEnc=\" + maxLonEnc;\n\n      if (splitDim == 0) {\n        splitValue = latSplitEnc;\n        //if (DEBUG) System.out.println(\"  splitValue=\" + decodeLat(splitValue));\n      } else {\n        splitValue = lonSplitEnc;\n        //if (DEBUG) System.out.println(\"  splitValue=\" + decodeLon(splitValue));\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    splitValueRet[0] = splitValue;\n\n    // Mark ords that fall into the left half, and also handle the == boundary case:\n    assert bitSet.cardinality() == 0: \"cardinality=\" + bitSet.cardinality();\n\n    success = false;\n    reader = source.writer.getReader(source.start);\n    try {\n      int lastValue = Integer.MIN_VALUE;\n      for (int i=0;i<leftCount;i++) {\n        boolean result = reader.next();\n        assert result;\n        int latEnc = reader.latEnc();\n        int lonEnc = reader.lonEnc();\n\n        int value;\n        if (splitDim == 0) {\n          value = latEnc;\n        } else {\n          value = lonEnc;\n        }\n\n        // Our input source is supposed to be sorted on the incoming dimension:\n        assert value >= lastValue;\n        lastValue = value;\n\n        if (value == splitValue) {\n          // If we have identical points at the split, we move the count back to before the identical points:\n          leftCount = i;\n          break;\n        }\n        assert value < splitValue: \"i=\" + i + \" value=\" + value + \" vs splitValue=\" + splitValue;\n        long ord = reader.ord();\n        int docID = reader.docID();\n        assert docID >= 0: \"docID=\" + docID + \" reader=\" + reader;\n\n        // We should never see dup ords:\n        assert bitSet.get(ord) == false;\n        bitSet.set(ord);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    assert leftCount == bitSet.cardinality(): \"leftCount=\" + leftCount + \" cardinality=\" + bitSet.cardinality();\n\n    return leftCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#markLeftTree(int,PathSlice,LongBitSet,int[],int,int,int,int).mjava","sourceNew":null,"sourceOld":"  /** Marks bits for the ords (points) that belong in the left sub tree. */\n  private long markLeftTree(int splitDim, PathSlice source, LongBitSet bitSet, int[] splitValueRet,\n                            int minLatEnc, int maxLatEnc, int minLonEnc, int maxLonEnc) throws IOException {\n\n    // This is the initital size of our left tree, but we may lower it below for == case:\n    long leftCount = source.count / 2;\n\n    // Read the split value:\n    //if (DEBUG) System.out.println(\"  leftCount=\" + leftCount + \" vs \" + source.count);\n    LatLonReader reader = source.writer.getReader(source.start + leftCount);\n    boolean success = false;\n    int splitValue;\n    try {\n      boolean result = reader.next();\n      assert result;\n\n      int latSplitEnc = reader.latEnc();\n      assert latSplitEnc >= minLatEnc && latSplitEnc < maxLatEnc: \"latSplitEnc=\" + latSplitEnc + \" minLatEnc=\" + minLatEnc + \" maxLatEnc=\" + maxLatEnc;\n\n      int lonSplitEnc = reader.lonEnc();\n      assert lonSplitEnc >= minLonEnc && lonSplitEnc < maxLonEnc: \"lonSplitEnc=\" + lonSplitEnc + \" minLonEnc=\" + minLonEnc + \" maxLonEnc=\" + maxLonEnc;\n\n      if (splitDim == 0) {\n        splitValue = latSplitEnc;\n        //if (DEBUG) System.out.println(\"  splitValue=\" + decodeLat(splitValue));\n      } else {\n        splitValue = lonSplitEnc;\n        //if (DEBUG) System.out.println(\"  splitValue=\" + decodeLon(splitValue));\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    splitValueRet[0] = splitValue;\n\n    // Mark ords that fall into the left half, and also handle the == boundary case:\n    assert bitSet.cardinality() == 0: \"cardinality=\" + bitSet.cardinality();\n\n    success = false;\n    reader = source.writer.getReader(source.start);\n    try {\n      int lastValue = Integer.MIN_VALUE;\n      for (int i=0;i<leftCount;i++) {\n        boolean result = reader.next();\n        assert result;\n        int latEnc = reader.latEnc();\n        int lonEnc = reader.lonEnc();\n\n        int value;\n        if (splitDim == 0) {\n          value = latEnc;\n        } else {\n          value = lonEnc;\n        }\n\n        // Our input source is supposed to be sorted on the incoming dimension:\n        assert value >= lastValue;\n        lastValue = value;\n\n        if (value == splitValue) {\n          // TODO: we could simplify this, by allowing splitValue to be on either side?\n          // If we have identical points at the split, we move the count back to before the identical points:\n          leftCount = i;\n          break;\n        }\n        assert value < splitValue: \"i=\" + i + \" value=\" + value + \" vs splitValue=\" + splitValue;\n        long ord = reader.ord();\n        int docID = reader.docID();\n        assert docID >= 0: \"docID=\" + docID + \" reader=\" + reader;\n\n        // We should never see dup ords:\n        assert bitSet.get(ord) == false;\n        bitSet.set(ord);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(reader);\n      } else {\n        IOUtils.closeWhileHandlingException(reader);\n      }\n    }\n\n    assert leftCount == bitSet.cardinality(): \"leftCount=\" + leftCount + \" cardinality=\" + bitSet.cardinality();\n\n    return leftCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b268bd80fbb9f6c6ab5b033d2aca29588788a0e":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["8b268bd80fbb9f6c6ab5b033d2aca29588788a0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8b268bd80fbb9f6c6ab5b033d2aca29588788a0e":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["8b268bd80fbb9f6c6ab5b033d2aca29588788a0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}