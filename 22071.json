{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session =  sessionWrapper.get();\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session =  sessionWrapper.get();\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session =  sessionWrapper.get();\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session =  sessionWrapper.get();\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session = sessionWrapper.get();\n    Suggester initialsuggester = session.getSuggester(MOVEREPLICA)\n        .hint(Suggester.Hint.TARGET_NODE, nodeName);\n    Suggester suggester = null;\n    for (; ; ) {\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      SolrRequest request = suggester.getSuggestion();\n      if (requests.size() > 10) {\n        log.info(\"too_many_suggestions\");\n        PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n        break;\n      }\n      log.info(\"SUGGESTION: {}\", request);\n      if (request == null) break;\n      session = suggester.getSession();\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    log.info(\"total_suggestions: {}\", requests.size());\n    if (requests.size() == 0) {\n      PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session =  sessionWrapper.get();\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      if (log.isInfoEnabled()) {\n        log.info(\"op: {}\", suggestionInfo.getOperation());\n      }\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: {}\", coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session = sessionWrapper.get();\n    Suggester initialsuggester = session.getSuggester(MOVEREPLICA)\n        .hint(Suggester.Hint.TARGET_NODE, nodeName);\n    Suggester suggester = null;\n    for (; ; ) {\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      SolrRequest request = suggester.getSuggestion();\n      if (requests.size() > 10) {\n        log.info(\"too_many_suggestions\");\n        PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n        break;\n      }\n      log.info(\"SUGGESTION: {}\", request);\n      if (request == null) break;\n      session = suggester.getSession();\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"total_suggestions: {}\", requests.size());\n    }\n    if (requests.size() == 0) {\n      PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session = sessionWrapper.get();\n    Suggester initialsuggester = session.getSuggester(MOVEREPLICA)\n        .hint(Suggester.Hint.TARGET_NODE, nodeName);\n    Suggester suggester = null;\n    for (; ; ) {\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      SolrRequest request = suggester.getSuggestion();\n      if (requests.size() > 10) {\n        log.info(\"too_many_suggestions\");\n        PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n        break;\n      }\n      log.info(\"SUGGESTION: {}\", request);\n      if (request == null) break;\n      session = suggester.getSession();\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    log.info(\"total_suggestions: {}\", requests.size());\n    if (requests.size() == 0) {\n      PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      if (log.isInfoEnabled()) {\n        log.info(\"op: {}\", suggestionInfo.getOperation());\n      }\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: {}\", coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session = sessionWrapper.get();\n    Suggester initialsuggester = session.getSuggester(MOVEREPLICA)\n        .hint(Suggester.Hint.TARGET_NODE, nodeName);\n    Suggester suggester = null;\n    for (; ; ) {\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest request = suggester.getSuggestion();\n      if (requests.size() > 10) {\n        log.info(\"too_many_suggestions\");\n        PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n        break;\n      }\n      log.info(\"SUGGESTION: {}\", request);\n      if (request == null) break;\n      session = suggester.getSession();\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"total_suggestions: {}\", requests.size());\n    }\n    if (requests.size() == 0) {\n      PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      if (log.isInfoEnabled()) {\n        log.info(\"op: {}\", suggestionInfo.getOperation());\n      }\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: {}\", coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session = sessionWrapper.get();\n    Suggester initialsuggester = session.getSuggester(MOVEREPLICA)\n        .hint(Suggester.Hint.TARGET_NODE, nodeName);\n    Suggester suggester = null;\n    for (; ; ) {\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      SolrRequest request = suggester.getSuggestion();\n      if (requests.size() > 10) {\n        log.info(\"too_many_suggestions\");\n        PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n        break;\n      }\n      log.info(\"SUGGESTION: {}\", request);\n      if (request == null) break;\n      session = suggester.getSession();\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"total_suggestions: {}\", requests.size());\n    }\n    if (requests.size() == 0) {\n      PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      if (log.isInfoEnabled()) {\n        log.info(\"op: {}\", suggestionInfo.getOperation());\n      }\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: {}\", coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session = sessionWrapper.get();\n    Suggester initialsuggester = session.getSuggester(MOVEREPLICA)\n        .hint(Suggester.Hint.TARGET_NODE, nodeName);\n    Suggester suggester = null;\n    for (; ; ) {\n      suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest request = suggester.getSuggestion();\n      if (requests.size() > 10) {\n        log.info(\"too_many_suggestions\");\n        PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n        break;\n      }\n      log.info(\"SUGGESTION: {}\", request);\n      if (request == null) break;\n      session = suggester.getSession();\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"total_suggestions: {}\", requests.size());\n    }\n    if (requests.size() == 0) {\n      PolicyHelper.logState(ocmh.overseer.getSolrCloudManager(), initialsuggester);\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"4abf821a41a2fdca2a1dea148999931d22e20529":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"3f504512a03d978990cbff30db0522b354e846db":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"4abf821a41a2fdca2a1dea148999931d22e20529":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}