{"path":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","commits":[{"id":"226b3bf77af5749a90c81edd3d4168fd6e276a24","date":1490013063,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","pathOld":"/dev/null","sourceNew":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(TestStatus.NOT_APPLICABLE);\n    Object val = row.getVal(tag.name);\n    if (tag.isMatch(val)) {\n      checkReplicaCount(row, result);\n      if (result.get() == TestStatus.FAIL) row.violations.add(this);\n    }\n    return result.get();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a834430db908aba7bd03ef98a893e56e820672c5","date":1490096578,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","sourceNew":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(TestStatus.NOT_APPLICABLE);\n    outer:\n    for (Map.Entry<String, Map<String, List<RuleSorter.ReplicaStat>>> e : row.replicaInfo.entrySet()) {\n      if (!collection.isMatch(e.getKey())) break;\n      int count = 0;\n      for (Map.Entry<String, List<RuleSorter.ReplicaStat>> e1 : e.getValue().entrySet()) {\n        if (!shard.isMatch(e1.getKey())) break;\n        count += e1.getValue().size();\n        if (shard.val.equals(RuleSorter.EACH) && count > 0 && replica.isMatch(count) && tag.isMatch(row)) {\n          result.set(TestStatus.FAIL);\n          continue outer;\n        }\n        if (RuleSorter.EACH.equals(shard.val)) count = 0;\n      }\n      if (shard.val.equals(RuleSorter.ANY) && count > 0 && replica.isMatch(count) && !tag.isMatch(row)) {\n        result.set(TestStatus.FAIL);\n      }\n    }\n    if (result.get() == TestStatus.FAIL) row.violations.add(this);\n    return result.get();\n  }\n\n","sourceOld":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(TestStatus.NOT_APPLICABLE);\n    Object val = row.getVal(tag.name);\n    if (tag.isMatch(val)) {\n      checkReplicaCount(row, result);\n      if (result.get() == TestStatus.FAIL) row.violations.add(this);\n    }\n    return result.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65b36a7cc02287c46274765c657d23db7e5ce163","date":1490601578,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","sourceNew":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaStat>>> colls : row.replicaInfo.entrySet()) {\n      if (!collection.isPass(colls.getKey()) || result.get() == FAIL) break;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaStat>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n        }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","sourceOld":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(TestStatus.NOT_APPLICABLE);\n    outer:\n    for (Map.Entry<String, Map<String, List<RuleSorter.ReplicaStat>>> e : row.replicaInfo.entrySet()) {\n      if (!collection.isMatch(e.getKey())) break;\n      int count = 0;\n      for (Map.Entry<String, List<RuleSorter.ReplicaStat>> e1 : e.getValue().entrySet()) {\n        if (!shard.isMatch(e1.getKey())) break;\n        count += e1.getValue().size();\n        if (shard.val.equals(RuleSorter.EACH) && count > 0 && replica.isMatch(count) && tag.isMatch(row)) {\n          result.set(TestStatus.FAIL);\n          continue outer;\n        }\n        if (RuleSorter.EACH.equals(shard.val)) count = 0;\n      }\n      if (shard.val.equals(RuleSorter.ANY) && count > 0 && replica.isMatch(count) && !tag.isMatch(row)) {\n        result.set(TestStatus.FAIL);\n      }\n    }\n    if (result.get() == TestStatus.FAIL) row.violations.add(this);\n    return result.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf","date":1491191579,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","sourceNew":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n      if (!collection.isPass(colls.getKey()) || result.get() == FAIL) break;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n        }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","sourceOld":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaStat>>> colls : row.replicaInfo.entrySet()) {\n      if (!collection.isPass(colls.getKey()) || result.get() == FAIL) break;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaStat>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n        }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b59075a857a3d25d834f6f408491b40845b8ced0","date":1492433183,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","sourceNew":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n      if (result.get() == FAIL) break;\n      if (!collection.isPass(colls.getKey())) continue;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n        }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","sourceOld":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n      if (!collection.isPass(colls.getKey()) || result.get() == FAIL) break;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n        }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(Row).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Clause#test(Row).mjava","sourceNew":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n      if (result.get() == FAIL) break;\n      if (!collection.isPass(colls.getKey())) continue;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n        }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","sourceOld":"  TestStatus test(Row row) {\n    AtomicReference<TestStatus> result = new AtomicReference<>(NOT_APPLICABLE);\n\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n      if (result.get() == FAIL) break;\n      if (!collection.isPass(colls.getKey())) continue;\n      int count = 0;\n      for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n        if (!shard.isPass(shards.getKey()) || result.get() == FAIL) break;\n        count += shards.getValue().size();\n        if (shard.val.equals(EACH)) testReplicaCount(row, result, count);\n        if (EACH.equals(shard.val)) count = 0;\n        }\n      if (shard.val.equals(ANY)) testReplicaCount(row, result, count);\n      }\n    if (result.get() == FAIL) row.violations.add(this);\n    return result.get();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65b36a7cc02287c46274765c657d23db7e5ce163":["a834430db908aba7bd03ef98a893e56e820672c5"],"226b3bf77af5749a90c81edd3d4168fd6e276a24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b59075a857a3d25d834f6f408491b40845b8ced0":["ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["b59075a857a3d25d834f6f408491b40845b8ced0"],"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf":["65b36a7cc02287c46274765c657d23db7e5ce163"],"a834430db908aba7bd03ef98a893e56e820672c5":["226b3bf77af5749a90c81edd3d4168fd6e276a24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"65b36a7cc02287c46274765c657d23db7e5ce163":["ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf"],"226b3bf77af5749a90c81edd3d4168fd6e276a24":["a834430db908aba7bd03ef98a893e56e820672c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226b3bf77af5749a90c81edd3d4168fd6e276a24","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b59075a857a3d25d834f6f408491b40845b8ced0":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":[],"ea13f0ffd30b65fc1e59ce96948fc1db68ddd4cf":["b59075a857a3d25d834f6f408491b40845b8ced0"],"a834430db908aba7bd03ef98a893e56e820672c5":["65b36a7cc02287c46274765c657d23db7e5ce163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}