{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_putOrdinalsInPosition(List[T],Collection[Integer]).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_putOrdinalsInPosition(List[T],Collection[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates a set of ordinal values for a given list of comparable objects.\n   * Once the method returns, the each ordinal is guaranteed to have the correct value in the list.\n   *\n   * @param list the list of {@link Comparable} objects\n   * @param ordinals the collection ordinals to calculate (0 to (size of list) - 1) \n   */\n  public static <T extends Comparable<T>> void putOrdinalsInPosition(List<T> list, Collection<Integer> ordinals) {\n    int size = list.size();\n    if (size == 0) {\n      return;\n    }\n\n    int[] ords = new int[ordinals.size()];\n    int i = 0;\n    for (int ord : ordinals) {\n      ords[i++] = ord;\n    }\n    Arrays.sort(ords);\n\n    if (ords[0] < 0 || ords[ords.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n    distributeAndFind(list, ords, 0, ords.length - 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_putOrdinalsInPosition(List[T],Collection[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates a set of ordinal values for a given list of comparable objects.\n   * Once the method returns, the each ordinal is guaranteed to have the correct value in the list.\n   *\n   * @param list the list of {@link Comparable} objects\n   * @param ordinals the collection ordinals to calculate (0 to (size of list) - 1) \n   */\n  public static <T extends Comparable<T>> void putOrdinalsInPosition(List<T> list, Collection<Integer> ordinals) {\n    int size = list.size();\n    if (size == 0) {\n      return;\n    }\n\n    int[] ords = new int[ordinals.size()];\n    int i = 0;\n    for (int ord : ordinals) {\n      ords[i++] = ord;\n    }\n    Arrays.sort(ords);\n\n    if (ords[0] < 0 || ords[ords.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n    distributeAndFind(list, ords, 0, ords.length - 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_putOrdinalsInPosition(List[T],Collection[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates a set of ordinal values for a given list of comparable objects.\n   * Once the method returns, the each ordinal is guaranteed to have the correct value in the list.\n   *\n   * @param list the list of {@link Comparable} objects\n   * @param ordinals the collection ordinals to calculate (0 to (size of list) - 1) \n   */\n  public static <T extends Comparable<T>> void putOrdinalsInPosition(List<T> list, Collection<Integer> ordinals) {\n    int size = list.size();\n    if (size == 0) {\n      return;\n    }\n\n    int[] ords = new int[ordinals.size()];\n    int i = 0;\n    for (int ord : ordinals) {\n      ords[i++] = ord;\n    }\n    Arrays.sort(ords);\n\n    if (ords[0] < 0 || ords[ords.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n    distributeAndFind(list, ords, 0, ords.length - 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_putOrdinalsInPosition(List[T],Collection[Integer]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_putOrdinalsInPosition(List[T],Collection[Integer]).mjava","sourceNew":"  /**\n   * Calculates a set of ordinal values for a given list of comparable objects.\n   * Once the method returns, the each ordinal is guaranteed to have the correct value in the list.\n   *\n   * @param list the list of {@link Comparable} objects\n   * @param ordinals the collection ordinals to calculate (0 to (size of list) - 1) \n   */\n  public static <T extends Comparable<T>> void putOrdinalsInPosition(List<T> list, Collection<Integer> ordinals) {\n    int size = list.size();\n    if (size == 0) {\n      return;\n    }\n\n    int[] ords = new int[ordinals.size()];\n    int i = 0;\n    for (int ord : ordinals) {\n      ords[i++] = ord;\n    }\n    ords = Arrays.stream(ords).sorted().filter( ord -> ord >= 0 && ord < size).toArray();\n\n    distributeAndFind(list, ords, 0, ords.length - 1);\n  }\n\n","sourceOld":"  /**\n   * Calculates a set of ordinal values for a given list of comparable objects.\n   * Once the method returns, the each ordinal is guaranteed to have the correct value in the list.\n   *\n   * @param list the list of {@link Comparable} objects\n   * @param ordinals the collection ordinals to calculate (0 to (size of list) - 1) \n   */\n  public static <T extends Comparable<T>> void putOrdinalsInPosition(List<T> list, Collection<Integer> ordinals) {\n    int size = list.size();\n    if (size == 0) {\n      return;\n    }\n\n    int[] ords = new int[ordinals.size()];\n    int i = 0;\n    for (int ord : ordinals) {\n      ords[i++] = ord;\n    }\n    Arrays.sort(ords);\n\n    if (ords[0] < 0 || ords[ords.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n    distributeAndFind(list, ords, 0, ords.length - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_putOrdinalsInPosition(List[T],Collection[Integer]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_putOrdinalsInPosition(List[T],Collection[Integer]).mjava","sourceNew":"  /**\n   * Calculates a set of ordinal values for a given list of comparable objects.\n   * Once the method returns, the each ordinal is guaranteed to have the correct value in the list.\n   *\n   * @param list the list of {@link Comparable} objects\n   * @param ordinals the collection ordinals to calculate (0 to (size of list) - 1)\n   */\n  public static <T extends Comparable<T>> void putOrdinalsInPosition(List<T> list, Collection<Integer> ordinals) {\n    int size = list.size();\n    if (size == 0) {\n      return;\n    }\n\n    int[] ords = new int[ordinals.size()];\n    int i = 0;\n    for (int ord : ordinals) {\n      ords[i++] = ord;\n    }\n    ords = Arrays.stream(ords).sorted().filter( ord -> ord >= 0 && ord < size).toArray();\n\n    distributeAndFind(list, ords, 0, ords.length - 1);\n  }\n\n","sourceOld":"  /**\n   * Calculates a set of ordinal values for a given list of comparable objects.\n   * Once the method returns, the each ordinal is guaranteed to have the correct value in the list.\n   *\n   * @param list the list of {@link Comparable} objects\n   * @param ordinals the collection ordinals to calculate (0 to (size of list) - 1) \n   */\n  public static <T extends Comparable<T>> void putOrdinalsInPosition(List<T> list, Collection<Integer> ordinals) {\n    int size = list.size();\n    if (size == 0) {\n      return;\n    }\n\n    int[] ords = new int[ordinals.size()];\n    int i = 0;\n    for (int ord : ordinals) {\n      ords[i++] = ord;\n    }\n    ords = Arrays.stream(ords).sorted().filter( ord -> ord >= 0 && ord < size).toArray();\n\n    distributeAndFind(list, ords, 0, ords.length - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_putOrdinalsInPosition(List[T],Collection[Integer]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator#[T-extends-Comparable[T]]_putOrdinalsInPosition(List[T],Collection[Integer]).mjava","sourceNew":"  /**\n   * Calculates a set of ordinal values for a given list of comparable objects.\n   * Once the method returns, the each ordinal is guaranteed to have the correct value in the list.\n   *\n   * @param list the list of {@link Comparable} objects\n   * @param ordinals the collection ordinals to calculate (0 to (size of list) - 1)\n   */\n  public static <T extends Comparable<T>> void putOrdinalsInPosition(List<T> list, Collection<Integer> ordinals) {\n    int size = list.size();\n    if (size == 0) {\n      return;\n    }\n\n    int[] ords = new int[ordinals.size()];\n    int i = 0;\n    for (int ord : ordinals) {\n      ords[i++] = ord;\n    }\n    ords = Arrays.stream(ords).sorted().filter( ord -> ord >= 0 && ord < size).toArray();\n\n    distributeAndFind(list, ords, 0, ords.length - 1);\n  }\n\n","sourceOld":"  /**\n   * Calculates a set of ordinal values for a given list of comparable objects.\n   * Once the method returns, the each ordinal is guaranteed to have the correct value in the list.\n   *\n   * @param list the list of {@link Comparable} objects\n   * @param ordinals the collection ordinals to calculate (0 to (size of list) - 1) \n   */\n  public static <T extends Comparable<T>> void putOrdinalsInPosition(List<T> list, Collection<Integer> ordinals) {\n    int size = list.size();\n    if (size == 0) {\n      return;\n    }\n\n    int[] ords = new int[ordinals.size()];\n    int i = 0;\n    for (int ord : ordinals) {\n      ords[i++] = ord;\n    }\n    ords = Arrays.stream(ords).sorted().filter( ord -> ord >= 0 && ord < size).toArray();\n\n    distributeAndFind(list, ords, 0, ords.length - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}