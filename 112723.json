{"path":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","commits":[{"id":"36da5ede9e3eeda991aaf13a31735c5405c30b4e","date":1509403106,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0 || assertingWeight.boost < 0;\n        return score;\n      }\n\n      @Override\n      public float computeSlopFactor(int distance) {\n        // distance in bounds\n        assert distance >= 0;\n        // result in bounds\n        float slopFactor = delegateScorer.computeSlopFactor(distance);\n        assert Float.isFinite(slopFactor);\n        assert slopFactor > 0;\n        assert slopFactor <= 1;\n        return slopFactor;\n      }\n\n      @Override\n      public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // payload in bounds\n        assert start >= 0;\n        assert end >= start;\n        assert payload.isValid();\n        assert end <= payload.length;\n        // result in bounds\n        float payloadFactor = delegateScorer.computePayloadFactor(doc, start, end, payload);\n        assert Float.isFinite(payloadFactor);\n        assert payloadFactor >= 0;\n        return payloadFactor;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c220b8b8957b9354ac843bc0c6b07640688b757a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c220b8b8957b9354ac843bc0c6b07640688b757a","date":1509503433,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0 || assertingWeight.boost < 0;\n        return score;\n      }\n\n      @Override\n      public float computeSlopFactor(int distance) {\n        // distance in bounds\n        assert distance >= 0;\n        // result in bounds\n        float slopFactor = delegateScorer.computeSlopFactor(distance);\n        assert Float.isFinite(slopFactor);\n        assert slopFactor > 0;\n        assert slopFactor <= 1;\n        return slopFactor;\n      }\n\n      @Override\n      public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // payload in bounds\n        assert payload.isValid();\n        // position range in bounds\n        assert start >= 0;\n        assert start != Spans.NO_MORE_POSITIONS;\n        assert end > start;\n        // result in bounds\n        float payloadFactor = delegateScorer.computePayloadFactor(doc, start, end, payload);\n        assert Float.isFinite(payloadFactor);\n        assert payloadFactor >= 0;\n        return payloadFactor;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0 || assertingWeight.boost < 0;\n        return score;\n      }\n\n      @Override\n      public float computeSlopFactor(int distance) {\n        // distance in bounds\n        assert distance >= 0;\n        // result in bounds\n        float slopFactor = delegateScorer.computeSlopFactor(distance);\n        assert Float.isFinite(slopFactor);\n        assert slopFactor > 0;\n        assert slopFactor <= 1;\n        return slopFactor;\n      }\n\n      @Override\n      public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // payload in bounds\n        assert start >= 0;\n        assert end >= start;\n        assert payload.isValid();\n        assert end <= payload.length;\n        // result in bounds\n        float payloadFactor = delegateScorer.computePayloadFactor(doc, start, end, payload);\n        assert Float.isFinite(payloadFactor);\n        assert payloadFactor >= 0;\n        return payloadFactor;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","bugFix":["36da5ede9e3eeda991aaf13a31735c5405c30b4e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"136d4e97e5588b3f560e4d157962baa796f6c259","date":1510236334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0 || assertingWeight.boost < 0;\n        return score;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0 || assertingWeight.boost < 0;\n        return score;\n      }\n\n      @Override\n      public float computeSlopFactor(int distance) {\n        // distance in bounds\n        assert distance >= 0;\n        // result in bounds\n        float slopFactor = delegateScorer.computeSlopFactor(distance);\n        assert Float.isFinite(slopFactor);\n        assert slopFactor > 0;\n        assert slopFactor <= 1;\n        return slopFactor;\n      }\n\n      @Override\n      public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // payload in bounds\n        assert payload.isValid();\n        // position range in bounds\n        assert start >= 0;\n        assert start != Spans.NO_MORE_POSITIONS;\n        assert end > start;\n        // result in bounds\n        float payloadFactor = delegateScorer.computePayloadFactor(doc, start, end, payload);\n        assert Float.isFinite(payloadFactor);\n        assert payloadFactor >= 0;\n        return payloadFactor;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"297201ceb6f93f54f44df6d02cdc988591428b75","date":1510304523,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0 || assertingWeight.boost < 0;\n        return score;\n      }\n\n      @Override\n      public float computeSlopFactor(int distance) {\n        // distance in bounds\n        assert distance >= 0;\n        // result in bounds\n        float slopFactor = delegateScorer.computeSlopFactor(distance);\n        assert Float.isFinite(slopFactor);\n        assert slopFactor > 0;\n        assert slopFactor <= 1;\n        return slopFactor;\n      }\n\n      @Override\n      public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // payload in bounds\n        assert payload.isValid();\n        // position range in bounds\n        assert start >= 0;\n        assert start != Spans.NO_MORE_POSITIONS;\n        assert end > start;\n        // result in bounds\n        float payloadFactor = delegateScorer.computePayloadFactor(doc, start, end, payload);\n        assert Float.isFinite(payloadFactor);\n        assert payloadFactor >= 0;\n        return payloadFactor;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0 || assertingWeight.boost < 0;\n        return score;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9b82182bcb9110d24f7de32032113dbf31606c2","date":1510306998,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0 || assertingWeight.boost < 0;\n        return score;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0 || assertingWeight.boost < 0;\n        return score;\n      }\n\n      @Override\n      public float computeSlopFactor(int distance) {\n        // distance in bounds\n        assert distance >= 0;\n        // result in bounds\n        float slopFactor = delegateScorer.computeSlopFactor(distance);\n        assert Float.isFinite(slopFactor);\n        assert slopFactor > 0;\n        assert slopFactor <= 1;\n        return slopFactor;\n      }\n\n      @Override\n      public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // payload in bounds\n        assert payload.isValid();\n        // position range in bounds\n        assert start >= 0;\n        assert start != Spans.NO_MORE_POSITIONS;\n        assert end > start;\n        // result in bounds\n        float payloadFactor = delegateScorer.computePayloadFactor(doc, start, end, payload);\n        assert Float.isFinite(payloadFactor);\n        assert payloadFactor >= 0;\n        return payloadFactor;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0;\n        return score;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0 || assertingWeight.boost < 0;\n        return score;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        assert score <= maxScore(freq);\n        assert score >= 0;\n        return score;\n      }\n\n      @Override\n      public float maxScore(float maxFreq) {\n        float maxScore = delegateScorer.maxScore(maxFreq);\n        assert Float.isNaN(maxScore) == false;\n        return maxScore;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0;\n        return score;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        assert score <= maxScore(freq);\n        assert score >= 0;\n        return score;\n      }\n\n      @Override\n      public float maxScore(float maxFreq) {\n        float maxScore = delegateScorer.maxScore(maxFreq);\n        assert Float.isNaN(maxScore) == false;\n        return maxScore;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        // TODO: some tests have negative boosts today\n        assert score >= 0;\n        return score;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        assert score <= maxScore(freq);\n        assert score >= 0;\n        return score;\n      }\n\n      @Override\n      public float maxScore(float maxFreq) {\n        float maxScore = delegateScorer.maxScore(maxFreq);\n        assert Float.isNaN(maxScore) == false;\n        return maxScore;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue().floatValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue().floatValue());\n        // result matches score exactly\n        assert explanation.getValue().floatValue() == delegateScorer.score(doc, freq.getValue().floatValue());\n        return explanation;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        assert score <= maxScore(freq);\n        assert score >= 0;\n        return score;\n      }\n\n      @Override\n      public float maxScore(float maxFreq) {\n        float maxScore = delegateScorer.maxScore(maxFreq);\n        assert Float.isNaN(maxScore) == false;\n        return maxScore;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue());\n        // result matches score exactly\n        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());\n        return explanation;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        assert score <= maxScore(freq);\n        assert score >= 0;\n        return score;\n      }\n\n      @Override\n      public float maxScore(float maxFreq) {\n        float maxScore = delegateScorer.maxScore(maxFreq);\n        assert Float.isNaN(maxScore) == false;\n        return maxScore;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue().floatValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue().floatValue());\n        // result matches score exactly\n        assert explanation.getValue().floatValue() == delegateScorer.score(doc, freq.getValue().floatValue());\n        return explanation;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity#simScorer(SimWeight,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {\n    assert weight != null;\n    assert context != null;\n    AssertingWeight assertingWeight = (AssertingWeight)weight;\n    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);\n    assert delegateScorer != null;\n\n    return new SimScorer() {\n      @Override\n      public float score(int doc, float freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds\n        assert Float.isFinite(freq);\n        assert freq > 0;\n        // result in bounds\n        float score = delegateScorer.score(doc, freq);\n        assert Float.isFinite(score);\n        assert score <= maxScore(freq);\n        assert score >= 0;\n        return score;\n      }\n\n      @Override\n      public float maxScore(float maxFreq) {\n        float maxScore = delegateScorer.maxScore(maxFreq);\n        assert Float.isNaN(maxScore) == false;\n        return maxScore;\n      }\n\n      @Override\n      public Explanation explain(int doc, Explanation freq) throws IOException {\n        // doc in bounds\n        assert doc >= 0;\n        assert doc < context.reader().maxDoc();\n        // freq in bounds \n        assert freq != null;\n        assert Float.isFinite(freq.getValue().floatValue());\n        // result in bounds\n        Explanation explanation = delegateScorer.explain(doc, freq);\n        assert explanation != null;\n        assert Float.isFinite(explanation.getValue().floatValue());\n        // result matches score exactly\n        assert explanation.getValue().floatValue() == delegateScorer.score(doc, freq.getValue().floatValue());\n        return explanation;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c220b8b8957b9354ac843bc0c6b07640688b757a":["36da5ede9e3eeda991aaf13a31735c5405c30b4e"],"b94236357aaa22b76c10629851fe4e376e0cea82":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["b9b82182bcb9110d24f7de32032113dbf31606c2"],"36da5ede9e3eeda991aaf13a31735c5405c30b4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"417142ff08fda9cf0b72d5133e63097a166c6458":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","9fc47cb7b4346802411bb432f501ed0673d7119e"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"b9b82182bcb9110d24f7de32032113dbf31606c2":["297201ceb6f93f54f44df6d02cdc988591428b75"],"297201ceb6f93f54f44df6d02cdc988591428b75":["136d4e97e5588b3f560e4d157962baa796f6c259"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"136d4e97e5588b3f560e4d157962baa796f6c259":["c220b8b8957b9354ac843bc0c6b07640688b757a"]},"commit2Childs":{"c220b8b8957b9354ac843bc0c6b07640688b757a":["136d4e97e5588b3f560e4d157962baa796f6c259"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"36da5ede9e3eeda991aaf13a31735c5405c30b4e":["c220b8b8957b9354ac843bc0c6b07640688b757a"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36da5ede9e3eeda991aaf13a31735c5405c30b4e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"b9b82182bcb9110d24f7de32032113dbf31606c2":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"297201ceb6f93f54f44df6d02cdc988591428b75":["b9b82182bcb9110d24f7de32032113dbf31606c2"],"136d4e97e5588b3f560e4d157962baa796f6c259":["297201ceb6f93f54f44df6d02cdc988591428b75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}