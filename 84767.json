{"path":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"103857ec20f79f31c7a00310a91ed001b9a6ef17","date":1412698959,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":["985161df9b1c14b4aa862d74d48cf51561579e62"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final long count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":["2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final long count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final long count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final long count = s.count(new TermQuery(new Term(\"field\", term)));\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final long count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final long count = s.count(new TermQuery(new Term(\"field\", term)));\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final long count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiTerms.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final long count = s.count(new TermQuery(new Term(\"field\", term)));\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = newSearcher(r);\n    Collections.shuffle(terms, random());\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random().nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final long count = s.count(new TermQuery(new Term(\"field\", term)));\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["103857ec20f79f31c7a00310a91ed001b9a6ef17"],"55980207f1977bd1463465de1659b821347e2fa8":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","103857ec20f79f31c7a00310a91ed001b9a6ef17"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","470eaac3a77cf637b62126a5408b178d7be93eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"103857ec20f79f31c7a00310a91ed001b9a6ef17":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["470eaac3a77cf637b62126a5408b178d7be93eb1"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["28288370235ed02234a64753cdbf0c6ec096304a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"55980207f1977bd1463465de1659b821347e2fa8":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["55980207f1977bd1463465de1659b821347e2fa8","103857ec20f79f31c7a00310a91ed001b9a6ef17"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"103857ec20f79f31c7a00310a91ed001b9a6ef17":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","55980207f1977bd1463465de1659b821347e2fa8"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}