{"path":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(int,DataInput,int,int).mjava","commits":[{"id":"c661dcad9680b8a6ce5bf2cc583a69ec965328bc","date":1352297862,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(int,DataInput,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#Packed64(DataInput,int,int).mjava","sourceNew":"  /**\n   * Creates an array with content retrieved from the given DataInput.\n   * @param in       a DataInput, positioned at the start of Packed64-content.\n   * @param valueCount  the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @throws java.io.IOException if the values for the backing array could not\n   *                             be retrieved.\n   */\n  public Packed64(int packedIntsVersion, DataInput in, int valueCount, int bitsPerValue)\n                                                            throws IOException {\n    super(valueCount, bitsPerValue);\n    final PackedInts.Format format = PackedInts.Format.PACKED;\n    final long byteCount = format.byteCount(packedIntsVersion, valueCount, bitsPerValue); // to know how much to read\n    final int longCount = format.longCount(PackedInts.VERSION_CURRENT, valueCount, bitsPerValue); // to size the array\n    blocks = new long[longCount];\n    // read as many longs as we can\n    for (int i = 0; i < byteCount / 8; ++i) {\n      blocks[i] = in.readLong();\n    }\n    final int remaining = (int) (byteCount % 8);\n    if (remaining != 0) {\n      // read the last bytes\n      long lastLong = 0;\n      for (int i = 0; i < remaining; ++i) {\n        lastLong |= (in.readByte() & 0xFFL) << (56 - i * 8);\n      }\n      blocks[blocks.length - 1] = lastLong;\n    }\n    maskRight = ~0L << (BLOCK_SIZE-bitsPerValue) >>> (BLOCK_SIZE-bitsPerValue);\n    bpvMinusBlockSize = bitsPerValue - BLOCK_SIZE;\n  }\n\n","sourceOld":"  /**\n   * Creates an array with content retrieved from the given DataInput.\n   * @param in       a DataInput, positioned at the start of Packed64-content.\n   * @param valueCount  the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @throws java.io.IOException if the values for the backing array could not\n   *                             be retrieved.\n   */\n  public Packed64(DataInput in, int valueCount, int bitsPerValue)\n                                                            throws IOException {\n    super(valueCount, bitsPerValue);\n    int size = size(valueCount, bitsPerValue);\n    blocks = new long[size]; // Previously +1 due to non-conditional tricks\n    for(int i=0;i<size;i++) {\n      blocks[i] = in.readLong();\n    }\n    maskRight = ~0L << (BLOCK_SIZE-bitsPerValue) >>> (BLOCK_SIZE-bitsPerValue);\n    bpvMinusBlockSize = bitsPerValue - BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}