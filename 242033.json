{"path":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","pathOld":"/dev/null","sourceNew":"  // specific to this type of document builder\n  public Document getDoc() {\n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf460de117c67053b6fb9141cc7c778e81e5ef54","date":1168027938,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","sourceNew":"  // specific to this type of document builder\n  public Document getDoc() {\n\t  \n    // Check for default fields in our schema...\n    for( SchemaField field : schema.getFieldsWithDefaultValue() ) {\n      if( doc.getField( field.getName() ) == null ) {\n        doc.add( field.createField( field.getDefaultValue(), 1.0f ) );\n      }\n    }\n\t  \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","sourceOld":"  // specific to this type of document builder\n  public Document getDoc() {\n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22","date":1177887783,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","sourceNew":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = new ArrayList<String>( schema.getRequiredFields().size() );\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          doc.add( field.createField( field.getDefaultValue(), 1.0f ) );\n        } else {\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields.size() > 0) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException(400, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","sourceOld":"  // specific to this type of document builder\n  public Document getDoc() {\n\t  \n    // Check for default fields in our schema...\n    for( SchemaField field : schema.getFieldsWithDefaultValue() ) {\n      if( doc.getField( field.getName() ) == null ) {\n        doc.add( field.createField( field.getDefaultValue(), 1.0f ) );\n      }\n    }\n\t  \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","sourceNew":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = new ArrayList<String>( schema.getRequiredFields().size() );\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          doc.add( field.createField( field.getDefaultValue(), 1.0f ) );\n        } else {\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields.size() > 0) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","sourceOld":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = new ArrayList<String>( schema.getRequiredFields().size() );\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          doc.add( field.createField( field.getDefaultValue(), 1.0f ) );\n        } else {\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields.size() > 0) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException(400, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd1b5cc13e2ad6adfe55db8cf8a0d81077563f4","date":1182923522,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","sourceNew":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          doc.add( field.createField( field.getDefaultValue(), 1.0f ) );\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","sourceOld":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = new ArrayList<String>( schema.getRequiredFields().size() );\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          doc.add( field.createField( field.getDefaultValue(), 1.0f ) );\n        } else {\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields.size() > 0) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","sourceNew":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","sourceOld":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          doc.add( field.createField( field.getDefaultValue(), 1.0f ) );\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","pathOld":"src/java/org/apache/solr/update/DocumentBuilder#getDoc().mjava","sourceNew":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","sourceOld":"  // specific to this type of document builder\n  public Document getDoc() throws IllegalArgumentException {\n    \n    // Check for all required fields -- Note, all fields with a\n    // default value are defacto 'required' fields.  \n    List<String> missingFields = null;\n    for (SchemaField field : schema.getRequiredFields()) {\n      if (doc.getField(field.getName() ) == null) {\n        if (field.getDefaultValue() != null) {\n          addField(doc, field, field.getDefaultValue(), 1.0f);\n        } else {\n          if (missingFields==null) {\n            missingFields = new ArrayList<String>(1);\n          }\n          missingFields.add(field.getName());\n        }\n      }\n    }\n  \n    if (missingFields != null) {\n      StringBuilder builder = new StringBuilder();\n      // add the uniqueKey if possible\n      if( schema.getUniqueKeyField() != null ) {\n        String n = schema.getUniqueKeyField().getName();\n        String v = doc.get( n );\n        builder.append( \"Document [\"+n+\"=\"+v+\"] \" );\n      }\n      builder.append(\"missing required fields: \" );\n      for (String field : missingFields) {\n        builder.append(field);\n        builder.append(\" \");\n      }\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, builder.toString());\n    }\n    \n    Document ret = doc; doc=null;\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["0cd1b5cc13e2ad6adfe55db8cf8a0d81077563f4"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"0cd1b5cc13e2ad6adfe55db8cf8a0d81077563f4":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22":["bf460de117c67053b6fb9141cc7c778e81e5ef54"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["335d5ef4d54c2861b4ebdc7244bd81278f1c1d22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bf460de117c67053b6fb9141cc7c778e81e5ef54":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["ad94625fb8d088209f46650c8097196fec67f00c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["bf460de117c67053b6fb9141cc7c778e81e5ef54"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"0cd1b5cc13e2ad6adfe55db8cf8a0d81077563f4":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["0cd1b5cc13e2ad6adfe55db8cf8a0d81077563f4"],"bf460de117c67053b6fb9141cc7c778e81e5ef54":["335d5ef4d54c2861b4ebdc7244bd81278f1c1d22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}