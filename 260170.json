{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","sourceNew":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdfd4a8fd5df3958475e4dde3633adb237373a27","date":1412166431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","sourceNew":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","sourceNew":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","sourceNew":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","sourceNew":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      CodecUtil.writeIndexHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      CodecUtil.writeSegmentHeader(out, CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cdfd4a8fd5df3958475e4dde3633adb237373a27":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"9bb9a29a5e71a90295f175df8919802993142c9a":["038e2a9b07e2f8ae58336613cea227bf8b973484","cdfd4a8fd5df3958475e4dde3633adb237373a27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["cdfd4a8fd5df3958475e4dde3633adb237373a27"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cdfd4a8fd5df3958475e4dde3633adb237373a27":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["cdfd4a8fd5df3958475e4dde3633adb237373a27","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}