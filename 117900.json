{"path":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.getParamSubstitute(param);\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.getParamNames(co).iterator();\n\n          }\n\n\n        });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.getParamSubstitute(param);\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.getParamNames(co).iterator();\n\n          }\n\n\n        });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d21112928e2aedcec0c17025bc0e91f8fcfcf30","date":1494423367,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","sourceNew":"  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.meta().getParamSubstitute(param);\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.meta().getParamNames(co).iterator();\n\n          }\n\n\n        });\n\n  }\n\n","sourceOld":"  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.getParamSubstitute(param);\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.getParamNames(co).iterator();\n\n          }\n\n\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","sourceNew":"  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.meta().getParamSubstitute(param);\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.meta().getParamNames(co).iterator();\n\n          }\n\n\n        });\n\n  }\n\n","sourceOld":"  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.getParamSubstitute(param);\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.getParamNames(co).iterator();\n\n          }\n\n\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26de7f978abe868807e55377d3e5837c0a7883d3","date":1516908224,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","sourceNew":"  /**\n   * Wrapper for SolrParams that wraps V2 params and exposes them as V1 params.\n   */\n  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.meta().getParamSubstitute(param); // v1 -> v2, possibly dotted path\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.meta().getParamNamesIterator(co);\n          }\n\n        });\n\n  }\n\n","sourceOld":"  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.meta().getParamSubstitute(param);\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.meta().getParamNames(co).iterator();\n\n          }\n\n\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","sourceNew":"  /**\n   * Wrapper for SolrParams that wraps V2 params and exposes them as V1 params.\n   */\n  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.meta().getParamSubstitute(param); // v1 -> v2, possibly dotted path\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.meta().getParamNamesIterator(co);\n          }\n\n          @Override\n          public Map toMap(Map<String, Object> suppliedMap) {\n            for(Iterator<String> it=getParameterNamesIterator(); it.hasNext(); ) {\n              final String param = it.next();\n              String key = cmd.meta().getParamSubstitute(param);\n              Object o = key.indexOf('.') > 0 ?\n                  Utils.getObjectByPath(map, true, splitSmart(key, '.')) :\n                  map.get(key);\n              if (o == null) o = pathValues.get(key);\n              if (o == null && useRequestParams) o = origParams.getParams(key);\n              // make strings out of as many things as we can now to minimize differences from\n              // the standard impls that pass through a NamedList/SimpleOrderedMap...\n              Class<?> oClass = o.getClass();\n              if (oClass.isPrimitive() ||\n                  Number.class.isAssignableFrom(oClass) ||\n                  Character.class.isAssignableFrom(oClass) ||\n                  Boolean.class.isAssignableFrom(oClass)) {\n                suppliedMap.put(param,String.valueOf(o));\n              } else if (List.class.isAssignableFrom(oClass) && ((List)o).get(0) instanceof String ) {\n                List<String> l = (List<String>) o;\n                suppliedMap.put( param, l.toArray(new String[0]));\n              } else {\n                // Lists pass through but will require special handling downstream\n                // if they contain non-string elements.\n                suppliedMap.put(param, o);\n              }\n            }\n            return suppliedMap;\n          }\n        });\n\n  }\n\n","sourceOld":"  /**\n   * Wrapper for SolrParams that wraps V2 params and exposes them as V1 params.\n   */\n  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.meta().getParamSubstitute(param); // v1 -> v2, possibly dotted path\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.meta().getParamNamesIterator(co);\n          }\n\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#wrapParams(SolrQueryRequest,CommandOperation,ApiCommand,boolean).mjava","sourceNew":"  /**\n   * Wrapper for SolrParams that wraps V2 params and exposes them as V1 params.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.meta().getParamSubstitute(param); // v1 -> v2, possibly dotted path\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              @SuppressWarnings({\"rawtypes\"})\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.meta().getParamNamesIterator(co);\n          }\n\n          @Override\n          public Map<String, Object> toMap(Map<String, Object> suppliedMap) {\n            for(Iterator<String> it=getParameterNamesIterator(); it.hasNext(); ) {\n              final String param = it.next();\n              String key = cmd.meta().getParamSubstitute(param);\n              Object o = key.indexOf('.') > 0 ?\n                  Utils.getObjectByPath(map, true, splitSmart(key, '.')) :\n                  map.get(key);\n              if (o == null) o = pathValues.get(key);\n              if (o == null && useRequestParams) o = origParams.getParams(key);\n              // make strings out of as many things as we can now to minimize differences from\n              // the standard impls that pass through a NamedList/SimpleOrderedMap...\n              Class<?> oClass = o.getClass();\n              if (oClass.isPrimitive() ||\n                  Number.class.isAssignableFrom(oClass) ||\n                  Character.class.isAssignableFrom(oClass) ||\n                  Boolean.class.isAssignableFrom(oClass)) {\n                suppliedMap.put(param,String.valueOf(o));\n              } else if (List.class.isAssignableFrom(oClass) && ((List)o).get(0) instanceof String ) {\n                @SuppressWarnings({\"unchecked\"})\n                List<String> l = (List<String>) o;\n                suppliedMap.put( param, l.toArray(new String[0]));\n              } else {\n                // Lists pass through but will require special handling downstream\n                // if they contain non-string elements.\n                suppliedMap.put(param, o);\n              }\n            }\n            return suppliedMap;\n          }\n        });\n\n  }\n\n","sourceOld":"  /**\n   * Wrapper for SolrParams that wraps V2 params and exposes them as V1 params.\n   */\n  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {\n    final Map<String, String> pathValues = req.getPathTemplateValues();\n    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?\n        Collections.singletonMap(\"\", co.getCommandData()) : co.getDataMap();\n    final SolrParams origParams = req.getParams();\n\n    req.setParams(\n        new SolrParams() {\n          @Override\n          public String get(String param) {\n            Object vals = getParams0(param);\n            if (vals == null) return null;\n            if (vals instanceof String) return (String) vals;\n            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);\n            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];\n            return null;\n          }\n\n          private Object getParams0(String param) {\n            param = cmd.meta().getParamSubstitute(param); // v1 -> v2, possibly dotted path\n            Object o = param.indexOf('.') > 0 ?\n                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :\n                map.get(param);\n            if (o == null) o = pathValues.get(param);\n            if (o == null && useRequestParams) o = origParams.getParams(param);\n            if (o instanceof List) {\n              List l = (List) o;\n              return l.toArray(new String[l.size()]);\n            }\n\n            return o;\n          }\n\n          @Override\n          public String[] getParams(String param) {\n            Object vals = getParams0(param);\n            return vals == null || vals instanceof String[] ?\n                (String[]) vals :\n                new String[]{vals.toString()};\n          }\n\n          @Override\n          public Iterator<String> getParameterNamesIterator() {\n            return cmd.meta().getParamNamesIterator(co);\n          }\n\n          @Override\n          public Map toMap(Map<String, Object> suppliedMap) {\n            for(Iterator<String> it=getParameterNamesIterator(); it.hasNext(); ) {\n              final String param = it.next();\n              String key = cmd.meta().getParamSubstitute(param);\n              Object o = key.indexOf('.') > 0 ?\n                  Utils.getObjectByPath(map, true, splitSmart(key, '.')) :\n                  map.get(key);\n              if (o == null) o = pathValues.get(key);\n              if (o == null && useRequestParams) o = origParams.getParams(key);\n              // make strings out of as many things as we can now to minimize differences from\n              // the standard impls that pass through a NamedList/SimpleOrderedMap...\n              Class<?> oClass = o.getClass();\n              if (oClass.isPrimitive() ||\n                  Number.class.isAssignableFrom(oClass) ||\n                  Character.class.isAssignableFrom(oClass) ||\n                  Boolean.class.isAssignableFrom(oClass)) {\n                suppliedMap.put(param,String.valueOf(o));\n              } else if (List.class.isAssignableFrom(oClass) && ((List)o).get(0) instanceof String ) {\n                List<String> l = (List<String>) o;\n                suppliedMap.put( param, l.toArray(new String[0]));\n              } else {\n                // Lists pass through but will require special handling downstream\n                // if they contain non-string elements.\n                suppliedMap.put(param, o);\n              }\n            }\n            return suppliedMap;\n          }\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"ba055e19afc289adcb5bedaf68513793a7254012":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["26de7f978abe868807e55377d3e5837c0a7883d3"],"26de7f978abe868807e55377d3e5837c0a7883d3":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["e9017cf144952056066919f1ebc7897ff9bd71b1","26de7f978abe868807e55377d3e5837c0a7883d3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["ba055e19afc289adcb5bedaf68513793a7254012"],"26de7f978abe868807e55377d3e5837c0a7883d3":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}