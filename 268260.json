{"path":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","pathOld":"/dev/null","sourceNew":"\tprivate float query(Object index, Query query) {\n//\t\tSystem.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n\t\tSearcher searcher = null;\n\t\ttry {\n\t\t\tif (index instanceof Directory)\n\t\t\t\tsearcher = new IndexSearcher((Directory)index);\n\t\t\telse \n\t\t\t\tsearcher = ((MemoryIndex) index).createSearcher();\n\n\t\t\tfinal float[] scores = new float[1]; // inits to 0.0f\n\t\t\tsearcher.search(query, new HitCollector() {\n\t\t\t\tpublic void collect(int doc, float score) {\n\t\t\t\t\tscores[0] = score;\n\t\t\t\t}\n\t\t\t});\n\t\t\tfloat score = scores[0];\n//\t\t\tHits hits = searcher.search(query);\n//\t\t\tfloat score = hits.length() > 0 ? hits.score(0) : 0.0f;\n\t\t\treturn score;\n\t\t} catch (IOException e) { // should never happen (RAMDirectory)\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (searcher != null) searcher.close();\n\t\t\t} catch (IOException e) { // should never happen (RAMDirectory)\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","sourceNew":"  private float query(Object index, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    Searcher searcher = null;\n    try {\n      if (index instanceof Directory)\n        searcher = new IndexSearcher((Directory)index);\n      else \n        searcher = ((MemoryIndex) index).createSearcher();\n\n      final float[] scores = new float[1]; // inits to 0.0f\n      searcher.search(query, new HitCollector() {\n        public void collect(int doc, float score) {\n          scores[0] = score;\n        }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    } finally {\n      try {\n        if (searcher != null) searcher.close();\n      } catch (IOException e) { // should never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"\tprivate float query(Object index, Query query) {\n//\t\tSystem.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n\t\tSearcher searcher = null;\n\t\ttry {\n\t\t\tif (index instanceof Directory)\n\t\t\t\tsearcher = new IndexSearcher((Directory)index);\n\t\t\telse \n\t\t\t\tsearcher = ((MemoryIndex) index).createSearcher();\n\n\t\t\tfinal float[] scores = new float[1]; // inits to 0.0f\n\t\t\tsearcher.search(query, new HitCollector() {\n\t\t\t\tpublic void collect(int doc, float score) {\n\t\t\t\t\tscores[0] = score;\n\t\t\t\t}\n\t\t\t});\n\t\t\tfloat score = scores[0];\n//\t\t\tHits hits = searcher.search(query);\n//\t\t\tfloat score = hits.length() > 0 ? hits.score(0) : 0.0f;\n\t\t\treturn score;\n\t\t} catch (IOException e) { // should never happen (RAMDirectory)\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (searcher != null) searcher.close();\n\t\t\t} catch (IOException e) { // should never happen (RAMDirectory)\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","sourceNew":"  private float query(Object index, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    Searcher searcher = null;\n    try {\n      if (index instanceof Directory)\n        searcher = new IndexSearcher((Directory)index, true);\n      else \n        searcher = ((MemoryIndex) index).createSearcher();\n\n      final float[] scores = new float[1]; // inits to 0.0f\n      searcher.search(query, new HitCollector() {\n        public void collect(int doc, float score) {\n          scores[0] = score;\n        }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    } finally {\n      try {\n        if (searcher != null) searcher.close();\n      } catch (IOException e) { // should never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  private float query(Object index, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    Searcher searcher = null;\n    try {\n      if (index instanceof Directory)\n        searcher = new IndexSearcher((Directory)index);\n      else \n        searcher = ((MemoryIndex) index).createSearcher();\n\n      final float[] scores = new float[1]; // inits to 0.0f\n      searcher.search(query, new HitCollector() {\n        public void collect(int doc, float score) {\n          scores[0] = score;\n        }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    } finally {\n      try {\n        if (searcher != null) searcher.close();\n      } catch (IOException e) { // should never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61cbcf396559d597a914594d7e2830c142ecfd91","date":1255444081,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","sourceNew":"  private float query(Object index, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    Searcher searcher = null;\n    try {\n      if (index instanceof Directory)\n        searcher = new IndexSearcher((Directory)index, true);\n      else \n        searcher = ((MemoryIndex) index).createSearcher();\n\n      final float[] scores = new float[1]; // inits to 0.0f (no match)\n      searcher.search(query, new Collector() {\n        private Scorer scorer;\n\n        public void collect(int doc) throws IOException {\n          scores[0] = scorer.score();\n        }\n\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        public void setNextReader(IndexReader reader, int docBase) { }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    } finally {\n      try {\n        if (searcher != null) searcher.close();\n      } catch (IOException e) { // should never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  private float query(Object index, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    Searcher searcher = null;\n    try {\n      if (index instanceof Directory)\n        searcher = new IndexSearcher((Directory)index, true);\n      else \n        searcher = ((MemoryIndex) index).createSearcher();\n\n      final float[] scores = new float[1]; // inits to 0.0f\n      searcher.search(query, new HitCollector() {\n        public void collect(int doc, float score) {\n          scores[0] = score;\n        }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    } finally {\n      try {\n        if (searcher != null) searcher.close();\n      } catch (IOException e) { // should never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","sourceNew":"  private float query(Object index, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    Searcher searcher = null;\n    try {\n      if (index instanceof Directory)\n        searcher = new IndexSearcher((Directory)index, true);\n      else \n        searcher = ((MemoryIndex) index).createSearcher();\n\n      final float[] scores = new float[1]; // inits to 0.0f (no match)\n      searcher.search(query, new Collector() {\n        private Scorer scorer;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          scores[0] = scorer.score();\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase) { }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    } finally {\n      try {\n        if (searcher != null) searcher.close();\n      } catch (IOException e) { // should never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  private float query(Object index, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    Searcher searcher = null;\n    try {\n      if (index instanceof Directory)\n        searcher = new IndexSearcher((Directory)index, true);\n      else \n        searcher = ((MemoryIndex) index).createSearcher();\n\n      final float[] scores = new float[1]; // inits to 0.0f (no match)\n      searcher.search(query, new Collector() {\n        private Scorer scorer;\n\n        public void collect(int doc) throws IOException {\n          scores[0] = scorer.score();\n        }\n\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        public void setNextReader(IndexReader reader, int docBase) { }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    } finally {\n      try {\n        if (searcher != null) searcher.close();\n      } catch (IOException e) { // should never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(IndexSearcher,Query).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","sourceNew":"  private float query(IndexSearcher searcher, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    try {\n      searcher.search(query, new Collector() {\n        private Scorer scorer;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          scores[0] = scorer.score();\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase) { }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private float query(Object index, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    Searcher searcher = null;\n    try {\n      if (index instanceof Directory)\n        searcher = new IndexSearcher((Directory)index, true);\n      else \n        searcher = ((MemoryIndex) index).createSearcher();\n\n      final float[] scores = new float[1]; // inits to 0.0f (no match)\n      searcher.search(query, new Collector() {\n        private Scorer scorer;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          scores[0] = scorer.score();\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase) { }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    } finally {\n      try {\n        if (searcher != null) searcher.close();\n      } catch (IOException e) { // should never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61cbcf396559d597a914594d7e2830c142ecfd91":["4256bc1b3c94786287ccdfc751230374521843cf"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["61cbcf396559d597a914594d7e2830c142ecfd91"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4256bc1b3c94786287ccdfc751230374521843cf":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90cb6b3f4e5652555b614adc90204287fbebd27c"]},"commit2Childs":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"61cbcf396559d597a914594d7e2830c142ecfd91":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["4256bc1b3c94786287ccdfc751230374521843cf"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"4256bc1b3c94786287ccdfc751230374521843cf":["61cbcf396559d597a914594d7e2830c142ecfd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}