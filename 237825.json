{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerEventQueueTest#testSerialization().mjava","commits":[{"id":"976feb6756f29529c6ce5b578e7d6fa8b1efcb30","date":1535461878,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerEventQueueTest#testSerialization().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSerialization() throws Exception {\n    TriggerEventQueue queue = new TriggerEventQueue(cloudManager, \"test\", null);\n    Map<String, Number> hotHosts = new HashMap<>();\n    hotHosts.put(\"host1\", 1);\n    hotHosts.put(\"host2\", 1);\n    TriggerEvent ev = new MetricTrigger.MetricBreachedEvent(\"testTrigger\", \"testCollection\", \"shard1\",\n        CollectionParams.CollectionAction.ADDREPLICA.toLower(), cloudManager.getTimeSource().getTimeNs(),\n        \"foo\", hotHosts);\n    queue.offerEvent(ev);\n    ev = queue.pollEvent();\n    assertNotNull(ev);\n    Object ops = ev.getProperties().get(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertTrue(ops.getClass().getName(), ops instanceof List);\n    List<Object> requestedOps = (List<Object>)ops;\n    assertEquals(requestedOps.toString(), 2, requestedOps.size());\n    requestedOps.forEach(op -> {\n      assertTrue(op.getClass().getName(), op instanceof TriggerEvent.Op);\n      TriggerEvent.Op operation = (TriggerEvent.Op)op;\n      assertEquals(op.toString(), CollectionParams.CollectionAction.ADDREPLICA, operation.getAction());\n      EnumMap<Suggester.Hint, Object> hints = ((TriggerEvent.Op) op).getHints();\n      assertEquals(hints.toString(), 2, hints.size());\n      Object o = hints.get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(Suggester.Hint.COLL_SHARD.toString(), o);\n      assertTrue(o.getClass().getName(), o instanceof Collection);\n      Collection<Object> col = (Collection<Object>)o;\n      assertEquals(col.toString(), 1, col.size());\n      o = col.iterator().next();\n      assertTrue(o.getClass().getName(), o instanceof Pair);\n      o = hints.get(Suggester.Hint.SRC_NODE);\n      assertNotNull(Suggester.Hint.SRC_NODE.toString(), o);\n      assertTrue(o.getClass().getName(), o instanceof Collection);\n      col = (Collection<Object>)o;\n      assertEquals(col.toString(), 1, col.size());\n      o = col.iterator().next();\n      assertTrue(o.getClass().getName(), o instanceof String);\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerEventQueueTest#testSerialization().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerEventQueueTest#testSerialization().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSerialization() throws Exception {\n    TriggerEventQueue queue = new TriggerEventQueue(cloudManager, \"test\", null);\n    Map<String, Number> hotHosts = new HashMap<>();\n    hotHosts.put(\"host1\", 1);\n    hotHosts.put(\"host2\", 1);\n    TriggerEvent ev = new MetricTrigger.MetricBreachedEvent(\"testTrigger\", \"testCollection\", \"shard1\",\n        CollectionParams.CollectionAction.ADDREPLICA.toLower(), cloudManager.getTimeSource().getTimeNs(),\n        \"foo\", hotHosts);\n    queue.offerEvent(ev);\n    ev = queue.pollEvent();\n    assertNotNull(ev);\n    Object ops = ev.getProperties().get(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertTrue(ops.getClass().getName(), ops instanceof List);\n    List<Object> requestedOps = (List<Object>)ops;\n    assertEquals(requestedOps.toString(), 2, requestedOps.size());\n    requestedOps.forEach(op -> {\n      assertTrue(op.getClass().getName(), op instanceof TriggerEvent.Op);\n      TriggerEvent.Op operation = (TriggerEvent.Op)op;\n      assertEquals(op.toString(), CollectionParams.CollectionAction.ADDREPLICA, operation.getAction());\n      EnumMap<Suggester.Hint, Object> hints = ((TriggerEvent.Op) op).getHints();\n      assertEquals(hints.toString(), 2, hints.size());\n      Object o = hints.get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(Suggester.Hint.COLL_SHARD.toString(), o);\n      assertTrue(o.getClass().getName(), o instanceof Collection);\n      Collection<Object> col = (Collection<Object>)o;\n      assertEquals(col.toString(), 1, col.size());\n      o = col.iterator().next();\n      assertTrue(o.getClass().getName(), o instanceof Pair);\n      o = hints.get(Suggester.Hint.SRC_NODE);\n      assertNotNull(Suggester.Hint.SRC_NODE.toString(), o);\n      assertTrue(o.getClass().getName(), o instanceof Collection);\n      col = (Collection<Object>)o;\n      assertEquals(col.toString(), 1, col.size());\n      o = col.iterator().next();\n      assertTrue(o.getClass().getName(), o instanceof String);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testSerialization() throws Exception {\n    TriggerEventQueue queue = new TriggerEventQueue(cloudManager, \"test\", null);\n    Map<String, Number> hotHosts = new HashMap<>();\n    hotHosts.put(\"host1\", 1);\n    hotHosts.put(\"host2\", 1);\n    TriggerEvent ev = new MetricTrigger.MetricBreachedEvent(\"testTrigger\", \"testCollection\", \"shard1\",\n        CollectionParams.CollectionAction.ADDREPLICA.toLower(), cloudManager.getTimeSource().getTimeNs(),\n        \"foo\", hotHosts);\n    queue.offerEvent(ev);\n    ev = queue.pollEvent();\n    assertNotNull(ev);\n    Object ops = ev.getProperties().get(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertTrue(ops.getClass().getName(), ops instanceof List);\n    List<Object> requestedOps = (List<Object>)ops;\n    assertEquals(requestedOps.toString(), 2, requestedOps.size());\n    requestedOps.forEach(op -> {\n      assertTrue(op.getClass().getName(), op instanceof TriggerEvent.Op);\n      TriggerEvent.Op operation = (TriggerEvent.Op)op;\n      assertEquals(op.toString(), CollectionParams.CollectionAction.ADDREPLICA, operation.getAction());\n      EnumMap<Suggester.Hint, Object> hints = ((TriggerEvent.Op) op).getHints();\n      assertEquals(hints.toString(), 2, hints.size());\n      Object o = hints.get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(Suggester.Hint.COLL_SHARD.toString(), o);\n      assertTrue(o.getClass().getName(), o instanceof Collection);\n      Collection<Object> col = (Collection<Object>)o;\n      assertEquals(col.toString(), 1, col.size());\n      o = col.iterator().next();\n      assertTrue(o.getClass().getName(), o instanceof Pair);\n      o = hints.get(Suggester.Hint.SRC_NODE);\n      assertNotNull(Suggester.Hint.SRC_NODE.toString(), o);\n      assertTrue(o.getClass().getName(), o instanceof Collection);\n      col = (Collection<Object>)o;\n      assertEquals(col.toString(), 1, col.size());\n      o = col.iterator().next();\n      assertTrue(o.getClass().getName(), o instanceof String);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerEventQueueTest#testSerialization().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSerialization() throws Exception {\n    TriggerEventQueue queue = new TriggerEventQueue(cloudManager, \"test\", null);\n    Map<String, Number> hotHosts = new HashMap<>();\n    hotHosts.put(\"host1\", 1);\n    hotHosts.put(\"host2\", 1);\n    TriggerEvent ev = new MetricTrigger.MetricBreachedEvent(\"testTrigger\", \"testCollection\", \"shard1\",\n        CollectionParams.CollectionAction.ADDREPLICA.toLower(), cloudManager.getTimeSource().getTimeNs(),\n        \"foo\", hotHosts);\n    queue.offerEvent(ev);\n    ev = queue.pollEvent();\n    assertNotNull(ev);\n    Object ops = ev.getProperties().get(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(ops);\n    assertTrue(ops.getClass().getName(), ops instanceof List);\n    List<Object> requestedOps = (List<Object>)ops;\n    assertEquals(requestedOps.toString(), 2, requestedOps.size());\n    requestedOps.forEach(op -> {\n      assertTrue(op.getClass().getName(), op instanceof TriggerEvent.Op);\n      TriggerEvent.Op operation = (TriggerEvent.Op)op;\n      assertEquals(op.toString(), CollectionParams.CollectionAction.ADDREPLICA, operation.getAction());\n      EnumMap<Suggester.Hint, Object> hints = ((TriggerEvent.Op) op).getHints();\n      assertEquals(hints.toString(), 2, hints.size());\n      Object o = hints.get(Suggester.Hint.COLL_SHARD);\n      assertNotNull(Suggester.Hint.COLL_SHARD.toString(), o);\n      assertTrue(o.getClass().getName(), o instanceof Collection);\n      Collection<Object> col = (Collection<Object>)o;\n      assertEquals(col.toString(), 1, col.size());\n      o = col.iterator().next();\n      assertTrue(o.getClass().getName(), o instanceof Pair);\n      o = hints.get(Suggester.Hint.SRC_NODE);\n      assertNotNull(Suggester.Hint.SRC_NODE.toString(), o);\n      assertTrue(o.getClass().getName(), o instanceof Collection);\n      col = (Collection<Object>)o;\n      assertEquals(col.toString(), 1, col.size());\n      o = col.iterator().next();\n      assertTrue(o.getClass().getName(), o instanceof String);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["976feb6756f29529c6ce5b578e7d6fa8b1efcb30"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"976feb6756f29529c6ce5b578e7d6fa8b1efcb30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["976feb6756f29529c6ce5b578e7d6fa8b1efcb30"],"976feb6756f29529c6ce5b578e7d6fa8b1efcb30":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}