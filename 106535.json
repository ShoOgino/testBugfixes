{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory(random);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory(random);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(new Field(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d6179f9c4237a7e5d423f4e4b439a94e967efc9","date":1304382587,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}