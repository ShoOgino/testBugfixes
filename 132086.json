{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/OrdinalsCacheTest#testOrdinalsCacheWithThreads().mjava","commits":[{"id":"3ea97e9a1d0f5c3c323186e9c56052e1dff5e04b","date":1382560833,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/OrdinalsCacheTest#testOrdinalsCacheWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOrdinalsCacheWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A\", \"1\")));\n    writer.addDocument(doc);\n    doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A\", \"2\")));\n    writer.addDocument(doc);\n    writer.close();\n    taxoWriter.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(indexDir);\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              OrdinalsCache.getCachedOrds(context, FacetIndexingParams.DEFAULT.getCategoryListParams(new CategoryPath(\"A\")));\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    \n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = OrdinalsCache.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, OrdinalsCache.ramBytesUsed());\n      }\n    }\n    \n    reader.close();\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["629655b1e3af3470b6617faf7637555df7cf3616"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629655b1e3af3470b6617faf7637555df7cf3616","date":1382573085,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/OrdinalsCacheTest#testOrdinalsCacheWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/OrdinalsCacheTest#testOrdinalsCacheWithThreads().mjava","sourceNew":"  @Test\n  public void testOrdinalsCacheWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A\", \"1\")));\n    writer.addDocument(doc);\n    doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A\", \"2\")));\n    writer.addDocument(doc);\n    writer.close();\n    taxoWriter.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(indexDir);\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              OrdinalsCache.getCachedOrds(context, FacetIndexingParams.DEFAULT.getCategoryListParams(new CategoryPath(\"A\")));\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    OrdinalsCache.clear();\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = OrdinalsCache.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, OrdinalsCache.ramBytesUsed());\n      }\n    }\n    \n    reader.close();\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testOrdinalsCacheWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A\", \"1\")));\n    writer.addDocument(doc);\n    doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A\", \"2\")));\n    writer.addDocument(doc);\n    writer.close();\n    taxoWriter.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(indexDir);\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              OrdinalsCache.getCachedOrds(context, FacetIndexingParams.DEFAULT.getCategoryListParams(new CategoryPath(\"A\")));\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    \n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = OrdinalsCache.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, OrdinalsCache.ramBytesUsed());\n      }\n    }\n    \n    reader.close();\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":["3ea97e9a1d0f5c3c323186e9c56052e1dff5e04b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/OrdinalsCacheTest#testOrdinalsCacheWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/OrdinalsCacheTest#testOrdinalsCacheWithThreads().mjava","sourceNew":"  @Test\n  public void testOrdinalsCacheWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new FacetLabel(\"A\", \"1\")));\n    writer.addDocument(doc);\n    doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new FacetLabel(\"A\", \"2\")));\n    writer.addDocument(doc);\n    writer.close();\n    taxoWriter.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(indexDir);\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              OrdinalsCache.getCachedOrds(context, FacetIndexingParams.DEFAULT.getCategoryListParams(new FacetLabel(\"A\")));\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    OrdinalsCache.clear();\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = OrdinalsCache.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, OrdinalsCache.ramBytesUsed());\n      }\n    }\n    \n    reader.close();\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testOrdinalsCacheWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A\", \"1\")));\n    writer.addDocument(doc);\n    doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A\", \"2\")));\n    writer.addDocument(doc);\n    writer.close();\n    taxoWriter.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(indexDir);\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              OrdinalsCache.getCachedOrds(context, FacetIndexingParams.DEFAULT.getCategoryListParams(new CategoryPath(\"A\")));\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    OrdinalsCache.clear();\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = OrdinalsCache.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, OrdinalsCache.ramBytesUsed());\n      }\n    }\n    \n    reader.close();\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestCachedOrdinalsReader#testWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/OrdinalsCacheTest#testOrdinalsCacheWithThreads().mjava","sourceNew":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n    \n    IOUtils.close(writer, taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testOrdinalsCacheWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new FacetLabel(\"A\", \"1\")));\n    writer.addDocument(doc);\n    doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new FacetLabel(\"A\", \"2\")));\n    writer.addDocument(doc);\n    writer.close();\n    taxoWriter.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(indexDir);\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              OrdinalsCache.getCachedOrds(context, FacetIndexingParams.DEFAULT.getCategoryListParams(new FacetLabel(\"A\")));\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    OrdinalsCache.clear();\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = OrdinalsCache.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, OrdinalsCache.ramBytesUsed());\n      }\n    }\n    \n    reader.close();\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/OrdinalsCacheTest#testOrdinalsCacheWithThreads().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testOrdinalsCacheWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetFields facetFields = new FacetFields(taxoWriter);\n    \n    Document doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A\", \"1\")));\n    writer.addDocument(doc);\n    doc = new Document();\n    facetFields.addFields(doc, Arrays.asList(new CategoryPath(\"A\", \"2\")));\n    writer.addDocument(doc);\n    writer.close();\n    taxoWriter.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(indexDir);\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              OrdinalsCache.getCachedOrds(context, FacetIndexingParams.DEFAULT.getCategoryListParams(new CategoryPath(\"A\")));\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    OrdinalsCache.clear();\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = OrdinalsCache.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, OrdinalsCache.ramBytesUsed());\n      }\n    }\n    \n    reader.close();\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ea97e9a1d0f5c3c323186e9c56052e1dff5e04b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629655b1e3af3470b6617faf7637555df7cf3616":["3ea97e9a1d0f5c3c323186e9c56052e1dff5e04b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["629655b1e3af3470b6617faf7637555df7cf3616","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["629655b1e3af3470b6617faf7637555df7cf3616"]},"commit2Childs":{"3ea97e9a1d0f5c3c323186e9c56052e1dff5e04b":["629655b1e3af3470b6617faf7637555df7cf3616"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ea97e9a1d0f5c3c323186e9c56052e1dff5e04b"],"629655b1e3af3470b6617faf7637555df7cf3616":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ca39562b2d7687143fdb601d5de1b8f7b778f1db"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}