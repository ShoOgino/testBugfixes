{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","commits":[{"id":"0ac446a120a3c5f1ac22f9a866256ad428c1821b","date":1447203034,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570664407cd3123a8039f1b4f2f6c6693bdaee31","date":1589893823,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    // collection\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n\n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", sum(fieldA), avg(fieldB))\n\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), String.join(\",\", param.getValue())));\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ac446a120a3c5f1ac22f9a866256ad428c1821b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["70d9c44f68e848648da304352cf7c045c33148f4"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["0ac446a120a3c5f1ac22f9a866256ad428c1821b","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0ac446a120a3c5f1ac22f9a866256ad428c1821b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"70d9c44f68e848648da304352cf7c045c33148f4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["0ac446a120a3c5f1ac22f9a866256ad428c1821b","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"0ac446a120a3c5f1ac22f9a866256ad428c1821b":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"70d9c44f68e848648da304352cf7c045c33148f4":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","70d9c44f68e848648da304352cf7c045c33148f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}