{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalMatches#wrapMatches(IntervalMatchesIterator,int).mjava","commits":[{"id":"30c78dc09f599cd42c186ddd94084249c8db1ede","date":1581000287,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalMatches#wrapMatches(IntervalMatchesIterator,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalMatches#wrapMatches(MatchesIterator,int).mjava","sourceNew":"  static IntervalIterator wrapMatches(IntervalMatchesIterator mi, int doc) {\n    return new IntervalIterator() {\n\n      State state = State.UNPOSITIONED;\n\n      @Override\n      public int start() {\n        if (state == State.NO_MORE_INTERVALS) {\n          return NO_MORE_INTERVALS;\n        }\n        assert state == State.ITERATING;\n        return mi.startPosition();\n      }\n\n      @Override\n      public int end() {\n        if (state == State.NO_MORE_INTERVALS) {\n          return NO_MORE_INTERVALS;\n        }\n        assert state == State.ITERATING;\n        return mi.endPosition();\n      }\n\n      @Override\n      public int gaps() {\n        assert state == State.ITERATING;\n        return mi.gaps();\n      }\n\n      @Override\n      public int width() {\n        assert state == State.ITERATING;\n        return mi.width();\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        assert state == State.ITERATING;\n        if (mi.next()) {\n          return mi.startPosition();\n        }\n        state = State.NO_MORE_INTERVALS;\n        return NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public float matchCost() {\n        return 1;\n      }\n\n      @Override\n      public int docID() {\n        switch (state) {\n          case UNPOSITIONED:\n            return -1;\n          case ITERATING:\n          case NO_MORE_INTERVALS:\n            return doc;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int nextDoc() {\n        switch (state) {\n          case UNPOSITIONED:\n            state = State.ITERATING;\n            return doc;\n          case ITERATING:\n          case NO_MORE_INTERVALS:\n            state = State.EXHAUSTED;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int advance(int target) {\n        if (target == doc) {\n          state = State.ITERATING;\n          return doc;\n        }\n        state = State.EXHAUSTED;\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":"  static IntervalIterator wrapMatches(MatchesIterator mi, int doc) {\n    return new IntervalIterator() {\n\n      State state = State.UNPOSITIONED;\n\n      @Override\n      public int start() {\n        assert state == State.ITERATING;\n        return mi.startPosition();\n      }\n\n      @Override\n      public int end() {\n        assert state == State.ITERATING;\n        return mi.endPosition();\n      }\n\n      @Override\n      public int gaps() {\n        assert state == State.ITERATING;\n        if (mi instanceof IntervalMatchesIterator) {\n          return ((IntervalMatchesIterator)mi).gaps();\n        }\n        return 0;\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        assert state == State.ITERATING;\n        if (mi.next()) {\n          return mi.startPosition();\n        }\n        return NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public float matchCost() {\n        return 1;\n      }\n\n      @Override\n      public int docID() {\n        switch (state) {\n          case UNPOSITIONED:\n            return -1;\n          case ITERATING:\n            return doc;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int nextDoc() {\n        switch (state) {\n          case UNPOSITIONED:\n            state = State.ITERATING;\n            return doc;\n          case ITERATING:\n            state = State.EXHAUSTED;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int advance(int target) {\n        if (target == doc) {\n          state = State.ITERATING;\n          return doc;\n        }\n        state = State.EXHAUSTED;\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalMatches#wrapMatches(IntervalMatchesIterator,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalMatches#wrapMatches(IntervalMatchesIterator,int).mjava","sourceNew":"  static IntervalIterator wrapMatches(IntervalMatchesIterator mi, int doc) {\n    return new IntervalIterator() {\n\n      State state = State.UNPOSITIONED;\n\n      @Override\n      public int start() {\n        if (state == State.NO_MORE_INTERVALS) {\n          return NO_MORE_INTERVALS;\n        }\n        assert state == State.ITERATING;\n        return mi.startPosition();\n      }\n\n      @Override\n      public int end() {\n        if (state == State.NO_MORE_INTERVALS) {\n          return NO_MORE_INTERVALS;\n        }\n        assert state == State.ITERATING;\n        return mi.endPosition();\n      }\n\n      @Override\n      public int gaps() {\n        assert state == State.ITERATING;\n        return mi.gaps();\n      }\n\n      @Override\n      public int width() {\n        assert state == State.ITERATING;\n        return mi.width();\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        assert state == State.ITERATING;\n        if (mi.next()) {\n          return mi.startPosition();\n        }\n        state = State.NO_MORE_INTERVALS;\n        return NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public float matchCost() {\n        return 1;\n      }\n\n      @Override\n      public int docID() {\n        switch (state) {\n          case UNPOSITIONED:\n            return -1;\n          case ITERATING:\n          case NO_MORE_INTERVALS:\n            return doc;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int nextDoc() {\n        switch (state) {\n          case UNPOSITIONED:\n            state = State.ITERATING;\n            return doc;\n          case ITERATING:\n          case NO_MORE_INTERVALS:\n            state = State.EXHAUSTED;\n            break;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int advance(int target) {\n        if (target == doc) {\n          state = State.ITERATING;\n          return doc;\n        }\n        state = State.EXHAUSTED;\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":"  static IntervalIterator wrapMatches(IntervalMatchesIterator mi, int doc) {\n    return new IntervalIterator() {\n\n      State state = State.UNPOSITIONED;\n\n      @Override\n      public int start() {\n        if (state == State.NO_MORE_INTERVALS) {\n          return NO_MORE_INTERVALS;\n        }\n        assert state == State.ITERATING;\n        return mi.startPosition();\n      }\n\n      @Override\n      public int end() {\n        if (state == State.NO_MORE_INTERVALS) {\n          return NO_MORE_INTERVALS;\n        }\n        assert state == State.ITERATING;\n        return mi.endPosition();\n      }\n\n      @Override\n      public int gaps() {\n        assert state == State.ITERATING;\n        return mi.gaps();\n      }\n\n      @Override\n      public int width() {\n        assert state == State.ITERATING;\n        return mi.width();\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        assert state == State.ITERATING;\n        if (mi.next()) {\n          return mi.startPosition();\n        }\n        state = State.NO_MORE_INTERVALS;\n        return NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public float matchCost() {\n        return 1;\n      }\n\n      @Override\n      public int docID() {\n        switch (state) {\n          case UNPOSITIONED:\n            return -1;\n          case ITERATING:\n          case NO_MORE_INTERVALS:\n            return doc;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int nextDoc() {\n        switch (state) {\n          case UNPOSITIONED:\n            state = State.ITERATING;\n            return doc;\n          case ITERATING:\n          case NO_MORE_INTERVALS:\n            state = State.EXHAUSTED;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int advance(int target) {\n        if (target == doc) {\n          state = State.ITERATING;\n          return doc;\n        }\n        state = State.EXHAUSTED;\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30c78dc09f599cd42c186ddd94084249c8db1ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["30c78dc09f599cd42c186ddd94084249c8db1ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"30c78dc09f599cd42c186ddd94084249c8db1ede":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c78dc09f599cd42c186ddd94084249c8db1ede"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}