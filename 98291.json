{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector#create(String,Sort,int).mjava","commits":[{"id":"4e622d1d7e4496e3a8c1709c84e5be91ced69889","date":1311534411,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector#create(String,Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates an <code>AbstractAllGroupHeadsCollector</code> instance based on the supplied arguments.\n   * This factory method decides with implementation is best suited.\n   *\n   * @param groupField      The field to group by\n   * @param sortWithinGroup The sort within each group\n   * @param initialSize The initial allocation size of the internal int set and group list which should roughly match\n   *                    the total number of expected unique groups. Be aware that the heap usage is\n   *                    4 bytes * initialSize.\n   * @return an <code>AbstractAllGroupHeadsCollector</code> instance based on the supplied arguments\n   * @throws IOException If I/O related errors occur\n   */\n  public static AbstractAllGroupHeadsCollector create(String groupField, Sort sortWithinGroup, int initialSize) throws IOException {\n    boolean sortAllScore = true;\n    boolean sortAllFieldValue = true;\n\n    for (SortField sortField : sortWithinGroup.getSort()) {\n      if (sortField.getType() == SortField.Type.SCORE) {\n        sortAllFieldValue = false;\n      } else if (needGeneralImpl(sortField)) {\n        return new GeneralAllGroupHeadsCollector(groupField, sortWithinGroup);\n      } else {\n        sortAllScore = false;\n      }\n    }\n\n    if (sortAllScore) {\n      return new ScoreAllGroupHeadsCollector(groupField, sortWithinGroup, initialSize);\n    } else if (sortAllFieldValue) {\n      return new OrdAllGroupHeadsCollector(groupField, sortWithinGroup, initialSize);\n    } else {\n      return new OrdScoreAllGroupHeadsCollector(groupField, sortWithinGroup, initialSize);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00","date":1317931776,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector#create(String,Sort,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermAllGroupHeadsCollector#create(String,Sort,int).mjava","sourceNew":"  /**\n   * Creates an <code>AbstractAllGroupHeadsCollector</code> instance based on the supplied arguments.\n   * This factory method decides with implementation is best suited.\n   *\n   * @param groupField      The field to group by\n   * @param sortWithinGroup The sort within each group\n   * @param initialSize The initial allocation size of the internal int set and group list which should roughly match\n   *                    the total number of expected unique groups. Be aware that the heap usage is\n   *                    4 bytes * initialSize.\n   * @return an <code>AbstractAllGroupHeadsCollector</code> instance based on the supplied arguments\n   * @throws IOException If I/O related errors occur\n   */\n  public static AbstractAllGroupHeadsCollector create(String groupField, Sort sortWithinGroup, int initialSize) throws IOException {\n    boolean sortAllScore = true;\n    boolean sortAllFieldValue = true;\n\n    for (SortField sortField : sortWithinGroup.getSort()) {\n      if (sortField.getType() == SortField.Type.SCORE) {\n        sortAllFieldValue = false;\n      } else if (needGeneralImpl(sortField)) {\n        return new GeneralAllGroupHeadsCollector(groupField, sortWithinGroup);\n      } else {\n        sortAllScore = false;\n      }\n    }\n\n    if (sortAllScore) {\n      return new ScoreAllGroupHeadsCollector(groupField, sortWithinGroup, initialSize);\n    } else if (sortAllFieldValue) {\n      return new OrdAllGroupHeadsCollector(groupField, sortWithinGroup, initialSize);\n    } else {\n      return new OrdScoreAllGroupHeadsCollector(groupField, sortWithinGroup, initialSize);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an <code>AbstractAllGroupHeadsCollector</code> instance based on the supplied arguments.\n   * This factory method decides with implementation is best suited.\n   *\n   * @param groupField      The field to group by\n   * @param sortWithinGroup The sort within each group\n   * @param initialSize The initial allocation size of the internal int set and group list which should roughly match\n   *                    the total number of expected unique groups. Be aware that the heap usage is\n   *                    4 bytes * initialSize.\n   * @return an <code>AbstractAllGroupHeadsCollector</code> instance based on the supplied arguments\n   * @throws IOException If I/O related errors occur\n   */\n  public static AbstractAllGroupHeadsCollector create(String groupField, Sort sortWithinGroup, int initialSize) throws IOException {\n    boolean sortAllScore = true;\n    boolean sortAllFieldValue = true;\n\n    for (SortField sortField : sortWithinGroup.getSort()) {\n      if (sortField.getType() == SortField.Type.SCORE) {\n        sortAllFieldValue = false;\n      } else if (needGeneralImpl(sortField)) {\n        return new GeneralAllGroupHeadsCollector(groupField, sortWithinGroup);\n      } else {\n        sortAllScore = false;\n      }\n    }\n\n    if (sortAllScore) {\n      return new ScoreAllGroupHeadsCollector(groupField, sortWithinGroup, initialSize);\n    } else if (sortAllFieldValue) {\n      return new OrdAllGroupHeadsCollector(groupField, sortWithinGroup, initialSize);\n    } else {\n      return new OrdScoreAllGroupHeadsCollector(groupField, sortWithinGroup, initialSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4e622d1d7e4496e3a8c1709c84e5be91ced69889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["4e622d1d7e4496e3a8c1709c84e5be91ced69889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"]},"commit2Childs":{"4e622d1d7e4496e3a8c1709c84e5be91ced69889":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e622d1d7e4496e3a8c1709c84e5be91ced69889"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}