{"path":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"092955d1f361712c613319148ff0135d7aa77f07","date":1316346442,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q\n   * @return\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    Collection<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.iterator().next().getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n      newBqB.setDisableCoord(bq.isCoordDisabled());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBqB.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      Query newBq = newBqB.build();\n      newBq.setBoost(bq.getBoost());\n      return newBq;\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    List<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.get(0).getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery newBq = new BooleanQuery(bq.isCoordDisabled());\n      newBq.setBoost(bq.getBoost());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBq.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) q;\n      Query subQ = bq.getQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      return new BoostQuery(absSubQ, bq.getBoost());\n    }\n\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      return new WrappedQuery(absSubQ);\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    Collection<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.iterator().next().getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n      newBqB.setDisableCoord(bq.isCoordDisabled());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBqB.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBqB.build();\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      WrappedQuery newQ = (WrappedQuery)q.clone();\n      newQ.setWrappedQuery(absSubQ);\n      return newQ;\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    Collection<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.iterator().next().getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n      newBqB.setDisableCoord(bq.isCoordDisabled());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBqB.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      Query newBq = newBqB.build();\n      newBq.setBoost(bq.getBoost());\n      return newBq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) q;\n      Query subQ = bq.getQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      return new BoostQuery(absSubQ, bq.getBoost());\n    }\n\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      return new WrappedQuery(absSubQ);\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    Collection<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.iterator().next().getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBqB.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBqB.build();\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) q;\n      Query subQ = bq.getQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      return new BoostQuery(absSubQ, bq.getBoost());\n    }\n\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      return new WrappedQuery(absSubQ);\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    Collection<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.iterator().next().getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n      newBqB.setDisableCoord(bq.isCoordDisabled());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBqB.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBqB.build();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryUtils#getAbs(Query).mjava","sourceNew":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) q;\n      Query subQ = bq.getQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      return new BoostQuery(absSubQ, bq.getBoost());\n    }\n\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      return new WrappedQuery(absSubQ);\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    Collection<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.iterator().next().getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBqB.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBqB.build();\n    }\n  }\n\n","sourceOld":"  /** Returns the original query if it was already a positive query, otherwise\n   * return the negative of the query (i.e., a positive query).\n   * <p>\n   * Example: both id:10 and id:-10 will return id:10\n   * <p>\n   * The caller can tell the sign of the original by a reference comparison between\n   * the original and returned query.\n   * @param q Query to create the absolute version of\n   * @return Absolute version of the Query\n   */\n  public static Query getAbs(Query q) {\n    if (q instanceof BoostQuery) {\n      BoostQuery bq = (BoostQuery) q;\n      Query subQ = bq.getQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      return new BoostQuery(absSubQ, bq.getBoost());\n    }\n\n    if (q instanceof WrappedQuery) {\n      Query subQ = ((WrappedQuery)q).getWrappedQuery();\n      Query absSubQ = getAbs(subQ);\n      if (absSubQ == subQ) return q;\n      return new WrappedQuery(absSubQ);\n    }\n\n    if (!(q instanceof BooleanQuery)) return q;\n    BooleanQuery bq = (BooleanQuery)q;\n\n    Collection<BooleanClause> clauses = bq.clauses();\n    if (clauses.size()==0) return q;\n\n\n    for (BooleanClause clause : clauses) {\n      if (!clause.isProhibited()) return q;\n    }\n\n    if (clauses.size()==1) {\n      // if only one clause, dispense with the wrapping BooleanQuery\n      Query negClause = clauses.iterator().next().getQuery();\n      // we shouldn't need to worry about adjusting the boosts since the negative\n      // clause would have never been selected in a positive query, and hence would\n      // not contribute to a score.\n      return negClause;\n    } else {\n      BooleanQuery.Builder newBqB = new BooleanQuery.Builder();\n      newBqB.setDisableCoord(bq.isCoordDisabled());\n      // ignore minNrShouldMatch... it doesn't make sense for a negative query\n\n      // the inverse of -a -b is a OR b\n      for (BooleanClause clause : clauses) {\n        newBqB.add(clause.getQuery(), BooleanClause.Occur.SHOULD);\n      }\n      return newBqB.build();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["092955d1f361712c613319148ff0135d7aa77f07","19275ba31e621f6da1b83bf13af75233876fd3d4"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["092955d1f361712c613319148ff0135d7aa77f07"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","c8a0e442f7b61f811680273b25da95994a724466"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"092955d1f361712c613319148ff0135d7aa77f07":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"ccc08aa684aee4964baee0644a6ba047bfd70829":["092955d1f361712c613319148ff0135d7aa77f07"],"c26f00b574427b55127e869b935845554afde1fa":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"092955d1f361712c613319148ff0135d7aa77f07":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}