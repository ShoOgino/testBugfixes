{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#hash(long).mjava","commits":[{"id":"602cca3f75af03832471d8324bbc5b977a02969c","date":1472676981,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#hash(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric.LongCounts#hash(long).mjava","sourceNew":"    private int hash(long val) {\n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      return h;\n    }\n\n","sourceOld":"    private int hash(long val) {\n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      return h;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#hash(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric.LongCounts#hash(long).mjava","sourceNew":"    private int hash(long val) {\n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      return h;\n    }\n\n","sourceOld":"    private int hash(long val) {\n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      return h;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#hash(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric.LongCounts#hash(long).mjava","sourceNew":"    private int hash(long val) {\n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      return h;\n    }\n\n","sourceOld":"    private int hash(long val) {\n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      return h;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#hash(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric.LongCounts#hash(long).mjava","sourceNew":"    private int hash(long val) {\n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      return h;\n    }\n\n","sourceOld":"    private int hash(long val) {\n      // For floats: exponent bits start at bit 23 for single precision,\n      // and bit 52 for double precision.\n      // Many values will only have significant bits just to the right of that,\n      // and the leftmost bits will all be zero.\n\n      // For now, lets just settle to get first 8 significant mantissa bits of double or float in the lowest bits of our hash\n      // The upper bits of our hash will be irrelevant.\n      int h = (int) (val + (val >>> 44) + (val >>> 15));\n      return h;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"602cca3f75af03832471d8324bbc5b977a02969c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602cca3f75af03832471d8324bbc5b977a02969c"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602cca3f75af03832471d8324bbc5b977a02969c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"602cca3f75af03832471d8324bbc5b977a02969c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["602cca3f75af03832471d8324bbc5b977a02969c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}