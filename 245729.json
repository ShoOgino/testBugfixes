{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testAllValidExportTypes().mjava","commits":[{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testAllValidExportTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllValidExportTypes() throws Exception {\n\n    //Test whether all the expected types are actually returned, including booleans and dates.\n    // The contract is that the /select and /export handlers return the same format, so we can test this once each\n    // way\n    new UpdateRequest()\n        .add(id, \"0\", \"i_sing\", \"11\", \"i_multi\", \"12\", \"i_multi\", \"13\",\n            \"l_sing\", \"14\", \"l_multi\", \"15\", \"l_multi\", \"16\",\n            \"f_sing\", \"1.70\", \"f_multi\", \"1.80\", \"f_multi\", \"1.90\",\n            \"d_sing\", \"1.20\", \"d_multi\", \"1.21\", \"d_multi\", \"1.22\",\n            \"s_sing\", \"single\", \"s_multi\", \"sm1\", \"s_multi\", \"sm2\",\n            \"dt_sing\", \"1980-01-02T11:11:33.89Z\", \"dt_multi\", \"1981-03-04T01:02:03.78Z\", \"dt_multi\", \"1981-05-24T04:05:06.99Z\",\n            \"b_sing\", \"true\", \"b_multi\", \"false\", \"b_multi\", \"true\"\n        )\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    tryWithQt(\"/export\");\n    tryWithQt(\"/select\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testAllValidExportTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllValidExportTypes() throws Exception {\n\n    //Test whether all the expected types are actually returned, including booleans and dates.\n    // The contract is that the /select and /export handlers return the same format, so we can test this once each\n    // way\n    new UpdateRequest()\n        .add(id, \"0\", \"i_sing\", \"11\", \"i_multi\", \"12\", \"i_multi\", \"13\",\n            \"l_sing\", \"14\", \"l_multi\", \"15\", \"l_multi\", \"16\",\n            \"f_sing\", \"1.70\", \"f_multi\", \"1.80\", \"f_multi\", \"1.90\",\n            \"d_sing\", \"1.20\", \"d_multi\", \"1.21\", \"d_multi\", \"1.22\",\n            \"s_sing\", \"single\", \"s_multi\", \"sm1\", \"s_multi\", \"sm2\",\n            \"dt_sing\", \"1980-01-02T11:11:33.89Z\", \"dt_multi\", \"1981-03-04T01:02:03.78Z\", \"dt_multi\", \"1981-05-24T04:05:06.99Z\",\n            \"b_sing\", \"true\", \"b_multi\", \"false\", \"b_multi\", \"true\"\n        )\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    tryWithQt(\"/export\");\n    tryWithQt(\"/select\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testAllValidExportTypes().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testAllValidExportTypes().mjava","sourceNew":"  @Test\n  public void testAllValidExportTypes() throws Exception {\n\n    //Test whether all the expected types are actually returned, including booleans and dates.\n    // The contract is that the /select and /export handlers return the same format, so we can test this once each\n    // way\n    new UpdateRequest()\n        .add(id, \"0\", \"i_sing\", \"11\", \"i_multi\", \"12\", \"i_multi\", \"13\",\n            \"l_sing\", \"14\", \"l_multi\", \"15\", \"l_multi\", \"16\",\n            \"f_sing\", \"1.70\", \"f_multi\", \"1.80\", \"f_multi\", \"1.90\",\n            \"d_sing\", \"1.20\", \"d_multi\", \"1.21\", \"d_multi\", \"1.22\",\n            \"s_sing\", \"single\", \"s_multi\", \"sm1\", \"s_multi\", \"sm2\",\n            \"dt_sing\", \"1980-01-02T11:11:33.89Z\", \"dt_multi\", \"1981-03-04T01:02:03.78Z\", \"dt_multi\", \"1981-05-24T04:05:06.99Z\",\n            \"b_sing\", \"true\", \"b_multi\", \"false\", \"b_multi\", \"true\"\n        )\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    tryWithQt(\"/export\");\n    tryWithQt(\"/select\");\n  }\n\n","sourceOld":"  @Test\n  public void testAllValidExportTypes() throws Exception {\n\n    //Test whether all the expected types are actually returned, including booleans and dates.\n    // The contract is that the /select and /export handlers return the same format, so we can test this once each\n    // way\n    new UpdateRequest()\n        .add(id, \"0\", \"i_sing\", \"11\", \"i_multi\", \"12\", \"i_multi\", \"13\",\n            \"l_sing\", \"14\", \"l_multi\", \"15\", \"l_multi\", \"16\",\n            \"f_sing\", \"1.70\", \"f_multi\", \"1.80\", \"f_multi\", \"1.90\",\n            \"d_sing\", \"1.20\", \"d_multi\", \"1.21\", \"d_multi\", \"1.22\",\n            \"s_sing\", \"single\", \"s_multi\", \"sm1\", \"s_multi\", \"sm2\",\n            \"dt_sing\", \"1980-01-02T11:11:33.89Z\", \"dt_multi\", \"1981-03-04T01:02:03.78Z\", \"dt_multi\", \"1981-05-24T04:05:06.99Z\",\n            \"b_sing\", \"true\", \"b_multi\", \"false\", \"b_multi\", \"true\"\n        )\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    tryWithQt(\"/export\");\n    tryWithQt(\"/select\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testAllValidExportTypes().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testAllValidExportTypes().mjava","sourceNew":"  @Test\n  public void testAllValidExportTypes() throws Exception {\n\n    //Test whether all the expected types are actually returned, including booleans and dates.\n    // The contract is that the /select and /export handlers return the same format, so we can test this once each\n    // way\n    new UpdateRequest()\n        .add(id, \"0\", \"i_sing\", \"11\", \"i_multi\", \"12\", \"i_multi\", \"13\",\n            \"l_sing\", \"14\", \"l_multi\", \"15\", \"l_multi\", \"16\",\n            \"f_sing\", \"1.70\", \"f_multi\", \"1.80\", \"f_multi\", \"1.90\",\n            \"d_sing\", \"1.20\", \"d_multi\", \"1.21\", \"d_multi\", \"1.22\",\n            \"s_sing\", \"single\", \"s_multi\", \"sm1\", \"s_multi\", \"sm2\",\n            \"dt_sing\", \"1980-01-02T11:11:33.89Z\", \"dt_multi\", \"1981-03-04T01:02:03.78Z\", \"dt_multi\", \"1981-05-24T04:05:06.99Z\",\n            \"b_sing\", \"true\", \"b_multi\", \"false\", \"b_multi\", \"true\"\n        )\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    tryWithQt(\"/export\");\n    tryWithQt(\"/select\");\n  }\n\n","sourceOld":"  @Test\n  public void testAllValidExportTypes() throws Exception {\n\n    //Test whether all the expected types are actually returned, including booleans and dates.\n    // The contract is that the /select and /export handlers return the same format, so we can test this once each\n    // way\n    new UpdateRequest()\n        .add(id, \"0\", \"i_sing\", \"11\", \"i_multi\", \"12\", \"i_multi\", \"13\",\n            \"l_sing\", \"14\", \"l_multi\", \"15\", \"l_multi\", \"16\",\n            \"f_sing\", \"1.70\", \"f_multi\", \"1.80\", \"f_multi\", \"1.90\",\n            \"d_sing\", \"1.20\", \"d_multi\", \"1.21\", \"d_multi\", \"1.22\",\n            \"s_sing\", \"single\", \"s_multi\", \"sm1\", \"s_multi\", \"sm2\",\n            \"dt_sing\", \"1980-01-02T11:11:33.89Z\", \"dt_multi\", \"1981-03-04T01:02:03.78Z\", \"dt_multi\", \"1981-05-24T04:05:06.99Z\",\n            \"b_sing\", \"true\", \"b_multi\", \"false\", \"b_multi\", \"true\"\n        )\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    tryWithQt(\"/export\");\n    tryWithQt(\"/select\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c969f15cd04d31e520319c619a445ae21f02d72"]},"commit2Childs":{"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["8c969f15cd04d31e520319c619a445ae21f02d72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}