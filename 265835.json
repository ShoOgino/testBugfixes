{"path":"src/test/org/apache/lucene/index/TestIndexReaderClone#testFSDirectoryClone().mjava","commits":[{"id":"4e54e4a9a2442944e55f58e835877841cdac1271","date":1244628560,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#testFSDirectoryClone().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1453\n  public void testFSDirectoryClone() throws Exception {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"FSDirIndexReaderClone\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader reader = IndexReader.open(indexDir2);\n    IndexReader readOnlyReader = (IndexReader) reader.clone();\n    reader.close();\n    readOnlyReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testFSDirectoryClone().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1453\n  public void testFSDirectoryClone() throws Exception {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"FSDirIndexReaderClone\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader reader = IndexReader.open(indexDir2);\n    IndexReader readOnlyReader = (IndexReader) reader.clone();\n    reader.close();\n    readOnlyReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testFSDirectoryClone().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1453\n  public void testFSDirectoryClone() throws Exception {\n\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir2 = new File(tempDir, \"FSDirIndexReaderClone\");\n\n    Directory dir1 = FSDirectory.getDirectory(indexDir2);\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader reader = IndexReader.open(indexDir2);\n    IndexReader readOnlyReader = (IndexReader) reader.clone();\n    reader.close();\n    readOnlyReader.close();\n\n    // Make sure we didn't pick up too many incRef's along\n    // the way -- this close should be the final close:\n    dir1.close();\n\n    try {\n      dir1.listAll();\n      fail(\"did not hit AlreadyClosedException\");\n    } catch (AlreadyClosedException ace) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["4e54e4a9a2442944e55f58e835877841cdac1271"],"4e54e4a9a2442944e55f58e835877841cdac1271":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["4e54e4a9a2442944e55f58e835877841cdac1271","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"4e54e4a9a2442944e55f58e835877841cdac1271":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e54e4a9a2442944e55f58e835877841cdac1271"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}