{"path":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessorFactory#init(NamedList).mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init( NamedList args ) {\n\n    Object maxErrorsObj = args.get(MAX_ERRORS_PARAM); \n    if (maxErrorsObj != null) {\n      try {\n        defaultMaxErrors = Integer.valueOf(maxErrorsObj.toString());\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unnable to parse maxErrors parameter: \" + maxErrorsObj, e);\n      }\n      if (defaultMaxErrors < -1) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Config option '\"+MAX_ERRORS_PARAM + \"' must either be non-negative, or -1 to indicate 'unlimiited': \" + maxErrorsObj.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init( NamedList args ) {\n\n    Object maxErrorsObj = args.get(MAX_ERRORS_PARAM); \n    if (maxErrorsObj != null) {\n      try {\n        defaultMaxErrors = Integer.parseInt(maxErrorsObj.toString());\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unnable to parse maxErrors parameter: \" + maxErrorsObj, e);\n      }\n      if (defaultMaxErrors < -1) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Config option '\"+MAX_ERRORS_PARAM + \"' must either be non-negative, or -1 to indicate 'unlimiited': \" + maxErrorsObj.toString());\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init( NamedList args ) {\n\n    Object maxErrorsObj = args.get(MAX_ERRORS_PARAM); \n    if (maxErrorsObj != null) {\n      try {\n        defaultMaxErrors = Integer.valueOf(maxErrorsObj.toString());\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unnable to parse maxErrors parameter: \" + maxErrorsObj, e);\n      }\n      if (defaultMaxErrors < -1) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Config option '\"+MAX_ERRORS_PARAM + \"' must either be non-negative, or -1 to indicate 'unlimiited': \" + maxErrorsObj.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init( NamedList args ) {\n\n    Object maxErrorsObj = args.get(MAX_ERRORS_PARAM); \n    if (maxErrorsObj != null) {\n      try {\n        defaultMaxErrors = Integer.parseInt(maxErrorsObj.toString());\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unnable to parse maxErrors parameter: \" + maxErrorsObj, e);\n      }\n      if (defaultMaxErrors < -1) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Config option '\"+MAX_ERRORS_PARAM + \"' must either be non-negative, or -1 to indicate 'unlimiited': \" + maxErrorsObj.toString());\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init( NamedList args ) {\n\n    Object maxErrorsObj = args.get(MAX_ERRORS_PARAM); \n    if (maxErrorsObj != null) {\n      try {\n        defaultMaxErrors = Integer.valueOf(maxErrorsObj.toString());\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unnable to parse maxErrors parameter: \" + maxErrorsObj, e);\n      }\n      if (defaultMaxErrors < -1) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Config option '\"+MAX_ERRORS_PARAM + \"' must either be non-negative, or -1 to indicate 'unlimiited': \" + maxErrorsObj.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init( NamedList args ) {\n\n    Object maxErrorsObj = args.get(MAX_ERRORS_PARAM); \n    if (maxErrorsObj != null) {\n      try {\n        defaultMaxErrors = Integer.parseInt(maxErrorsObj.toString());\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unnable to parse maxErrors parameter: \" + maxErrorsObj, e);\n      }\n      if (defaultMaxErrors < -1) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Config option '\"+MAX_ERRORS_PARAM + \"' must either be non-negative, or -1 to indicate 'unlimiited': \" + maxErrorsObj.toString());\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public void init( NamedList args ) {\n\n    Object maxErrorsObj = args.get(MAX_ERRORS_PARAM); \n    if (maxErrorsObj != null) {\n      try {\n        defaultMaxErrors = Integer.valueOf(maxErrorsObj.toString());\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unnable to parse maxErrors parameter: \" + maxErrorsObj, e);\n      }\n      if (defaultMaxErrors < -1) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Config option '\"+MAX_ERRORS_PARAM + \"' must either be non-negative, or -1 to indicate 'unlimiited': \" + maxErrorsObj.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"]},"commit2Childs":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}