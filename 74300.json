{"path":"solr/core/src/test/org/apache/solr/schema/UUIDFieldTest#testToInternal().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/UUIDFieldTest#testToInternal().mjava","pathOld":"solr/src/test/org/apache/solr/schema/UUIDFieldTest#testToInternal().mjava","sourceNew":"  public void testToInternal() {\n    boolean ok = false;\n    UUIDField uuidfield = new UUIDField();\n\n    try {\n      uuidfield.toInternal((String) null);\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from null failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from empty string failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"NEW\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from 'NEW' failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"d574fb6a-5f79-4974-b01a-fcd598a19ef5\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from UUID failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"This is a test\");\n      ok = false;\n    } catch (SolrException se) {\n      ok = true;\n    }\n    assertTrue(\"Bad UUID check failed\", ok);\n  }\n\n","sourceOld":"  public void testToInternal() {\n    boolean ok = false;\n    UUIDField uuidfield = new UUIDField();\n\n    try {\n      uuidfield.toInternal((String) null);\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from null failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from empty string failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"NEW\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from 'NEW' failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"d574fb6a-5f79-4974-b01a-fcd598a19ef5\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from UUID failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"This is a test\");\n      ok = false;\n    } catch (SolrException se) {\n      ok = true;\n    }\n    assertTrue(\"Bad UUID check failed\", ok);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/UUIDFieldTest#testToInternal().mjava","pathOld":"solr/src/test/org/apache/solr/schema/UUIDFieldTest#testToInternal().mjava","sourceNew":"  public void testToInternal() {\n    boolean ok = false;\n    UUIDField uuidfield = new UUIDField();\n\n    try {\n      uuidfield.toInternal((String) null);\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from null failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from empty string failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"NEW\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from 'NEW' failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"d574fb6a-5f79-4974-b01a-fcd598a19ef5\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from UUID failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"This is a test\");\n      ok = false;\n    } catch (SolrException se) {\n      ok = true;\n    }\n    assertTrue(\"Bad UUID check failed\", ok);\n  }\n\n","sourceOld":"  public void testToInternal() {\n    boolean ok = false;\n    UUIDField uuidfield = new UUIDField();\n\n    try {\n      uuidfield.toInternal((String) null);\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from null failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from empty string failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"NEW\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from 'NEW' failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"d574fb6a-5f79-4974-b01a-fcd598a19ef5\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from UUID failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"This is a test\");\n      ok = false;\n    } catch (SolrException se) {\n      ok = true;\n    }\n    assertTrue(\"Bad UUID check failed\", ok);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/UUIDFieldTest#testToInternal().mjava","pathOld":"solr/src/test/org/apache/solr/schema/UUIDFieldTest#testToInternal().mjava","sourceNew":"  public void testToInternal() {\n    boolean ok = false;\n    UUIDField uuidfield = new UUIDField();\n\n    try {\n      uuidfield.toInternal((String) null);\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from null failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from empty string failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"NEW\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from 'NEW' failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"d574fb6a-5f79-4974-b01a-fcd598a19ef5\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from UUID failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"This is a test\");\n      ok = false;\n    } catch (SolrException se) {\n      ok = true;\n    }\n    assertTrue(\"Bad UUID check failed\", ok);\n  }\n\n","sourceOld":"  public void testToInternal() {\n    boolean ok = false;\n    UUIDField uuidfield = new UUIDField();\n\n    try {\n      uuidfield.toInternal((String) null);\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from null failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from empty string failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"NEW\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from 'NEW' failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"d574fb6a-5f79-4974-b01a-fcd598a19ef5\");\n      ok = true;\n    } catch (SolrException se) {\n      ok = false;\n    }\n    assertTrue(\"ID generation from UUID failed\", ok);\n\n    try {\n      uuidfield.toInternal(\"This is a test\");\n      ok = false;\n    } catch (SolrException se) {\n      ok = true;\n    }\n    assertTrue(\"Bad UUID check failed\", ok);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}