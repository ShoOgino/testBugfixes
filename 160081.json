{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","sourceNew":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final DocValues.Type type = reader.type();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final DocValues.Type type = reader.type();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","sourceNew":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final Type type = getType();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final DocValues.Type type = reader.type();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","sourceNew":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final Type type = getType();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final DocValues.Type type = reader.type();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","sourceNew":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final Type type = getType();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n      scratchField = new PackedLongDocValuesField(\"\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      scratchField = new ByteDocValuesField(\"\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      scratchField = new ShortDocValuesField(\"\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      scratchField = new IntDocValuesField(\"\", 0);\n      break;\n    case FIXED_INTS_64:\n      scratchField = new LongDocValuesField(\"\", (long) 0);\n      break;\n    case FLOAT_32:\n      scratchField = new FloatDocValuesField(\"\", 0f);\n      break;\n    case FLOAT_64:\n      scratchField = new DoubleDocValuesField(\"\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + type);\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final Type type = getType();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766","9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","sourceNew":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final Type type = getType();\n    final StoredField scratchField;\n    switch(type) {\n    case VAR_INTS:\n      scratchField = new PackedLongDocValuesField(\"\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      scratchField = new ByteDocValuesField(\"\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      scratchField = new ShortDocValuesField(\"\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      scratchField = new IntDocValuesField(\"\", 0);\n      break;\n    case FIXED_INTS_64:\n      scratchField = new LongDocValuesField(\"\", (long) 0);\n      break;\n    case FLOAT_32:\n      scratchField = new FloatDocValuesField(\"\", 0f);\n      break;\n    case FLOAT_64:\n      scratchField = new DoubleDocValuesField(\"\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + type);\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final Type type = getType();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n      scratchField = new PackedLongDocValuesField(\"\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      scratchField = new ByteDocValuesField(\"\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      scratchField = new ShortDocValuesField(\"\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      scratchField = new IntDocValuesField(\"\", 0);\n      break;\n    case FIXED_INTS_64:\n      scratchField = new LongDocValuesField(\"\", (long) 0);\n      break;\n    case FLOAT_32:\n      scratchField = new FloatDocValuesField(\"\", 0f);\n      break;\n    case FLOAT_64:\n      scratchField = new DoubleDocValuesField(\"\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + type);\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","sourceNew":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final Type type = getType();\n    final StoredField scratchField;\n    switch(type) {\n    case VAR_INTS:\n      scratchField = new PackedLongDocValuesField(\"\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      scratchField = new ByteDocValuesField(\"\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      scratchField = new ShortDocValuesField(\"\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      scratchField = new IntDocValuesField(\"\", 0);\n      break;\n    case FIXED_INTS_64:\n      scratchField = new LongDocValuesField(\"\", (long) 0);\n      break;\n    case FLOAT_32:\n      scratchField = new FloatDocValuesField(\"\", 0f);\n      break;\n    case FLOAT_64:\n      scratchField = new DoubleDocValuesField(\"\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + type);\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final Type type = getType();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n      scratchField = new PackedLongDocValuesField(\"\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      scratchField = new ByteDocValuesField(\"\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      scratchField = new ShortDocValuesField(\"\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      scratchField = new IntDocValuesField(\"\", 0);\n      break;\n    case FIXED_INTS_64:\n      scratchField = new LongDocValuesField(\"\", (long) 0);\n      break;\n    case FLOAT_32:\n      scratchField = new FloatDocValuesField(\"\", 0f);\n      break;\n    case FLOAT_64:\n      scratchField = new DoubleDocValuesField(\"\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + type);\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final Type type = getType();\n    final StoredField scratchField;\n    switch(type) {\n    case VAR_INTS:\n      scratchField = new PackedLongDocValuesField(\"\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      scratchField = new ByteDocValuesField(\"\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      scratchField = new ShortDocValuesField(\"\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      scratchField = new IntDocValuesField(\"\", 0);\n      break;\n    case FIXED_INTS_64:\n      scratchField = new LongDocValuesField(\"\", (long) 0);\n      break;\n    case FLOAT_32:\n      scratchField = new FloatDocValuesField(\"\", 0f);\n      break;\n    case FLOAT_64:\n      scratchField = new DoubleDocValuesField(\"\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + type);\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final Type type = getType();\n    final StoredField scratchField;\n    switch(type) {\n    case VAR_INTS:\n      scratchField = new PackedLongDocValuesField(\"\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      scratchField = new ByteDocValuesField(\"\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      scratchField = new ShortDocValuesField(\"\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      scratchField = new IntDocValuesField(\"\", 0);\n      break;\n    case FIXED_INTS_64:\n      scratchField = new LongDocValuesField(\"\", (long) 0);\n      break;\n    case FLOAT_32:\n      scratchField = new FloatDocValuesField(\"\", 0f);\n      break;\n    case FLOAT_64:\n      scratchField = new DoubleDocValuesField(\"\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      scratchField = new StraightBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      scratchField = new DerefBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      scratchField = new SortedBytesDocValuesField(\"\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + type);\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"1d028314cced5858683a1bb4741423d0f934257b":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["1d028314cced5858683a1bb4741423d0f934257b"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"1d028314cced5858683a1bb4741423d0f934257b":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}