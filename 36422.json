{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","commits":[{"id":"4be6b65a4bd628f9b1c1a8832622df34d6eba980","date":1394300189,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"/dev/null","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    // XXX client already has this set, is this needed?\n    method.getParams().setParameter(ClientPNames.HANDLE_REDIRECTS,\n        followRedirects);\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(httpStatus, \"Server at \"\n                + getBaseURL() + \" returned non ok status:\" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<Object>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        throw new RemoteSolrException(httpStatus, reason, null);\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["aef669943dc1a9d3350b34471b5a829f9191c569"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"/dev/null","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    // XXX client already has this set, is this needed?\n    method.getParams().setParameter(ClientPNames.HANDLE_REDIRECTS,\n        followRedirects);\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(httpStatus, \"Server at \"\n                + getBaseURL() + \" returned non ok status:\" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<Object>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        throw new RemoteSolrException(httpStatus, reason, null);\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    // XXX client already has this set, is this needed?\n    method.getParams().setParameter(ClientPNames.HANDLE_REDIRECTS,\n        followRedirects);\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(httpStatus, \"Server at \"\n                + getBaseURL() + \" returned non ok status:\" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        throw new RemoteSolrException(httpStatus, reason, null);\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    // XXX client already has this set, is this needed?\n    method.getParams().setParameter(ClientPNames.HANDLE_REDIRECTS,\n        followRedirects);\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(httpStatus, \"Server at \"\n                + getBaseURL() + \" returned non ok status:\" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<Object>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        throw new RemoteSolrException(httpStatus, reason, null);\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aef669943dc1a9d3350b34471b5a829f9191c569","date":1405430894,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(httpStatus, \"Server at \"\n                + getBaseURL() + \" returned non ok status:\" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        throw new RemoteSolrException(httpStatus, reason, null);\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    // XXX client already has this set, is this needed?\n    method.getParams().setParameter(ClientPNames.HANDLE_REDIRECTS,\n        followRedirects);\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(httpStatus, \"Server at \"\n                + getBaseURL() + \" returned non ok status:\" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        throw new RemoteSolrException(httpStatus, reason, null);\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["4be6b65a4bd628f9b1c1a8832622df34d6eba980"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b594b1b209efe245c2227a83c4f1a08e8054d5eb","date":1411504154,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(httpStatus, \"Server at \"\n                + getBaseURL() + \" returned non ok status:\" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(httpStatus, \"Server at \"\n                + getBaseURL() + \" returned non ok status:\" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        throw new RemoteSolrException(httpStatus, reason, null);\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16397684d6a3d78f5cb4155626024eaed408d4d7","date":1418641569,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(baseUrl, httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(httpStatus, \"Server at \"\n                + getBaseURL() + \" returned non ok status:\" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n    \n    InputStream respBody = null;\n    boolean shouldClose = true;\n    boolean success = false;\n    try {\n      // Execute the method.\n      final HttpResponse response = httpClient.execute(method);\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      respBody = response.getEntity().getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        success = true;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(baseUrl, httpStatus, msg, null);\n          throw e;\n        }\n      }\n      \n//      if(true) {\n//        ByteArrayOutputStream copy = new ByteArrayOutputStream();\n//        IOUtils.copy(respBody, copy);\n//        String val = new String(copy.toByteArray());\n//        System.out.println(\">RESPONSE>\"+val+\"<\"+val.length());\n//        respBody = new ByteArrayInputStream(copy.toByteArray());\n//      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase());\n          msg.append(\"\\n\\n\");\n          msg.append(\"request: \" + method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      success = true;\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (respBody != null && shouldClose) {\n        try {\n          respBody.close();\n        } catch (IOException e) {\n          log.error(\"\", e);\n        } finally {\n          if (!success) {\n            method.abort();\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["664c02a9f8ee4f39f4731f071c69e1932178f381","664c02a9f8ee4f39f4731f071c69e1932178f381","ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","29e605d5d76b951a56badc9b8d630a3657aff0f8"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4be6b65a4bd628f9b1c1a8832622df34d6eba980"],"16397684d6a3d78f5cb4155626024eaed408d4d7":["b594b1b209efe245c2227a83c4f1a08e8054d5eb"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4be6b65a4bd628f9b1c1a8832622df34d6eba980"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aef669943dc1a9d3350b34471b5a829f9191c569":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bafca15d8e408346a67f4282ad1143b88023893b":["16397684d6a3d78f5cb4155626024eaed408d4d7"],"4be6b65a4bd628f9b1c1a8832622df34d6eba980":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b594b1b209efe245c2227a83c4f1a08e8054d5eb":["aef669943dc1a9d3350b34471b5a829f9191c569"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["aef669943dc1a9d3350b34471b5a829f9191c569"],"16397684d6a3d78f5cb4155626024eaed408d4d7":["bafca15d8e408346a67f4282ad1143b88023893b"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","4be6b65a4bd628f9b1c1a8832622df34d6eba980"],"aef669943dc1a9d3350b34471b5a829f9191c569":["b594b1b209efe245c2227a83c4f1a08e8054d5eb"],"4be6b65a4bd628f9b1c1a8832622df34d6eba980":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b594b1b209efe245c2227a83c4f1a08e8054d5eb":["16397684d6a3d78f5cb4155626024eaed408d4d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}