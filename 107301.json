{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","pathOld":"/dev/null","sourceNew":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient(zkHost);\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","sourceNew":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder()\n            .withZkHost(zkHost)\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","sourceOld":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient(zkHost);\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","sourceNew":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder()\n            .withZkHost(zkHost)\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","sourceOld":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient(zkHost);\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","sourceNew":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty())\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","sourceOld":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder()\n            .withZkHost(zkHost)\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","sourceNew":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty())\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","sourceOld":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty())\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","sourceNew":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty())\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","sourceOld":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty())\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","sourceNew":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty())\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","sourceOld":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty())\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#waitToSeeLiveNodes(int,String,int).mjava","sourceNew":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty())\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        CLIO.err(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","sourceOld":"    protected void waitToSeeLiveNodes(int maxWaitSecs, String zkHost, int numNodes) {\n      CloudSolrClient cloudClient = null;\n      try {\n        cloudClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty())\n            .build();\n        cloudClient.connect();\n        Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n        int numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(maxWaitSecs, TimeUnit.SECONDS);\n        while (System.nanoTime() < timeout && numLiveNodes < numNodes) {\n          echo(\"\\nWaiting up to \"+maxWaitSecs+\" seconds to see \"+\n              (numNodes-numLiveNodes)+\" more nodes join the SolrCloud cluster ...\");\n          try {\n            Thread.sleep(2000);\n          } catch (InterruptedException ie) {\n            Thread.interrupted();\n          }\n          liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n          numLiveNodes = (liveNodes != null) ? liveNodes.size() : 0;\n        }\n        if (numLiveNodes < numNodes) {\n          echo(\"\\nWARNING: Only \"+numLiveNodes+\" of \"+numNodes+\n              \" are active in the cluster after \"+maxWaitSecs+\n              \" seconds! Please check the solr.log for each node to look for errors.\\n\");\n        }\n      } catch (Exception exc) {\n        System.err.println(\"Failed to see if \"+numNodes+\" joined the SolrCloud cluster due to: \"+exc);\n      } finally {\n        if (cloudClient != null) {\n          try {\n            cloudClient.close();\n          } catch (Exception ignore) {}\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["4ca20be81c9284c840498143264e583ccbb8525a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4ca20be81c9284c840498143264e583ccbb8525a","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}