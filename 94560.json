{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='yesmatchfeature:\" + doc0Score + \"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv==''\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='yesmatchfeature:\" + doc0Score + \"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv==''\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa1f8f009c5147b03311c7e6e6469fa7b677186","date":1482164570,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","sourceNew":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+FeatureLoggerTestUtils.toFeatureVector(\"yesmatchfeature\", doc0Score.toString())+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv==''\");\n  }\n\n","sourceOld":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='yesmatchfeature:\" + doc0Score + \"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv==''\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","sourceNew":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+FeatureLoggerTestUtils.toFeatureVector(\"yesmatchfeature\", doc0Score.toString())+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv==''\");\n  }\n\n","sourceOld":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='yesmatchfeature:\" + doc0Score + \"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv==''\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97843b36f201934938da5d3392d87b90624dfe6b","date":1482500716,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","sourceNew":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    final String docs0fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",doc0Score.toString(),\n        \"nomatchfeature2\",\"0.0\");\n    final String docs1fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs2fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs3fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n\n    final String docs0fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"yesmatchfeature\",doc0Score.toString());\n    final String docs1fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs2fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs3fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n\n    final String docs0fv_default_csv = chooseDefaultFeatureVector(docs0fv_dense_csv, docs0fv_sparse_csv);\n    final String docs1fv_default_csv = chooseDefaultFeatureVector(docs1fv_dense_csv, docs1fv_sparse_csv);\n    final String docs2fv_default_csv = chooseDefaultFeatureVector(docs2fv_dense_csv, docs2fv_sparse_csv);\n    final String docs3fv_default_csv = chooseDefaultFeatureVector(docs3fv_dense_csv, docs3fv_sparse_csv);\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+docs0fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv=='\"+docs1fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv=='\"+docs2fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv=='\"+docs3fv_default_csv+\"'\");\n  }\n\n","sourceOld":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+FeatureLoggerTestUtils.toFeatureVector(\"yesmatchfeature\", doc0Score.toString())+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv==''\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","sourceNew":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    final String docs0fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",doc0Score.toString(),\n        \"nomatchfeature2\",\"0.0\");\n    final String docs1fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs2fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs3fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n\n    final String docs0fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"yesmatchfeature\",doc0Score.toString());\n    final String docs1fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs2fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs3fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n\n    final String docs0fv_default_csv = chooseDefaultFeatureVector(docs0fv_dense_csv, docs0fv_sparse_csv);\n    final String docs1fv_default_csv = chooseDefaultFeatureVector(docs1fv_dense_csv, docs1fv_sparse_csv);\n    final String docs2fv_default_csv = chooseDefaultFeatureVector(docs2fv_dense_csv, docs2fv_sparse_csv);\n    final String docs3fv_default_csv = chooseDefaultFeatureVector(docs3fv_dense_csv, docs3fv_sparse_csv);\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+docs0fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv=='\"+docs1fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv=='\"+docs2fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv=='\"+docs3fv_default_csv+\"'\");\n  }\n\n","sourceOld":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+FeatureLoggerTestUtils.toFeatureVector(\"yesmatchfeature\", doc0Score.toString())+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv==''\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv==''\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","sourceNew":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    final String docs0fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",doc0Score.toString(),\n        \"nomatchfeature2\",\"0.0\");\n    final String docs1fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs2fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs3fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n\n    final String docs0fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"yesmatchfeature\",doc0Score.toString());\n    final String docs1fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs2fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs3fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n\n    final String docs0fv_default_csv = chooseDefaultFeatureVector(docs0fv_dense_csv, docs0fv_sparse_csv);\n    final String docs1fv_default_csv = chooseDefaultFeatureVector(docs1fv_dense_csv, docs1fv_sparse_csv);\n    final String docs2fv_default_csv = chooseDefaultFeatureVector(docs2fv_dense_csv, docs2fv_sparse_csv);\n    final String docs3fv_default_csv = chooseDefaultFeatureVector(docs3fv_dense_csv, docs3fv_sparse_csv);\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+docs0fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv=='\"+docs1fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv=='\"+docs2fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv=='\"+docs3fv_default_csv+\"'\");\n  }\n\n","sourceOld":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) ObjectBuilder\n        .fromJSON(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    final String docs0fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",doc0Score.toString(),\n        \"nomatchfeature2\",\"0.0\");\n    final String docs1fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs2fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs3fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n\n    final String docs0fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"yesmatchfeature\",doc0Score.toString());\n    final String docs1fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs2fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs3fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n\n    final String docs0fv_default_csv = chooseDefaultFeatureVector(docs0fv_dense_csv, docs0fv_sparse_csv);\n    final String docs1fv_default_csv = chooseDefaultFeatureVector(docs1fv_dense_csv, docs1fv_sparse_csv);\n    final String docs2fv_default_csv = chooseDefaultFeatureVector(docs2fv_dense_csv, docs2fv_sparse_csv);\n    final String docs3fv_default_csv = chooseDefaultFeatureVector(docs3fv_dense_csv, docs3fv_sparse_csv);\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+docs0fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv=='\"+docs1fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv=='\"+docs2fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv=='\"+docs3fv_default_csv+\"'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    final String docs0fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",doc0Score.toString(),\n        \"nomatchfeature2\",\"0.0\");\n    final String docs1fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs2fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs3fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n\n    final String docs0fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"yesmatchfeature\",doc0Score.toString());\n    final String docs1fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs2fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs3fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n\n    final String docs0fv_default_csv = chooseDefaultFeatureVector(docs0fv_dense_csv, docs0fv_sparse_csv);\n    final String docs1fv_default_csv = chooseDefaultFeatureVector(docs1fv_dense_csv, docs1fv_sparse_csv);\n    final String docs2fv_default_csv = chooseDefaultFeatureVector(docs2fv_dense_csv, docs2fv_sparse_csv);\n    final String docs3fv_default_csv = chooseDefaultFeatureVector(docs3fv_dense_csv, docs3fv_sparse_csv);\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+docs0fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv=='\"+docs1fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv=='\"+docs2fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv=='\"+docs3fv_default_csv+\"'\");\n  }\n\n","sourceOld":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    final String docs0fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",doc0Score.toString(),\n        \"nomatchfeature2\",\"0.0\");\n    final String docs1fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs2fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs3fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n\n    final String docs0fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"yesmatchfeature\",doc0Score.toString());\n    final String docs1fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs2fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs3fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n\n    final String docs0fv_default_csv = chooseDefaultFeatureVector(docs0fv_dense_csv, docs0fv_sparse_csv);\n    final String docs1fv_default_csv = chooseDefaultFeatureVector(docs1fv_dense_csv, docs1fv_sparse_csv);\n    final String docs2fv_default_csv = chooseDefaultFeatureVector(docs2fv_dense_csv, docs2fv_sparse_csv);\n    final String docs3fv_default_csv = chooseDefaultFeatureVector(docs3fv_dense_csv, docs3fv_sparse_csv);\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+docs0fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv=='\"+docs1fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv=='\"+docs2fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv=='\"+docs3fv_default_csv+\"'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","sourceNew":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    final String docs0fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",doc0Score.toString(),\n        \"nomatchfeature2\",\"0.0\");\n    final String docs1fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs2fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs3fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n\n    final String docs0fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"yesmatchfeature\",doc0Score.toString());\n    final String docs1fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs2fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs3fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n\n    final String docs0fv_default_csv = chooseDefaultFeatureVector(docs0fv_dense_csv, docs0fv_sparse_csv);\n    final String docs1fv_default_csv = chooseDefaultFeatureVector(docs1fv_dense_csv, docs1fv_sparse_csv);\n    final String docs2fv_default_csv = chooseDefaultFeatureVector(docs2fv_dense_csv, docs2fv_sparse_csv);\n    final String docs3fv_default_csv = chooseDefaultFeatureVector(docs3fv_dense_csv, docs3fv_sparse_csv);\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+docs0fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv=='\"+docs1fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv=='\"+docs2fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv=='\"+docs3fv_default_csv+\"'\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    final String docs0fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",doc0Score.toString(),\n        \"nomatchfeature2\",\"0.0\");\n    final String docs1fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs2fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs3fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n\n    final String docs0fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"yesmatchfeature\",doc0Score.toString());\n    final String docs1fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs2fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs3fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n\n    final String docs0fv_default_csv = chooseDefaultFeatureVector(docs0fv_dense_csv, docs0fv_sparse_csv);\n    final String docs1fv_default_csv = chooseDefaultFeatureVector(docs1fv_dense_csv, docs1fv_sparse_csv);\n    final String docs2fv_default_csv = chooseDefaultFeatureVector(docs2fv_dense_csv, docs2fv_sparse_csv);\n    final String docs3fv_default_csv = chooseDefaultFeatureVector(docs3fv_dense_csv, docs3fv_sparse_csv);\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+docs0fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv=='\"+docs1fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv=='\"+docs2fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv=='\"+docs3fv_default_csv+\"'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestNoMatchSolrFeature#test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel().mjava","sourceNew":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    @SuppressWarnings({\"unchecked\"})\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString(res);\n    @SuppressWarnings({\"unchecked\"})\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    final String docs0fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",doc0Score.toString(),\n        \"nomatchfeature2\",\"0.0\");\n    final String docs1fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs2fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs3fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n\n    final String docs0fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"yesmatchfeature\",doc0Score.toString());\n    final String docs1fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs2fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs3fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n\n    final String docs0fv_default_csv = chooseDefaultFeatureVector(docs0fv_dense_csv, docs0fv_sparse_csv);\n    final String docs1fv_default_csv = chooseDefaultFeatureVector(docs1fv_dense_csv, docs1fv_sparse_csv);\n    final String docs2fv_default_csv = chooseDefaultFeatureVector(docs2fv_dense_csv, docs2fv_sparse_csv);\n    final String docs3fv_default_csv = chooseDefaultFeatureVector(docs3fv_dense_csv, docs3fv_sparse_csv);\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+docs0fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv=='\"+docs1fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv=='\"+docs2fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv=='\"+docs3fv_default_csv+\"'\");\n  }\n\n","sourceOld":"  @Test\n  public void test2NoMatch1YesMatchFeatureReturnsFvWith1FeatureAndDocScoreScaledByModel() throws Exception {\n    // Tests model with all no matching features but 1\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"fl\", \"*, score,fv:[fv]\");\n    query.add(\"rows\", \"4\");\n    query.add(\"fv\", \"true\");\n    query.add(\"rq\", \"{!ltr model=nomatchmodel reRankDocs=4}\");\n\n    final SolrQuery yesMatchFeatureQuery = new SolrQuery();\n    yesMatchFeatureQuery.setQuery(\"title:w1\");\n    yesMatchFeatureQuery.add(\"fl\", \"score\");\n    yesMatchFeatureQuery.add(\"rows\", \"4\");\n    String res = restTestHarness.query(\"/query\"\n        + yesMatchFeatureQuery.toQueryString());\n\n    final Map<String,Object> jsonParse = (Map<String,Object>) Utils\n        .fromJSONString(res);\n    final Double doc0Score = (Double) ((Map<String,Object>) ((ArrayList<Object>) ((Map<String,Object>) jsonParse\n        .get(\"response\")).get(\"docs\")).get(0)).get(\"score\");\n\n    final String docs0fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",doc0Score.toString(),\n        \"nomatchfeature2\",\"0.0\");\n    final String docs1fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs2fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n    final String docs3fv_dense_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"nomatchfeature\",\"0.0\",\n        \"yesmatchfeature\",\"0.0\",\n        \"nomatchfeature2\",\"0.0\");\n\n    final String docs0fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"yesmatchfeature\",doc0Score.toString());\n    final String docs1fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs2fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n    final String docs3fv_sparse_csv = FeatureLoggerTestUtils.toFeatureVector();\n\n    final String docs0fv_default_csv = chooseDefaultFeatureVector(docs0fv_dense_csv, docs0fv_sparse_csv);\n    final String docs1fv_default_csv = chooseDefaultFeatureVector(docs1fv_dense_csv, docs1fv_sparse_csv);\n    final String docs2fv_default_csv = chooseDefaultFeatureVector(docs2fv_dense_csv, docs2fv_sparse_csv);\n    final String docs3fv_default_csv = chooseDefaultFeatureVector(docs3fv_dense_csv, docs3fv_sparse_csv);\n\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/id=='1'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/score==\"\n        + (doc0Score * 1.1));\n    assertJQ(\"/query\" + query.toQueryString(),\n        \"/response/docs/[0]/fv=='\"+docs0fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/id=='2'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[1]/fv=='\"+docs1fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/id=='3'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[2]/fv=='\"+docs2fv_default_csv+\"'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/id=='4'\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/score==0.0\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[3]/fv=='\"+docs3fv_default_csv+\"'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97843b36f201934938da5d3392d87b90624dfe6b":["8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["9720b151fde2073f4e401450f4574e5f31c2d0ff","8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["97843b36f201934938da5d3392d87b90624dfe6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","97843b36f201934938da5d3392d87b90624dfe6b"]},"commit2Childs":{"97843b36f201934938da5d3392d87b90624dfe6b":["3714bcf66a68a1600e9dd11442fc1b33b62ef088","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["97843b36f201934938da5d3392d87b90624dfe6b","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}