{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertFiles(IndexWriter).mjava","commits":[{"id":"09c01278fcf71c4b50f2729bade4b16ed7d48f2f","date":1526927557,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertFiles(IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  private static void assertFiles(IndexWriter writer) throws IOException {\n    // remove segment files we don't know if we have committed and what is kept around\n    Set<String> segFiles = new HashSet<>(writer.segmentInfos.files(true)).stream()\n        .filter(f -> f.startsWith(\"segments\") == false).collect(Collectors.toSet());\n    Set<String> dirFiles = new HashSet<>(Arrays.asList(writer.getDirectory().listAll()))\n        .stream().filter(f -> f.startsWith(\"segments\") == false).collect(Collectors.toSet());\n    Set<String> s = new HashSet<>(segFiles);\n    s.removeAll(dirFiles);\n    assertEquals(segFiles.toString() + \" vs \"+ dirFiles.toString(), segFiles.size(), dirFiles.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0b95ca5e42103fe1a61bf03479f0e1d223a945a8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b2332d890da51e1332717dd36041149eba6298e","date":1527054899,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertFiles(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertFiles(IndexWriter).mjava","sourceNew":"  private static void assertFiles(IndexWriter writer) throws IOException {\n    Predicate<String> filter = file -> file.startsWith(\"segments\") == false && file.equals(\"write.lock\") == false;\n    // remove segment files we don't know if we have committed and what is kept around\n    Set<String> segFiles = new HashSet<>(writer.segmentInfos.files(true)).stream()\n        .filter(filter).collect(Collectors.toSet());\n    Set<String> dirFiles = new HashSet<>(Arrays.asList(writer.getDirectory().listAll()))\n        .stream().filter(filter).collect(Collectors.toSet());\n    Set<String> s = new HashSet<>(segFiles);\n    s.removeAll(dirFiles);\n    assertEquals(segFiles.toString() + \" vs \"+ dirFiles.toString(), segFiles.size(), dirFiles.size());\n  }\n\n","sourceOld":"  private static void assertFiles(IndexWriter writer) throws IOException {\n    // remove segment files we don't know if we have committed and what is kept around\n    Set<String> segFiles = new HashSet<>(writer.segmentInfos.files(true)).stream()\n        .filter(f -> f.startsWith(\"segments\") == false).collect(Collectors.toSet());\n    Set<String> dirFiles = new HashSet<>(Arrays.asList(writer.getDirectory().listAll()))\n        .stream().filter(f -> f.startsWith(\"segments\") == false).collect(Collectors.toSet());\n    Set<String> s = new HashSet<>(segFiles);\n    s.removeAll(dirFiles);\n    assertEquals(segFiles.toString() + \" vs \"+ dirFiles.toString(), segFiles.size(), dirFiles.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0b95ca5e42103fe1a61bf03479f0e1d223a945a8","date":1527514877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertFiles(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertFiles(IndexWriter).mjava","sourceNew":"  private static void assertFiles(IndexWriter writer) throws IOException {\n    Predicate<String> filter = file -> file.startsWith(\"segments\") == false && file.equals(\"write.lock\") == false;\n    // remove segment files we don't know if we have committed and what is kept around\n    Set<String> segFiles = new HashSet<>(writer.segmentInfos.files(true)).stream()\n        .filter(filter).collect(Collectors.toSet());\n    Set<String> dirFiles = new HashSet<>(Arrays.asList(writer.getDirectory().listAll()))\n        .stream().filter(filter).collect(Collectors.toSet());\n    // ExtraFS might add an extra0 file, ignore it\n    dirFiles.remove(\"extra0\");\n    assertEquals(segFiles.size(), dirFiles.size());\n  }\n\n","sourceOld":"  private static void assertFiles(IndexWriter writer) throws IOException {\n    Predicate<String> filter = file -> file.startsWith(\"segments\") == false && file.equals(\"write.lock\") == false;\n    // remove segment files we don't know if we have committed and what is kept around\n    Set<String> segFiles = new HashSet<>(writer.segmentInfos.files(true)).stream()\n        .filter(filter).collect(Collectors.toSet());\n    Set<String> dirFiles = new HashSet<>(Arrays.asList(writer.getDirectory().listAll()))\n        .stream().filter(filter).collect(Collectors.toSet());\n    Set<String> s = new HashSet<>(segFiles);\n    s.removeAll(dirFiles);\n    assertEquals(segFiles.toString() + \" vs \"+ dirFiles.toString(), segFiles.size(), dirFiles.size());\n  }\n\n","bugFix":["09c01278fcf71c4b50f2729bade4b16ed7d48f2f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertFiles(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertFiles(IndexWriter).mjava","sourceNew":"  private static void assertFiles(IndexWriter writer) throws IOException {\n    Predicate<String> filter = file -> file.startsWith(\"segments\") == false && file.equals(\"write.lock\") == false;\n    // remove segment files we don't know if we have committed and what is kept around\n    Set<String> segFiles = writer.segmentInfos.files(true).stream()\n        .filter(filter).collect(Collectors.toSet());\n    Set<String> dirFiles = Arrays.stream(writer.getDirectory().listAll())\n        .filter(file -> !ExtrasFS.isExtra(file)) // ExtraFS might add an files, ignore them\n        .filter(filter).collect(Collectors.toSet());\n    assertEquals(segFiles.size(), dirFiles.size());\n  }\n\n","sourceOld":"  private static void assertFiles(IndexWriter writer) throws IOException {\n    Predicate<String> filter = file -> file.startsWith(\"segments\") == false && file.equals(\"write.lock\") == false;\n    // remove segment files we don't know if we have committed and what is kept around\n    Set<String> segFiles = new HashSet<>(writer.segmentInfos.files(true)).stream()\n        .filter(filter).collect(Collectors.toSet());\n    Set<String> dirFiles = new HashSet<>(Arrays.asList(writer.getDirectory().listAll()))\n        .stream().filter(filter).collect(Collectors.toSet());\n    // ExtraFS might add an extra0 file, ignore it\n    dirFiles.remove(\"extra0\");\n    assertEquals(segFiles.size(), dirFiles.size());\n  }\n\n","bugFix":null,"bugIntro":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"631ea3d1607299c59f33edef140ffc19a81f07a0","date":1532450367,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertFiles(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertFiles(IndexWriter).mjava","sourceNew":"  private static void assertFiles(IndexWriter writer) throws IOException {\n    Predicate<String> filter = file -> file.startsWith(\"segments\") == false && file.equals(\"write.lock\") == false;\n    // remove segment files we don't know if we have committed and what is kept around\n    Set<String> segFiles = new HashSet<>(writer.cloneSegmentInfos().files(true)).stream()\n        .filter(filter).collect(Collectors.toSet());\n    Set<String> dirFiles = Arrays.stream(writer.getDirectory().listAll())\n        .filter(file -> !ExtrasFS.isExtra(file)) // ExtraFS might add an files, ignore them\n        .filter(filter).collect(Collectors.toSet());\n    assertEquals(segFiles.size(), dirFiles.size());\n  }\n\n","sourceOld":"  private static void assertFiles(IndexWriter writer) throws IOException {\n    Predicate<String> filter = file -> file.startsWith(\"segments\") == false && file.equals(\"write.lock\") == false;\n    // remove segment files we don't know if we have committed and what is kept around\n    Set<String> segFiles = writer.segmentInfos.files(true).stream()\n        .filter(filter).collect(Collectors.toSet());\n    Set<String> dirFiles = Arrays.stream(writer.getDirectory().listAll())\n        .filter(file -> !ExtrasFS.isExtra(file)) // ExtraFS might add an files, ignore them\n        .filter(filter).collect(Collectors.toSet());\n    assertEquals(segFiles.size(), dirFiles.size());\n  }\n\n","bugFix":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"631ea3d1607299c59f33edef140ffc19a81f07a0":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"0b95ca5e42103fe1a61bf03479f0e1d223a945a8":["4b2332d890da51e1332717dd36041149eba6298e"],"09c01278fcf71c4b50f2729bade4b16ed7d48f2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b2332d890da51e1332717dd36041149eba6298e":["09c01278fcf71c4b50f2729bade4b16ed7d48f2f"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["0b95ca5e42103fe1a61bf03479f0e1d223a945a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["631ea3d1607299c59f33edef140ffc19a81f07a0"]},"commit2Childs":{"631ea3d1607299c59f33edef140ffc19a81f07a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0b95ca5e42103fe1a61bf03479f0e1d223a945a8":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"09c01278fcf71c4b50f2729bade4b16ed7d48f2f":["4b2332d890da51e1332717dd36041149eba6298e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c01278fcf71c4b50f2729bade4b16ed7d48f2f"],"4b2332d890da51e1332717dd36041149eba6298e":["0b95ca5e42103fe1a61bf03479f0e1d223a945a8"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}