{"path":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#getEncoder().mjava","commits":[{"id":"76cc9b4f652f477b113ac4dcf7593e1414108fcc","date":1336271018,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#getEncoder().mjava","pathOld":"/dev/null","sourceNew":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#getEncoder().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#getEncoder().mjava","sourceNew":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","sourceOld":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilterFactory#getEncoder().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#getEncoder().mjava","sourceNew":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","sourceOld":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#getEncoder().mjava","sourceNew":null,"sourceOld":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/PhoneticFilterFactory#getEncoder().mjava","sourceNew":null,"sourceOld":"  /** Must be thread-safe. */\n  protected Encoder getEncoder() {\n    // Unfortunately, Commons-Codec doesn't offer any thread-safe guarantees so we must play it safe and instantiate\n    // every time.  A simple benchmark showed this as negligible.\n    try {\n      Encoder encoder = clazz.newInstance();\n      // Try to set the maxCodeLength\n      if(maxCodeLength != null && setMaxCodeLenMethod != null) {\n        setMaxCodeLenMethod.invoke(encoder, maxCodeLength);\n      }\n      return encoder;\n    } catch (Exception e) {\n      final Throwable t = (e instanceof InvocationTargetException) ? e.getCause() : e;\n      throw new InitializationException(\"Error initializing encoder: \" + name + \" / \" + clazz, t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","5a1a22b1ad88b436661458df567f3fdb446392a4"],"76cc9b4f652f477b113ac4dcf7593e1414108fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"76cc9b4f652f477b113ac4dcf7593e1414108fcc":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}