{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#naiveLev1T(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#naiveLev1T(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#naiveLev1T(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character insertions, deletions,\n   * substitutions, and transpositions of s.\n   */\n  private Automaton naiveLev1T(String s) {\n    Automaton a = naiveLev1(s);\n    a = BasicOperations.union(a, transpositionsOf(s));\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character insertions, deletions,\n   * substitutions, and transpositions of s.\n   */\n  private Automaton naiveLev1T(String s) {\n    Automaton a = naiveLev1(s);\n    a = BasicOperations.union(a, transpositionsOf(s));\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#naiveLev1T(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#naiveLev1T(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character insertions, deletions,\n   * substitutions, and transpositions of s.\n   */\n  private LightAutomaton naiveLev1T(String s) {\n    LightAutomaton a = naiveLev1(s);\n    a = BasicOperations.unionLight(a, transpositionsOf(s));\n    a = MinimizationOperationsLight.minimize(a);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character insertions, deletions,\n   * substitutions, and transpositions of s.\n   */\n  private Automaton naiveLev1T(String s) {\n    Automaton a = naiveLev1(s);\n    a = BasicOperations.union(a, transpositionsOf(s));\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#naiveLev1T(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#naiveLev1T(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character insertions, deletions,\n   * substitutions, and transpositions of s.\n   */\n  private Automaton naiveLev1T(String s) {\n    Automaton a = naiveLev1(s);\n    a = Operations.union(a, transpositionsOf(s));\n    a = MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character insertions, deletions,\n   * substitutions, and transpositions of s.\n   */\n  private LightAutomaton naiveLev1T(String s) {\n    LightAutomaton a = naiveLev1(s);\n    a = BasicOperations.unionLight(a, transpositionsOf(s));\n    a = MinimizationOperationsLight.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#naiveLev1T(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#naiveLev1T(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character insertions, deletions,\n   * substitutions, and transpositions of s.\n   */\n  private Automaton naiveLev1T(String s) {\n    Automaton a = naiveLev1(s);\n    a = Operations.union(a, transpositionsOf(s));\n    a = MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character insertions, deletions,\n   * substitutions, and transpositions of s.\n   */\n  private Automaton naiveLev1T(String s) {\n    Automaton a = naiveLev1(s);\n    a = BasicOperations.union(a, transpositionsOf(s));\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#naiveLev1T(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#naiveLev1T(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character insertions, deletions,\n   * substitutions, and transpositions of s.\n   */\n  private Automaton naiveLev1T(String s) {\n    Automaton a = naiveLev1(s);\n    a = Operations.union(a, transpositionsOf(s));\n    a = MinimizationOperations.minimize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character insertions, deletions,\n   * substitutions, and transpositions of s.\n   */\n  private Automaton naiveLev1T(String s) {\n    Automaton a = naiveLev1(s);\n    a = Operations.union(a, transpositionsOf(s));\n    a = MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a2de8b489026711e8edde133418a7cacfd2ce4d3","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}