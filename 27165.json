{"path":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","sourceNew":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random, 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random.nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = (FixedBitSet)b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = (FixedBitSet)b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = (FixedBitSet)b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = (FixedBitSet)b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = (FixedBitSet)b.clone(); b_or.or(b0);\n        FixedBitSet b_andn = (FixedBitSet)b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random, 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random.nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = (FixedBitSet)b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = (FixedBitSet)b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = (FixedBitSet)b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = (FixedBitSet)b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = (FixedBitSet)b.clone(); b_or.or(b0);\n        FixedBitSet b_andn = (FixedBitSet)b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","sourceNew":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random, 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random.nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random, 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random.nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = (FixedBitSet)b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = (FixedBitSet)b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = (FixedBitSet)b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = (FixedBitSet)b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = (FixedBitSet)b.clone(); b_or.or(b0);\n        FixedBitSet b_andn = (FixedBitSet)b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","sourceNew":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random, 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random.nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random.nextInt(sz/2);\n      toIndex = fromIndex + random.nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","sourceNew":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","sourceNew":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = _TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00eb219951851904624cf9d5499bfe33a08afaeb","date":1413982250,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","sourceNew":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx, idx+1);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx, idx+1);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doRandomSets(int,int,int).mjava","sourceNew":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    java.util.BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      java.util.BitSet a = new java.util.BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx, idx+1);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      java.util.BitSet aa = (java.util.BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (java.util.BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (java.util.BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        java.util.BitSet a_and = (java.util.BitSet)a.clone(); a_and.and(a0);\n        java.util.BitSet a_or = (java.util.BitSet)a.clone(); a_or.or(a0);\n        java.util.BitSet a_xor = (java.util.BitSet)a.clone(); a_xor.xor(a0);\n        java.util.BitSet a_andn = (java.util.BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) throws IOException {\n    BitSet a0=null;\n    FixedBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = TestUtil.nextInt(random(), 2, maxSize);\n      BitSet a = new BitSet(sz);\n      FixedBitSet b = new FixedBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.set(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.clear(idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx, idx+1);\n          b.flip(idx, idx+1);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.flip(idx);\n\n          boolean val2 = b.get(idx);\n          boolean val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.clear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      FixedBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      \n      doPrevSetBit(aa,bb);\n\n      fromIndex = random().nextInt(sz/2);\n      toIndex = fromIndex + random().nextInt(sz - fromIndex);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n    \n      doPrevSetBit(aa,bb);\n\n      if (b0 != null && b0.length() <= b.length()) {\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        FixedBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        FixedBitSet b_or = b.clone(); b_or.or(b0);\n        FixedBitSet b_xor = b.clone(); b_xor.xor(b0);\n        FixedBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        assertEquals(a0.cardinality(), b0.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_andn,b_andn, mode);\n        doIterate(a_xor,b_xor, mode);\n        \n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["3995f83351082af8ae83bb017e63c56818fc1568"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00eb219951851904624cf9d5499bfe33a08afaeb":["6613659748fe4411a7dcf85266e55db1f95f7315"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["00eb219951851904624cf9d5499bfe33a08afaeb"],"3995f83351082af8ae83bb017e63c56818fc1568":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["00eb219951851904624cf9d5499bfe33a08afaeb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"00eb219951851904624cf9d5499bfe33a08afaeb":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3995f83351082af8ae83bb017e63c56818fc1568"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3995f83351082af8ae83bb017e63c56818fc1568":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}