{"path":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","commits":[{"id":"222ff577a0e1b2399d3151966bf561ecd7a0b7d0","date":1395575041,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<AtomicReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, false);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      AtomicReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        collector.setNextReader(readerContext);\n        collector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      collector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<AtomicReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, false);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      AtomicReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        collector.getLeafCollector(readerContext);\n        collector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      collector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<AtomicReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, false);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      AtomicReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        collector.setNextReader(readerContext);\n        collector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      collector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<AtomicReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, false);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      AtomicReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        collector.getLeafCollector(readerContext);\n        collector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      collector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<AtomicReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, false);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      AtomicReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        collector.setNextReader(readerContext);\n        collector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      collector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, false);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        collector.getLeafCollector(readerContext);\n        collector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      collector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<AtomicReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, false);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      AtomicReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        collector.getLeafCollector(readerContext);\n        collector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      collector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, false);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, false);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        collector.getLeafCollector(readerContext);\n        collector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      collector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, false);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Comparator<ScoreDoc> docIdComparator = Comparator.comparingInt(sd -> sd.doc);\n    Arrays.sort(hits, docIdComparator);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    TopDocs rescoredDocs = collector.topDocs();\n    // set scores from the original score docs\n    assert hits.length == rescoredDocs.scoreDocs.length;\n    ScoreDoc[] rescoredDocsClone = rescoredDocs.scoreDocs.clone();\n    Arrays.sort(rescoredDocsClone, docIdComparator);\n    for (int i = 0; i < rescoredDocsClone.length; ++i) {\n      rescoredDocsClone[i].score = hits[i].score;\n    }\n    return rescoredDocs;\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Arrays.sort(hits,\n                new Comparator<ScoreDoc>() {\n                  @Override\n                  public int compare(ScoreDoc a, ScoreDoc b) {\n                    return a.doc - b.doc;\n                  }\n                });\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    return collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Comparator<ScoreDoc> docIdComparator = Comparator.comparingInt(sd -> sd.doc);\n    Arrays.sort(hits, docIdComparator);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, Integer.MAX_VALUE);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    TopDocs rescoredDocs = collector.topDocs();\n    // set scores from the original score docs\n    assert hits.length == rescoredDocs.scoreDocs.length;\n    ScoreDoc[] rescoredDocsClone = rescoredDocs.scoreDocs.clone();\n    Arrays.sort(rescoredDocsClone, docIdComparator);\n    for (int i = 0; i < rescoredDocsClone.length; ++i) {\n      rescoredDocsClone[i].score = hits[i].score;\n    }\n    return rescoredDocs;\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Comparator<ScoreDoc> docIdComparator = Comparator.comparingInt(sd -> sd.doc);\n    Arrays.sort(hits, docIdComparator);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, true);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    TopDocs rescoredDocs = collector.topDocs();\n    // set scores from the original score docs\n    assert hits.length == rescoredDocs.scoreDocs.length;\n    ScoreDoc[] rescoredDocsClone = rescoredDocs.scoreDocs.clone();\n    Arrays.sort(rescoredDocsClone, docIdComparator);\n    for (int i = 0; i < rescoredDocsClone.length; ++i) {\n      rescoredDocsClone[i].score = hits[i].score;\n    }\n    return rescoredDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortRescorer#rescore(IndexSearcher,TopDocs,int).mjava","sourceNew":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Comparator<ScoreDoc> docIdComparator = Comparator.comparingInt(sd -> sd.doc);\n    Arrays.sort(hits, docIdComparator);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, Integer.MAX_VALUE);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    ScoreAndDoc scoreAndDoc = new ScoreAndDoc();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(scoreAndDoc);\n        docBase = readerContext.docBase;\n      }\n\n      scoreAndDoc.score = hit.score;\n      scoreAndDoc.doc = docID - docBase;\n\n      leafCollector.collect(scoreAndDoc.doc);\n\n      hitUpto++;\n    }\n\n    TopDocs rescoredDocs = collector.topDocs();\n    // set scores from the original score docs\n    assert hits.length == rescoredDocs.scoreDocs.length;\n    ScoreDoc[] rescoredDocsClone = rescoredDocs.scoreDocs.clone();\n    Arrays.sort(rescoredDocsClone, docIdComparator);\n    for (int i = 0; i < rescoredDocsClone.length; ++i) {\n      rescoredDocsClone[i].score = hits[i].score;\n    }\n    return rescoredDocs;\n  }\n\n","sourceOld":"  @Override\n  public TopDocs rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) throws IOException {\n\n    // Copy ScoreDoc[] and sort by ascending docID:\n    ScoreDoc[] hits = firstPassTopDocs.scoreDocs.clone();\n    Comparator<ScoreDoc> docIdComparator = Comparator.comparingInt(sd -> sd.doc);\n    Arrays.sort(hits, docIdComparator);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, topN, Integer.MAX_VALUE);\n\n    // Now merge sort docIDs from hits, with reader's leaves:\n    int hitUpto = 0;\n    int readerUpto = -1;\n    int endDoc = 0;\n    int docBase = 0;\n\n    LeafCollector leafCollector = null;\n    FakeScorer fakeScorer = new FakeScorer();\n\n    while (hitUpto < hits.length) {\n      ScoreDoc hit = hits[hitUpto];\n      int docID = hit.doc;\n      LeafReaderContext readerContext = null;\n      while (docID >= endDoc) {\n        readerUpto++;\n        readerContext = leaves.get(readerUpto);\n        endDoc = readerContext.docBase + readerContext.reader().maxDoc();\n      }\n\n      if (readerContext != null) {\n        // We advanced to another segment:\n        leafCollector = collector.getLeafCollector(readerContext);\n        leafCollector.setScorer(fakeScorer);\n        docBase = readerContext.docBase;\n      }\n\n      fakeScorer.score = hit.score;\n      fakeScorer.doc = docID - docBase;\n\n      leafCollector.collect(fakeScorer.doc);\n\n      hitUpto++;\n    }\n\n    TopDocs rescoredDocs = collector.topDocs();\n    // set scores from the original score docs\n    assert hits.length == rescoredDocs.scoreDocs.length;\n    ScoreDoc[] rescoredDocsClone = rescoredDocs.scoreDocs.clone();\n    Arrays.sort(rescoredDocsClone, docIdComparator);\n    for (int i = 0; i < rescoredDocsClone.length; ++i) {\n      rescoredDocsClone[i].score = hits[i].score;\n    }\n    return rescoredDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"404d1ab7f6f396235047017c88d545fec15dafb7":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"901e951cec2e6af4e503209a6721c8834db23279":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ae73da626f97850c922c42736f808d0378e165f0"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","404d1ab7f6f396235047017c88d545fec15dafb7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1aad05eeff7818b0833c02ac6b743aa72054963b","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["901e951cec2e6af4e503209a6721c8834db23279"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["1d3f7ab1a502671bbdb03bcced21e764d2483221"]},"commit2Childs":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"901e951cec2e6af4e503209a6721c8834db23279":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["901e951cec2e6af4e503209a6721c8834db23279"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["404d1ab7f6f396235047017c88d545fec15dafb7","1aad05eeff7818b0833c02ac6b743aa72054963b"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"ae73da626f97850c922c42736f808d0378e165f0":["c9fb5f46e264daf5ba3860defe623a89d202dd87","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["04c370507e5521b2eb998530736f1c19b851ed5a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}