{"path":"solr/core/src/test/org/apache/solr/search/DelayingSearchComponent#process(ResponseBuilder).mjava","commits":[{"id":"910d5b8d32edfdcd07b56db488f8a2d55957f712","date":1412211530,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/DelayingSearchComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException e) {\n      // Do nothing?\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/DelayingSearchComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException e) {\n      // Do nothing?\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4801fd4ad4830fcde9b6ed9024c04839ade25e42","date":1441807244,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/DelayingSearchComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/DelayingSearchComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    int sleep = rb.req.getParams().getInt(\"sleep\",0);\n    try {\n      if (sleep > 0) {\n        Thread.sleep(sleep);\n      }\n    } catch (InterruptedException e) {\n      // Do nothing?\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException e) {\n      // Do nothing?\n    }\n  }\n\n","bugFix":["910d5b8d32edfdcd07b56db488f8a2d55957f712"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a75eaa0fad8fbe0ea4dc044fa800eda625e0e1e","date":1576616073,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/DelayingSearchComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/DelayingSearchComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    final long totalSleepMillis = rb.req.getParams().getLong(\"sleep\",0);\n    if (totalSleepMillis > 0) {\n      final long totalSleepNanos = TimeUnit.NANOSECONDS.convert(totalSleepMillis, TimeUnit.MILLISECONDS);\n      final long startNanos = System.nanoTime();\n      try {\n        // Thread.sleep() (and derivatives) are not garunteed to sleep the full amount:\n        //   \"subject to the precision and accuracy of system timers and schedulers.\"\n        // This is particularly problematic on Windows VMs, so we do a retry loop\n        // to ensure we sleep a total of at least as long as requested\n        //\n        // (Tests using this component do so explicitly to ensure 'timeAllowed'\n        // has exceeded in order to get their expected results, we would rather over-sleep\n        // then under sleep)\n        for (long sleepNanos = totalSleepNanos;\n             0 < sleepNanos;\n             sleepNanos = totalSleepNanos - (System.nanoTime() - startNanos)) {\n          TimeUnit.NANOSECONDS.sleep(sleepNanos);\n        }\n      } catch (InterruptedException e) {\n        // Do nothing?\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    int sleep = rb.req.getParams().getInt(\"sleep\",0);\n    try {\n      if (sleep > 0) {\n        Thread.sleep(sleep);\n      }\n    } catch (InterruptedException e) {\n      // Do nothing?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/DelayingSearchComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/DelayingSearchComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    final long totalSleepMillis = rb.req.getParams().getLong(\"sleep\",0);\n    if (totalSleepMillis > 0) {\n      final long totalSleepNanos = TimeUnit.NANOSECONDS.convert(totalSleepMillis, TimeUnit.MILLISECONDS);\n      final long startNanos = System.nanoTime();\n      try {\n        // Thread.sleep() (and derivatives) are not garunteed to sleep the full amount:\n        //   \"subject to the precision and accuracy of system timers and schedulers.\"\n        // This is particularly problematic on Windows VMs, so we do a retry loop\n        // to ensure we sleep a total of at least as long as requested\n        //\n        // (Tests using this component do so explicitly to ensure 'timeAllowed'\n        // has exceeded in order to get their expected results, we would rather over-sleep\n        // then under sleep)\n        for (long sleepNanos = totalSleepNanos;\n             0 < sleepNanos;\n             sleepNanos = totalSleepNanos - (System.nanoTime() - startNanos)) {\n          TimeUnit.NANOSECONDS.sleep(sleepNanos);\n        }\n      } catch (InterruptedException e) {\n        // Do nothing?\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    int sleep = rb.req.getParams().getInt(\"sleep\",0);\n    try {\n      if (sleep > 0) {\n        Thread.sleep(sleep);\n      }\n    } catch (InterruptedException e) {\n      // Do nothing?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["4801fd4ad4830fcde9b6ed9024c04839ade25e42","5a75eaa0fad8fbe0ea4dc044fa800eda625e0e1e"],"910d5b8d32edfdcd07b56db488f8a2d55957f712":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","910d5b8d32edfdcd07b56db488f8a2d55957f712"],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["910d5b8d32edfdcd07b56db488f8a2d55957f712"],"5a75eaa0fad8fbe0ea4dc044fa800eda625e0e1e":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a75eaa0fad8fbe0ea4dc044fa800eda625e0e1e"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"910d5b8d32edfdcd07b56db488f8a2d55957f712":["d9a47902d6207303f5ed3e7aaca62ca33433af66","4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["910d5b8d32edfdcd07b56db488f8a2d55957f712","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["246314af59d76a47fccc31e9494eefee01ec9c00","5a75eaa0fad8fbe0ea4dc044fa800eda625e0e1e"],"5a75eaa0fad8fbe0ea4dc044fa800eda625e0e1e":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}