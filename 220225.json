{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    DocSet answer;\n    if (filterCache != null) {\n      answer = (DocSet)filterCache.get(query);\n      if (answer!=null) return answer;\n    }\n\n    answer = getDocSetNC(query, null);\n\n    if (filterCache != null) {\n      filterCache.put(query, answer);\n    }\n\n    return answer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1940b60224897131cf61bb615e02af1b26558c8","date":1169501002,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = (DocSet)filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    DocSet answer;\n    if (filterCache != null) {\n      answer = (DocSet)filterCache.get(query);\n      if (answer!=null) return answer;\n    }\n\n    answer = getDocSetNC(query, null);\n\n    if (filterCache != null) {\n      filterCache.put(query, answer);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = (DocSet)filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = (DocSet)filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1940b60224897131cf61bb615e02af1b26558c8":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b1940b60224897131cf61bb615e02af1b26558c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["b1940b60224897131cf61bb615e02af1b26558c8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1940b60224897131cf61bb615e02af1b26558c8":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}