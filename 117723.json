{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","sourceNew":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"maxTokenLength\", \"1000\");\n    ClassicTokenizerFactory factory = new ClassicTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\" });\n  }\n\n","sourceOld":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"maxTokenLength\", \"1000\");\n    ClassicTokenizerFactory factory = new ClassicTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","sourceNew":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"maxTokenLength\", \"1000\");\n    ClassicTokenizerFactory factory = new ClassicTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\" });\n  }\n\n","sourceOld":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"maxTokenLength\", \"1000\");\n    ClassicTokenizerFactory factory = new ClassicTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","sourceNew":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"maxTokenLength\", \"1000\");\n    ClassicTokenizerFactory factory = new ClassicTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\" });\n  }\n\n","sourceOld":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"maxTokenLength\", \"1000\");\n    ClassicTokenizerFactory factory = new ClassicTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","sourceNew":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"maxTokenLength\", \"1000\");\n    ClassicTokenizerFactory factory = new ClassicTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\" });\n  }\n\n","sourceOld":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"maxTokenLength\", \"1000\");\n    ClassicTokenizerFactory factory = new ClassicTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","sourceNew":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Tokenizer stream = tokenizerFactory(\"Classic\",\n        \"maxTokenLength\", \"1000\").create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\" });\n  }\n\n","sourceOld":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"maxTokenLength\", \"1000\");\n    ClassicTokenizerFactory factory = new ClassicTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    Tokenizer stream = factory.create(reader);\n    assertTokenStreamContents(stream, \n        new String[] {\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","sourceNew":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Tokenizer stream = tokenizerFactory(\"Classic\",\n        \"maxTokenLength\", \"1000\").create();\n    stream.setReader(reader);\n    assertTokenStreamContents(stream,\n        new String[]{\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\"});\n  }\n\n","sourceOld":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Tokenizer stream = tokenizerFactory(\"Classic\",\n        \"maxTokenLength\", \"1000\").create(reader);\n    assertTokenStreamContents(stream, \n        new String[] { \"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","sourceNew":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Tokenizer stream = tokenizerFactory(\"Classic\",\n        \"maxTokenLength\", \"1000\").create(newAttributeFactory());\n    stream.setReader(reader);\n    assertTokenStreamContents(stream,\n        new String[]{\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\"});\n  }\n\n","sourceOld":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Tokenizer stream = tokenizerFactory(\"Classic\",\n        \"maxTokenLength\", \"1000\").create();\n    stream.setReader(reader);\n    assertTokenStreamContents(stream,\n        new String[]{\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313c36388b6cae6118f75a1860ad0ba0af7e1344","date":1601279368,"type":5,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/classic/TestClassicFactories#testClassicTokenizerMaxTokenLength().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testClassicTokenizerMaxTokenLength().mjava","sourceNew":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Tokenizer stream = tokenizerFactory(\"Classic\",\n        \"maxTokenLength\", \"1000\").create(newAttributeFactory());\n    stream.setReader(reader);\n    assertTokenStreamContents(stream,\n        new String[]{\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\"});\n  }\n\n","sourceOld":"  public void testClassicTokenizerMaxTokenLength() throws Exception {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0 ; i < 100 ; ++i) {\n      builder.append(\"abcdefg\"); // 7 * 100 = 700 char \"word\"\n    }\n    String longWord = builder.toString();\n    String content = \"one two three \" + longWord + \" four five six\";\n    Reader reader = new StringReader(content);\n    Tokenizer stream = tokenizerFactory(\"Classic\",\n        \"maxTokenLength\", \"1000\").create(newAttributeFactory());\n    stream.setReader(reader);\n    assertTokenStreamContents(stream,\n        new String[]{\"one\", \"two\", \"three\", longWord, \"four\", \"five\", \"six\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"313c36388b6cae6118f75a1860ad0ba0af7e1344":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["313c36388b6cae6118f75a1860ad0ba0af7e1344"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"313c36388b6cae6118f75a1860ad0ba0af7e1344":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["313c36388b6cae6118f75a1860ad0ba0af7e1344"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}