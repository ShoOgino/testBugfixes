{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","commits":[{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity,Scorer[],int).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) throws IOException {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param similarity\n   *          -- not used since our definition involves neither coord nor terms\n   *          directly\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(float tieBreakerMultiplier,\n      Similarity similarity, Scorer[] subScorers, int numScorers) throws IOException {\n    super(similarity);\n\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(float,Similarity,Scorer[],int).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) throws IOException {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param similarity\n   *          -- not used since our definition involves neither coord nor terms\n   *          directly\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(float tieBreakerMultiplier,\n      Similarity similarity, Scorer[] subScorers, int numScorers) throws IOException {\n    super(similarity);\n\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) throws IOException {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) throws IOException {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) throws IOException {\n    super(weight);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    // The passed subScorers array includes only scorers which have documents\n    // (DisjunctionMaxQuery takes care of that), and their nextDoc() was already\n    // called.\n    this.subScorers = subScorers;\n    this.numScorers = numScorers;\n    \n    heapify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5e679b9c5f68f1f331de920ae8366af75b44060":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","e5e679b9c5f68f1f331de920ae8366af75b44060","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}