{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(CategoryPath).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(CategoryPath).mjava","sourceNew":"  /**\n   * Subclasses can override this to provide caching by e.g. hash of the string.\n   * @param name\n   * @return\n   */\n  Object key(CategoryPath name) {\n    // Note that a copy constructor (cloning) here is necessary, because a\n    // CategoryPath object is mutable, so we cannot save a reference to an\n    // existing CategoryPath. Subclasses which override this method can\n    // avoid this cloning by, e.g., hashing the name.\n    return new CategoryPath(name);\n  }\n\n","sourceOld":"  /**\n   * Subclasses can override this to provide caching by e.g. hash of the string.\n   * @param name\n   * @return\n   */\n  Object key(CategoryPath name) {\n    // Note that a copy constructor (cloning) here is necessary, because a\n    // CategoryPath object is mutable, so we cannot save a reference to an\n    // existing CategoryPath. Subclasses which override this method can\n    // avoid this cloning by, e.g., hashing the name.\n    return new CategoryPath(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55561c30c3f4bcb0eaa3d228d46127942dd304a2","date":1347207123,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(CategoryPath).mjava","sourceNew":"  /**\n   * Subclasses can override this to provide caching by e.g. hash of the string.\n   */\n  Object key(CategoryPath name) {\n    // Note that a copy constructor (cloning) here is necessary, because a\n    // CategoryPath object is mutable, so we cannot save a reference to an\n    // existing CategoryPath. Subclasses which override this method can\n    // avoid this cloning by, e.g., hashing the name.\n    return new CategoryPath(name);\n  }\n\n","sourceOld":"  /**\n   * Subclasses can override this to provide caching by e.g. hash of the string.\n   * @param name\n   * @return\n   */\n  Object key(CategoryPath name) {\n    // Note that a copy constructor (cloning) here is necessary, because a\n    // CategoryPath object is mutable, so we cannot save a reference to an\n    // existing CategoryPath. Subclasses which override this method can\n    // avoid this cloning by, e.g., hashing the name.\n    return new CategoryPath(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(CategoryPath).mjava","sourceNew":"  /** Subclasses can override this to provide caching by e.g. hash of the string. */\n  Object key(CategoryPath name) {\n    return name;\n  }\n\n","sourceOld":"  /**\n   * Subclasses can override this to provide caching by e.g. hash of the string.\n   */\n  Object key(CategoryPath name) {\n    // Note that a copy constructor (cloning) here is necessary, because a\n    // CategoryPath object is mutable, so we cannot save a reference to an\n    // existing CategoryPath. Subclasses which override this method can\n    // avoid this cloning by, e.g., hashing the name.\n    return new CategoryPath(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(CategoryPath).mjava","sourceNew":"  /** Subclasses can override this to provide caching by e.g. hash of the string. */\n  Object key(CategoryPath name) {\n    return name;\n  }\n\n","sourceOld":"  /**\n   * Subclasses can override this to provide caching by e.g. hash of the string.\n   */\n  Object key(CategoryPath name) {\n    // Note that a copy constructor (cloning) here is necessary, because a\n    // CategoryPath object is mutable, so we cannot save a reference to an\n    // existing CategoryPath. Subclasses which override this method can\n    // avoid this cloning by, e.g., hashing the name.\n    return new CategoryPath(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(CategoryPath).mjava","sourceNew":"  /** Subclasses can override this to provide caching by e.g. hash of the string. */\n  Object key(FacetLabel name) {\n    return name;\n  }\n\n","sourceOld":"  /** Subclasses can override this to provide caching by e.g. hash of the string. */\n  Object key(CategoryPath name) {\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#key(CategoryPath).mjava","sourceNew":null,"sourceOld":"  /** Subclasses can override this to provide caching by e.g. hash of the string. */\n  Object key(CategoryPath name) {\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["55561c30c3f4bcb0eaa3d228d46127942dd304a2","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["55561c30c3f4bcb0eaa3d228d46127942dd304a2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"55561c30c3f4bcb0eaa3d228d46127942dd304a2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["55561c30c3f4bcb0eaa3d228d46127942dd304a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55561c30c3f4bcb0eaa3d228d46127942dd304a2":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}