{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","commits":[{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/DefaultFacetIndexingParamsTest#testCategoryPolicies().mjava","sourceNew":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = FacetIndexingParams.ALL_PARENTS;\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = new DefaultFacetIndexingParams();\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","sourceNew":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = FacetIndexingParams.ALL_PARENTS;\n    // check path policy\n    CategoryPath cp = CategoryPath.EMPTY;\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = FacetIndexingParams.ALL_PARENTS;\n    // check path policy\n    CategoryPath cp = new CategoryPath();\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = FacetIndexingParams.ALL_PARENTS;\n    // check path policy\n    CategoryPath cp = CategoryPath.EMPTY;\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ffa18fad2d839bbae5054931722c97d04c10258","date":1358772877,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","sourceNew":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = FacetIndexingParams.ALL_PARENTS;\n    // check path policy\n    CategoryPath cp = CategoryPath.EMPTY;\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10) + 1;\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = FacetIndexingParams.ALL_PARENTS;\n    // check path policy\n    CategoryPath cp = CategoryPath.EMPTY;\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","sourceNew":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = FacetIndexingParams.ALL_PARENTS;\n    // check path policy\n    CategoryPath cp = CategoryPath.EMPTY;\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10) + 1;\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = FacetIndexingParams.ALL_PARENTS;\n    // check path policy\n    CategoryPath cp = CategoryPath.EMPTY;\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10);\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66644845192a1c92d87d5324cc0b5af16ad31b42","date":1358970583,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = FacetIndexingParams.ALL_PARENTS;\n    // check path policy\n    CategoryPath cp = CategoryPath.EMPTY;\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10) + 1;\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/FacetIndexingParamsTest#testCategoryPolicies().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCategoryPolicies() {\n    FacetIndexingParams dfip = FacetIndexingParams.ALL_PARENTS;\n    // check path policy\n    CategoryPath cp = CategoryPath.EMPTY;\n    PathPolicy pathPolicy = PathPolicy.ALL_CATEGORIES;\n    assertEquals(\"path policy does not match default for root\", pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    for (int i = 0; i < 30; i++) {\n      int nComponents = random().nextInt(10) + 1;\n      String[] components = new String[nComponents];\n      for (int j = 0; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      cp = new CategoryPath(components);\n      assertEquals(\"path policy does not match default for \" + cp.toString('/'), \n          pathPolicy.shouldAdd(cp), dfip.getPathPolicy().shouldAdd(cp));\n    }\n\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = OrdinalPolicy.ALL_PARENTS;\n    assertEquals(\"ordinal policy does not match default for root\", \n        ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL), \n        dfip.getOrdinalPolicy().shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 30; i++) {\n      int ordinal = random().nextInt();\n      assertEquals(\"ordinal policy does not match default for \" + ordinal, \n          ordinalPolicy.shouldAdd(ordinal),\n          dfip.getOrdinalPolicy().shouldAdd(ordinal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["1ffa18fad2d839bbae5054931722c97d04c10258"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ffa18fad2d839bbae5054931722c97d04c10258":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1ffa18fad2d839bbae5054931722c97d04c10258"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["66644845192a1c92d87d5324cc0b5af16ad31b42"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["07155cdd910937cdf6877e48884d5782845c8b8b","66644845192a1c92d87d5324cc0b5af16ad31b42"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1ffa18fad2d839bbae5054931722c97d04c10258"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"1ffa18fad2d839bbae5054931722c97d04c10258":["66644845192a1c92d87d5324cc0b5af16ad31b42","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}