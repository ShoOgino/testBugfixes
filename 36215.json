{"path":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#writeTerm(int,byte[],int).mjava","commits":[{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#writeTerm(int,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void writeTerm(int fieldNumber, byte[] termBytes, int termBytesLength)\n       throws IOException {\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = termBytesLength < lastTermBytesLength ? termBytesLength : lastTermBytesLength;\n    while(start < limit) {\n      if (termBytes[start] != lastTermBytes[start])\n        break;\n      start++;\n    }\n\n    final int length = termBytesLength - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(termBytes, start, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    if (lastTermBytes.length < termBytesLength) {\n      lastTermBytes = ArrayUtil.grow(lastTermBytes, termBytesLength);\n    }\n    System.arraycopy(termBytes, start, lastTermBytes, start, length);\n    lastTermBytesLength = termBytesLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#writeTerm(int,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  private void writeTerm(int fieldNumber, byte[] termBytes, int termBytesLength)\n       throws IOException {\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = termBytesLength < lastTermBytesLength ? termBytesLength : lastTermBytesLength;\n    while(start < limit) {\n      if (termBytes[start] != lastTermBytes[start])\n        break;\n      start++;\n    }\n\n    final int length = termBytesLength - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(termBytes, start, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    if (lastTermBytes.length < termBytesLength) {\n      lastTermBytes = ArrayUtil.grow(lastTermBytes, termBytesLength);\n    }\n    System.arraycopy(termBytes, start, lastTermBytes, start, length);\n    lastTermBytesLength = termBytesLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#writeTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#writeTerm(int,byte[],int).mjava","sourceNew":"  private void writeTerm(int fieldNumber, BytesRef term)\n       throws IOException {\n\n    //System.out.println(\"  tiw.write field=\" + fieldNumber + \" term=\" + term.utf8ToString());\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = term.length < lastTerm.length ? term.length : lastTerm.length;\n    while(start < limit) {\n      if (term.bytes[start+term.offset] != lastTerm.bytes[start+lastTerm.offset])\n        break;\n      start++;\n    }\n\n    final int length = term.length - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(term.bytes, start+term.offset, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    lastTerm.copy(term);\n  }\n\n","sourceOld":"  private void writeTerm(int fieldNumber, byte[] termBytes, int termBytesLength)\n       throws IOException {\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = termBytesLength < lastTermBytesLength ? termBytesLength : lastTermBytesLength;\n    while(start < limit) {\n      if (termBytes[start] != lastTermBytes[start])\n        break;\n      start++;\n    }\n\n    final int length = termBytesLength - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(termBytes, start, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    if (lastTermBytes.length < termBytesLength) {\n      lastTermBytes = ArrayUtil.grow(lastTermBytes, termBytesLength);\n    }\n    System.arraycopy(termBytes, start, lastTermBytes, start, length);\n    lastTermBytesLength = termBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#writeTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#writeTerm(int,byte[],int).mjava","sourceNew":"  private void writeTerm(int fieldNumber, BytesRef term)\n       throws IOException {\n\n    //System.out.println(\"  tiw.write field=\" + fieldNumber + \" term=\" + term.utf8ToString());\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = term.length < lastTerm.length ? term.length : lastTerm.length;\n    while(start < limit) {\n      if (term.bytes[start+term.offset] != lastTerm.bytes[start+lastTerm.offset])\n        break;\n      start++;\n    }\n\n    final int length = term.length - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(term.bytes, start+term.offset, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    lastTerm.copy(term);\n  }\n\n","sourceOld":"  private void writeTerm(int fieldNumber, byte[] termBytes, int termBytesLength)\n       throws IOException {\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = termBytesLength < lastTermBytesLength ? termBytesLength : lastTermBytesLength;\n    while(start < limit) {\n      if (termBytes[start] != lastTermBytes[start])\n        break;\n      start++;\n    }\n\n    final int length = termBytesLength - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(termBytes, start, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    if (lastTermBytes.length < termBytesLength) {\n      lastTermBytes = ArrayUtil.grow(lastTermBytes, termBytesLength);\n    }\n    System.arraycopy(termBytes, start, lastTermBytes, start, length);\n    lastTermBytesLength = termBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/TermInfosWriter#writeTerm(int,BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TermInfosWriter#writeTerm(int,byte[],int).mjava","sourceNew":"  private void writeTerm(int fieldNumber, BytesRef term)\n       throws IOException {\n\n    //System.out.println(\"  tiw.write field=\" + fieldNumber + \" term=\" + term.utf8ToString());\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = term.length < lastTerm.length ? term.length : lastTerm.length;\n    while(start < limit) {\n      if (term.bytes[start+term.offset] != lastTerm.bytes[start+lastTerm.offset])\n        break;\n      start++;\n    }\n\n    final int length = term.length - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(term.bytes, start+term.offset, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    lastTerm.copy(term);\n  }\n\n","sourceOld":"  private void writeTerm(int fieldNumber, byte[] termBytes, int termBytesLength)\n       throws IOException {\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = termBytesLength < lastTermBytesLength ? termBytesLength : lastTermBytesLength;\n    while(start < limit) {\n      if (termBytes[start] != lastTermBytes[start])\n        break;\n      start++;\n    }\n\n    final int length = termBytesLength - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(termBytes, start, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    if (lastTermBytes.length < termBytesLength) {\n      lastTermBytes = ArrayUtil.grow(lastTermBytes, termBytesLength);\n    }\n    System.arraycopy(termBytes, start, lastTermBytes, start, length);\n    lastTermBytesLength = termBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08932c793647a36953d1816b1060121f48820d3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["08932c793647a36953d1816b1060121f48820d3f","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["08932c793647a36953d1816b1060121f48820d3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b103252dee6afa1b6d7a622c773d178788eb85a"]},"commit2Childs":{"08932c793647a36953d1816b1060121f48820d3f":["4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57","5f4e87790277826a2aea119328600dfb07761f32"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}