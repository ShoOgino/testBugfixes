{"path":"src/java/org/apache/solr/handler/SnapShooter#createSnapshot(Collection[String],ReplicationHandler).mjava","commits":[{"id":"217dd2e5ec780896e70b9d4bf5ff18c0079142fb","date":1241459287,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapShooter#createSnapshot(Collection[String],ReplicationHandler).mjava","pathOld":"/dev/null","sourceNew":"  void createSnapshot(Collection<String> files, ReplicationHandler replicationHandler) {\n    NamedList details = new NamedList();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      for (String indexFile : files) {\n        FileUtils.copyFileToDirectory(new File(solrCore.getIndexDir(), indexFile), snapShotDir, true);\n      }\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["08fd846faeaddb28f2b20f569afe4f79b394f62d","0fcdcf196523675146a4df3193e91413533857ab","0fcdcf196523675146a4df3193e91413533857ab","0fcdcf196523675146a4df3193e91413533857ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b87acd61509ed222a7ae58c584568eca5a6243e","date":1255125162,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapShooter#createSnapshot(IndexCommit,ReplicationHandler).mjava","pathOld":"src/java/org/apache/solr/handler/SnapShooter#createSnapshot(Collection[String],ReplicationHandler).mjava","sourceNew":"  void createSnapshot(final IndexCommit indexCommit, ReplicationHandler replicationHandler) {\n    NamedList details = new NamedList();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      Collection<String> files = indexCommit.getFileNames();\n      FileCopier fileCopier = new FileCopier(solrCore.getDeletionPolicy(), indexCommit);\n      fileCopier.copyFiles(files, snapShotDir);\n\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n        replicationHandler.core.getDeletionPolicy().releaseCommitPoint(indexCommit.getVersion());   \n        replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void createSnapshot(Collection<String> files, ReplicationHandler replicationHandler) {\n    NamedList details = new NamedList();\n    details.add(\"startTime\", new Date().toString());\n    File snapShotDir = null;\n    String directoryName = null;\n    Lock lock = null;\n    try {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FMT);\n      directoryName = \"snapshot.\" + fmt.format(new Date());\n      lock = lockFactory.makeLock(directoryName + \".lock\");\n      if (lock.isLocked()) return;\n      snapShotDir = new File(snapDir, directoryName);\n      if (!snapShotDir.mkdir()) {\n        LOG.warn(\"Unable to create snapshot directory: \" + snapShotDir.getAbsolutePath());\n        return;\n      }\n      for (String indexFile : files) {\n        FileUtils.copyFileToDirectory(new File(solrCore.getIndexDir(), indexFile), snapShotDir, true);\n      }\n      details.add(\"fileCount\", files.size());\n      details.add(\"status\", \"success\");\n      details.add(\"snapshotCompletedAt\", new Date().toString());\n    } catch (Exception e) {\n      SnapPuller.delTree(snapShotDir);\n      LOG.error(\"Exception while creating snapshot\", e);\n      details.add(\"snapShootException\", e.getMessage());\n    } finally {\n      replicationHandler.snapShootDetails = details;\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          LOG.error(\"Unable to release snapshoot lock: \" + directoryName + \".lock\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9b87acd61509ed222a7ae58c584568eca5a6243e":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"217dd2e5ec780896e70b9d4bf5ff18c0079142fb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"9b87acd61509ed222a7ae58c584568eca5a6243e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"217dd2e5ec780896e70b9d4bf5ff18c0079142fb":["9b87acd61509ed222a7ae58c584568eca5a6243e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9b87acd61509ed222a7ae58c584568eca5a6243e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}