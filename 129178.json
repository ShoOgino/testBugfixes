{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#run().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter w = null;\n      boolean first = true;\n      while(!finish) {\n        try {\n\n          while(true) {\n            if (w != null) {\n              w.close();\n            }\n            w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n\n            //((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n            if (!first && !allowInterrupt) {\n              // tell main thread it can interrupt us any time,\n              // starting now\n              allowInterrupt = true;\n            }\n\n            w.setMaxBufferedDocs(2);\n            w.setMergeFactor(2);\n            Document doc = new Document();\n            doc.add(new Field(\"field\", \"some text contents\", Field.Store.YES, Field.Index.ANALYZED));\n            for(int i=0;i<100;i++) {\n              w.addDocument(doc);\n              w.commit();\n            }\n            w.close();\n            _TestUtil.checkIndex(dir);\n            IndexReader.open(dir, true).close();\n\n            if (first && !allowInterrupt) {\n              // Strangely, if we interrupt a thread before\n              // all classes are loaded, the class loader\n              // seems to do scary things with the interrupt\n              // status.  In java 1.5, it'll throw an\n              // incorrect ClassNotFoundException.  In java\n              // 1.6, it'll silently clear the interrupt.\n              // So, on first iteration through here we\n              // don't open ourselves up for interrupts\n              // until we've done the above loop.\n              allowInterrupt = true;\n              first = false;\n            }\n          }\n        } catch (ThreadInterruptedException re) {\n          Throwable e = re.getCause();\n          assertTrue(e instanceof InterruptedException);\n          if (finish) {\n            break;\n          }\n          \n          // Make sure IW cleared the interrupted bit\n          // TODO: remove that false once test is fixed for real\n          if (false && interrupted()) {\n            System.out.println(\"FAILED; InterruptedException hit but thread.interrupted() was true\");\n            e.printStackTrace(System.out);\n            failed = true;\n            break;\n          }\n\n        } catch (Throwable t) {\n          System.out.println(\"FAILED; unexpected exception\");\n          t.printStackTrace(System.out);\n          failed = true;\n          break;\n        }\n      }\n\n      if (!failed) {\n        try {\n          _TestUtil.checkIndex(dir);\n        } catch (Exception e) {\n          failed = true;\n          System.out.println(\"CheckIndex FAILED: unexpected exception\");\n          e.printStackTrace(System.out);\n        }\n        try {\n          IndexReader r = IndexReader.open(dir, true);\n          //System.out.println(\"doc count=\" + r.numDocs());\n          r.close();\n        } catch (Exception e) {\n          failed = true;\n          System.out.println(\"IndexReader.open FAILED: unexpected exception\");\n          e.printStackTrace(System.out);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#run().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThreadInterrupt#run().mjava","sourceNew":"    @Override\n    public void run() {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter w = null;\n      boolean first = true;\n      while(!finish) {\n        try {\n\n          while(true) {\n            if (w != null) {\n              w.close();\n            }\n            w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n\n            //((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n            if (!first && !allowInterrupt) {\n              // tell main thread it can interrupt us any time,\n              // starting now\n              allowInterrupt = true;\n            }\n\n            w.setMaxBufferedDocs(2);\n            w.setMergeFactor(2);\n            Document doc = new Document();\n            doc.add(new Field(\"field\", \"some text contents\", Field.Store.YES, Field.Index.ANALYZED));\n            for(int i=0;i<100;i++) {\n              w.addDocument(doc);\n              w.commit();\n            }\n            w.close();\n            _TestUtil.checkIndex(dir);\n            IndexReader.open(dir, true).close();\n\n            if (first && !allowInterrupt) {\n              // Strangely, if we interrupt a thread before\n              // all classes are loaded, the class loader\n              // seems to do scary things with the interrupt\n              // status.  In java 1.5, it'll throw an\n              // incorrect ClassNotFoundException.  In java\n              // 1.6, it'll silently clear the interrupt.\n              // So, on first iteration through here we\n              // don't open ourselves up for interrupts\n              // until we've done the above loop.\n              allowInterrupt = true;\n              first = false;\n            }\n          }\n        } catch (ThreadInterruptedException re) {\n          Throwable e = re.getCause();\n          assertTrue(e instanceof InterruptedException);\n          if (finish) {\n            break;\n          }\n          \n          // Make sure IW cleared the interrupted bit\n          // TODO: remove that false once test is fixed for real\n          if (false && interrupted()) {\n            System.out.println(\"FAILED; InterruptedException hit but thread.interrupted() was true\");\n            e.printStackTrace(System.out);\n            failed = true;\n            break;\n          }\n\n        } catch (Throwable t) {\n          System.out.println(\"FAILED; unexpected exception\");\n          t.printStackTrace(System.out);\n          failed = true;\n          break;\n        }\n      }\n\n      if (!failed) {\n        try {\n          _TestUtil.checkIndex(dir);\n        } catch (Exception e) {\n          failed = true;\n          System.out.println(\"CheckIndex FAILED: unexpected exception\");\n          e.printStackTrace(System.out);\n        }\n        try {\n          IndexReader r = IndexReader.open(dir, true);\n          //System.out.println(\"doc count=\" + r.numDocs());\n          r.close();\n        } catch (Exception e) {\n          failed = true;\n          System.out.println(\"IndexReader.open FAILED: unexpected exception\");\n          e.printStackTrace(System.out);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter w = null;\n      boolean first = true;\n      while(!finish) {\n        try {\n\n          while(true) {\n            if (w != null) {\n              w.close();\n            }\n            w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n\n            //((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n            if (!first && !allowInterrupt) {\n              // tell main thread it can interrupt us any time,\n              // starting now\n              allowInterrupt = true;\n            }\n\n            w.setMaxBufferedDocs(2);\n            w.setMergeFactor(2);\n            Document doc = new Document();\n            doc.add(new Field(\"field\", \"some text contents\", Field.Store.YES, Field.Index.ANALYZED));\n            for(int i=0;i<100;i++) {\n              w.addDocument(doc);\n              w.commit();\n            }\n            w.close();\n            _TestUtil.checkIndex(dir);\n            IndexReader.open(dir, true).close();\n\n            if (first && !allowInterrupt) {\n              // Strangely, if we interrupt a thread before\n              // all classes are loaded, the class loader\n              // seems to do scary things with the interrupt\n              // status.  In java 1.5, it'll throw an\n              // incorrect ClassNotFoundException.  In java\n              // 1.6, it'll silently clear the interrupt.\n              // So, on first iteration through here we\n              // don't open ourselves up for interrupts\n              // until we've done the above loop.\n              allowInterrupt = true;\n              first = false;\n            }\n          }\n        } catch (ThreadInterruptedException re) {\n          Throwable e = re.getCause();\n          assertTrue(e instanceof InterruptedException);\n          if (finish) {\n            break;\n          }\n          \n          // Make sure IW cleared the interrupted bit\n          // TODO: remove that false once test is fixed for real\n          if (false && interrupted()) {\n            System.out.println(\"FAILED; InterruptedException hit but thread.interrupted() was true\");\n            e.printStackTrace(System.out);\n            failed = true;\n            break;\n          }\n\n        } catch (Throwable t) {\n          System.out.println(\"FAILED; unexpected exception\");\n          t.printStackTrace(System.out);\n          failed = true;\n          break;\n        }\n      }\n\n      if (!failed) {\n        try {\n          _TestUtil.checkIndex(dir);\n        } catch (Exception e) {\n          failed = true;\n          System.out.println(\"CheckIndex FAILED: unexpected exception\");\n          e.printStackTrace(System.out);\n        }\n        try {\n          IndexReader r = IndexReader.open(dir, true);\n          //System.out.println(\"doc count=\" + r.numDocs());\n          r.close();\n        } catch (Exception e) {\n          failed = true;\n          System.out.println(\"IndexReader.open FAILED: unexpected exception\");\n          e.printStackTrace(System.out);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}