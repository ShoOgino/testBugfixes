{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","sourceNew":"\tpublic void testCachability() throws Exception\n\t{\n\t\tTermsFilter a=new TermsFilter();\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\n\t\tHashSet<Filter> cachedFilters=new HashSet<Filter>();\n\t\tcachedFilters.add(a);\n\t\tTermsFilter b=new TermsFilter();\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\n\t\t\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\n\t}\n\n","sourceOld":"\tpublic void testCachability() throws Exception\n\t{\n\t\tTermsFilter a=new TermsFilter();\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\n\t\tHashSet<Filter> cachedFilters=new HashSet<Filter>();\n\t\tcachedFilters.add(a);\n\t\tTermsFilter b=new TermsFilter();\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\n\t\t\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","sourceNew":"  public void testCachability() throws Exception {\n    TermsFilter a = new TermsFilter();\n    a.addTerm(new Term(\"field1\", \"a\"));\n    a.addTerm(new Term(\"field1\", \"b\"));\n    HashSet<Filter> cachedFilters = new HashSet<Filter>();\n    cachedFilters.add(a);\n    TermsFilter b = new TermsFilter();\n    b.addTerm(new Term(\"field1\", \"a\"));\n    b.addTerm(new Term(\"field1\", \"b\"));\n\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"a\")); //duplicate term\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"c\"));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(b));\n  }\n\n","sourceOld":"\tpublic void testCachability() throws Exception\n\t{\n\t\tTermsFilter a=new TermsFilter();\n\t\ta.addTerm(new Term(\"field1\",\"a\"));\n\t\ta.addTerm(new Term(\"field1\",\"b\"));\n\t\tHashSet<Filter> cachedFilters=new HashSet<Filter>();\n\t\tcachedFilters.add(a);\n\t\tTermsFilter b=new TermsFilter();\n\t\tb.addTerm(new Term(\"field1\",\"a\"));\n\t\tb.addTerm(new Term(\"field1\",\"b\"));\n\t\t\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"a\")); //duplicate term\n\t\tassertTrue(\"Must be cached\",cachedFilters.contains(b));\n\t\tb.addTerm(new Term(\"field1\",\"c\"));\n\t\tassertFalse(\"Must not be cached\",cachedFilters.contains(b));\n\t}\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testCachability().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testCachability().mjava","sourceNew":"  public void testCachability() throws Exception {\n    TermsFilter a = new TermsFilter();\n    a.addTerm(new Term(\"field1\", \"a\"));\n    a.addTerm(new Term(\"field1\", \"b\"));\n    HashSet<Filter> cachedFilters = new HashSet<Filter>();\n    cachedFilters.add(a);\n    TermsFilter b = new TermsFilter();\n    b.addTerm(new Term(\"field1\", \"a\"));\n    b.addTerm(new Term(\"field1\", \"b\"));\n\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"a\")); //duplicate term\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"c\"));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(b));\n  }\n\n","sourceOld":"  public void testCachability() throws Exception {\n    TermsFilter a = new TermsFilter();\n    a.addTerm(new Term(\"field1\", \"a\"));\n    a.addTerm(new Term(\"field1\", \"b\"));\n    HashSet<Filter> cachedFilters = new HashSet<Filter>();\n    cachedFilters.add(a);\n    TermsFilter b = new TermsFilter();\n    b.addTerm(new Term(\"field1\", \"a\"));\n    b.addTerm(new Term(\"field1\", \"b\"));\n\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"a\")); //duplicate term\n    assertTrue(\"Must be cached\", cachedFilters.contains(b));\n    b.addTerm(new Term(\"field1\", \"c\"));\n    assertFalse(\"Must not be cached\", cachedFilters.contains(b));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e141595402370bee958745de8b1c9de1fa182581":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["e141595402370bee958745de8b1c9de1fa182581"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e141595402370bee958745de8b1c9de1fa182581":["1f9f2355d68aab1348539f7a1603279405e566a4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e141595402370bee958745de8b1c9de1fa182581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1f9f2355d68aab1348539f7a1603279405e566a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}