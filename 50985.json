{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#parse(String).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#parse(String).mjava","pathOld":"/dev/null","sourceNew":"    /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n    *  @param query  the query string to be parsed.\n    */\n  public Query parse(String query) throws SyntaxError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(null);  // pass null so we can tell later if an explicit field was provided or not\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    }\n    catch (TokenMgrError tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': too many boolean clauses\", tmc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#parse(String).mjava","pathOld":"/dev/null","sourceNew":"    /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n    *  @param query  the query string to be parsed.\n    */\n  public Query parse(String query) throws SyntaxError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(null);  // pass null so we can tell later if an explicit field was provided or not\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    }\n    catch (TokenMgrError tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': too many boolean clauses\", tmc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#parse(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#parse(String).mjava","sourceNew":"    /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n    *  @param query  the query string to be parsed.\n    */\n  public Query parse(String query) throws SyntaxError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(null);  // pass null so we can tell later if an explicit field was provided or not\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException | TokenMgrError tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': too many boolean clauses\", tmc);\n    }\n  }\n\n","sourceOld":"    /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n    *  @param query  the query string to be parsed.\n    */\n  public Query parse(String query) throws SyntaxError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(null);  // pass null so we can tell later if an explicit field was provided or not\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    }\n    catch (TokenMgrError tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': too many boolean clauses\", tmc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#parse(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#parse(String).mjava","sourceNew":"    /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n    *  @param query  the query string to be parsed.\n    */\n  public Query parse(String query) throws SyntaxError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(null);  // pass null so we can tell later if an explicit field was provided or not\n      return res!=null ? res : newBooleanQuery(false).build();\n    }\n    catch (ParseException | TokenMgrError tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': too many boolean clauses\", tmc);\n    }\n  }\n\n","sourceOld":"    /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n    *  @param query  the query string to be parsed.\n    */\n  public Query parse(String query) throws SyntaxError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(null);  // pass null so we can tell later if an explicit field was provided or not\n      return res!=null ? res : newBooleanQuery(false);\n    }\n    catch (ParseException | TokenMgrError tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': too many boolean clauses\", tmc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#parse(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#parse(String).mjava","sourceNew":"    /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n    *  @param query  the query string to be parsed.\n    */\n  public Query parse(String query) throws SyntaxError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(null);  // pass null so we can tell later if an explicit field was provided or not\n      return res!=null ? res : newBooleanQuery().build();\n    }\n    catch (ParseException | TokenMgrError tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': too many boolean clauses\", tmc);\n    }\n  }\n\n","sourceOld":"    /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n    *  @param query  the query string to be parsed.\n    */\n  public Query parse(String query) throws SyntaxError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(null);  // pass null so we can tell later if an explicit field was provided or not\n      return res!=null ? res : newBooleanQuery(false).build();\n    }\n    catch (ParseException | TokenMgrError tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': too many boolean clauses\", tmc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c70eb3b44de4355a7168b762cadc0f1cf194bc","date":1561542955,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#parse(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#parse(String).mjava","sourceNew":"    /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n    *  @param query  the query string to be parsed.\n    */\n  public Query parse(String query) throws SyntaxError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(null);  // pass null so we can tell later if an explicit field was provided or not\n      return res!=null ? res : newBooleanQuery().build();\n    }\n    catch (ParseException | TokenMgrError tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    } catch (IndexSearcher.TooManyClauses tmc) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': too many boolean clauses\", tmc);\n    }\n  }\n\n","sourceOld":"    /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n    *  @param query  the query string to be parsed.\n    */\n  public Query parse(String query) throws SyntaxError {\n    ReInit(new FastCharStream(new StringReader(query)));\n    try {\n      // TopLevelQuery is a Query followed by the end-of-input (EOF)\n      Query res = TopLevelQuery(null);  // pass null so we can tell later if an explicit field was provided or not\n      return res!=null ? res : newBooleanQuery().build();\n    }\n    catch (ParseException | TokenMgrError tme) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': \" + tme.getMessage(), tme);\n    } catch (BooleanQuery.TooManyClauses tmc) {\n      throw new SyntaxError(\"Cannot parse '\" +query+ \"': too many boolean clauses\", tmc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3cdb67100dc016748799a77218aa409478372d79":["c6e1dc1bb4254226c8d7151b596cc1be40671751","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}