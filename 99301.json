{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSort#getRandomCommonPrefix(HeapPointWriter,int,int,int,int).mjava","commits":[{"id":"619d6ef89bb642f6258a8369ba5a7a330580e97f","date":1561535144,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSort#getRandomCommonPrefix(HeapPointWriter,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** returns a common prefix length equal or lower than the current one */\n  private int getRandomCommonPrefix(HeapPointWriter points, int start, int end, int bytesPerDimension, int sortDim)  {\n    int commonPrefixLength = bytesPerDimension;\n    PointValue value = points.getPackedValueSlice(start);\n    BytesRef bytesRef = value.packedValue();\n    byte[] firstValue = new byte[bytesPerDimension];\n    int offset = sortDim * bytesPerDimension;\n    System.arraycopy(bytesRef.bytes, bytesRef.offset + offset, firstValue, 0, bytesPerDimension);\n    for (int i = start + 1; i < end; i++) {\n      value = points.getPackedValueSlice(i);\n      bytesRef = value.packedValue();\n      int diff = Arrays.mismatch(bytesRef.bytes, bytesRef.offset + offset, bytesRef.offset + offset + bytesPerDimension, firstValue, 0, bytesPerDimension);\n      if (diff != -1 && commonPrefixLength > diff) {\n        if (diff == 0) {\n          return diff;\n        }\n        commonPrefixLength = diff;\n      }\n    }\n    return (random().nextBoolean()) ? commonPrefixLength : random().nextInt(commonPrefixLength);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSort#getRandomCommonPrefix(BKDConfig,HeapPointWriter,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSort#getRandomCommonPrefix(HeapPointWriter,int,int,int,int).mjava","sourceNew":"  /** returns a common prefix length equal or lower than the current one */\n  private int getRandomCommonPrefix(BKDConfig config, HeapPointWriter points, int start, int end, int sortDim)  {\n    int commonPrefixLength = config.bytesPerDim;\n    PointValue value = points.getPackedValueSlice(start);\n    BytesRef bytesRef = value.packedValue();\n    byte[] firstValue = new byte[config.bytesPerDim];\n    int offset = sortDim * config.bytesPerDim;\n    System.arraycopy(bytesRef.bytes, bytesRef.offset + offset, firstValue, 0, config.bytesPerDim);\n    for (int i = start + 1; i < end; i++) {\n      value = points.getPackedValueSlice(i);\n      bytesRef = value.packedValue();\n      int diff = Arrays.mismatch(bytesRef.bytes, bytesRef.offset + offset, bytesRef.offset + offset + config.bytesPerDim, firstValue, 0, config.bytesPerDim);\n      if (diff != -1 && commonPrefixLength > diff) {\n        if (diff == 0) {\n          return diff;\n        }\n        commonPrefixLength = diff;\n      }\n    }\n    return (random().nextBoolean()) ? commonPrefixLength : random().nextInt(commonPrefixLength);\n  }\n\n","sourceOld":"  /** returns a common prefix length equal or lower than the current one */\n  private int getRandomCommonPrefix(HeapPointWriter points, int start, int end, int bytesPerDimension, int sortDim)  {\n    int commonPrefixLength = bytesPerDimension;\n    PointValue value = points.getPackedValueSlice(start);\n    BytesRef bytesRef = value.packedValue();\n    byte[] firstValue = new byte[bytesPerDimension];\n    int offset = sortDim * bytesPerDimension;\n    System.arraycopy(bytesRef.bytes, bytesRef.offset + offset, firstValue, 0, bytesPerDimension);\n    for (int i = start + 1; i < end; i++) {\n      value = points.getPackedValueSlice(i);\n      bytesRef = value.packedValue();\n      int diff = Arrays.mismatch(bytesRef.bytes, bytesRef.offset + offset, bytesRef.offset + offset + bytesPerDimension, firstValue, 0, bytesPerDimension);\n      if (diff != -1 && commonPrefixLength > diff) {\n        if (diff == 0) {\n          return diff;\n        }\n        commonPrefixLength = diff;\n      }\n    }\n    return (random().nextBoolean()) ? commonPrefixLength : random().nextInt(commonPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"619d6ef89bb642f6258a8369ba5a7a330580e97f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["619d6ef89bb642f6258a8369ba5a7a330580e97f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"619d6ef89bb642f6258a8369ba5a7a330580e97f":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["619d6ef89bb642f6258a8369ba5a7a330580e97f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}