{"path":"solr/core/src/test/org/apache/solr/util/hll/ExplicitHLLTest#promotionTest().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/ExplicitHLLTest#promotionTest().mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    /**\n     * Tests promotion to {@link HLLType#SPARSE} and {@link HLLType#FULL}.\n     */\n    @Test\n    public void promotionTest() {\n        { // locally scoped for sanity\n            final int explicitThreshold = 128;\n            final HLL hll = new HLL(11/*log2m, unused*/, 5/*regwidth, unused*/, explicitThreshold, 256/*sparseThreshold*/, HLLType.EXPLICIT);\n\n            for(int i=0;i<explicitThreshold + 1;i++){\n                hll.addRaw(i);\n            }\n            assertEquals(hll.getType(), HLLType.SPARSE);\n        }\n        { // locally scoped for sanity\n            final HLL hll = new HLL(11/*log2m, unused*/, 5/*regwidth, unused*/, 4/*expthresh => explicitThreshold = 8*/, false/*sparseon*/, HLLType.EXPLICIT);\n\n            for(int i=0;i<9/* > explicitThreshold */;i++){\n                hll.addRaw(i);\n            }\n            assertEquals(hll.getType(), HLLType.FULL);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/ExplicitHLLTest#promotionTest().mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    /**\n     * Tests promotion to {@link HLLType#SPARSE} and {@link HLLType#FULL}.\n     */\n    @Test\n    public void promotionTest() {\n        { // locally scoped for sanity\n            final int explicitThreshold = 128;\n            final HLL hll = new HLL(11/*log2m, unused*/, 5/*regwidth, unused*/, explicitThreshold, 256/*sparseThreshold*/, HLLType.EXPLICIT);\n\n            for(int i=0;i<explicitThreshold + 1;i++){\n                hll.addRaw(i);\n            }\n            assertEquals(hll.getType(), HLLType.SPARSE);\n        }\n        { // locally scoped for sanity\n            final HLL hll = new HLL(11/*log2m, unused*/, 5/*regwidth, unused*/, 4/*expthresh => explicitThreshold = 8*/, false/*sparseon*/, HLLType.EXPLICIT);\n\n            for(int i=0;i<9/* > explicitThreshold */;i++){\n                hll.addRaw(i);\n            }\n            assertEquals(hll.getType(), HLLType.FULL);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}