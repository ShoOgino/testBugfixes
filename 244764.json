{"path":"lucene/core/src/java/org/apache/lucene/index/FrozenBufferedUpdates#tryApply(IndexWriter).mjava","commits":[{"id":"72332a99ce230f8edf8404d6043ac18a0e26dfeb","date":1542806419,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FrozenBufferedUpdates#tryApply(IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  /** Translates a frozen packet of delete term/query, or doc values\n   *  updates, into their actual docIDs in the index, and applies the change.  This is a heavy\n   *  operation and is done concurrently by incoming indexing threads.\n   *  This method will return immediately without blocking if another thread is currently\n   *  applying the package. In order to ensure the packet has been applied, {@link #forceApply(IndexWriter)}\n   *  must be called.\n   *  */\n  @SuppressWarnings(\"try\")\n  boolean tryApply(IndexWriter writer) throws IOException {\n    if (applyLock.tryLock()) {\n      try {\n        forceApply(writer);\n        return true;\n      } finally {\n        applyLock.unlock();\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f21f1920c232db2352489eed260fe5c1f39e5a0","date":1587748041,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/FrozenBufferedUpdates#tryApply(IndexWriter).mjava","sourceNew":null,"sourceOld":"  /** Translates a frozen packet of delete term/query, or doc values\n   *  updates, into their actual docIDs in the index, and applies the change.  This is a heavy\n   *  operation and is done concurrently by incoming indexing threads.\n   *  This method will return immediately without blocking if another thread is currently\n   *  applying the package. In order to ensure the packet has been applied, {@link #forceApply(IndexWriter)}\n   *  must be called.\n   *  */\n  @SuppressWarnings(\"try\")\n  boolean tryApply(IndexWriter writer) throws IOException {\n    if (applyLock.tryLock()) {\n      try {\n        forceApply(writer);\n        return true;\n      } finally {\n        applyLock.unlock();\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f21f1920c232db2352489eed260fe5c1f39e5a0":["72332a99ce230f8edf8404d6043ac18a0e26dfeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"72332a99ce230f8edf8404d6043ac18a0e26dfeb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f21f1920c232db2352489eed260fe5c1f39e5a0"]},"commit2Childs":{"9f21f1920c232db2352489eed260fe5c1f39e5a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["72332a99ce230f8edf8404d6043ac18a0e26dfeb"],"72332a99ce230f8edf8404d6043ac18a0e26dfeb":["9f21f1920c232db2352489eed260fe5c1f39e5a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}