{"path":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { numCPUs + random.nextInt(numCPUs + 1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      runFlushByRam(numThreads[i],\n          1 + random.nextInt(10) + random.nextDouble(), false);\n    }\n\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 250 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 250.d, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c638228df1d361f8fcd5b4ecc6fa15f56a976fd","date":1303919733,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","sourceNew":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 3 + random.nextInt(12), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      runFlushByRam(numThreads[i],\n          1 + random.nextInt(10) + random.nextDouble(), false);\n    }\n\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 512 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 512.d, true);\n    }\n  }\n\n","sourceOld":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { numCPUs + random.nextInt(numCPUs + 1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      runFlushByRam(numThreads[i],\n          1 + random.nextInt(10) + random.nextDouble(), false);\n    }\n\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 250 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 250.d, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 3 + random.nextInt(12), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      runFlushByRam(numThreads[i],\n          1 + random.nextInt(10) + random.nextDouble(), false);\n    }\n\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 512 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 512.d, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b48631cad04355b1145531265cf87a095299e14","date":1304320797,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","sourceNew":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 3 + random.nextInt(12), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      runFlushByRam(numThreads[i],\n          1 + random.nextInt(10) + random.nextDouble(), false);\n    }\n\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 256 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 256.d, true);\n    }\n  }\n\n","sourceOld":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 3 + random.nextInt(12), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      runFlushByRam(numThreads[i],\n          1 + random.nextInt(10) + random.nextDouble(), false);\n    }\n\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 512 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 512.d, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 3 + random.nextInt(12), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      runFlushByRam(numThreads[i],\n          1 + random.nextInt(10) + random.nextDouble(), false);\n    }\n\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 256 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 256.d, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 3 + random.nextInt(12), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      runFlushByRam(numThreads[i],\n          1 + random.nextInt(10) + random.nextDouble(), false);\n    }\n\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 256 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 256.d, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd","date":1309269564,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","sourceNew":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      final double ramBuffer = (TEST_NIGHTLY ? 1 : 10) + atLeast(2) + random.nextDouble();\n      runFlushByRam(numThreads[i], ramBuffer\n         , false);\n    }\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 256 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 256.d, true);\n    }\n  }\n\n","sourceOld":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 3 + random.nextInt(12), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      runFlushByRam(numThreads[i],\n          1 + random.nextInt(10) + random.nextDouble(), false);\n    }\n\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 256 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 256.d, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f79302faab682bee449062b742447fb7ea2c018","date":1309271033,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","sourceNew":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    final double ramBuffer = (TEST_NIGHTLY ? 1 : 10) + atLeast(2)\n        + random.nextDouble();\n    runFlushByRam(1 + random.nextInt(TEST_NIGHTLY ? 5 : 1), ramBuffer, false);\n  }\n\n","sourceOld":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 2 + atLeast(1), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      final double ramBuffer = (TEST_NIGHTLY ? 1 : 10) + atLeast(2) + random.nextDouble();\n      runFlushByRam(numThreads[i], ramBuffer\n         , false);\n    }\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 256 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 256.d, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","sourceNew":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    final double ramBuffer = (TEST_NIGHTLY ? 1 : 10) + atLeast(2)\n        + random.nextDouble();\n    runFlushByRam(1 + random.nextInt(TEST_NIGHTLY ? 5 : 1), ramBuffer, false);\n  }\n\n","sourceOld":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 3 + random.nextInt(12), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      runFlushByRam(numThreads[i],\n          1 + random.nextInt(10) + random.nextDouble(), false);\n    }\n\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 256 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 256.d, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","sourceNew":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    final double ramBuffer = (TEST_NIGHTLY ? 1 : 10) + atLeast(2)\n        + random.nextDouble();\n    runFlushByRam(1 + random.nextInt(TEST_NIGHTLY ? 5 : 1), ramBuffer, false);\n  }\n\n","sourceOld":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    int[] numThreads = new int[] { 3 + random.nextInt(12), 1 };\n    for (int i = 0; i < numThreads.length; i++) {\n      runFlushByRam(numThreads[i],\n          1 + random.nextInt(10) + random.nextDouble(), false);\n    }\n\n    for (int i = 0; i < numThreads.length; i++) {\n      // with a 256 mb ram buffer we should never stall\n      runFlushByRam(numThreads[i], 256.d, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testFlushByRam().mjava","sourceNew":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    final double ramBuffer = (TEST_NIGHTLY ? 1 : 10) + atLeast(2)\n        + random.nextDouble();\n    runFlushByRam(1 + random.nextInt(TEST_NIGHTLY ? 5 : 1), ramBuffer, false);\n  }\n\n","sourceOld":"  public void testFlushByRam() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    final double ramBuffer = (TEST_NIGHTLY ? 1 : 10) + atLeast(2)\n        + random.nextDouble();\n    runFlushByRam(1 + random.nextInt(TEST_NIGHTLY ? 5 : 1), ramBuffer, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5f79302faab682bee449062b742447fb7ea2c018"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3b48631cad04355b1145531265cf87a095299e14"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c638228df1d361f8fcd5b4ecc6fa15f56a976fd"],"3b48631cad04355b1145531265cf87a095299e14":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","5f79302faab682bee449062b742447fb7ea2c018"],"5f79302faab682bee449062b742447fb7ea2c018":["24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["3b48631cad04355b1145531265cf87a095299e14","5f79302faab682bee449062b742447fb7ea2c018"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6c638228df1d361f8fcd5b4ecc6fa15f56a976fd":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3b48631cad04355b1145531265cf87a095299e14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd":["3b48631cad04355b1145531265cf87a095299e14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3b48631cad04355b1145531265cf87a095299e14"],"3b48631cad04355b1145531265cf87a095299e14":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd"],"2553b00f699380c64959ccb27991289aae87be2e":[],"5f79302faab682bee449062b742447fb7ea2c018":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["6c638228df1d361f8fcd5b4ecc6fa15f56a976fd"],"6c638228df1d361f8fcd5b4ecc6fa15f56a976fd":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a3776dccca01c11e7046323cfad46a3b4a471233"],"24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd":["5f79302faab682bee449062b742447fb7ea2c018"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}