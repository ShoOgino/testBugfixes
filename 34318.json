{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","commits":[{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.LongValueCollapse#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentVal = (int) minMaxValues.get(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      long val = vals.get(contextDoc);\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int valuesDocID = minMaxValues.docID();\n      if (valuesDocID < contextDoc) {\n        valuesDocID = minMaxValues.advance(contextDoc);\n      }\n\n      int currentVal;\n      if (valuesDocID == contextDoc) {\n        currentVal = (int) minMaxValues.longValue();\n      } else {\n        currentVal = 0;\n      }\n      \n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentVal = (int) minMaxValues.get(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int valuesDocID = minMaxValues.docID();\n      if (valuesDocID < contextDoc) {\n        valuesDocID = minMaxValues.advance(contextDoc);\n      }\n\n      int currentVal;\n      if (valuesDocID == contextDoc) {\n        currentVal = (int) minMaxValues.longValue();\n      } else {\n        currentVal = 0;\n      }\n      \n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentVal = (int) minMaxValues.get(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int valuesDocID = minMaxValues.docID();\n      if (valuesDocID < contextDoc) {\n        valuesDocID = minMaxValues.advance(contextDoc);\n      }\n\n      int currentVal;\n      if (valuesDocID == contextDoc) {\n        currentVal = (int) minMaxValues.longValue();\n      } else {\n        currentVal = 0;\n      }\n      \n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentVal = (int) minMaxValues.get(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c62352c33f77624124d1cbf58a1291da78141f7","date":1518514846,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentVal;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentVal = (int) minMaxValues.longValue();\n      } else {\n        currentVal = 0;\n      }\n      \n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int valuesDocID = minMaxValues.docID();\n      if (valuesDocID < contextDoc) {\n        valuesDocID = minMaxValues.advance(contextDoc);\n      }\n\n      int currentVal;\n      if (valuesDocID == contextDoc) {\n        currentVal = (int) minMaxValues.longValue();\n      } else {\n        currentVal = 0;\n      }\n      \n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentVal;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentVal = (int) minMaxValues.longValue();\n      } else {\n        currentVal = 0;\n      }\n      \n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int valuesDocID = minMaxValues.docID();\n      if (valuesDocID < contextDoc) {\n        valuesDocID = minMaxValues.advance(contextDoc);\n      }\n\n      int currentVal;\n      if (valuesDocID == contextDoc) {\n        currentVal = (int) minMaxValues.longValue();\n      } else {\n        currentVal = 0;\n      }\n      \n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3575e61fd7df2bbcce8b977a23d3d67aa423ce62","date":1586507050,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentVal;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentVal = (int) minMaxValues.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentVal;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentVal = (int) minMaxValues.longValue();\n      } else {\n        currentVal = 0;\n      }\n      \n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a813b523bf76aa0a68013d636b6eb53cedb142a4","date":1601387389,"type":3,"author":"Guna Sekhar Dora Kovvuru","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdIntStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentVal;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentVal = (int) minMaxValues.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(this.boosted && mergeBoost.boost(globalDoc)) {\n        this.boostDocs.add(globalDoc);\n        this.boostOrds.add(ord);\n        return;\n      }\n\n      int currentVal;\n      if (minMaxValues.advanceExact(contextDoc)) {\n        currentVal = (int) minMaxValues.longValue();\n      } else {\n        currentVal = 0;\n      }\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            scores.put(ord, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a813b523bf76aa0a68013d636b6eb53cedb142a4":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6c62352c33f77624124d1cbf58a1291da78141f7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6c62352c33f77624124d1cbf58a1291da78141f7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a813b523bf76aa0a68013d636b6eb53cedb142a4"]},"commit2Childs":{"a813b523bf76aa0a68013d636b6eb53cedb142a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6c62352c33f77624124d1cbf58a1291da78141f7":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["a813b523bf76aa0a68013d636b6eb53cedb142a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6c62352c33f77624124d1cbf58a1291da78141f7","bfcdec9fcf0409223f35c5ec3bc14094314941b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}