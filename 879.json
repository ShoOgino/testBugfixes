{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getSharedReader(long,long,List[Closeable]).mjava","commits":[{"id":"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40","date":1458553787,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getSharedReader(long,long,List[Closeable]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public PointReader getSharedReader(long start, long length, List<Closeable> toCloseHeroically) throws IOException {\n    if (sharedReader == null) {\n      assert start == 0;\n      assert length <= count;\n      sharedReader = new OfflinePointReader(tempDir, out.getName(), packedBytesLength, 0, count, longOrds, singleValuePerDoc);\n      toCloseHeroically.add(sharedReader);\n      // Make sure the OfflinePointReader intends to verify its checksum:\n      assert sharedReader.in instanceof ChecksumIndexInput;\n    } else {\n      assert start == nextSharedRead: \"start=\" + start + \" length=\" + length + \" nextSharedRead=\" + nextSharedRead;\n    }\n    nextSharedRead += length;\n    return sharedReader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee52259641568741fbc6ecc51284431e2a36475c","date":1459331525,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getSharedReader(long,long,List[Closeable]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getSharedReader(long,long,List[Closeable]).mjava","sourceNew":"  @Override\n  public PointReader getSharedReader(long start, long length, List<Closeable> toCloseHeroically) throws IOException {\n    if (sharedReader == null) {\n      assert start == 0;\n      assert length <= count;\n      sharedReader = new OfflinePointReader(tempDir, name, packedBytesLength, 0, count, longOrds, singleValuePerDoc);\n      toCloseHeroically.add(sharedReader);\n      // Make sure the OfflinePointReader intends to verify its checksum:\n      assert sharedReader.in instanceof ChecksumIndexInput;\n    } else {\n      assert start == nextSharedRead: \"start=\" + start + \" length=\" + length + \" nextSharedRead=\" + nextSharedRead;\n    }\n    nextSharedRead += length;\n    return sharedReader;\n  }\n\n","sourceOld":"  @Override\n  public PointReader getSharedReader(long start, long length, List<Closeable> toCloseHeroically) throws IOException {\n    if (sharedReader == null) {\n      assert start == 0;\n      assert length <= count;\n      sharedReader = new OfflinePointReader(tempDir, out.getName(), packedBytesLength, 0, count, longOrds, singleValuePerDoc);\n      toCloseHeroically.add(sharedReader);\n      // Make sure the OfflinePointReader intends to verify its checksum:\n      assert sharedReader.in instanceof ChecksumIndexInput;\n    } else {\n      assert start == nextSharedRead: \"start=\" + start + \" length=\" + length + \" nextSharedRead=\" + nextSharedRead;\n    }\n    nextSharedRead += length;\n    return sharedReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getSharedReader(long,long,List[Closeable]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public PointReader getSharedReader(long start, long length, List<Closeable> toCloseHeroically) throws IOException {\n    if (sharedReader == null) {\n      assert start == 0;\n      assert length <= count;\n      sharedReader = new OfflinePointReader(tempDir, name, packedBytesLength, 0, count, longOrds, singleValuePerDoc);\n      toCloseHeroically.add(sharedReader);\n      // Make sure the OfflinePointReader intends to verify its checksum:\n      assert sharedReader.in instanceof ChecksumIndexInput;\n    } else {\n      assert start == nextSharedRead: \"start=\" + start + \" length=\" + length + \" nextSharedRead=\" + nextSharedRead;\n    }\n    nextSharedRead += length;\n    return sharedReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["ee52259641568741fbc6ecc51284431e2a36475c"],"ee52259641568741fbc6ecc51284431e2a36475c":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"]},"commit2Childs":{"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["ee52259641568741fbc6ecc51284431e2a36475c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ee52259641568741fbc6ecc51284431e2a36475c":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}