{"path":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","commits":[{"id":"0fcdcf196523675146a4df3193e91413533857ab","date":1390686560,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#release().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      FileSystem fs = FileSystem.newInstance(lockPath.toUri(), conf);\n      try {\n        if (fs.exists(new Path(lockPath, lockName))\n            && !fs.delete(new Path(lockPath, lockName), false)) throw new LockReleaseFailedException(\n            \"failed to delete \" + new Path(lockPath, lockName));\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void release() throws IOException {\n      FileSystem fs = FileSystem.newInstance(lockPath.toUri(), conf);\n      try {\n        if (fs.exists(new Path(lockPath, lockName))\n            && !fs.delete(new Path(lockPath, lockName), false)) throw new LockReleaseFailedException(\n            \"failed to delete \" + new Path(lockPath, lockName));\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197","date":1427044180,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n      try {\n        if (fs.exists(new Path(lockPath, lockName))\n            && !fs.delete(new Path(lockPath, lockName), false)) throw new LockReleaseFailedException(\n            \"failed to delete \" + new Path(lockPath, lockName));\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      FileSystem fs = FileSystem.newInstance(lockPath.toUri(), conf);\n      try {\n        if (fs.exists(new Path(lockPath, lockName))\n            && !fs.delete(new Path(lockPath, lockName), false)) throw new LockReleaseFailedException(\n            \"failed to delete \" + new Path(lockPath, lockName));\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n    }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n      try {\n        if (fs.exists(new Path(lockPath, lockName))\n            && !fs.delete(new Path(lockPath, lockName), false)) throw new LockReleaseFailedException(\n            \"failed to delete \" + new Path(lockPath, lockName));\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      FileSystem fs = FileSystem.newInstance(lockPath.toUri(), conf);\n      try {\n        if (fs.exists(new Path(lockPath, lockName))\n            && !fs.delete(new Path(lockPath, lockName), false)) throw new LockReleaseFailedException(\n            \"failed to delete \" + new Path(lockPath, lockName));\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd448926db19517b82cc7c775c62c57f7d2ee6a","date":1432845380,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      if (obtained) {\n        FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n        try {\n          if (fs.exists(new Path(lockPath, lockName))\n              && !fs.delete(new Path(lockPath, lockName), false)) throw new LockReleaseFailedException(\n              \"failed to delete \" + new Path(lockPath, lockName));\n        } finally {\n          obtained = false;\n          IOUtils.closeQuietly(fs);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n      try {\n        if (fs.exists(new Path(lockPath, lockName))\n            && !fs.delete(new Path(lockPath, lockName), false)) throw new LockReleaseFailedException(\n            \"failed to delete \" + new Path(lockPath, lockName));\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      if (closed) {\n        return;\n      }\n      try {\n        if (fs.exists(lockFile) && !fs.delete(lockFile, false)) {\n          throw new LockReleaseFailedException(\"failed to delete: \" + lockFile);\n        }\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      if (obtained) {\n        FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n        try {\n          if (fs.exists(new Path(lockPath, lockName))\n              && !fs.delete(new Path(lockPath, lockName), false)) throw new LockReleaseFailedException(\n              \"failed to delete \" + new Path(lockPath, lockName));\n        } finally {\n          obtained = false;\n          IOUtils.closeQuietly(fs);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19de89910200eb03cf148b1a5215ad2dab44116a","date":1450442676,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory.HdfsLock#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      if (closed) {\n        return;\n      }\n      final FileSystem fs = FileSystem.get(lockFile.toUri(), conf);\n      try {\n        if (fs.exists(lockFile) && !fs.delete(lockFile, false)) {\n          throw new LockReleaseFailedException(\"failed to delete: \" + lockFile);\n        }\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      if (closed) {\n        return;\n      }\n      try {\n        if (fs.exists(lockFile) && !fs.delete(lockFile, false)) {\n          throw new LockReleaseFailedException(\"failed to delete: \" + lockFile);\n        }\n      } finally {\n        IOUtils.closeQuietly(fs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["0fcdcf196523675146a4df3193e91413533857ab","a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197"],"a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197":["0fcdcf196523675146a4df3193e91413533857ab"],"19de89910200eb03cf148b1a5215ad2dab44116a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0fcdcf196523675146a4df3193e91413533857ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19de89910200eb03cf148b1a5215ad2dab44116a"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["19de89910200eb03cf148b1a5215ad2dab44116a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"19de89910200eb03cf148b1a5215ad2dab44116a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0fcdcf196523675146a4df3193e91413533857ab"],"0fcdcf196523675146a4df3193e91413533857ab":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}