{"path":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":null,"sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76ab9983349b199b0e6f65776c0087b0c08a10d","date":1282230089,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, reader);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ba739a530000f510c2e351b2a4e7a1941517ba7","date":1287349584,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, reader);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, reader);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5","date":1293562446,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#testRAMDirectory().mjava","sourceNew":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","sourceOld":"  /**\n   * No indexDir location set\n   * @throws Exception\n   */\n  @Test\n  public void testRAMDirectory() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, \"spellings.txt\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.FIELD_TYPE, \"teststop\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    Collection<Token> tokens = queryConverter.convert(\"solar\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader());\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    //should be lowercased, b/c we are using a lowercasing analyzer\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions Size: \" + suggestions.size() + \" is not: \" + 1, suggestions.size() == 1);\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"solr\", entry.getKey().equals(\"solr\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n\n    spellOpts.tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(spellOpts);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(spellOpts.tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n    searcher.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["c220849f876de24a79f756f65b3eb045db59f63f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["afeb033b2bd36d8ce9d82142b197da4dde13068b","7ba739a530000f510c2e351b2a4e7a1941517ba7"],"7ba739a530000f510c2e351b2a4e7a1941517ba7":["d76ab9983349b199b0e6f65776c0087b0c08a10d"],"d76ab9983349b199b0e6f65776c0087b0c08a10d":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5"],"19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5":["7ba739a530000f510c2e351b2a4e7a1941517ba7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c220849f876de24a79f756f65b3eb045db59f63f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["c220849f876de24a79f756f65b3eb045db59f63f"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d76ab9983349b199b0e6f65776c0087b0c08a10d","7ba739a530000f510c2e351b2a4e7a1941517ba7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"7ba739a530000f510c2e351b2a4e7a1941517ba7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"d76ab9983349b199b0e6f65776c0087b0c08a10d":["7ba739a530000f510c2e351b2a4e7a1941517ba7","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c220849f876de24a79f756f65b3eb045db59f63f":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"19b5fcb3d65f8d1deb90add4f20f0f5b6edca4b5":["70ad682703b8585f5d0a637efec044d57ec05efb","c220849f876de24a79f756f65b3eb045db59f63f","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d76ab9983349b199b0e6f65776c0087b0c08a10d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["70ad682703b8585f5d0a637efec044d57ec05efb"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}