{"path":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#init(long,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#init(long,int).mjava","pathOld":"/dev/null","sourceNew":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc809a4fedc4441a467583ebebb337c76137ff6f","date":1295880675,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#init(long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#init(long,int).mjava","sourceNew":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    assert skipPointer >= 0 && skipPointer <= skipStream[0].length() \n    : \"invalid skip pointer: \" + skipPointer + \", length=\" + skipStream[0].length();\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","sourceOld":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#init(long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#init(long,int).mjava","sourceNew":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    assert skipPointer >= 0 && skipPointer <= skipStream[0].length() \n    : \"invalid skip pointer: \" + skipPointer + \", length=\" + skipStream[0].length();\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","sourceOld":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#init(long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#init(long,int).mjava","sourceNew":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    assert skipPointer >= 0 && skipPointer <= skipStream[0].length() \n    : \"invalid skip pointer: \" + skipPointer + \", length=\" + skipStream[0].length();\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","sourceOld":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#init(long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#init(long,int).mjava","sourceNew":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    assert skipPointer >= 0 && skipPointer <= skipStream[0].length() \n    : \"invalid skip pointer: \" + skipPointer + \", length=\" + skipStream[0].length();\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","sourceOld":"  /** initializes the reader */\n  public void init(long skipPointer, int df) {\n    this.skipPointer[0] = skipPointer;\n    this.docCount = df;\n    assert skipPointer >= 0 && skipPointer <= skipStream[0].length() \n    : \"invalid skip pointer: \" + skipPointer + \", length=\" + skipStream[0].length();\n    Arrays.fill(skipDoc, 0);\n    Arrays.fill(numSkipped, 0);\n    Arrays.fill(childPointer, 0);\n    \n    haveSkipped = false;\n    for (int i = 1; i < numberOfSkipLevels; i++) {\n      skipStream[i] = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","bc809a4fedc4441a467583ebebb337c76137ff6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["bc809a4fedc4441a467583ebebb337c76137ff6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"bc809a4fedc4441a467583ebebb337c76137ff6f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","bc809a4fedc4441a467583ebebb337c76137ff6f"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","bc809a4fedc4441a467583ebebb337c76137ff6f","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc809a4fedc4441a467583ebebb337c76137ff6f":["29ef99d61cda9641b6250bf9567329a6e65f901d","a0ae5e3ed1232483b7b8a014f175a5fe43595982","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}