{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","sourceNew":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<SpanOrQuery>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected SpanOrQuery getTopLevelQuery() {\n          return new SpanOrQuery();\n        }\n\n        @Override\n        protected void addClause(SpanOrQuery topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term);\n          q.setBoost(boost);\n          topLevel.addClause(q);\n        }\n      };\n    }\n\n","sourceOld":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<SpanOrQuery>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected SpanOrQuery getTopLevelQuery() {\n          return new SpanOrQuery();\n        }\n\n        @Override\n        protected void addClause(SpanOrQuery topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term);\n          q.setBoost(boost);\n          topLevel.addClause(q);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4b6308fa66dc96de36abfae5d3e7c92c805e227","date":1432916588,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","sourceNew":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<SpanOrQuery>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected SpanOrQuery getTopLevelQuery() {\n          return new SpanOrQuery();\n        }\n\n        @Override\n        protected void addClause(SpanOrQuery topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term, states);\n          q.setBoost(boost);\n          topLevel.addClause(q);\n        }\n      };\n    }\n\n","sourceOld":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<SpanOrQuery>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected SpanOrQuery getTopLevelQuery() {\n          return new SpanOrQuery();\n        }\n\n        @Override\n        protected void addClause(SpanOrQuery topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term);\n          q.setBoost(boost);\n          topLevel.addClause(q);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","sourceNew":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<SpanOrQuery>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected SpanOrQuery getTopLevelBuilder() {\n          return new SpanOrQuery();\n        }\n\n        @Override\n        protected Query build(SpanOrQuery builder) {\n          return builder;\n        }\n\n        @Override\n        protected void addClause(SpanOrQuery topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term, states);\n          q.setBoost(boost);\n          topLevel.addClause(q);\n        }\n      };\n    }\n\n","sourceOld":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<SpanOrQuery>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected SpanOrQuery getTopLevelQuery() {\n          return new SpanOrQuery();\n        }\n\n        @Override\n        protected void addClause(SpanOrQuery topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term, states);\n          q.setBoost(boost);\n          topLevel.addClause(q);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","sourceNew":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<SpanOrQuery>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected SpanOrQuery getTopLevelBuilder() {\n          return new SpanOrQuery();\n        }\n\n        @Override\n        protected Query build(SpanOrQuery builder) {\n          return builder;\n        }\n\n        @Override\n        protected void addClause(SpanOrQuery topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term, states);\n          topLevel.addClause(q);\n        }\n      };\n    }\n\n","sourceOld":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<SpanOrQuery>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected SpanOrQuery getTopLevelBuilder() {\n          return new SpanOrQuery();\n        }\n\n        @Override\n        protected Query build(SpanOrQuery builder) {\n          return builder;\n        }\n\n        @Override\n        protected void addClause(SpanOrQuery topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term, states);\n          q.setBoost(boost);\n          topLevel.addClause(q);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d5fdda869d17bc5d83aca861ac9ae5a9ac18d1","date":1444919230,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","sourceNew":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<List<SpanQuery>>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected List<SpanQuery> getTopLevelBuilder() {\n          return new ArrayList<SpanQuery>();\n        }\n\n        @Override\n        protected Query build(List<SpanQuery> builder) {\n          return new SpanOrQuery(builder.toArray(new SpanQuery[builder.size()]));\n        }\n\n        @Override\n        protected void addClause(List<SpanQuery> topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term, states);\n          topLevel.add(q);\n        }\n      };\n    }\n\n","sourceOld":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<SpanOrQuery>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected SpanOrQuery getTopLevelBuilder() {\n          return new SpanOrQuery();\n        }\n\n        @Override\n        protected Query build(SpanOrQuery builder) {\n          return builder;\n        }\n\n        @Override\n        protected void addClause(SpanOrQuery topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term, states);\n          topLevel.addClause(q);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","sourceNew":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<List<SpanQuery>>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected List<SpanQuery> getTopLevelBuilder() {\n          return new ArrayList<SpanQuery>();\n        }\n\n        @Override\n        protected Query build(List<SpanQuery> builder) {\n          return new SpanOrQuery(builder.toArray(new SpanQuery[builder.size()]));\n        }\n\n        @Override\n        protected void addClause(List<SpanQuery> topLevel, Term term, int docFreq, float boost, TermStates states) {\n          final SpanTermQuery q = new SpanTermQuery(term, states);\n          topLevel.add(q);\n        }\n      };\n    }\n\n","sourceOld":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<List<SpanQuery>>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected List<SpanQuery> getTopLevelBuilder() {\n          return new ArrayList<SpanQuery>();\n        }\n\n        @Override\n        protected Query build(List<SpanQuery> builder) {\n          return new SpanOrQuery(builder.toArray(new SpanQuery[builder.size()]));\n        }\n\n        @Override\n        protected void addClause(List<SpanQuery> topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term, states);\n          topLevel.add(q);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite#TopTermsSpanBooleanQueryRewrite(int).mjava","sourceNew":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<List<SpanQuery>>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected List<SpanQuery> getTopLevelBuilder() {\n          return new ArrayList<SpanQuery>();\n        }\n\n        @Override\n        protected Query build(List<SpanQuery> builder) {\n          return new SpanOrQuery(builder.toArray(new SpanQuery[builder.size()]));\n        }\n\n        @Override\n        protected void addClause(List<SpanQuery> topLevel, Term term, int docFreq, float boost, TermStates states) {\n          final SpanTermQuery q = new SpanTermQuery(term, states);\n          topLevel.add(q);\n        }\n      };\n    }\n\n","sourceOld":"    /** \n     * Create a TopTermsSpanBooleanQueryRewrite for \n     * at most <code>size</code> terms.\n     */\n    public TopTermsSpanBooleanQueryRewrite(int size) {\n      delegate = new TopTermsRewrite<List<SpanQuery>>(size) {\n        @Override\n        protected int getMaxSize() {\n          return Integer.MAX_VALUE;\n        }\n    \n        @Override\n        protected List<SpanQuery> getTopLevelBuilder() {\n          return new ArrayList<SpanQuery>();\n        }\n\n        @Override\n        protected Query build(List<SpanQuery> builder) {\n          return new SpanOrQuery(builder.toArray(new SpanQuery[builder.size()]));\n        }\n\n        @Override\n        protected void addClause(List<SpanQuery> topLevel, Term term, int docFreq, float boost, TermContext states) {\n          final SpanTermQuery q = new SpanTermQuery(term, states);\n          topLevel.add(q);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"b94236357aaa22b76c10629851fe4e376e0cea82":["39d5fdda869d17bc5d83aca861ac9ae5a9ac18d1","a6e9f769521480a623f897c0d59089b919fa4239"],"39d5fdda869d17bc5d83aca861ac9ae5a9ac18d1":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a6e9f769521480a623f897c0d59089b919fa4239":["39d5fdda869d17bc5d83aca861ac9ae5a9ac18d1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39d5fdda869d17bc5d83aca861ac9ae5a9ac18d1":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["39d5fdda869d17bc5d83aca861ac9ae5a9ac18d1"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}