{"path":"lucene/facet/src/test/org/apache/lucene/util/UnsafeByteArrayInputStreamTest#testReinit().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/UnsafeByteArrayInputStreamTest#testReinit().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/UnsafeByteArrayInputStreamTest#testReinit().mjava","sourceNew":"  @Test\n  public void testReinit() throws IOException {\n    int length = 100;\n    byte[] buffer = new byte[length];\n    for (int i = 0; i < length; ++i) {\n      buffer[i] = (byte) i;\n    }\n    byte[] result = new byte[buffer.length];\n    UnsafeByteArrayInputStream ubais = new UnsafeByteArrayInputStream(buffer);\n\n    int index = 0;\n    int by = ubais.read();\n    while (by >= 0) {\n      result[index++] = (byte) (by);\n      by = ubais.read();\n    }\n\n    assertEquals(length, index);\n    assertTrue(Arrays.equals(buffer, result));\n\n    int length2 = 50;\n    byte[] buffer2 = new byte[length2];\n    for (int i = 0; i < length2; ++i) {\n      buffer2[i] = (byte) (90 + i);\n    }\n    byte[] result2 = new byte[buffer2.length];\n    ubais.reInit(buffer2);\n\n    int index2 = 0;\n    int by2 = ubais.read();\n    while (by2 >= 0) {\n      result2[index2++] = (byte) (by2);\n      by2 = ubais.read();\n    }\n\n    assertEquals(length2, index2);\n    assertTrue(Arrays.equals(buffer2, result2));\n  }\n\n","sourceOld":"  @Test\n  public void testReinit() throws IOException {\n    int length = 100;\n    byte[] buffer = new byte[length];\n    for (int i = 0; i < length; ++i) {\n      buffer[i] = (byte) i;\n    }\n    byte[] result = new byte[buffer.length];\n    UnsafeByteArrayInputStream ubais = new UnsafeByteArrayInputStream(buffer);\n\n    int index = 0;\n    int by = ubais.read();\n    while (by >= 0) {\n      result[index++] = (byte) (by);\n      by = ubais.read();\n    }\n\n    assertEquals(length, index);\n    assertTrue(Arrays.equals(buffer, result));\n\n    int length2 = 50;\n    byte[] buffer2 = new byte[length2];\n    for (int i = 0; i < length2; ++i) {\n      buffer2[i] = (byte) (90 + i);\n    }\n    byte[] result2 = new byte[buffer2.length];\n    ubais.reInit(buffer2);\n\n    int index2 = 0;\n    int by2 = ubais.read();\n    while (by2 >= 0) {\n      result2[index2++] = (byte) (by2);\n      by2 = ubais.read();\n    }\n\n    assertEquals(length2, index2);\n    assertTrue(Arrays.equals(buffer2, result2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/util/UnsafeByteArrayInputStreamTest#testReinit().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testReinit() throws IOException {\n    int length = 100;\n    byte[] buffer = new byte[length];\n    for (int i = 0; i < length; ++i) {\n      buffer[i] = (byte) i;\n    }\n    byte[] result = new byte[buffer.length];\n    UnsafeByteArrayInputStream ubais = new UnsafeByteArrayInputStream(buffer);\n\n    int index = 0;\n    int by = ubais.read();\n    while (by >= 0) {\n      result[index++] = (byte) (by);\n      by = ubais.read();\n    }\n\n    assertEquals(length, index);\n    assertTrue(Arrays.equals(buffer, result));\n\n    int length2 = 50;\n    byte[] buffer2 = new byte[length2];\n    for (int i = 0; i < length2; ++i) {\n      buffer2[i] = (byte) (90 + i);\n    }\n    byte[] result2 = new byte[buffer2.length];\n    ubais.reInit(buffer2);\n\n    int index2 = 0;\n    int by2 = ubais.read();\n    while (by2 >= 0) {\n      result2[index2++] = (byte) (by2);\n      by2 = ubais.read();\n    }\n\n    assertEquals(length2, index2);\n    assertTrue(Arrays.equals(buffer2, result2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}