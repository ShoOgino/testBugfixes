{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","date":1358522034,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fada9c2732aed8b9b212e6a56c3f98d87bc8acc1","date":1358785900,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, bitsPerValue, PackedInts.COMPACT);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, bitsPerValue, PackedInts.COMPACT);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["fada9c2732aed8b9b212e6a56c3f98d87bc8acc1"],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fada9c2732aed8b9b212e6a56c3f98d87bc8acc1":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":[],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["fada9c2732aed8b9b212e6a56c3f98d87bc8acc1"],"fada9c2732aed8b9b212e6a56c3f98d87bc8acc1":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}