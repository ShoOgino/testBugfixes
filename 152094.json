{"path":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#setScorer(Scorer).mjava","commits":[{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#setScorer(Scorer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    // Find any BlockJoinScorers out there:\n    scorer.visitScorers(new Scorer.ScorerVisitor<Query,Query,Scorer>() {\n        private void enroll(BlockJoinQuery query, BlockJoinQuery.BlockJoinScorer scorer) {\n          final Integer slot = joinQueryID.get(query);\n          if (slot == null) {\n            joinQueryID.put(query, joinScorers.length);\n            //System.out.println(\"found JQ: \" + query + \" slot=\" + joinScorers.length);\n            final BlockJoinQuery.BlockJoinScorer[] newArray = new BlockJoinQuery.BlockJoinScorer[1+joinScorers.length];\n            System.arraycopy(joinScorers, 0, newArray, 0, joinScorers.length);\n            joinScorers = newArray;\n            joinScorers[joinScorers.length-1] = scorer;\n          } else {\n            joinScorers[slot] = scorer;\n          }\n        }\n\n        @Override\n        public void visitOptional(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitOpt\");\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n\n        @Override\n        public void visitRequired(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitReq parent=\" + parent + \" child=\" + child + \" scorer=\" + scorer);\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n\n        @Override\n        public void visitProhibited(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitProh\");\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n      });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#setScorer(Scorer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    // Find any BlockJoinScorers out there:\n    scorer.visitScorers(new Scorer.ScorerVisitor<Query,Query,Scorer>() {\n        private void enroll(BlockJoinQuery query, BlockJoinQuery.BlockJoinScorer scorer) {\n          final Integer slot = joinQueryID.get(query);\n          if (slot == null) {\n            joinQueryID.put(query, joinScorers.length);\n            //System.out.println(\"found JQ: \" + query + \" slot=\" + joinScorers.length);\n            final BlockJoinQuery.BlockJoinScorer[] newArray = new BlockJoinQuery.BlockJoinScorer[1+joinScorers.length];\n            System.arraycopy(joinScorers, 0, newArray, 0, joinScorers.length);\n            joinScorers = newArray;\n            joinScorers[joinScorers.length-1] = scorer;\n          } else {\n            joinScorers[slot] = scorer;\n          }\n        }\n\n        @Override\n        public void visitOptional(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitOpt\");\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n\n        @Override\n        public void visitRequired(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitReq parent=\" + parent + \" child=\" + child + \" scorer=\" + scorer);\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n\n        @Override\n        public void visitProhibited(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitProh\");\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n      });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#setScorer(Scorer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    // Find any BlockJoinScorers out there:\n    scorer.visitScorers(new Scorer.ScorerVisitor<Query,Query,Scorer>() {\n        private void enroll(BlockJoinQuery query, BlockJoinQuery.BlockJoinScorer scorer) {\n          final Integer slot = joinQueryID.get(query);\n          if (slot == null) {\n            joinQueryID.put(query, joinScorers.length);\n            //System.out.println(\"found JQ: \" + query + \" slot=\" + joinScorers.length);\n            final BlockJoinQuery.BlockJoinScorer[] newArray = new BlockJoinQuery.BlockJoinScorer[1+joinScorers.length];\n            System.arraycopy(joinScorers, 0, newArray, 0, joinScorers.length);\n            joinScorers = newArray;\n            joinScorers[joinScorers.length-1] = scorer;\n          } else {\n            joinScorers[slot] = scorer;\n          }\n        }\n\n        @Override\n        public void visitOptional(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitOpt\");\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n\n        @Override\n        public void visitRequired(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitReq parent=\" + parent + \" child=\" + child + \" scorer=\" + scorer);\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n\n        @Override\n        public void visitProhibited(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitProh\");\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n      });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c5555e75149b469a7756e82bd740777cfb584a","date":1313615559,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#setScorer(Scorer).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      if (scorer instanceof BlockJoinQuery.BlockJoinScorer) {\n        enroll((BlockJoinQuery) scorer.getWeight().getQuery(), (BlockJoinQuery.BlockJoinScorer)scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    // Find any BlockJoinScorers out there:\n    scorer.visitScorers(new Scorer.ScorerVisitor<Query,Query,Scorer>() {\n        private void enroll(BlockJoinQuery query, BlockJoinQuery.BlockJoinScorer scorer) {\n          final Integer slot = joinQueryID.get(query);\n          if (slot == null) {\n            joinQueryID.put(query, joinScorers.length);\n            //System.out.println(\"found JQ: \" + query + \" slot=\" + joinScorers.length);\n            final BlockJoinQuery.BlockJoinScorer[] newArray = new BlockJoinQuery.BlockJoinScorer[1+joinScorers.length];\n            System.arraycopy(joinScorers, 0, newArray, 0, joinScorers.length);\n            joinScorers = newArray;\n            joinScorers[joinScorers.length-1] = scorer;\n          } else {\n            joinScorers[slot] = scorer;\n          }\n        }\n\n        @Override\n        public void visitOptional(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitOpt\");\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n\n        @Override\n        public void visitRequired(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitReq parent=\" + parent + \" child=\" + child + \" scorer=\" + scorer);\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n\n        @Override\n        public void visitProhibited(Query parent, Query child, Scorer scorer) {\n          //System.out.println(\"visitProh\");\n          if (child instanceof BlockJoinQuery) {\n            enroll((BlockJoinQuery) child,\n                   (BlockJoinQuery.BlockJoinScorer) scorer);\n          }\n        }\n      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      if (scorer instanceof ToParentBlockJoinQuery.BlockJoinScorer) {\n        enroll((ToParentBlockJoinQuery) scorer.getWeight().getQuery(), (ToParentBlockJoinQuery.BlockJoinScorer) scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      if (scorer instanceof BlockJoinQuery.BlockJoinScorer) {\n        enroll((BlockJoinQuery) scorer.getWeight().getQuery(), (BlockJoinQuery.BlockJoinScorer)scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["89c5555e75149b469a7756e82bd740777cfb584a"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"89c5555e75149b469a7756e82bd740777cfb584a":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bd4a7478aca8c3880512b730b28bf3239340635"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89c5555e75149b469a7756e82bd740777cfb584a","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97e30c53fd81463c6ccd52402c91a6548cf42acb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89c5555e75149b469a7756e82bd740777cfb584a":["6bd4a7478aca8c3880512b730b28bf3239340635"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}