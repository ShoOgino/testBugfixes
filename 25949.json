{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","date":1342021960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      // System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":["d04b321158481d3895702b3cbf6821a3083e6c15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      // System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      // System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      // System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      // System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OR_OPERATOR_NAME);\n      // System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      // System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OR_OPERATOR_NAME);\n      // System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      // System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5de502b5478255493125e7e801411ba17a6682ec":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5de502b5478255493125e7e801411ba17a6682ec"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"5de502b5478255493125e7e801411ba17a6682ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","6f20fd35e3055a0c5b387df0b986a68d65d86441","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}