{"path":"lucene/backwards/src/java/org/apache/lucene/util/OpenBitSet#xor(OpenBitSet).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/OpenBitSet#xor(OpenBitSet).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/OpenBitSet#xor(OpenBitSet).mjava","sourceNew":"  /** this = this XOR other */\n  public void xor(OpenBitSet other) {\n    int newLen = Math.max(wlen,other.wlen);\n    ensureCapacityWords(newLen);\n\n    long[] thisArr = this.bits;\n    long[] otherArr = other.bits;\n    int pos=Math.min(wlen,other.wlen);\n    while(--pos>=0) {\n      thisArr[pos] ^= otherArr[pos];\n    }\n    if (this.wlen < newLen) {\n      System.arraycopy(otherArr, this.wlen, thisArr, this.wlen, newLen-this.wlen);\n    }\n    this.wlen = newLen;\n  }\n\n","sourceOld":"  /** this = this XOR other */\n  public void xor(OpenBitSet other) {\n    int newLen = Math.max(wlen,other.wlen);\n    ensureCapacityWords(newLen);\n\n    long[] thisArr = this.bits;\n    long[] otherArr = other.bits;\n    int pos=Math.min(wlen,other.wlen);\n    while(--pos>=0) {\n      thisArr[pos] ^= otherArr[pos];\n    }\n    if (this.wlen < newLen) {\n      System.arraycopy(otherArr, this.wlen, thisArr, this.wlen, newLen-this.wlen);\n    }\n    this.wlen = newLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/OpenBitSet#xor(OpenBitSet).mjava","sourceNew":null,"sourceOld":"  /** this = this XOR other */\n  public void xor(OpenBitSet other) {\n    int newLen = Math.max(wlen,other.wlen);\n    ensureCapacityWords(newLen);\n\n    long[] thisArr = this.bits;\n    long[] otherArr = other.bits;\n    int pos=Math.min(wlen,other.wlen);\n    while(--pos>=0) {\n      thisArr[pos] ^= otherArr[pos];\n    }\n    if (this.wlen < newLen) {\n      System.arraycopy(otherArr, this.wlen, thisArr, this.wlen, newLen-this.wlen);\n    }\n    this.wlen = newLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}