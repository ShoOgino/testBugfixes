{"path":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"/dev/null","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n        \n        // basic clone\n        InputStream expected = dir.openFile(\"f11\");\n        assertTrue(_TestHelper.isFSInputStreamOpen(expected));\n        \n        InputStream one = cr.openFile(\"f11\");\n        assertTrue(isCSInputStreamOpen(one));\n        \n        InputStream two = (InputStream) one.clone();\n        assertTrue(isCSInputStreamOpen(two));\n        \n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n        \n        // Now close the first stream\n        one.close();        \n        assertTrue(\"Only close when cr is closed\", isCSInputStreamOpen(one));\n        \n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)    \n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n        \n        \n        // Now close the compound reader \n        cr.close();\n        assertFalse(\"Now closed one\", isCSInputStreamOpen(one));\n        assertFalse(\"Now closed two\", isCSInputStreamOpen(two));\n            \n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n            \n        \n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n        \n        expected.close();\n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1acbe60842541f8c38e2d60b03591478c9f91546","date":1066055498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        InputStream expected = dir.openFile(\"f11\");\n        assertTrue(_TestHelper.isFSInputStreamOpen(expected));\n\n        InputStream one = cr.openFile(\"f11\");\n        assertTrue(isCSInputStreamOpen(one));\n\n        InputStream two = (InputStream) one.clone();\n        assertTrue(isCSInputStreamOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSInputStreamOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSInputStreamOpen(one));\n        assertFalse(\"Now closed two\", isCSInputStreamOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n        \n        // basic clone\n        InputStream expected = dir.openFile(\"f11\");\n        assertTrue(_TestHelper.isFSInputStreamOpen(expected));\n        \n        InputStream one = cr.openFile(\"f11\");\n        assertTrue(isCSInputStreamOpen(one));\n        \n        InputStream two = (InputStream) one.clone();\n        assertTrue(isCSInputStreamOpen(two));\n        \n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n        \n        // Now close the first stream\n        one.close();        \n        assertTrue(\"Only close when cr is closed\", isCSInputStreamOpen(one));\n        \n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)    \n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n        \n        \n        // Now close the compound reader \n        cr.close();\n        assertFalse(\"Now closed one\", isCSInputStreamOpen(one));\n        assertFalse(\"Now closed two\", isCSInputStreamOpen(two));\n            \n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n            \n        \n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n        \n        expected.close();\n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n        assertTrue(_TestHelper.isFSInputStreamOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\");\n        assertTrue(isCSIndexInputOpen(one));\n\n        IndexInput two = (IndexInput) one.clone();\n        assertTrue(isCSIndexInputOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n        assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        InputStream expected = dir.openFile(\"f11\");\n        assertTrue(_TestHelper.isFSInputStreamOpen(expected));\n\n        InputStream one = cr.openFile(\"f11\");\n        assertTrue(isCSInputStreamOpen(one));\n\n        InputStream two = (InputStream) one.clone();\n        assertTrue(isCSInputStreamOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSInputStreamOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSInputStreamOpen(one));\n        assertFalse(\"Now closed two\", isCSInputStreamOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77f2eb0d13b43db148a5e4f61c166fa3688a2df9","date":1096404326,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n        assertTrue(_TestHelper.isFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\");\n        assertTrue(isCSIndexInputOpen(one));\n\n        IndexInput two = (IndexInput) one.clone();\n        assertTrue(isCSIndexInputOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n        assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n        assertTrue(_TestHelper.isFSInputStreamOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\");\n        assertTrue(isCSIndexInputOpen(one));\n\n        IndexInput two = (IndexInput) one.clone();\n        assertTrue(isCSIndexInputOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n        assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ae0cdb99ad49c7c27f8c34051dd663eadd60125","date":1096919183,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n\n        // this test only works for FSIndexInput\n        if (_TestHelper.isFSIndexInput(expected)) {\n\n          assertTrue(_TestHelper.isFSIndexInputOpen(expected));\n\n          IndexInput one = cr.openInput(\"f11\");\n          assertTrue(isCSIndexInputOpen(one));\n\n          IndexInput two = (IndexInput) one.clone();\n          assertTrue(isCSIndexInputOpen(two));\n\n          assertSameStreams(\"basic clone one\", expected, one);\n          expected.seek(0);\n          assertSameStreams(\"basic clone two\", expected, two);\n\n          // Now close the first stream\n          one.close();\n          assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n          // The following should really fail since we couldn't expect to\n          // access a file once close has been called on it (regardless of\n          // buffering and/or clone magic)\n          expected.seek(0);\n          two.seek(0);\n          assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n          // Now close the compound reader\n          cr.close();\n          assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n          assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n          // The following may also fail since the compound stream is closed\n          expected.seek(0);\n          two.seek(0);\n          //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n          // Now close the second clone\n          two.close();\n          expected.seek(0);\n          two.seek(0);\n          //assertSameStreams(\"basic clone two/4\", expected, two);\n        }\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n        assertTrue(_TestHelper.isFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\");\n        assertTrue(isCSIndexInputOpen(one));\n\n        IndexInput two = (IndexInput) one.clone();\n        assertTrue(isCSIndexInputOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n        assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416d032f85b7ea8efc272f86ba46bc460589aff7","date":1243881250,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\");\n        assertTrue(isCSIndexInputOpen(one));\n\n        IndexInput two = (IndexInput) one.clone();\n        assertTrue(isCSIndexInputOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n        assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n\n        // this test only works for FSIndexInput\n        if (_TestHelper.isFSIndexInput(expected)) {\n\n          assertTrue(_TestHelper.isFSIndexInputOpen(expected));\n\n          IndexInput one = cr.openInput(\"f11\");\n          assertTrue(isCSIndexInputOpen(one));\n\n          IndexInput two = (IndexInput) one.clone();\n          assertTrue(isCSIndexInputOpen(two));\n\n          assertSameStreams(\"basic clone one\", expected, one);\n          expected.seek(0);\n          assertSameStreams(\"basic clone two\", expected, two);\n\n          // Now close the first stream\n          one.close();\n          assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n          // The following should really fail since we couldn't expect to\n          // access a file once close has been called on it (regardless of\n          // buffering and/or clone magic)\n          expected.seek(0);\n          two.seek(0);\n          assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n          // Now close the compound reader\n          cr.close();\n          assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n          assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n          // The following may also fail since the compound stream is closed\n          expected.seek(0);\n          two.seek(0);\n          //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n          // Now close the second clone\n          two.close();\n          expected.seek(0);\n          two.seek(0);\n          //assertSameStreams(\"basic clone two/4\", expected, two);\n        }\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testClonedStreamsClosing().mjava","sourceNew":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\");\n        assertTrue(isCSIndexInputOpen(one));\n\n        IndexInput two = (IndexInput) one.clone();\n        assertTrue(isCSIndexInputOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n        assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","sourceOld":"    public void testClonedStreamsClosing() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // basic clone\n        IndexInput expected = dir.openInput(\"f11\");\n\n        // this test only works for FSIndexInput\n        assertTrue(_TestHelper.isSimpleFSIndexInput(expected));\n        assertTrue(_TestHelper.isSimpleFSIndexInputOpen(expected));\n\n        IndexInput one = cr.openInput(\"f11\");\n        assertTrue(isCSIndexInputOpen(one));\n\n        IndexInput two = (IndexInput) one.clone();\n        assertTrue(isCSIndexInputOpen(two));\n\n        assertSameStreams(\"basic clone one\", expected, one);\n        expected.seek(0);\n        assertSameStreams(\"basic clone two\", expected, two);\n\n        // Now close the first stream\n        one.close();\n        assertTrue(\"Only close when cr is closed\", isCSIndexInputOpen(one));\n\n        // The following should really fail since we couldn't expect to\n        // access a file once close has been called on it (regardless of\n        // buffering and/or clone magic)\n        expected.seek(0);\n        two.seek(0);\n        assertSameStreams(\"basic clone two/2\", expected, two);\n\n\n        // Now close the compound reader\n        cr.close();\n        assertFalse(\"Now closed one\", isCSIndexInputOpen(one));\n        assertFalse(\"Now closed two\", isCSIndexInputOpen(two));\n\n        // The following may also fail since the compound stream is closed\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/3\", expected, two);\n\n\n        // Now close the second clone\n        two.close();\n        expected.seek(0);\n        two.seek(0);\n        //assertSameStreams(\"basic clone two/4\", expected, two);\n\n        expected.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["1acbe60842541f8c38e2d60b03591478c9f91546"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["e971ba25509e21a130fef61f0687be0446ca27a0"],"1acbe60842541f8c38e2d60b03591478c9f91546":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["5ae0cdb99ad49c7c27f8c34051dd663eadd60125"],"5ae0cdb99ad49c7c27f8c34051dd663eadd60125":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["416d032f85b7ea8efc272f86ba46bc460589aff7"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"1acbe60842541f8c38e2d60b03591478c9f91546":["e971ba25509e21a130fef61f0687be0446ca27a0"],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["5ae0cdb99ad49c7c27f8c34051dd663eadd60125"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["1acbe60842541f8c38e2d60b03591478c9f91546"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ae0cdb99ad49c7c27f8c34051dd663eadd60125":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}