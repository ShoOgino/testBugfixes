{"path":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","commits":[{"id":"52e9359ec09a0ce311e6ce95805998bebc7f7fd0","date":1196417385,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, this, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ((MergePolicy.OneMerge) spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos, this);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(boolean optimize)\n    throws CorruptIndexException, IOException {\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      // Currently hardwired to 1, but once we add method to\n      // IndexWriter to allow \"optimizing to <= N segments\"\n      // then we will change this.\n      final int maxSegmentCount = 1;\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, this, maxSegmentCount, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          ((MergePolicy.OneMerge) spec.merges.get(i)).optimize = true;\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos, this);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"346d5897e4c4e77ed5dbd31f7730ff30973d5971","date":1198317988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, this, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ((MergePolicy.OneMerge) spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos, this);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, this, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ((MergePolicy.OneMerge) spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos, this);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd488f50316362b01a7f67b11a96796b9652e3e5","date":1241121034,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, this, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ((MergePolicy.OneMerge) spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos, this);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, this, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ((MergePolicy.OneMerge) spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos, this);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ((MergePolicy.OneMerge) spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, this, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ((MergePolicy.OneMerge) spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos, this);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ( spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge(spec.merges.get(i));\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ((MergePolicy.OneMerge) spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ( spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge(spec.merges.get(i));\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ( spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge(spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"52e9359ec09a0ce311e6ce95805998bebc7f7fd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"52e9359ec09a0ce311e6ce95805998bebc7f7fd0":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}