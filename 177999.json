{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    Set<CollectionStateWatcher> watchers = client.getZkStateReader().getStateWatchers(\"nosuchcollection\");\n    assertTrue(\"Watchers for collection should be removed after timeout\",\n        watchers == null || watchers.size() == 0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    Set<CollectionStateWatcher> watchers = client.getZkStateReader().getStateWatchers(\"nosuchcollection\");\n    assertTrue(\"Watchers for collection should be removed after timeout\",\n        watchers == null || watchers.size() == 0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    Set<CollectionStateWatcher> watchers = client.getZkStateReader().getStateWatchers(\"nosuchcollection\");\n    assertTrue(\"Watchers for collection should be removed after timeout\",\n        watchers == null || watchers.size() == 0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff","date":1471003412,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","sourceNew":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    Set<CollectionStateWatcher> watchers = client.getZkStateReader().getStateWatchers(\"nosuchcollection\");\n    assertTrue(\"Watchers for collection should be removed after timeout\",\n        watchers == null || watchers.size() == 0);\n\n  }\n\n","bugFix":["5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","sourceNew":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    Set<CollectionStateWatcher> watchers = client.getZkStateReader().getStateWatchers(\"nosuchcollection\");\n    assertTrue(\"Watchers for collection should be removed after timeout\",\n        watchers == null || watchers.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","sourceNew":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    Set<CollectionStateWatcher> watchers = client.getZkStateReader().getStateWatchers(\"nosuchcollection\");\n    assertTrue(\"Watchers for collection should be removed after timeout\",\n        watchers == null || watchers.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","date":1532119025,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","sourceNew":"  @Test\n  // commented 20-July-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testPredicateFailureTimesOut().mjava","sourceNew":"  @Test\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS,\n                          ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\",\n            MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  // commented 20-July-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testPredicateFailureTimesOut() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    expectThrows(TimeoutException.class, () -> {\n      client.waitForState(\"nosuchcollection\", 1, TimeUnit.SECONDS, ((liveNodes, collectionState) -> false));\n    });\n    waitFor(\"Watchers for collection should be removed after timeout\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"nosuchcollection\").isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["d470c8182e92b264680e34081b75e70a9f2b3c89","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"7b366e7dd3172289251a86be96031af4002cd19c":["15600ceffc7023bfa1f532afbf1854e7f8c4e6d3"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["d470c8182e92b264680e34081b75e70a9f2b3c89","37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["7b366e7dd3172289251a86be96031af4002cd19c"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}