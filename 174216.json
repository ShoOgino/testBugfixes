{"path":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","commits":[{"id":"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a","date":1329809096,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","sourceNew":"  private void recursiveGetNodes(Node node, Shape shape, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (node.isLeaf()) {//cell is within shape\n      result.add(node);\n      return;\n    }\n    final Collection<Node> subCells = node.getSubCells(shape);\n    if (node.getLevel() == detailLevel - 1) {\n      if (subCells.size() < node.getSubCellsSize()) {\n        if (inclParents)\n          result.add(node);\n        for (Node subCell : subCells) {\n          subCell.setLeaf();\n        }\n        result.addAll(subCells);\n      } else {//a bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell.\n        node.setLeaf();\n        result.add(node);\n      }\n    } else {\n      if (inclParents) {\n        result.add(node);\n      }\n      for (Node subCell : subCells) {\n        recursiveGetNodes(subCell, shape, detailLevel, inclParents, result);//tail call\n      }\n    }\n  }\n\n","sourceOld":"  private void recursiveGetNodes(Node node, Shape shape, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (node.isLeaf()) {//cell is within shape\n      result.add(node);\n      return;\n    }\n    final Collection<Node> subCells = node.getSubCells(shape);\n    if (node.getLevel() == detailLevel - 1) {\n      if (subCells.size() < node.getSubCellsSize()) {\n        if (inclParents)\n          result.add(node);\n        for (Node subCell : subCells) {\n          subCell.setLeaf();\n        }\n        result.addAll(subCells);\n      } else {//a bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell.\n        node.setLeaf();\n        result.add(node);\n      }\n    } else {\n      if (inclParents) {\n        result.add(node);\n      }\n      for (Node subCell : subCells) {\n        recursiveGetNodes(subCell, shape, detailLevel, inclParents, result);//tail call\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25738042b3fdefd34091f8a386e2ce94d892a505","date":1330492659,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#recursiveGetNodes(Node,Shape,int,boolean,Collection[Node]).mjava","sourceNew":null,"sourceOld":"  private void recursiveGetNodes(Node node, Shape shape, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (node.isLeaf()) {//cell is within shape\n      result.add(node);\n      return;\n    }\n    final Collection<Node> subCells = node.getSubCells(shape);\n    if (node.getLevel() == detailLevel - 1) {\n      if (subCells.size() < node.getSubCellsSize()) {\n        if (inclParents)\n          result.add(node);\n        for (Node subCell : subCells) {\n          subCell.setLeaf();\n        }\n        result.addAll(subCells);\n      } else {//a bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell.\n        node.setLeaf();\n        result.add(node);\n      }\n    } else {\n      if (inclParents) {\n        result.add(node);\n      }\n      for (Node subCell : subCells) {\n        recursiveGetNodes(subCell, shape, detailLevel, inclParents, result);//tail call\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25738042b3fdefd34091f8a386e2ce94d892a505":["d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"25738042b3fdefd34091f8a386e2ce94d892a505":[],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["25738042b3fdefd34091f8a386e2ce94d892a505"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["25738042b3fdefd34091f8a386e2ce94d892a505","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}