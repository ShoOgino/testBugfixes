{"path":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Send the 4letterword\r\n   * @param host the destination host\r\n   * @param port the destination port\r\n   * @param cmd the 4letterword\r\n   * @return\r\n   * @throws IOException\r\n   */\r\n  public static String send4LetterWord(String host, int port, String cmd)\r\n      throws IOException\r\n  {\r\n\r\n      Socket sock = new Socket(host, port);\r\n      BufferedReader reader = null;\r\n      try {\r\n          OutputStream outstream = sock.getOutputStream();\r\n          outstream.write(cmd.getBytes());\r\n          outstream.flush();\r\n          // this replicates NC - close the output stream before reading\r\n          sock.shutdownOutput();\r\n\r\n          reader =\r\n              new BufferedReader(\r\n                      new InputStreamReader(sock.getInputStream()));\r\n          StringBuilder sb = new StringBuilder();\r\n          String line;\r\n          while((line = reader.readLine()) != null) {\r\n              sb.append(line + \"\\n\");\r\n          }\r\n          return sb.toString();\r\n      } finally {\r\n          sock.close();\r\n          if (reader != null) {\r\n              reader.close();\r\n          }\r\n      }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Send the 4letterword\r\n   * @param host the destination host\r\n   * @param port the destination port\r\n   * @param cmd the 4letterword\r\n   * @return\r\n   * @throws IOException\r\n   */\r\n  public static String send4LetterWord(String host, int port, String cmd)\r\n      throws IOException\r\n  {\r\n\r\n      Socket sock = new Socket(host, port);\r\n      BufferedReader reader = null;\r\n      try {\r\n          OutputStream outstream = sock.getOutputStream();\r\n          outstream.write(cmd.getBytes());\r\n          outstream.flush();\r\n          // this replicates NC - close the output stream before reading\r\n          sock.shutdownOutput();\r\n\r\n          reader =\r\n              new BufferedReader(\r\n                      new InputStreamReader(sock.getInputStream()));\r\n          StringBuilder sb = new StringBuilder();\r\n          String line;\r\n          while((line = reader.readLine()) != null) {\r\n              sb.append(line + \"\\n\");\r\n          }\r\n          return sb.toString();\r\n      } finally {\r\n          sock.close();\r\n          if (reader != null) {\r\n              reader.close();\r\n          }\r\n      }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Send the 4letterword\r\n   * @param host the destination host\r\n   * @param port the destination port\r\n   * @param cmd the 4letterword\r\n   * @return\r\n   * @throws IOException\r\n   */\r\n  public static String send4LetterWord(String host, int port, String cmd)\r\n      throws IOException\r\n  {\r\n\r\n      Socket sock = new Socket(host, port);\r\n      BufferedReader reader = null;\r\n      try {\r\n          OutputStream outstream = sock.getOutputStream();\r\n          outstream.write(cmd.getBytes());\r\n          outstream.flush();\r\n          // this replicates NC - close the output stream before reading\r\n          sock.shutdownOutput();\r\n\r\n          reader =\r\n              new BufferedReader(\r\n                      new InputStreamReader(sock.getInputStream()));\r\n          StringBuilder sb = new StringBuilder();\r\n          String line;\r\n          while((line = reader.readLine()) != null) {\r\n              sb.append(line + \"\\n\");\r\n          }\r\n          return sb.toString();\r\n      } finally {\r\n          sock.close();\r\n          if (reader != null) {\r\n              reader.close();\r\n          }\r\n      }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes());\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream()));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\r\n   * Send the 4letterword\r\n   * @param host the destination host\r\n   * @param port the destination port\r\n   * @param cmd the 4letterword\r\n   * @return\r\n   * @throws IOException\r\n   */\r\n  public static String send4LetterWord(String host, int port, String cmd)\r\n      throws IOException\r\n  {\r\n\r\n      Socket sock = new Socket(host, port);\r\n      BufferedReader reader = null;\r\n      try {\r\n          OutputStream outstream = sock.getOutputStream();\r\n          outstream.write(cmd.getBytes());\r\n          outstream.flush();\r\n          // this replicates NC - close the output stream before reading\r\n          sock.shutdownOutput();\r\n\r\n          reader =\r\n              new BufferedReader(\r\n                      new InputStreamReader(sock.getInputStream()));\r\n          StringBuilder sb = new StringBuilder();\r\n          String line;\r\n          while((line = reader.readLine()) != null) {\r\n              sb.append(line + \"\\n\");\r\n          }\r\n          return sb.toString();\r\n      } finally {\r\n          sock.close();\r\n          if (reader != null) {\r\n              reader.close();\r\n          }\r\n      }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651a613a8df324c5f834b6c2b6fb5bb945431755","date":1296820909,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream()));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes());\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream()));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream()));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\r\n   * Send the 4letterword\r\n   * @param host the destination host\r\n   * @param port the destination port\r\n   * @param cmd the 4letterword\r\n   * @return\r\n   * @throws IOException\r\n   */\r\n  public static String send4LetterWord(String host, int port, String cmd)\r\n      throws IOException\r\n  {\r\n\r\n      Socket sock = new Socket(host, port);\r\n      BufferedReader reader = null;\r\n      try {\r\n          OutputStream outstream = sock.getOutputStream();\r\n          outstream.write(cmd.getBytes());\r\n          outstream.flush();\r\n          // this replicates NC - close the output stream before reading\r\n          sock.shutdownOutput();\r\n\r\n          reader =\r\n              new BufferedReader(\r\n                      new InputStreamReader(sock.getInputStream()));\r\n          StringBuilder sb = new StringBuilder();\r\n          String line;\r\n          while((line = reader.readLine()) != null) {\r\n              sb.append(line + \"\\n\");\r\n          }\r\n          return sb.toString();\r\n      } finally {\r\n          sock.close();\r\n          if (reader != null) {\r\n              reader.close();\r\n          }\r\n      }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream()));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\r\n   * Send the 4letterword\r\n   * @param host the destination host\r\n   * @param port the destination port\r\n   * @param cmd the 4letterword\r\n   * @return\r\n   * @throws IOException\r\n   */\r\n  public static String send4LetterWord(String host, int port, String cmd)\r\n      throws IOException\r\n  {\r\n\r\n      Socket sock = new Socket(host, port);\r\n      BufferedReader reader = null;\r\n      try {\r\n          OutputStream outstream = sock.getOutputStream();\r\n          outstream.write(cmd.getBytes());\r\n          outstream.flush();\r\n          // this replicates NC - close the output stream before reading\r\n          sock.shutdownOutput();\r\n\r\n          reader =\r\n              new BufferedReader(\r\n                      new InputStreamReader(sock.getInputStream()));\r\n          StringBuilder sb = new StringBuilder();\r\n          String line;\r\n          while((line = reader.readLine()) != null) {\r\n              sb.append(line + \"\\n\");\r\n          }\r\n          return sb.toString();\r\n      } finally {\r\n          sock.close();\r\n          if (reader != null) {\r\n              reader.close();\r\n          }\r\n      }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream()));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream()));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream()));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream()));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkTestServer#send4LetterWord(String,int,String).mjava","sourceNew":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream()));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","sourceOld":"  /**\n   * Send the 4letterword\n   * @param host the destination host\n   * @param port the destination port\n   * @param cmd the 4letterword\n   * @return\n   * @throws IOException\n   */\n  public static String send4LetterWord(String host, int port, String cmd)\n      throws IOException\n  {\n\n      Socket sock = new Socket(host, port);\n      BufferedReader reader = null;\n      try {\n          OutputStream outstream = sock.getOutputStream();\n          outstream.write(cmd.getBytes(\"US-ASCII\"));\n          outstream.flush();\n          // this replicates NC - close the output stream before reading\n          sock.shutdownOutput();\n\n          reader =\n              new BufferedReader(\n                      new InputStreamReader(sock.getInputStream()));\n          StringBuilder sb = new StringBuilder();\n          String line;\n          while((line = reader.readLine()) != null) {\n              sb.append(line + \"\\n\");\n          }\n          return sb.toString();\n      } finally {\n          sock.close();\n          if (reader != null) {\n              reader.close();\n          }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"651a613a8df324c5f834b6c2b6fb5bb945431755":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"c26f00b574427b55127e869b935845554afde1fa":["651a613a8df324c5f834b6c2b6fb5bb945431755","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","651a613a8df324c5f834b6c2b6fb5bb945431755"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","651a613a8df324c5f834b6c2b6fb5bb945431755"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"651a613a8df324c5f834b6c2b6fb5bb945431755":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["651a613a8df324c5f834b6c2b6fb5bb945431755"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}