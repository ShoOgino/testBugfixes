{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","commits":[{"id":"b76fad1f8492334e597826072e178dab0b21e02b","date":1412249476,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"/dev/null","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in it's own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrServer server = new HttpSolrServer(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    server.commit();\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    // try to clean up\n    try {\n      CollectionAdminRequest req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1715683e6728a4e05ffc4720ace31550649caf1f","date":1412307661,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in it's own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrServer server = new HttpSolrServer(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    server.commit();\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in it's own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrServer server = new HttpSolrServer(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    server.commit();\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    // try to clean up\n    try {\n      CollectionAdminRequest req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"/dev/null","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in it's own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrServer server = new HttpSolrServer(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    server.commit();\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrServer server = new HttpSolrServer(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    server.commit();\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in it's own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrServer server = new HttpSolrServer(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    server.commit();\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrServer server = new HttpSolrServer(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    server.commit();\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrServer server = new HttpSolrServer(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    server.commit();\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrClient client = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    client.commit();\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrServer server = new HttpSolrServer(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    server.commit();\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    try {\n      server.commit();\n    } finally {\n      server.shutdown();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrClient client = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    client.commit();\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")));\n    try {\n      server.commit();\n    } finally {\n      server.shutdown();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", ZkStateReader.ACTIVE, leader.getStr(ZkStateReader.STATE_PROP));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", ZkStateReader.ACTIVE, leader.getStr(ZkStateReader.STATE_PROP));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", \"active\", leader.getStr(\"state\"));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b4e2084c345e406b10f0bb551914f9ca267290","date":1427952474,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", ZkStateReader.ACTIVE, leader.getStr(ZkStateReader.STATE_PROP));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", ZkStateReader.ACTIVE, leader.getStr(ZkStateReader.STATE_PROP));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", ZkStateReader.ACTIVE, leader.getStr(ZkStateReader.STATE_PROP));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 1 shard and 3 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", ZkStateReader.ACTIVE, leader.getStr(ZkStateReader.STATE_PROP));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertEquals(\"Leader was not active\", ZkStateReader.ACTIVE, leader.getStr(ZkStateReader.STATE_PROP));\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05d1c262da1d1f850b159395fc65d7925919dc22","date":1428418196,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    try (HttpSolrClient server = new HttpSolrClient(ZkCoreNodeProps.getCoreUrl(shard2Leader.getStr(\"base_url\"), shard2Leader.getStr(\"core\")))) {\n      server.commit();\n    }\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(true); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().updateClusterState(); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, \"conf1\", 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, \"conf1\", 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, \"conf1\", 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionOnCommitTest#multiShardTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderInitiatedRecoveryOnCommitTest#multiShardTest().mjava","sourceNew":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, \"conf1\", 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","sourceOld":"  private void multiShardTest() throws Exception {\n\n    log.info(\"Running multiShardTest\");\n\n    // create a collection that has 2 shard and 2 replicas\n    String testCollectionName = \"c8n_2x2_commits\";\n    createCollection(testCollectionName, \"conf1\", 2, 2, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, \"shard1\", 2, 2, 30);\n    assertTrue(\"Expected 1 replicas for collection \" + testCollectionName\n            + \" but found \" + notLeaders.size() + \"; clusterState: \"\n            + printClusterStateInfo(),\n        notLeaders.size() == 1);\n\n    log.info(\"All replicas active for \"+testCollectionName);\n\n    // let's put the leader in its own partition, no replicas can contact it now\n    Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    log.info(\"Creating partition to leader at \"+leader.getCoreUrl());\n    SocketProxy leaderProxy = getProxyForReplica(leader);\n    leaderProxy.close();\n\n    // let's find the leader of shard2 and ask him to commit\n    Replica shard2Leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard2\");\n    sendCommitWithRetry(shard2Leader);\n\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName); // get the latest state\n    leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\");\n    assertSame(\"Leader was not active\", Replica.State.ACTIVE, leader.getState());\n\n    log.info(\"Healing partitioned replica at \"+leader.getCoreUrl());\n    leaderProxy.reopen();\n    Thread.sleep(sleepMsBeforeHealPartition);\n\n    // try to clean up\n    attemptCollectionDelete(cloudClient, testCollectionName);\n\n    log.info(\"multiShardTest completed OK\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b76fad1f8492334e597826072e178dab0b21e02b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"197bbedf08450ade98a11f4a0001448059666bec":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"05d1c262da1d1f850b159395fc65d7925919dc22":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"84f20f331d8001864545c7021812d8c6509c7593":["28288370235ed02234a64753cdbf0c6ec096304a"],"bafca15d8e408346a67f4282ad1143b88023893b":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"1715683e6728a4e05ffc4720ace31550649caf1f":["b76fad1f8492334e597826072e178dab0b21e02b"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"0c924d4069ef5a5bc479a493befe0121aada6896":["cc3b13b430571c2e169f98fe38e1e7666f88522d","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["50b4e2084c345e406b10f0bb551914f9ca267290"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["1715683e6728a4e05ffc4720ace31550649caf1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["0c924d4069ef5a5bc479a493befe0121aada6896","50b4e2084c345e406b10f0bb551914f9ca267290"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"50b4e2084c345e406b10f0bb551914f9ca267290":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["05d1c262da1d1f850b159395fc65d7925919dc22"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1715683e6728a4e05ffc4720ace31550649caf1f"],"3217321f3e1d7922898c6c633d17acfa840d6875":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","ac97ea104d893f16aab430d9904473bc1f233f3c"],"28288370235ed02234a64753cdbf0c6ec096304a":["3217321f3e1d7922898c6c633d17acfa840d6875","197bbedf08450ade98a11f4a0001448059666bec"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","3217321f3e1d7922898c6c633d17acfa840d6875"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84f20f331d8001864545c7021812d8c6509c7593"]},"commit2Childs":{"b76fad1f8492334e597826072e178dab0b21e02b":["1715683e6728a4e05ffc4720ace31550649caf1f"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["0c924d4069ef5a5bc479a493befe0121aada6896","50b4e2084c345e406b10f0bb551914f9ca267290"],"05d1c262da1d1f850b159395fc65d7925919dc22":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"84f20f331d8001864545c7021812d8c6509c7593":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["bafca15d8e408346a67f4282ad1143b88023893b"],"1715683e6728a4e05ffc4720ace31550649caf1f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"0c924d4069ef5a5bc479a493befe0121aada6896":["d2638f781be724518ff6c2263d14a48cf6e68017"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["05d1c262da1d1f850b159395fc65d7925919dc22"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b76fad1f8492334e597826072e178dab0b21e02b","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"50b4e2084c345e406b10f0bb551914f9ca267290":["a219f1dcad1700e84807666bdbd2b573e8de7021","d2638f781be724518ff6c2263d14a48cf6e68017"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"3217321f3e1d7922898c6c633d17acfa840d6875":["28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["197bbedf08450ade98a11f4a0001448059666bec","e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["84f20f331d8001864545c7021812d8c6509c7593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}