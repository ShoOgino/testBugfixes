{"path":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils#muteConsole().mjava","commits":[{"id":"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","date":1503399053,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils#muteConsole().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/StartupLoggingUtils#muteConsole().mjava","sourceNew":"  /**\n   * Disables all log4j ConsoleAppender's by modifying log4j configuration dynamically.\n   * Must only be used during early startup\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      org.apache.log4j.Logger rootLogger = LogManager.getRootLogger();\n      Enumeration appenders = rootLogger.getAllAppenders();\n      while (appenders.hasMoreElements()) {\n        Appender appender = (Appender) appenders.nextElement();\n        if (appender instanceof ConsoleAppender) {\n          log.info(\"Property solr.log.muteconsole given. Muting ConsoleAppender named \" + appender.getName());\n          rootLogger.removeAppender(appender);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Disables all log4j ConsoleAppender's by modifying log4j configuration dynamically.\n   * Must only be used during early startup\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      org.apache.log4j.Logger rootLogger = LogManager.getRootLogger();\n      Enumeration appenders = rootLogger.getAllAppenders();\n      while (appenders.hasMoreElements()) {\n        Appender appender = (Appender) appenders.nextElement();\n        if (appender instanceof ConsoleAppender) {\n          log.info(\"Property solr.log.muteconsole given. Muting ConsoleAppender named \" + appender.getName());\n          rootLogger.removeAppender(appender);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils#muteConsole().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/StartupLoggingUtils#muteConsole().mjava","sourceNew":"  /**\n   * Disables all log4j ConsoleAppender's by modifying log4j configuration dynamically.\n   * Must only be used during early startup\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      org.apache.log4j.Logger rootLogger = LogManager.getRootLogger();\n      Enumeration appenders = rootLogger.getAllAppenders();\n      while (appenders.hasMoreElements()) {\n        Appender appender = (Appender) appenders.nextElement();\n        if (appender instanceof ConsoleAppender) {\n          log.info(\"Property solr.log.muteconsole given. Muting ConsoleAppender named \" + appender.getName());\n          rootLogger.removeAppender(appender);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Disables all log4j ConsoleAppender's by modifying log4j configuration dynamically.\n   * Must only be used during early startup\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      org.apache.log4j.Logger rootLogger = LogManager.getRootLogger();\n      Enumeration appenders = rootLogger.getAllAppenders();\n      while (appenders.hasMoreElements()) {\n        Appender appender = (Appender) appenders.nextElement();\n        if (appender instanceof ConsoleAppender) {\n          log.info(\"Property solr.log.muteconsole given. Muting ConsoleAppender named \" + appender.getName());\n          rootLogger.removeAppender(appender);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils#muteConsole().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils#muteConsole().mjava","sourceNew":"  /**\n   * Disables all log4j ConsoleAppender's by modifying log4j configuration dynamically.\n   * Must only be used during early startup\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n      Configuration config = ctx.getConfiguration();\n      LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME);\n      Map<String, Appender> appenders = loggerConfig.getAppenders();\n      appenders.forEach((name, appender) -> {\n        if (appender instanceof ConsoleAppender) {\n          loggerConfig.removeAppender(name);\n          ctx.updateLoggers();\n        }\n      });\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Disables all log4j ConsoleAppender's by modifying log4j configuration dynamically.\n   * Must only be used during early startup\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      org.apache.log4j.Logger rootLogger = LogManager.getRootLogger();\n      Enumeration appenders = rootLogger.getAllAppenders();\n      while (appenders.hasMoreElements()) {\n        Appender appender = (Appender) appenders.nextElement();\n        if (appender instanceof ConsoleAppender) {\n          log.info(\"Property solr.log.muteconsole given. Muting ConsoleAppender named \" + appender.getName());\n          rootLogger.removeAppender(appender);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils#muteConsole().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils#muteConsole().mjava","sourceNew":"  /**\n   * Disables all log4j ConsoleAppender's by modifying log4j configuration dynamically.\n   * Must only be used during early startup\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n      Configuration config = ctx.getConfiguration();\n      LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME);\n      Map<String, Appender> appenders = loggerConfig.getAppenders();\n      appenders.forEach((name, appender) -> {\n        if (appender instanceof ConsoleAppender) {\n          loggerConfig.removeAppender(name);\n          ctx.updateLoggers();\n        }\n      });\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Disables all log4j ConsoleAppender's by modifying log4j configuration dynamically.\n   * Must only be used during early startup\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      org.apache.log4j.Logger rootLogger = LogManager.getRootLogger();\n      Enumeration appenders = rootLogger.getAllAppenders();\n      while (appenders.hasMoreElements()) {\n        Appender appender = (Appender) appenders.nextElement();\n        if (appender instanceof ConsoleAppender) {\n          log.info(\"Property solr.log.muteconsole given. Muting ConsoleAppender named \" + appender.getName());\n          rootLogger.removeAppender(appender);\n        }\n      }\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d852ffa9c7cd84573cb81b88686a56e790a19db","date":1522804874,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils#muteConsole().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils#muteConsole().mjava","sourceNew":"  /**\n   * Disables all log4j2 ConsoleAppender's by modifying log4j configuration dynamically.\n   * Must only be used during early startup\n   * @return true if ok or else false if something happened, e.g. log4j2 classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j2 access\")\n  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n      Configuration config = ctx.getConfiguration();\n      LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME);\n      Map<String, Appender> appenders = loggerConfig.getAppenders();\n      appenders.forEach((name, appender) -> {\n        if (appender instanceof ConsoleAppender) {\n          loggerConfig.removeAppender(name);\n          ctx.updateLoggers();\n        }\n      });\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Disables all log4j ConsoleAppender's by modifying log4j configuration dynamically.\n   * Must only be used during early startup\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  public static boolean muteConsole() {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n      Configuration config = ctx.getConfiguration();\n      LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME);\n      Map<String, Appender> appenders = loggerConfig.getAppenders();\n      appenders.forEach((name, appender) -> {\n        if (appender instanceof ConsoleAppender) {\n          loggerConfig.removeAppender(name);\n          ctx.updateLoggers();\n        }\n      });\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not mute logging to console.\");\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d852ffa9c7cd84573cb81b88686a56e790a19db":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93baf46bd12096e0de407258b3b32cfaaf58e448":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d852ffa9c7cd84573cb81b88686a56e790a19db"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"3d852ffa9c7cd84573cb81b88686a56e790a19db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["3d852ffa9c7cd84573cb81b88686a56e790a19db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}