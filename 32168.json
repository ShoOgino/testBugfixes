{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst#doTest().mjava","commits":[{"id":"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07","date":1270909388,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"lucene/contrib/surround/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    Searcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    Searcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexSearcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    Searcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexSearcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    Searcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexSearcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    Searcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexSearcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexSearcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a53a291ad9b1cc050d846b68758c061a55d52734":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","a53a291ad9b1cc050d846b68758c061a55d52734","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07"],"b3d2f5b0b95e82cde4724fb6e7020cfdd2bb5a07":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}