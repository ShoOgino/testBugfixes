{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","sourceNew":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    Path solrHome = null;\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    if (localArchives.length == 0) {\n      throw new IOException(String.format(Locale.ENGLISH,\n          \"No local cache archives, where is %s:%s\", SolrOutputFormat\n              .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n    }\n    for (Path unpackedDir : localArchives) {\n      // Only logged if debugging\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(Locale.ENGLISH, \"Examining unpack directory %s for %s\",\n            unpackedDir, SolrOutputFormat.getZipName(conf)));\n\n        ProcessBuilder lsCmd = new ProcessBuilder(new String[] { \"/bin/ls\",\n            \"-lR\", unpackedDir.toString() });\n        lsCmd.redirectErrorStream();\n        Process ls = lsCmd.start();\n        byte[] buf = new byte[16 * 1024];\n        InputStream all = ls.getInputStream();\n        try {\n          int count;\n          while ((count = all.read(buf)) >= 0) {\n            System.err.write(buf, 0, count);\n          }\n        } catch (IOException ignore) {\n        } finally {\n          all.close();\n        }\n        String exitValue;\n        try {\n          exitValue = String.valueOf(ls.waitFor());\n        } catch (InterruptedException e) {\n          exitValue = \"interrupted\";\n        }\n        System.err.format(\"Exit value of 'ls -lR' is %s%n\", exitValue);\n      }\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        solrHome = unpackedDir;\n        break;\n      }\n    }\n\n    return solrHome;\n  }\n\n","sourceOld":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    Path solrHome = null;\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    if (localArchives.length == 0) {\n      throw new IOException(String.format(Locale.ENGLISH,\n          \"No local cache archives, where is %s:%s\", SolrOutputFormat\n              .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n    }\n    for (Path unpackedDir : localArchives) {\n      // Only logged if debugging\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(Locale.ENGLISH, \"Examining unpack directory %s for %s\",\n            unpackedDir, SolrOutputFormat.getZipName(conf)));\n\n        ProcessBuilder lsCmd = new ProcessBuilder(new String[] { \"/bin/ls\",\n            \"-lR\", unpackedDir.toString() });\n        lsCmd.redirectErrorStream();\n        Process ls = lsCmd.start();\n        byte[] buf = new byte[16 * 1024];\n        InputStream all = ls.getInputStream();\n        try {\n          int count;\n          while ((count = all.read(buf)) >= 0) {\n            System.err.write(buf, 0, count);\n          }\n        } catch (IOException ignore) {\n        } finally {\n          all.close();\n        }\n        String exitValue;\n        try {\n          exitValue = String.valueOf(ls.waitFor());\n        } catch (InterruptedException e) {\n          exitValue = \"interrupted\";\n        }\n        System.err.format(\"Exit value of 'ls -lR' is %s%n\", exitValue);\n      }\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        solrHome = unpackedDir;\n        break;\n      }\n    }\n\n    return solrHome;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","pathOld":"/dev/null","sourceNew":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    Path solrHome = null;\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    if (localArchives.length == 0) {\n      throw new IOException(String.format(Locale.ENGLISH,\n          \"No local cache archives, where is %s:%s\", SolrOutputFormat\n              .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n    }\n    for (Path unpackedDir : localArchives) {\n      // Only logged if debugging\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(Locale.ENGLISH, \"Examining unpack directory %s for %s\",\n            unpackedDir, SolrOutputFormat.getZipName(conf)));\n\n        ProcessBuilder lsCmd = new ProcessBuilder(new String[] { \"/bin/ls\",\n            \"-lR\", unpackedDir.toString() });\n        lsCmd.redirectErrorStream();\n        Process ls = lsCmd.start();\n        byte[] buf = new byte[16 * 1024];\n        InputStream all = ls.getInputStream();\n        try {\n          int count;\n          while ((count = all.read(buf)) >= 0) {\n            System.err.write(buf, 0, count);\n          }\n        } catch (IOException ignore) {\n        } finally {\n          all.close();\n        }\n        String exitValue;\n        try {\n          exitValue = String.valueOf(ls.waitFor());\n        } catch (InterruptedException e) {\n          exitValue = \"interrupted\";\n        }\n        System.err.format(\"Exit value of 'ls -lR' is %s%n\", exitValue);\n      }\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        solrHome = unpackedDir;\n        break;\n      }\n    }\n\n    return solrHome;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2208f43a9be2ac423812bb93060ad3f37910b24","date":1395263322,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","sourceNew":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    Path solrHome = null;\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    if (localArchives.length == 0) {\n      throw new IOException(String.format(Locale.ENGLISH,\n          \"No local cache archives, where is %s:%s\", SolrOutputFormat\n              .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n    }\n    for (Path unpackedDir : localArchives) {\n      // Only logged if debugging\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(Locale.ENGLISH, \"Examining unpack directory %s for %s\",\n            unpackedDir, SolrOutputFormat.getZipName(conf)));\n\n        ProcessBuilder lsCmd = new ProcessBuilder(new String[] { \"/bin/ls\",\n            \"-lR\", unpackedDir.toString() });\n        lsCmd.redirectErrorStream();\n        Process ls = lsCmd.start();\n        byte[] buf = new byte[16 * 1024];\n        InputStream all = ls.getInputStream();\n        try {\n          int count;\n          while ((count = all.read(buf)) >= 0) {\n            System.err.write(buf, 0, count);\n          }\n        } catch (IOException ignore) {\n        } finally {\n          all.close();\n        }\n        String exitValue;\n        try {\n          exitValue = String.valueOf(ls.waitFor());\n        } catch (InterruptedException e) {\n          exitValue = \"interrupted\";\n        }\n        System.err.format(Locale.ENGLISH, \"Exit value of 'ls -lR' is %s%n\", exitValue);\n      }\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        solrHome = unpackedDir;\n        break;\n      }\n    }\n\n    return solrHome;\n  }\n\n","sourceOld":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    Path solrHome = null;\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    if (localArchives.length == 0) {\n      throw new IOException(String.format(Locale.ENGLISH,\n          \"No local cache archives, where is %s:%s\", SolrOutputFormat\n              .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n    }\n    for (Path unpackedDir : localArchives) {\n      // Only logged if debugging\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(Locale.ENGLISH, \"Examining unpack directory %s for %s\",\n            unpackedDir, SolrOutputFormat.getZipName(conf)));\n\n        ProcessBuilder lsCmd = new ProcessBuilder(new String[] { \"/bin/ls\",\n            \"-lR\", unpackedDir.toString() });\n        lsCmd.redirectErrorStream();\n        Process ls = lsCmd.start();\n        byte[] buf = new byte[16 * 1024];\n        InputStream all = ls.getInputStream();\n        try {\n          int count;\n          while ((count = all.read(buf)) >= 0) {\n            System.err.write(buf, 0, count);\n          }\n        } catch (IOException ignore) {\n        } finally {\n          all.close();\n        }\n        String exitValue;\n        try {\n          exitValue = String.valueOf(ls.waitFor());\n        } catch (InterruptedException e) {\n          exitValue = \"interrupted\";\n        }\n        System.err.format(\"Exit value of 'ls -lR' is %s%n\", exitValue);\n      }\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        solrHome = unpackedDir;\n        break;\n      }\n    }\n\n    return solrHome;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d","date":1433692150,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","sourceNew":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    for (Path unpackedDir : localArchives) {\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        return unpackedDir;\n      }\n    }\n    throw new IOException(String.format(Locale.ENGLISH,\n        \"No local cache archives, where is %s:%s\", SolrOutputFormat\n            .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n  }\n\n","sourceOld":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    Path solrHome = null;\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    if (localArchives.length == 0) {\n      throw new IOException(String.format(Locale.ENGLISH,\n          \"No local cache archives, where is %s:%s\", SolrOutputFormat\n              .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n    }\n    for (Path unpackedDir : localArchives) {\n      // Only logged if debugging\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(Locale.ENGLISH, \"Examining unpack directory %s for %s\",\n            unpackedDir, SolrOutputFormat.getZipName(conf)));\n\n        ProcessBuilder lsCmd = new ProcessBuilder(new String[] { \"/bin/ls\",\n            \"-lR\", unpackedDir.toString() });\n        lsCmd.redirectErrorStream();\n        Process ls = lsCmd.start();\n        byte[] buf = new byte[16 * 1024];\n        InputStream all = ls.getInputStream();\n        try {\n          int count;\n          while ((count = all.read(buf)) >= 0) {\n            System.err.write(buf, 0, count);\n          }\n        } catch (IOException ignore) {\n        } finally {\n          all.close();\n        }\n        String exitValue;\n        try {\n          exitValue = String.valueOf(ls.waitFor());\n        } catch (InterruptedException e) {\n          exitValue = \"interrupted\";\n        }\n        System.err.format(Locale.ENGLISH, \"Exit value of 'ls -lR' is %s%n\", exitValue);\n      }\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        solrHome = unpackedDir;\n        break;\n      }\n    }\n\n    return solrHome;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","sourceNew":null,"sourceOld":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    for (Path unpackedDir : localArchives) {\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        return unpackedDir;\n      }\n    }\n    throw new IOException(String.format(Locale.ENGLISH,\n        \"No local cache archives, where is %s:%s\", SolrOutputFormat\n            .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","sourceNew":null,"sourceOld":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    for (Path unpackedDir : localArchives) {\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        return unpackedDir;\n      }\n    }\n    throw new IOException(String.format(Locale.ENGLISH,\n        \"No local cache archives, where is %s:%s\", SolrOutputFormat\n            .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d"],"b2208f43a9be2ac423812bb93060ad3f37910b24":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d":["b2208f43a9be2ac423812bb93060ad3f37910b24"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["b2208f43a9be2ac423812bb93060ad3f37910b24","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b2208f43a9be2ac423812bb93060ad3f37910b24":["efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}