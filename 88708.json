{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyForEmptyCollection().mjava","commits":[{"id":"9ccdba140735cc20cf9cb71d7e50c3e6844f4ea8","date":1561441766,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyForEmptyCollection().mjava","pathOld":"/dev/null","sourceNew":"  public void testPolicyForEmptyCollection() throws IOException, InterruptedException {\n    Map m = (Map) loadFromResource(\"testEmptyCollection.json\");\n    Map clusterStateMap = (Map) m.remove(\"clusterstate\");\n    Map replicaInfoMap = (Map) m.remove(\"replicaInfo\");\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateMap, ImmutableSet.of(\"node1\", \"node2\"), CLUSTER_STATE);\n\n    List<String> shards = Arrays.asList(\"shard1\", \"shard2\", \"shard3\");\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"test_empty_collection\")\n        .forShard(shards)\n        .assignNrtReplicas(1)\n        .build();\n\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return clusterState.getLiveNodes();\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return new AutoScalingConfig(new HashMap<>());\n          }\n        };\n      }\n\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            return Collections.EMPTY_MAP;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            //return Collections.EMPTY_MAP;\n            return replicaInfoMap;\n          }\n        };\n      }\n\n    };\n\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"test_empty_collection\");\n\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    assertEquals(2,replicaPositions.stream().map((rp)-> rp.node).distinct().count());\n    assertEquals(3,replicaPositions.stream().map((rp)-> rp.shard).distinct().count());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyForEmptyCollection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyForEmptyCollection().mjava","sourceNew":"  public void testPolicyForEmptyCollection() throws IOException, InterruptedException {\n    Map m = (Map) loadFromResource(\"testEmptyCollection.json\");\n    Map clusterStateMap = (Map) m.remove(\"clusterstate\");\n    Map replicaInfoMap = (Map) m.remove(\"replicaInfo\");\n\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1, clusterStateMap, ImmutableSet.of(\"node1\", \"node2\"));\n\n    List<String> shards = Arrays.asList(\"shard1\", \"shard2\", \"shard3\");\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"test_empty_collection\")\n        .forShard(shards)\n        .assignNrtReplicas(1)\n        .build();\n\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return clusterState.getLiveNodes();\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return new AutoScalingConfig(new HashMap<>());\n          }\n        };\n      }\n\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            return Collections.EMPTY_MAP;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            //return Collections.EMPTY_MAP;\n            return replicaInfoMap;\n          }\n        };\n      }\n\n    };\n\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"test_empty_collection\");\n\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    assertEquals(2,replicaPositions.stream().map((rp)-> rp.node).distinct().count());\n    assertEquals(3,replicaPositions.stream().map((rp)-> rp.shard).distinct().count());\n  }\n\n","sourceOld":"  public void testPolicyForEmptyCollection() throws IOException, InterruptedException {\n    Map m = (Map) loadFromResource(\"testEmptyCollection.json\");\n    Map clusterStateMap = (Map) m.remove(\"clusterstate\");\n    Map replicaInfoMap = (Map) m.remove(\"replicaInfo\");\n\n    ClusterState clusterState = ClusterState.load(1, clusterStateMap, ImmutableSet.of(\"node1\", \"node2\"), CLUSTER_STATE);\n\n    List<String> shards = Arrays.asList(\"shard1\", \"shard2\", \"shard3\");\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"test_empty_collection\")\n        .forShard(shards)\n        .assignNrtReplicas(1)\n        .build();\n\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return clusterState.getLiveNodes();\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return new AutoScalingConfig(new HashMap<>());\n          }\n        };\n      }\n\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            return Collections.EMPTY_MAP;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            //return Collections.EMPTY_MAP;\n            return replicaInfoMap;\n          }\n        };\n      }\n\n    };\n\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"test_empty_collection\");\n\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    assertEquals(2,replicaPositions.stream().map((rp)-> rp.node).distinct().count());\n    assertEquals(3,replicaPositions.stream().map((rp)-> rp.shard).distinct().count());\n  }\n\n","bugFix":["9ccdba140735cc20cf9cb71d7e50c3e6844f4ea8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyForEmptyCollection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyForEmptyCollection().mjava","sourceNew":"  public void testPolicyForEmptyCollection() throws IOException, InterruptedException {\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) loadFromResource(\"testEmptyCollection.json\");\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map clusterStateMap = (Map) m.remove(\"clusterstate\");\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map replicaInfoMap = (Map) m.remove(\"replicaInfo\");\n\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1, clusterStateMap, ImmutableSet.of(\"node1\", \"node2\"));\n\n    List<String> shards = Arrays.asList(\"shard1\", \"shard2\", \"shard3\");\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"test_empty_collection\")\n        .forShard(shards)\n        .assignNrtReplicas(1)\n        .build();\n\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return clusterState.getLiveNodes();\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return new AutoScalingConfig(new HashMap<>());\n          }\n        };\n      }\n\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            return Collections.EMPTY_MAP;\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            //return Collections.EMPTY_MAP;\n            return replicaInfoMap;\n          }\n        };\n      }\n\n    };\n\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"test_empty_collection\");\n\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    assertEquals(2,replicaPositions.stream().map((rp)-> rp.node).distinct().count());\n    assertEquals(3,replicaPositions.stream().map((rp)-> rp.shard).distinct().count());\n  }\n\n","sourceOld":"  public void testPolicyForEmptyCollection() throws IOException, InterruptedException {\n    Map m = (Map) loadFromResource(\"testEmptyCollection.json\");\n    Map clusterStateMap = (Map) m.remove(\"clusterstate\");\n    Map replicaInfoMap = (Map) m.remove(\"replicaInfo\");\n\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1, clusterStateMap, ImmutableSet.of(\"node1\", \"node2\"));\n\n    List<String> shards = Arrays.asList(\"shard1\", \"shard2\", \"shard3\");\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"test_empty_collection\")\n        .forShard(shards)\n        .assignNrtReplicas(1)\n        .build();\n\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return clusterState.getLiveNodes();\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return new AutoScalingConfig(new HashMap<>());\n          }\n        };\n      }\n\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            return Collections.EMPTY_MAP;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            //return Collections.EMPTY_MAP;\n            return replicaInfoMap;\n          }\n        };\n      }\n\n    };\n\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"test_empty_collection\");\n\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    assertEquals(2,replicaPositions.stream().map((rp)-> rp.node).distinct().count());\n    assertEquals(3,replicaPositions.stream().map((rp)-> rp.shard).distinct().count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyForEmptyCollection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyForEmptyCollection().mjava","sourceNew":"  public void testPolicyForEmptyCollection() throws IOException, InterruptedException {\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) loadFromResource(\"testEmptyCollection.json\");\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map clusterStateMap = (Map) m.remove(\"clusterstate\");\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map replicaInfoMap = (Map) m.remove(\"replicaInfo\");\n\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1, clusterStateMap, ImmutableSet.of(\"node1\", \"node2\"));\n\n    List<String> shards = Arrays.asList(\"shard1\", \"shard2\", \"shard3\");\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"test_empty_collection\")\n        .forShard(shards)\n        .assignNrtReplicas(1)\n        .build();\n\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return clusterState.getLiveNodes();\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return new AutoScalingConfig(new HashMap<>());\n          }\n        };\n      }\n\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            return Collections.EMPTY_MAP;\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            //return Collections.EMPTY_MAP;\n            return replicaInfoMap;\n          }\n        };\n      }\n\n    };\n\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"test_empty_collection\");\n\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    assertEquals(2,replicaPositions.stream().map((rp)-> rp.node).distinct().count());\n    assertEquals(3,replicaPositions.stream().map((rp)-> rp.shard).distinct().count());\n  }\n\n","sourceOld":"  public void testPolicyForEmptyCollection() throws IOException, InterruptedException {\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) loadFromResource(\"testEmptyCollection.json\");\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map clusterStateMap = (Map) m.remove(\"clusterstate\");\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map replicaInfoMap = (Map) m.remove(\"replicaInfo\");\n\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1, clusterStateMap, ImmutableSet.of(\"node1\", \"node2\"));\n\n    List<String> shards = Arrays.asList(\"shard1\", \"shard2\", \"shard3\");\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"test_empty_collection\")\n        .forShard(shards)\n        .assignNrtReplicas(1)\n        .build();\n\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return clusterState.getLiveNodes();\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return new AutoScalingConfig(new HashMap<>());\n          }\n        };\n      }\n\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            return Collections.EMPTY_MAP;\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            //return Collections.EMPTY_MAP;\n            return replicaInfoMap;\n          }\n        };\n      }\n\n    };\n\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"test_empty_collection\");\n\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    assertEquals(2,replicaPositions.stream().map((rp)-> rp.node).distinct().count());\n    assertEquals(3,replicaPositions.stream().map((rp)-> rp.shard).distinct().count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testPolicyForEmptyCollection().mjava","sourceNew":null,"sourceOld":"  public void testPolicyForEmptyCollection() throws IOException, InterruptedException {\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) loadFromResource(\"testEmptyCollection.json\");\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map clusterStateMap = (Map) m.remove(\"clusterstate\");\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map replicaInfoMap = (Map) m.remove(\"replicaInfo\");\n\n    @SuppressWarnings({\"unchecked\"})\n    ClusterState clusterState = ClusterState.createFromCollectionMap(1, clusterStateMap, ImmutableSet.of(\"node1\", \"node2\"));\n\n    List<String> shards = Arrays.asList(\"shard1\", \"shard2\", \"shard3\");\n\n    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n        .forCollection(\"test_empty_collection\")\n        .forShard(shards)\n        .assignNrtReplicas(1)\n        .build();\n\n    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return clusterState.getLiveNodes();\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return new DelegatingDistribStateManager(null) {\n          @Override\n          public AutoScalingConfig getAutoScalingConfig() {\n            return new AutoScalingConfig(new HashMap<>());\n          }\n        };\n      }\n\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            return Collections.EMPTY_MAP;\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\"})\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            //return Collections.EMPTY_MAP;\n            return replicaInfoMap;\n          }\n        };\n      }\n\n    };\n\n    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n    DocCollection collection = state.getCollection(\"test_empty_collection\");\n\n    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);\n    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n    assertEquals(2,replicaPositions.stream().map((rp)-> rp.node).distinct().count());\n    assertEquals(3,replicaPositions.stream().map((rp)-> rp.shard).distinct().count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9ccdba140735cc20cf9cb71d7e50c3e6844f4ea8"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"9ccdba140735cc20cf9cb71d7e50c3e6844f4ea8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9ba1b632c041956c93c41aa1143d16a567014891"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ccdba140735cc20cf9cb71d7e50c3e6844f4ea8":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ccdba140735cc20cf9cb71d7e50c3e6844f4ea8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}