{"path":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testMaxCharsSort().mjava","commits":[{"id":"09db84b25dda87b73022d145a68f14c86a3a552d","date":1517506829,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testMaxCharsSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxCharsSort() throws Exception {\n    assertU(adoc(\"id\",\"1\", \"whitespace_stxt\", \"aaa bbb ccc ddd\"));\n    assertU(adoc(\"id\",\"2\", \"whitespace_stxt\", \"aaa bbb xxx yyy\"));\n    assertU(adoc(\"id\",\"3\", \"whitespace_stxt\", \"aaa bbb ccc xxx\"));\n    assertU(adoc(\"id\",\"4\", \"whitespace_stxt\", \"aaa\"));\n    assertU(commit());\n\n    // all terms should be searchable in all fields, even if the docvalues are limited\n    for (String searchF : Arrays.asList(\"whitespace_stxt\", \"whitespace_plain_txt\",\n                                        \"whitespace_max3_stxt\", \"whitespace_max6_stxt\",\n                                        \"whitespace_max0_stxt\", \"whitespace_maxNeg_stxt\")) {\n      //  maxChars of 0 or neg should be equivilent to no max at all\n      for (String sortF : Arrays.asList(\"whitespace_stxt\", \"whitespace_plain_str\", \n                                        \"whitespace_max0_stxt\", \"whitespace_maxNeg_stxt\")) {\n        \n        assertQ(req(\"q\", searchF + \":ccc\", \"sort\", sortF + \" desc, id asc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=3]\"\n                , \"//result/doc[2]/str[@name='id'][.=1]\"\n                );\n        \n        assertQ(req(\"q\", searchF + \":ccc\", \"sort\", sortF + \" asc, id desc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=1]\"\n                , \"//result/doc[2]/str[@name='id'][.=3]\"\n                );\n      }\n    }\n    \n    // sorting on a maxChars limited fields should force tie breaker\n    for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n      // for max3, dir shouldn't matter - should always tie..\n      assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max3_stxt \"+dir+\", id desc\") // max3, id desc\n              , \"//*[@numFound='4']\"\n              , \"//result/doc[1]/str[@name='id'][.=4]\"\n              , \"//result/doc[2]/str[@name='id'][.=3]\"\n              , \"//result/doc[3]/str[@name='id'][.=2]\"\n              , \"//result/doc[4]/str[@name='id'][.=1]\"\n              );\n      assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max3_stxt \"+dir+\", id asc\") // max3, id desc\n              , \"//*[@numFound='4']\"\n              , \"//result/doc[1]/str[@name='id'][.=1]\"\n              , \"//result/doc[2]/str[@name='id'][.=2]\"\n              , \"//result/doc[3]/str[@name='id'][.=3]\"\n              , \"//result/doc[4]/str[@name='id'][.=4]\"\n              );\n    }\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt asc, id desc\") // max6 asc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=4]\" // no tiebreaker needed\n            , \"//result/doc[2]/str[@name='id'][.=3]\"\n            , \"//result/doc[3]/str[@name='id'][.=2]\"\n            , \"//result/doc[4]/str[@name='id'][.=1]\"\n            );\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt asc, id asc\") // max6 asc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=4]\" // no tiebreaker needed\n            , \"//result/doc[2]/str[@name='id'][.=1]\"\n            , \"//result/doc[3]/str[@name='id'][.=2]\"\n            , \"//result/doc[4]/str[@name='id'][.=3]\"\n            );\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt desc, id desc\") // max6 desc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=3]\"\n            , \"//result/doc[2]/str[@name='id'][.=2]\"\n            , \"//result/doc[3]/str[@name='id'][.=1]\"\n            , \"//result/doc[4]/str[@name='id'][.=4]\" // no tiebreaker needed\n            );\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt desc, id asc\") // max6 desc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=1]\"\n            , \"//result/doc[2]/str[@name='id'][.=2]\"\n            , \"//result/doc[3]/str[@name='id'][.=3]\"\n            , \"//result/doc[4]/str[@name='id'][.=4]\" // no tiebreaker needed\n            );\n    \n    // sanity check that the default max is working....\n    assertU(adoc(\"id\",\"5\", \"whitespace_stxt\", BIG_CONST + \" aaa zzz\"));\n    assertU(adoc(\"id\",\"6\", \"whitespace_stxt\", BIG_CONST + \" bbb zzz \"));\n    assertU(commit());\n    // for these fields, the tie breaker should be the only thing that matters, regardless of direction...\n    for (String sortF : Arrays.asList(\"whitespace_stxt\", \"whitespace_nois_stxt\")) {\n      for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n        assertQ(req(\"q\", \"whitespace_stxt:zzz\", \"sort\", sortF + \" \" + dir + \", id asc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=5]\"\n                , \"//result/doc[2]/str[@name='id'][.=6]\"\n                );\n        assertQ(req(\"q\", \"whitespace_stxt:zzz\", \"sort\", sortF + \" \" + dir + \", id desc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=6]\"\n                , \"//result/doc[2]/str[@name='id'][.=5]\"\n                );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testMaxCharsSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testMaxCharsSort().mjava","sourceNew":"  public void testMaxCharsSort() throws Exception {\n    assertU(adoc(\"id\",\"1\", \"whitespace_stxt\", \"aaa bbb ccc ddd\"));\n    assertU(adoc(\"id\",\"2\", \"whitespace_stxt\", \"aaa bbb xxx yyy\"));\n    assertU(adoc(\"id\",\"3\", \"whitespace_stxt\", \"aaa bbb ccc xxx\"));\n    assertU(adoc(\"id\",\"4\", \"whitespace_stxt\", \"aaa\"));\n    assertU(commit());\n\n    // all terms should be searchable in all fields, even if the docvalues are limited\n    for (String searchF : Arrays.asList(\"whitespace_stxt\", \"whitespace_plain_txt\",\n                                        \"whitespace_max3_stxt\", \"whitespace_max6_stxt\",\n                                        \"whitespace_max0_stxt\", \"whitespace_maxNeg_stxt\")) {\n      //  maxChars of 0 or neg should be equivalent to no max at all\n      for (String sortF : Arrays.asList(\"whitespace_stxt\", \"whitespace_plain_str\", \n                                        \"whitespace_max0_stxt\", \"whitespace_maxNeg_stxt\")) {\n        \n        assertQ(req(\"q\", searchF + \":ccc\", \"sort\", sortF + \" desc, id asc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=3]\"\n                , \"//result/doc[2]/str[@name='id'][.=1]\"\n                );\n        \n        assertQ(req(\"q\", searchF + \":ccc\", \"sort\", sortF + \" asc, id desc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=1]\"\n                , \"//result/doc[2]/str[@name='id'][.=3]\"\n                );\n      }\n    }\n    \n    // sorting on a maxChars limited fields should force tie breaker\n    for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n      // for max3, dir shouldn't matter - should always tie..\n      assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max3_stxt \"+dir+\", id desc\") // max3, id desc\n              , \"//*[@numFound='4']\"\n              , \"//result/doc[1]/str[@name='id'][.=4]\"\n              , \"//result/doc[2]/str[@name='id'][.=3]\"\n              , \"//result/doc[3]/str[@name='id'][.=2]\"\n              , \"//result/doc[4]/str[@name='id'][.=1]\"\n              );\n      assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max3_stxt \"+dir+\", id asc\") // max3, id desc\n              , \"//*[@numFound='4']\"\n              , \"//result/doc[1]/str[@name='id'][.=1]\"\n              , \"//result/doc[2]/str[@name='id'][.=2]\"\n              , \"//result/doc[3]/str[@name='id'][.=3]\"\n              , \"//result/doc[4]/str[@name='id'][.=4]\"\n              );\n    }\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt asc, id desc\") // max6 asc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=4]\" // no tiebreaker needed\n            , \"//result/doc[2]/str[@name='id'][.=3]\"\n            , \"//result/doc[3]/str[@name='id'][.=2]\"\n            , \"//result/doc[4]/str[@name='id'][.=1]\"\n            );\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt asc, id asc\") // max6 asc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=4]\" // no tiebreaker needed\n            , \"//result/doc[2]/str[@name='id'][.=1]\"\n            , \"//result/doc[3]/str[@name='id'][.=2]\"\n            , \"//result/doc[4]/str[@name='id'][.=3]\"\n            );\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt desc, id desc\") // max6 desc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=3]\"\n            , \"//result/doc[2]/str[@name='id'][.=2]\"\n            , \"//result/doc[3]/str[@name='id'][.=1]\"\n            , \"//result/doc[4]/str[@name='id'][.=4]\" // no tiebreaker needed\n            );\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt desc, id asc\") // max6 desc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=1]\"\n            , \"//result/doc[2]/str[@name='id'][.=2]\"\n            , \"//result/doc[3]/str[@name='id'][.=3]\"\n            , \"//result/doc[4]/str[@name='id'][.=4]\" // no tiebreaker needed\n            );\n    \n    // sanity check that the default max is working....\n    assertU(adoc(\"id\",\"5\", \"whitespace_stxt\", BIG_CONST + \" aaa zzz\"));\n    assertU(adoc(\"id\",\"6\", \"whitespace_stxt\", BIG_CONST + \" bbb zzz \"));\n    assertU(commit());\n    // for these fields, the tie breaker should be the only thing that matters, regardless of direction...\n    for (String sortF : Arrays.asList(\"whitespace_stxt\", \"whitespace_nois_stxt\")) {\n      for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n        assertQ(req(\"q\", \"whitespace_stxt:zzz\", \"sort\", sortF + \" \" + dir + \", id asc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=5]\"\n                , \"//result/doc[2]/str[@name='id'][.=6]\"\n                );\n        assertQ(req(\"q\", \"whitespace_stxt:zzz\", \"sort\", sortF + \" \" + dir + \", id desc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=6]\"\n                , \"//result/doc[2]/str[@name='id'][.=5]\"\n                );\n      }\n    }\n  }\n\n","sourceOld":"  public void testMaxCharsSort() throws Exception {\n    assertU(adoc(\"id\",\"1\", \"whitespace_stxt\", \"aaa bbb ccc ddd\"));\n    assertU(adoc(\"id\",\"2\", \"whitespace_stxt\", \"aaa bbb xxx yyy\"));\n    assertU(adoc(\"id\",\"3\", \"whitespace_stxt\", \"aaa bbb ccc xxx\"));\n    assertU(adoc(\"id\",\"4\", \"whitespace_stxt\", \"aaa\"));\n    assertU(commit());\n\n    // all terms should be searchable in all fields, even if the docvalues are limited\n    for (String searchF : Arrays.asList(\"whitespace_stxt\", \"whitespace_plain_txt\",\n                                        \"whitespace_max3_stxt\", \"whitespace_max6_stxt\",\n                                        \"whitespace_max0_stxt\", \"whitespace_maxNeg_stxt\")) {\n      //  maxChars of 0 or neg should be equivilent to no max at all\n      for (String sortF : Arrays.asList(\"whitespace_stxt\", \"whitespace_plain_str\", \n                                        \"whitespace_max0_stxt\", \"whitespace_maxNeg_stxt\")) {\n        \n        assertQ(req(\"q\", searchF + \":ccc\", \"sort\", sortF + \" desc, id asc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=3]\"\n                , \"//result/doc[2]/str[@name='id'][.=1]\"\n                );\n        \n        assertQ(req(\"q\", searchF + \":ccc\", \"sort\", sortF + \" asc, id desc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=1]\"\n                , \"//result/doc[2]/str[@name='id'][.=3]\"\n                );\n      }\n    }\n    \n    // sorting on a maxChars limited fields should force tie breaker\n    for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n      // for max3, dir shouldn't matter - should always tie..\n      assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max3_stxt \"+dir+\", id desc\") // max3, id desc\n              , \"//*[@numFound='4']\"\n              , \"//result/doc[1]/str[@name='id'][.=4]\"\n              , \"//result/doc[2]/str[@name='id'][.=3]\"\n              , \"//result/doc[3]/str[@name='id'][.=2]\"\n              , \"//result/doc[4]/str[@name='id'][.=1]\"\n              );\n      assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max3_stxt \"+dir+\", id asc\") // max3, id desc\n              , \"//*[@numFound='4']\"\n              , \"//result/doc[1]/str[@name='id'][.=1]\"\n              , \"//result/doc[2]/str[@name='id'][.=2]\"\n              , \"//result/doc[3]/str[@name='id'][.=3]\"\n              , \"//result/doc[4]/str[@name='id'][.=4]\"\n              );\n    }\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt asc, id desc\") // max6 asc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=4]\" // no tiebreaker needed\n            , \"//result/doc[2]/str[@name='id'][.=3]\"\n            , \"//result/doc[3]/str[@name='id'][.=2]\"\n            , \"//result/doc[4]/str[@name='id'][.=1]\"\n            );\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt asc, id asc\") // max6 asc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=4]\" // no tiebreaker needed\n            , \"//result/doc[2]/str[@name='id'][.=1]\"\n            , \"//result/doc[3]/str[@name='id'][.=2]\"\n            , \"//result/doc[4]/str[@name='id'][.=3]\"\n            );\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt desc, id desc\") // max6 desc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=3]\"\n            , \"//result/doc[2]/str[@name='id'][.=2]\"\n            , \"//result/doc[3]/str[@name='id'][.=1]\"\n            , \"//result/doc[4]/str[@name='id'][.=4]\" // no tiebreaker needed\n            );\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"whitespace_max6_stxt desc, id asc\") // max6 desc, id desc\n            , \"//*[@numFound='4']\"\n            , \"//result/doc[1]/str[@name='id'][.=1]\"\n            , \"//result/doc[2]/str[@name='id'][.=2]\"\n            , \"//result/doc[3]/str[@name='id'][.=3]\"\n            , \"//result/doc[4]/str[@name='id'][.=4]\" // no tiebreaker needed\n            );\n    \n    // sanity check that the default max is working....\n    assertU(adoc(\"id\",\"5\", \"whitespace_stxt\", BIG_CONST + \" aaa zzz\"));\n    assertU(adoc(\"id\",\"6\", \"whitespace_stxt\", BIG_CONST + \" bbb zzz \"));\n    assertU(commit());\n    // for these fields, the tie breaker should be the only thing that matters, regardless of direction...\n    for (String sortF : Arrays.asList(\"whitespace_stxt\", \"whitespace_nois_stxt\")) {\n      for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n        assertQ(req(\"q\", \"whitespace_stxt:zzz\", \"sort\", sortF + \" \" + dir + \", id asc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=5]\"\n                , \"//result/doc[2]/str[@name='id'][.=6]\"\n                );\n        assertQ(req(\"q\", \"whitespace_stxt:zzz\", \"sort\", sortF + \" \" + dir + \", id desc\")\n                , \"//*[@numFound='2']\"\n                , \"//result/doc[1]/str[@name='id'][.=6]\"\n                , \"//result/doc[2]/str[@name='id'][.=5]\"\n                );\n      }\n    }\n  }\n\n","bugFix":["09db84b25dda87b73022d145a68f14c86a3a552d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f4251f14d2db68330fc1e6f0495c053a905d560":["09db84b25dda87b73022d145a68f14c86a3a552d"],"09db84b25dda87b73022d145a68f14c86a3a552d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f4251f14d2db68330fc1e6f0495c053a905d560"]},"commit2Childs":{"9f4251f14d2db68330fc1e6f0495c053a905d560":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09db84b25dda87b73022d145a68f14c86a3a552d":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09db84b25dda87b73022d145a68f14c86a3a552d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}