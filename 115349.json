{"path":"lucene/core/src/java/org/apache/lucene/search/TermScorer#TermScorer(Weight,TermsEnum,ScoreMode,LeafSimScorer).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermScorer#TermScorer(Weight,TermsEnum,ScoreMode,LeafSimScorer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a <code>TermScorer</code>.\n   *\n   * @param weight\n   *          The weight of the <code>Term</code> in the query.\n   * @param te\n   *          A {@link TermsEnum} positioned on the expected term.\n   * @param docScorer\n   *          A {@link LeafSimScorer} for the appropriate field.\n   */\n  TermScorer(Weight weight, TermsEnum te, ScoreMode scoreMode, LeafSimScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    if (scoreMode == ScoreMode.TOP_SCORES) {\n      ImpactsEnum impactsEnum = te.impacts(docScorer.getSimScorer(), PostingsEnum.FREQS);\n      postingsEnum = impactsEnum;\n      iterator = new DocIdSetIterator() {\n\n        int upTo = -1;\n        float maxScore;\n\n        private int advanceTarget(int target) throws IOException {\n          if (minCompetitiveScore == 0) {\n            // no potential for skipping\n            return target;\n          }\n\n          if (target > upTo) {\n            upTo = impactsEnum.advanceShallow(target);\n            maxScore = impactsEnum.getMaxScore(upTo);\n          }\n\n          while (true) {\n            assert upTo >= target;\n\n            if (maxScore >= minCompetitiveScore) {\n              return target;\n            }\n\n            if (upTo == NO_MORE_DOCS) {\n              return NO_MORE_DOCS;\n            }\n\n            target = upTo + 1;\n\n            upTo = impactsEnum.advanceShallow(target);\n            maxScore = impactsEnum.getMaxScore(upTo);\n          }\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return impactsEnum.advance(advanceTarget(target));\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(impactsEnum.docID() + 1);\n        }\n\n        @Override\n        public int docID() {\n          return impactsEnum.docID();\n        }\n\n        @Override\n        public long cost() {\n          return impactsEnum.cost();\n        }\n      };\n    } else {\n      postingsEnum = te.postings(null, scoreMode.needsScores() ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      iterator = postingsEnum;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermScorer#TermScorer(Weight,TermsEnum,ScoreMode,LeafSimScorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermScorer#TermScorer(Weight,TermsEnum,ScoreMode,LeafSimScorer).mjava","sourceNew":"  /**\n   * Construct a <code>TermScorer</code>.\n   *\n   * @param weight\n   *          The weight of the <code>Term</code> in the query.\n   * @param te\n   *          A {@link TermsEnum} positioned on the expected term.\n   * @param docScorer\n   *          A {@link LeafSimScorer} for the appropriate field.\n   */\n  TermScorer(Weight weight, TermsEnum te, ScoreMode scoreMode, LeafSimScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    if (scoreMode == ScoreMode.TOP_SCORES) {\n      impactsEnum = te.impacts(docScorer.getSimScorer(), PostingsEnum.FREQS);\n      postingsEnum = impactsEnum;\n      iterator = new DocIdSetIterator() {\n\n        int upTo = -1;\n        float maxScore;\n\n        private int advanceTarget(int target) throws IOException {\n          if (minCompetitiveScore == 0) {\n            // no potential for skipping\n            return target;\n          }\n\n          if (target > upTo) {\n            upTo = impactsEnum.advanceShallow(target);\n            maxScore = impactsEnum.getMaxScore(upTo);\n          }\n\n          while (true) {\n            assert upTo >= target;\n\n            if (maxScore >= minCompetitiveScore) {\n              return target;\n            }\n\n            if (upTo == NO_MORE_DOCS) {\n              return NO_MORE_DOCS;\n            }\n\n            target = upTo + 1;\n\n            upTo = impactsEnum.advanceShallow(target);\n            maxScore = impactsEnum.getMaxScore(upTo);\n          }\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return impactsEnum.advance(advanceTarget(target));\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(impactsEnum.docID() + 1);\n        }\n\n        @Override\n        public int docID() {\n          return impactsEnum.docID();\n        }\n\n        @Override\n        public long cost() {\n          return impactsEnum.cost();\n        }\n      };\n    } else {\n      postingsEnum = te.postings(null, scoreMode.needsScores() ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      impactsEnum = new SlowImpactsEnum(postingsEnum, docScorer.getSimScorer().score(Float.MAX_VALUE, 1));\n      iterator = postingsEnum;\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a <code>TermScorer</code>.\n   *\n   * @param weight\n   *          The weight of the <code>Term</code> in the query.\n   * @param te\n   *          A {@link TermsEnum} positioned on the expected term.\n   * @param docScorer\n   *          A {@link LeafSimScorer} for the appropriate field.\n   */\n  TermScorer(Weight weight, TermsEnum te, ScoreMode scoreMode, LeafSimScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    if (scoreMode == ScoreMode.TOP_SCORES) {\n      ImpactsEnum impactsEnum = te.impacts(docScorer.getSimScorer(), PostingsEnum.FREQS);\n      postingsEnum = impactsEnum;\n      iterator = new DocIdSetIterator() {\n\n        int upTo = -1;\n        float maxScore;\n\n        private int advanceTarget(int target) throws IOException {\n          if (minCompetitiveScore == 0) {\n            // no potential for skipping\n            return target;\n          }\n\n          if (target > upTo) {\n            upTo = impactsEnum.advanceShallow(target);\n            maxScore = impactsEnum.getMaxScore(upTo);\n          }\n\n          while (true) {\n            assert upTo >= target;\n\n            if (maxScore >= minCompetitiveScore) {\n              return target;\n            }\n\n            if (upTo == NO_MORE_DOCS) {\n              return NO_MORE_DOCS;\n            }\n\n            target = upTo + 1;\n\n            upTo = impactsEnum.advanceShallow(target);\n            maxScore = impactsEnum.getMaxScore(upTo);\n          }\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return impactsEnum.advance(advanceTarget(target));\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(impactsEnum.docID() + 1);\n        }\n\n        @Override\n        public int docID() {\n          return impactsEnum.docID();\n        }\n\n        @Override\n        public long cost() {\n          return impactsEnum.cost();\n        }\n      };\n    } else {\n      postingsEnum = te.postings(null, scoreMode.needsScores() ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      iterator = postingsEnum;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermScorer#TermScorer(Weight,TermsEnum,ScoreMode,LeafSimScorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermScorer#TermScorer(Weight,TermsEnum,ScoreMode,LeafSimScorer).mjava","sourceNew":"  /**\n   * Construct a <code>TermScorer</code>.\n   *\n   * @param weight\n   *          The weight of the <code>Term</code> in the query.\n   * @param te\n   *          A {@link TermsEnum} positioned on the expected term.\n   * @param docScorer\n   *          A {@link LeafSimScorer} for the appropriate field.\n   */\n  TermScorer(Weight weight, TermsEnum te, ScoreMode scoreMode, LeafSimScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    if (scoreMode == ScoreMode.TOP_SCORES) {\n      impactsEnum = te.impacts(PostingsEnum.FREQS);\n      maxScoreCache = new MaxScoreCache(impactsEnum, docScorer.getSimScorer());\n      postingsEnum = impactsEnum;\n      iterator = new DocIdSetIterator() {\n\n        int upTo = -1;\n        float maxScore;\n\n        private int advanceTarget(int target) throws IOException {\n          if (minCompetitiveScore == 0) {\n            // no potential for skipping\n            return target;\n          }\n\n          if (target > upTo) {\n            impactsEnum.advanceShallow(target);\n            Impacts impacts = impactsEnum.getImpacts();\n            upTo = impacts.getDocIdUpTo(0);\n            maxScore = maxScoreCache.getMaxScoreForLevel(0);\n          }\n\n          while (true) {\n            assert upTo >= target;\n\n            if (maxScore >= minCompetitiveScore) {\n              return target;\n            }\n\n            if (upTo == NO_MORE_DOCS) {\n              return NO_MORE_DOCS;\n            }\n\n            impactsEnum.advanceShallow(upTo + 1);\n            Impacts impacts = impactsEnum.getImpacts();\n            final int level = maxScoreCache.getSkipLevel(minCompetitiveScore);\n            if (level >= 0) {\n              // we can skip more docs\n              int newUpTo = impacts.getDocIdUpTo(level);\n              if (newUpTo == NO_MORE_DOCS) {\n                return NO_MORE_DOCS;\n              }\n              target = newUpTo + 1;\n              impactsEnum.advanceShallow(target);\n              impacts = impactsEnum.getImpacts();\n            } else {\n              target = upTo + 1;\n            }\n            upTo = impacts.getDocIdUpTo(0);\n            maxScore = maxScoreCache.getMaxScoreForLevel(0);\n          }\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return impactsEnum.advance(advanceTarget(target));\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(impactsEnum.docID() + 1);\n        }\n\n        @Override\n        public int docID() {\n          return impactsEnum.docID();\n        }\n\n        @Override\n        public long cost() {\n          return impactsEnum.cost();\n        }\n      };\n    } else {\n      postingsEnum = te.postings(null, scoreMode.needsScores() ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      impactsEnum = new SlowImpactsEnum(postingsEnum);\n      maxScoreCache = new MaxScoreCache(impactsEnum, docScorer.getSimScorer());\n      iterator = postingsEnum;\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a <code>TermScorer</code>.\n   *\n   * @param weight\n   *          The weight of the <code>Term</code> in the query.\n   * @param te\n   *          A {@link TermsEnum} positioned on the expected term.\n   * @param docScorer\n   *          A {@link LeafSimScorer} for the appropriate field.\n   */\n  TermScorer(Weight weight, TermsEnum te, ScoreMode scoreMode, LeafSimScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    if (scoreMode == ScoreMode.TOP_SCORES) {\n      impactsEnum = te.impacts(docScorer.getSimScorer(), PostingsEnum.FREQS);\n      postingsEnum = impactsEnum;\n      iterator = new DocIdSetIterator() {\n\n        int upTo = -1;\n        float maxScore;\n\n        private int advanceTarget(int target) throws IOException {\n          if (minCompetitiveScore == 0) {\n            // no potential for skipping\n            return target;\n          }\n\n          if (target > upTo) {\n            upTo = impactsEnum.advanceShallow(target);\n            maxScore = impactsEnum.getMaxScore(upTo);\n          }\n\n          while (true) {\n            assert upTo >= target;\n\n            if (maxScore >= minCompetitiveScore) {\n              return target;\n            }\n\n            if (upTo == NO_MORE_DOCS) {\n              return NO_MORE_DOCS;\n            }\n\n            target = upTo + 1;\n\n            upTo = impactsEnum.advanceShallow(target);\n            maxScore = impactsEnum.getMaxScore(upTo);\n          }\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return impactsEnum.advance(advanceTarget(target));\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(impactsEnum.docID() + 1);\n        }\n\n        @Override\n        public int docID() {\n          return impactsEnum.docID();\n        }\n\n        @Override\n        public long cost() {\n          return impactsEnum.cost();\n        }\n      };\n    } else {\n      postingsEnum = te.postings(null, scoreMode.needsScores() ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      impactsEnum = new SlowImpactsEnum(postingsEnum, docScorer.getSimScorer().score(Float.MAX_VALUE, 1));\n      iterator = postingsEnum;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermScorer#TermScorer(Weight,TermsEnum,ScoreMode,LeafSimScorer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a <code>TermScorer</code>.\n   *\n   * @param weight\n   *          The weight of the <code>Term</code> in the query.\n   * @param te\n   *          A {@link TermsEnum} positioned on the expected term.\n   * @param docScorer\n   *          A {@link LeafSimScorer} for the appropriate field.\n   */\n  TermScorer(Weight weight, TermsEnum te, ScoreMode scoreMode, LeafSimScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n    if (scoreMode == ScoreMode.TOP_SCORES) {\n      impactsEnum = te.impacts(PostingsEnum.FREQS);\n      maxScoreCache = new MaxScoreCache(impactsEnum, docScorer.getSimScorer());\n      postingsEnum = impactsEnum;\n      iterator = new DocIdSetIterator() {\n\n        int upTo = -1;\n        float maxScore;\n\n        private int advanceTarget(int target) throws IOException {\n          if (minCompetitiveScore == 0) {\n            // no potential for skipping\n            return target;\n          }\n\n          if (target > upTo) {\n            impactsEnum.advanceShallow(target);\n            Impacts impacts = impactsEnum.getImpacts();\n            upTo = impacts.getDocIdUpTo(0);\n            maxScore = maxScoreCache.getMaxScoreForLevel(0);\n          }\n\n          while (true) {\n            assert upTo >= target;\n\n            if (maxScore >= minCompetitiveScore) {\n              return target;\n            }\n\n            if (upTo == NO_MORE_DOCS) {\n              return NO_MORE_DOCS;\n            }\n\n            impactsEnum.advanceShallow(upTo + 1);\n            Impacts impacts = impactsEnum.getImpacts();\n            final int level = maxScoreCache.getSkipLevel(minCompetitiveScore);\n            if (level >= 0) {\n              // we can skip more docs\n              int newUpTo = impacts.getDocIdUpTo(level);\n              if (newUpTo == NO_MORE_DOCS) {\n                return NO_MORE_DOCS;\n              }\n              target = newUpTo + 1;\n              impactsEnum.advanceShallow(target);\n              impacts = impactsEnum.getImpacts();\n            } else {\n              target = upTo + 1;\n            }\n            upTo = impacts.getDocIdUpTo(0);\n            maxScore = maxScoreCache.getMaxScoreForLevel(0);\n          }\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return impactsEnum.advance(advanceTarget(target));\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(impactsEnum.docID() + 1);\n        }\n\n        @Override\n        public int docID() {\n          return impactsEnum.docID();\n        }\n\n        @Override\n        public long cost() {\n          return impactsEnum.cost();\n        }\n      };\n    } else {\n      postingsEnum = te.postings(null, scoreMode.needsScores() ? PostingsEnum.FREQS : PostingsEnum.NONE);\n      impactsEnum = new SlowImpactsEnum(postingsEnum);\n      maxScoreCache = new MaxScoreCache(impactsEnum, docScorer.getSimScorer());\n      iterator = postingsEnum;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["523cc6563c99a55527ef7993efc5413c6648852d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f2c13220a828a78007cedb364e22dd8986ed650":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"523cc6563c99a55527ef7993efc5413c6648852d":["622a708571e534680618b3c5e0c28ac539a47776"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f2c13220a828a78007cedb364e22dd8986ed650"]},"commit2Childs":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["2f2c13220a828a78007cedb364e22dd8986ed650"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"2f2c13220a828a78007cedb364e22dd8986ed650":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}