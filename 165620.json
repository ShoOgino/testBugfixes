{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","sourceOld":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0","date":1346181560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"  /**\n   * Returns a detailed message for the Error when it is thrown by the\n   * token manager to indicate a lexical error.\n   * Parameters :\n   *    EOFSeen     : indicates if EOF caused the lexical error\n   *    curLexState : lexical state in which this error occurred\n   *    errorLine   : line number when the error occurred\n   *    errorColumn : column number when the error occurred\n   *    errorAfter  : prefix that was seen before this error occurred\n   *    curchar     : the offending character\n   * Note: You can customize the lexical error message by modifying this method.\n   */\n  protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return(\"Lexical error at line \" +\n          errorLine + \", column \" +\n          errorColumn + \".  Encountered: \" +\n          (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n          \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n  }\n\n","sourceOld":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"  /**\n   * Returns a detailed message for the Error when it is thrown by the\n   * token manager to indicate a lexical error.\n   * Parameters :\n   *    EOFSeen     : indicates if EOF caused the lexical error\n   *    curLexState : lexical state in which this error occurred\n   *    errorLine   : line number when the error occurred\n   *    errorColumn : column number when the error occurred\n   *    errorAfter  : prefix that was seen before this error occurred\n   *    curchar     : the offending character\n   * Note: You can customize the lexical error message by modifying this method.\n   */\n  protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return(\"Lexical error at line \" +\n          errorLine + \", column \" +\n          errorColumn + \".  Encountered: \" +\n          (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n          \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n  }\n\n","sourceOld":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf8c857cdf9b9be903cae84ef15985ad090a05","date":1600342158,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError#LexicalErr(boolean,int,int,int,String,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"  /**\n   * Returns a detailed message for the Error when it is thrown by the\n   * token manager to indicate a lexical error.\n   * Parameters :\n   *    EOFSeen     : indicates if EOF caused the lexical error\n   *    curLexState : lexical state in which this error occurred\n   *    errorLine   : line number when the error occurred\n   *    errorColumn : column number when the error occurred\n   *    errorAfter  : prefix that was seen before this error occurred\n   *    curchar     : the offending character\n   * Note: You can customize the lexical error message by modifying this method.\n   */\n  protected static String LexicalErr(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, int curChar) {\n    char curChar1 = (char)curChar;\n    return(\"Lexical error at line \" +\n          errorLine + \", column \" +\n          errorColumn + \".  Encountered: \" +\n          (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar1)) + \"\\\"\") + \" (\" + curChar + \"), \") +\n          \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n  }\n\n","sourceOld":"  /**\n   * Returns a detailed message for the Error when it is thrown by the\n   * token manager to indicate a lexical error.\n   * Parameters :\n   *    EOFSeen     : indicates if EOF caused the lexical error\n   *    curLexState : lexical state in which this error occurred\n   *    errorLine   : line number when the error occurred\n   *    errorColumn : column number when the error occurred\n   *    errorAfter  : prefix that was seen before this error occurred\n   *    curchar     : the offending character\n   * Note: You can customize the lexical error message by modifying this method.\n   */\n  protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return(\"Lexical error at line \" +\n          errorLine + \", column \" +\n          errorColumn + \".  Encountered: \" +\n          (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n          \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0"],"bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["b89678825b68eccaf09e6ab71675fc0b0af1e099","bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0":["c4bf8c857cdf9b9be903cae84ef15985ad090a05","05a14b2611ead08655a2b2bdc61632eb31316e57"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}