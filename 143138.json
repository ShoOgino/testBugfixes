{"path":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    r = newRandom();\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC );\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    r = newRandom();\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC );\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    r = newRandom();\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    r = newRandom();\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC );\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    r = newRandom();\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    r = newRandom();\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    r = newRandom();\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    r = newRandom();\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        new SortField(\"string2\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        new SortField(\"string2\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        new SortField(\"string2\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        new SortField(\"string2\", SortField.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        new SortField(\"string2\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException, ParseException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        new SortField(\"string2\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        new SortField(\"string2\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\");\n      IndexableField[] v2 = doc2.getFields(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        new SortField(\"string2\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      String[] v = doc2.getValues(\"tracer\");\n      String[] v2 = doc2.getValues(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j];\n        lastSub = v2[j];\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28088b0a688977b79dec2cc9119cff2fb4aab7ee","date":1321197996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws Exception {\n    // Normal string field, var length\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        new SortField(\"string2\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n    verifyStringSort(sort);\n\n    // Normal string field, fixed length\n    sort.setSort(\n        new SortField(\"string_fixed\", SortField.Type.STRING),\n        new SortField(\"string2_fixed\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n    verifyStringSort(sort);\n\n    // Doc values field, var length\n    assumeFalse(\"cannot work with preflex codec\",\n                \"Lucene3x\".equals(Codec.getDefault().getName()));\n    sort.setSort(\n                 useDocValues(new SortField(\"string\", getDVStringSortType())),\n                 useDocValues(new SortField(\"string2\", getDVStringSortType(), true)),\n                 SortField.FIELD_DOC);\n    verifyStringSort(sort);\n\n    // Doc values field, fixed length\n    sort.setSort(\n                 useDocValues(new SortField(\"string_fixed\", getDVStringSortType())),\n                 useDocValues(new SortField(\"string2_fixed\", getDVStringSortType(), true)),\n                 SortField.FIELD_DOC);\n    verifyStringSort(sort);\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws IOException {\n    ScoreDoc[] result = null;\n    IndexSearcher searcher = getFullStrings();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        new SortField(\"string2\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n\n    result = searcher.search(new MatchAllDocsQuery(), null, 500, sort).scoreDocs;\n\n    StringBuilder buff = new StringBuilder();\n    int n = result.length;\n    String last = null;\n    String lastSub = null;\n    int lastDocId = 0;\n    boolean fail = false;\n    for (int x = 0; x < n; ++x) {\n      Document doc2 = searcher.doc(result[x].doc);\n      IndexableField[] v = doc2.getFields(\"tracer\");\n      IndexableField[] v2 = doc2.getFields(\"tracer2\");\n      for (int j = 0; j < v.length; ++j) {\n        if (last != null) {\n          int cmp = v[j].stringValue().compareTo(last);\n          if (!(cmp >= 0)) { // ensure first field is in order\n            fail = true;\n            System.out.println(\"fail:\" + v[j] + \" < \" + last);\n          }\n          if (cmp == 0) { // ensure second field is in reverse order\n            cmp = v2[j].stringValue().compareTo(lastSub);\n            if (cmp > 0) {\n              fail = true;\n              System.out.println(\"rev field fail:\" + v2[j] + \" > \" + lastSub);\n            } else if(cmp == 0) { // ensure docid is in order\n              if (result[x].doc < lastDocId) {\n                fail = true;\n                System.out.println(\"doc fail:\" + result[x].doc + \" > \" + lastDocId);\n              }\n            }\n          }\n        }\n        last = v[j].stringValue();\n        lastSub = v2[j].stringValue();\n        lastDocId = result[x].doc;\n        buff.append(v[j] + \"(\" + v2[j] + \")(\" + result[x].doc+\") \");\n      }\n    }\n    if(fail) {\n      System.out.println(\"topn field1(field2)(docID):\" + buff);\n    }\n    assertFalse(\"Found sort results out of order\", fail);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testStringSort().mjava","sourceNew":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws Exception {\n    // Normal string field, var length\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        new SortField(\"string2\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n    verifyStringSort(sort);\n\n    // Normal string field, fixed length\n    sort.setSort(\n        new SortField(\"string_fixed\", SortField.Type.STRING),\n        new SortField(\"string2_fixed\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n    verifyStringSort(sort);\n\n    // Doc values field, var length\n    assumeFalse(\"cannot work with preflex codec\",\n                \"Lucene3x\".equals(Codec.getDefault().getName()));\n    sort.setSort(\n                 useDocValues(new SortField(\"string\", getDVStringSortType())),\n                 useDocValues(new SortField(\"string2\", getDVStringSortType(), true)),\n                 SortField.FIELD_DOC);\n    verifyStringSort(sort);\n\n    // Doc values field, fixed length\n    sort.setSort(\n                 useDocValues(new SortField(\"string_fixed\", getDVStringSortType())),\n                 useDocValues(new SortField(\"string2_fixed\", getDVStringSortType(), true)),\n                 SortField.FIELD_DOC);\n    verifyStringSort(sort);\n  }\n\n","sourceOld":"  /**\n   * Test String sorting: small queue to many matches, multi field sort, reverse sort\n   */\n  public void testStringSort() throws Exception {\n    // Normal string field, var length\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        new SortField(\"string2\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n    verifyStringSort(sort);\n\n    // Normal string field, fixed length\n    sort.setSort(\n        new SortField(\"string_fixed\", SortField.Type.STRING),\n        new SortField(\"string2_fixed\", SortField.Type.STRING, true),\n        SortField.FIELD_DOC);\n    verifyStringSort(sort);\n\n    // Doc values field, var length\n    assumeFalse(\"cannot work with preflex codec\",\n                \"Lucene3x\".equals(Codec.getDefault().getName()));\n    sort.setSort(\n                 useDocValues(new SortField(\"string\", getDVStringSortType())),\n                 useDocValues(new SortField(\"string2\", getDVStringSortType(), true)),\n                 SortField.FIELD_DOC);\n    verifyStringSort(sort);\n\n    // Doc values field, fixed length\n    sort.setSort(\n                 useDocValues(new SortField(\"string_fixed\", getDVStringSortType())),\n                 useDocValues(new SortField(\"string2_fixed\", getDVStringSortType(), true)),\n                 SortField.FIELD_DOC);\n    verifyStringSort(sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["090a0320e4de4a3674376aef96b9701f47564f86"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2553b00f699380c64959ccb27991289aae87be2e":["1f653cfcf159baeaafe5d01682a911e95bba4012","090a0320e4de4a3674376aef96b9701f47564f86"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","1f653cfcf159baeaafe5d01682a911e95bba4012"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1f653cfcf159baeaafe5d01682a911e95bba4012","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}