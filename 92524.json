{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","commits":[{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"389e8bca54f58e35576077f3ff46f123b3660018","date":1411859915,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader(org.apache.lucene.store.DataInput, String, int, int, byte[]) codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78b813d9350cc28625598f6dbbb49b586a40618","date":1412073147,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader(org.apache.lucene.store.DataInput, String, int, int, byte[]) codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkIndexHeader codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkIndexHeader codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkSegmentHeader codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59d4661023aa9541b0a759e4d2e11dcf83b923a0","date":1420124226,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkIndexHeader codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @param blockSize the number of chunks to store in an index block.\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize, int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkIndexHeader codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a78b813d9350cc28625598f6dbbb49b586a40618":["389e8bca54f58e35576077f3ff46f123b3660018"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["eda61b1e90b490cc5837200e04c02639a0d272c7","a78b813d9350cc28625598f6dbbb49b586a40618"],"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["a78b813d9350cc28625598f6dbbb49b586a40618"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eda61b1e90b490cc5837200e04c02639a0d272c7"],"389e8bca54f58e35576077f3ff46f123b3660018":["eda61b1e90b490cc5837200e04c02639a0d272c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"]},"commit2Childs":{"a78b813d9350cc28625598f6dbbb49b586a40618":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["9bb9a29a5e71a90295f175df8919802993142c9a","07155cdd910937cdf6877e48884d5782845c8b8b","389e8bca54f58e35576077f3ff46f123b3660018"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eda61b1e90b490cc5837200e04c02639a0d272c7","07155cdd910937cdf6877e48884d5782845c8b8b"],"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"389e8bca54f58e35576077f3ff46f123b3660018":["a78b813d9350cc28625598f6dbbb49b586a40618"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}