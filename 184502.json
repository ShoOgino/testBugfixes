{"path":"lucene/src/java/org/apache/lucene/util/MapOfSets#putAll(K,Collection[#-extends-V]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/MapOfSets#putAll(K,Collection[#-extends-V]).mjava","pathOld":"src/java/org/apache/lucene/util/MapOfSets#putAll(K,Collection[#-extends-V]).mjava","sourceNew":"   /**\n   * Adds multiple vals to the Set associated with key in the Map.  \n   * If key is not \n   * already in the map, a new Set will first be created.\n   * @return the size of the Set associated with key once val is added to it.\n   */\n  public int putAll(K key, Collection<? extends V> vals) {\n    final Set<V> theSet;\n    if (theMap.containsKey(key)) {\n      theSet = theMap.get(key);\n    } else {\n      theSet = new HashSet<V>(23);\n      theMap.put(key, theSet);\n    }\n    theSet.addAll(vals);\n    return theSet.size();\n  }\n\n","sourceOld":"   /**\n   * Adds multiple vals to the Set associated with key in the Map.  \n   * If key is not \n   * already in the map, a new Set will first be created.\n   * @return the size of the Set associated with key once val is added to it.\n   */\n  public int putAll(K key, Collection<? extends V> vals) {\n    final Set<V> theSet;\n    if (theMap.containsKey(key)) {\n      theSet = theMap.get(key);\n    } else {\n      theSet = new HashSet<V>(23);\n      theMap.put(key, theSet);\n    }\n    theSet.addAll(vals);\n    return theSet.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MapOfSets#putAll(K,Collection[#-extends-V]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/MapOfSets#putAll(K,Collection[#-extends-V]).mjava","sourceNew":"   /**\n   * Adds multiple vals to the Set associated with key in the Map.  \n   * If key is not \n   * already in the map, a new Set will first be created.\n   * @return the size of the Set associated with key once val is added to it.\n   */\n  public int putAll(K key, Collection<? extends V> vals) {\n    final Set<V> theSet;\n    if (theMap.containsKey(key)) {\n      theSet = theMap.get(key);\n    } else {\n      theSet = new HashSet<V>(23);\n      theMap.put(key, theSet);\n    }\n    theSet.addAll(vals);\n    return theSet.size();\n  }\n\n","sourceOld":"   /**\n   * Adds multiple vals to the Set associated with key in the Map.  \n   * If key is not \n   * already in the map, a new Set will first be created.\n   * @return the size of the Set associated with key once val is added to it.\n   */\n  public int putAll(K key, Collection<? extends V> vals) {\n    final Set<V> theSet;\n    if (theMap.containsKey(key)) {\n      theSet = theMap.get(key);\n    } else {\n      theSet = new HashSet<V>(23);\n      theMap.put(key, theSet);\n    }\n    theSet.addAll(vals);\n    return theSet.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}