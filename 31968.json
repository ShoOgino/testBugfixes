{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isEdgeFromPolygon(Node,Node,boolean).mjava","commits":[{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isEdgeFromPolygon(Node,Node,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Computes if edge defined by a and b overlaps with a polygon edge **/\n  private static boolean isEdgeFromPolygon(final Node a, final Node b, final boolean isMorton) {\n    if (isMorton) {\n      return isMortonEdgeFromPolygon(a, b);\n    }\n    Node next = a;\n    do {\n      if (isPointInLine(next, next.next, a) && isPointInLine(next, next.next, b)) {\n        return next.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(next, next.previous, a) && isPointInLine(next, next.previous, b)) {\n        return next.previous.isNextEdgeFromPolygon;\n      }\n      next = next.next;\n    } while(next != a);\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#isEdgeFromPolygon(Node,Node,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isEdgeFromPolygon(Node,Node,boolean).mjava","sourceNew":"  /** Computes if edge defined by a and b overlaps with a polygon edge **/\n  private static boolean isEdgeFromPolygon(final Node a, final Node b, final boolean isMorton) {\n    if (isMorton) {\n      return isMortonEdgeFromPolygon(a, b);\n    }\n    Node next = a;\n    do {\n      if (isPointInLine(next, next.next, a) && isPointInLine(next, next.next, b)) {\n        return next.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(next, next.previous, a) && isPointInLine(next, next.previous, b)) {\n        return next.previous.isNextEdgeFromPolygon;\n      }\n      next = next.next;\n    } while(next != a);\n    return false;\n  }\n\n","sourceOld":"  /** Computes if edge defined by a and b overlaps with a polygon edge **/\n  private static boolean isEdgeFromPolygon(final Node a, final Node b, final boolean isMorton) {\n    if (isMorton) {\n      return isMortonEdgeFromPolygon(a, b);\n    }\n    Node next = a;\n    do {\n      if (isPointInLine(next, next.next, a) && isPointInLine(next, next.next, b)) {\n        return next.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(next, next.previous, a) && isPointInLine(next, next.previous, b)) {\n        return next.previous.isNextEdgeFromPolygon;\n      }\n      next = next.next;\n    } while(next != a);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ed90f8ba7e7be13d155f954862178b23a324125"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ed90f8ba7e7be13d155f954862178b23a324125":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}