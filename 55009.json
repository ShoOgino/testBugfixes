{"path":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#or(DocIdSetIterator).mjava","commits":[{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#or(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add the documents contained in the provided {@link DocIdSetIterator} to\n   * this bit set.\n   */\n  public void or(DocIdSetIterator it) throws IOException {\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      set(doc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#or(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add the documents contained in the provided {@link DocIdSetIterator} to\n   * this bit set.\n   */\n  public void or(DocIdSetIterator it) throws IOException {\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      set(doc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#or(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#or(DocIdSetIterator).mjava","sourceNew":"  @Override\n  public void or(DocIdSetIterator it) throws IOException {\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      set(doc);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add the documents contained in the provided {@link DocIdSetIterator} to\n   * this bit set.\n   */\n  public void or(DocIdSetIterator it) throws IOException {\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      set(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","date":1414400081,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#or(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#or(DocIdSetIterator).mjava","sourceNew":"  @Override\n  public void or(DocIdSetIterator it) throws IOException {\n    {\n      // specialize union with another SparseFixedBitSet\n      final SparseFixedBitSet other = BitSetIterator.getSparseFixedBitSetOrNull(it);\n      if (other != null) {\n        assertUnpositioned(it);\n        or(other);\n        return;\n      }\n    }\n\n    // We do not specialize the union with a FixedBitSet since FixedBitSets are\n    // supposed to be used for dense data and sparse fixed bit sets for sparse\n    // data, so a sparse set would likely get upgraded by DocIdSetBuilder before\n    // being or'ed with a FixedBitSet\n\n    if (it.cost() < indices.length) {\n      // the default impl is good for sparse iterators\n      super.or(it);\n    } else {\n      orDense(it);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void or(DocIdSetIterator it) throws IOException {\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      set(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a377baed0108974b7a40d37dbf9de4cb8d15e8e","date":1503384043,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#or(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#or(DocIdSetIterator).mjava","sourceNew":"  @Override\n  public void or(DocIdSetIterator it) throws IOException {\n    {\n      // specialize union with another SparseFixedBitSet\n      final SparseFixedBitSet other = BitSetIterator.getSparseFixedBitSetOrNull(it);\n      if (other != null) {\n        checkUnpositioned(it);\n        or(other);\n        return;\n      }\n    }\n\n    // We do not specialize the union with a FixedBitSet since FixedBitSets are\n    // supposed to be used for dense data and sparse fixed bit sets for sparse\n    // data, so a sparse set would likely get upgraded by DocIdSetBuilder before\n    // being or'ed with a FixedBitSet\n\n    if (it.cost() < indices.length) {\n      // the default impl is good for sparse iterators\n      super.or(it);\n    } else {\n      orDense(it);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void or(DocIdSetIterator it) throws IOException {\n    {\n      // specialize union with another SparseFixedBitSet\n      final SparseFixedBitSet other = BitSetIterator.getSparseFixedBitSetOrNull(it);\n      if (other != null) {\n        assertUnpositioned(it);\n        or(other);\n        return;\n      }\n    }\n\n    // We do not specialize the union with a FixedBitSet since FixedBitSets are\n    // supposed to be used for dense data and sparse fixed bit sets for sparse\n    // data, so a sparse set would likely get upgraded by DocIdSetBuilder before\n    // being or'ed with a FixedBitSet\n\n    if (it.cost() < indices.length) {\n      // the default impl is good for sparse iterators\n      super.or(it);\n    } else {\n      orDense(it);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#or(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#or(DocIdSetIterator).mjava","sourceNew":"  @Override\n  public void or(DocIdSetIterator it) throws IOException {\n    {\n      // specialize union with another SparseFixedBitSet\n      final SparseFixedBitSet other = BitSetIterator.getSparseFixedBitSetOrNull(it);\n      if (other != null) {\n        checkUnpositioned(it);\n        or(other);\n        return;\n      }\n    }\n\n    // We do not specialize the union with a FixedBitSet since FixedBitSets are\n    // supposed to be used for dense data and sparse fixed bit sets for sparse\n    // data, so a sparse set would likely get upgraded by DocIdSetBuilder before\n    // being or'ed with a FixedBitSet\n\n    if (it.cost() < indices.length) {\n      // the default impl is good for sparse iterators\n      super.or(it);\n    } else {\n      orDense(it);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void or(DocIdSetIterator it) throws IOException {\n    {\n      // specialize union with another SparseFixedBitSet\n      final SparseFixedBitSet other = BitSetIterator.getSparseFixedBitSetOrNull(it);\n      if (other != null) {\n        assertUnpositioned(it);\n        or(other);\n        return;\n      }\n    }\n\n    // We do not specialize the union with a FixedBitSet since FixedBitSets are\n    // supposed to be used for dense data and sparse fixed bit sets for sparse\n    // data, so a sparse set would likely get upgraded by DocIdSetBuilder before\n    // being or'ed with a FixedBitSet\n\n    if (it.cost() < indices.length) {\n      // the default impl is good for sparse iterators\n      super.or(it);\n    } else {\n      orDense(it);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","2a377baed0108974b7a40d37dbf9de4cb8d15e8e"],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a377baed0108974b7a40d37dbf9de4cb8d15e8e":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a377baed0108974b7a40d37dbf9de4cb8d15e8e"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","2a377baed0108974b7a40d37dbf9de4cb8d15e8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"2a377baed0108974b7a40d37dbf9de4cb8d15e8e":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["d9a47902d6207303f5ed3e7aaca62ca33433af66","0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}