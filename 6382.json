{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerTest#testBoth().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerTest#testBoth().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerTest#testBoth().mjava","sourceNew":"  public void testBoth() throws Exception {\n    Set<String> untoks = new HashSet<String>();\n    untoks.add(WikipediaTokenizer.CATEGORY);\n    untoks.add(WikipediaTokenizer.ITALICS);\n    String test = \"[[Category:a b c d]] [[Category:e f g]] [[link here]] [[link there]] ''italics here'' something ''more italics'' [[Category:h   i   j]]\";\n    //should output all the indivual tokens plus the untokenized tokens as well.  Untokenized tokens\n    WikipediaTokenizer tf = new WikipediaTokenizer(new StringReader(test), WikipediaTokenizer.BOTH, untoks);\n    TermAttribute termAtt = tf.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = tf.addAttribute(TypeAttribute.class);\n    PositionIncrementAttribute posIncrAtt = tf.addAttribute(PositionIncrementAttribute.class);\n    OffsetAttribute offsetAtt = tf.addAttribute(OffsetAttribute.class);\n    FlagsAttribute flagsAtt = tf.addAttribute(FlagsAttribute.class);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"a b c d\",\n            termAtt.term().equals(\"a b c d\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 11, offsetAtt.startOffset() == 11);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 18, offsetAtt.endOffset() == 18);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"a\",\n            termAtt.term().equals(\"a\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" equals: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG + \" and it shouldn't\", flagsAtt.getFlags() != WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 11, offsetAtt.startOffset() == 11);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 12, offsetAtt.endOffset() == 12);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"b\",\n            termAtt.term().equals(\"b\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 13, offsetAtt.startOffset() == 13);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 14, offsetAtt.endOffset() == 14);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"c\",\n            termAtt.term().equals(\"c\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 15, offsetAtt.startOffset() == 15);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 16, offsetAtt.endOffset() == 16);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"d\",\n            termAtt.term().equals(\"d\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 17, offsetAtt.startOffset() == 17);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 18, offsetAtt.endOffset() == 18);\n\n\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"e f g\",\n            termAtt.term().equals(\"e f g\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 32, offsetAtt.startOffset() == 32);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 37, offsetAtt.endOffset() == 37);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"e\",\n            termAtt.term().equals(\"e\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 32, offsetAtt.startOffset() == 32);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 33, offsetAtt.endOffset() == 33);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"f\",\n            termAtt.term().equals(\"f\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 34, offsetAtt.startOffset() == 34);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 35, offsetAtt.endOffset() == 35);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"g\",\n            termAtt.term().equals(\"g\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 36, offsetAtt.startOffset() == 36);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 37, offsetAtt.endOffset() == 37);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"link\",\n            termAtt.term().equals(\"link\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 42, offsetAtt.startOffset() == 42);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 46, offsetAtt.endOffset() == 46);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n            termAtt.term().equals(\"here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 47, offsetAtt.startOffset() == 47);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 51, offsetAtt.endOffset() == 51);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"link\",\n            termAtt.term().equals(\"link\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 56, offsetAtt.startOffset() == 56);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 60, offsetAtt.endOffset() == 60);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"there\",\n            termAtt.term().equals(\"there\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 61, offsetAtt.startOffset() == 61);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 66, offsetAtt.endOffset() == 66);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"italics here\",\n            termAtt.term().equals(\"italics here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 71, offsetAtt.startOffset() == 71);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 83, offsetAtt.endOffset() == 83);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"italics\",\n            termAtt.term().equals(\"italics\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 71, offsetAtt.startOffset() == 71);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 78, offsetAtt.endOffset() == 78);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n            termAtt.term().equals(\"here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 79, offsetAtt.startOffset() == 79);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 83, offsetAtt.endOffset() == 83);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"something\",\n            termAtt.term().equals(\"something\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 86, offsetAtt.startOffset() == 86);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 95, offsetAtt.endOffset() == 95);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"more italics\",\n            termAtt.term().equals(\"more italics\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 98, offsetAtt.startOffset() == 98);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 110, offsetAtt.endOffset() == 110);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"more\",\n            termAtt.term().equals(\"more\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 98, offsetAtt.startOffset() == 98);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 102, offsetAtt.endOffset() == 102);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"italics\",\n            termAtt.term().equals(\"italics\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n        assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 103, offsetAtt.startOffset() == 103);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 110, offsetAtt.endOffset() == 110);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"h   i   j\",\n            termAtt.term().equals(\"h   i   j\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 124, offsetAtt.startOffset() == 124);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 133, offsetAtt.endOffset() == 133);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"h\",\n            termAtt.term().equals(\"h\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 124, offsetAtt.startOffset() == 124);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 125, offsetAtt.endOffset() == 125);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"i\",\n            termAtt.term().equals(\"i\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 128, offsetAtt.startOffset() == 128);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 129, offsetAtt.endOffset() == 129);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"j\",\n            termAtt.term().equals(\"j\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 132, offsetAtt.startOffset() == 132);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 133, offsetAtt.endOffset() == 133);\n\n    assertFalse(tf.incrementToken());\n  }\n\n","sourceOld":"  public void testBoth() throws Exception {\n    Set<String> untoks = new HashSet<String>();\n    untoks.add(WikipediaTokenizer.CATEGORY);\n    untoks.add(WikipediaTokenizer.ITALICS);\n    String test = \"[[Category:a b c d]] [[Category:e f g]] [[link here]] [[link there]] ''italics here'' something ''more italics'' [[Category:h   i   j]]\";\n    //should output all the indivual tokens plus the untokenized tokens as well.  Untokenized tokens\n    WikipediaTokenizer tf = new WikipediaTokenizer(new StringReader(test), WikipediaTokenizer.BOTH, untoks);\n    TermAttribute termAtt = tf.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = tf.addAttribute(TypeAttribute.class);\n    PositionIncrementAttribute posIncrAtt = tf.addAttribute(PositionIncrementAttribute.class);\n    OffsetAttribute offsetAtt = tf.addAttribute(OffsetAttribute.class);\n    FlagsAttribute flagsAtt = tf.addAttribute(FlagsAttribute.class);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"a b c d\",\n            termAtt.term().equals(\"a b c d\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 11, offsetAtt.startOffset() == 11);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 18, offsetAtt.endOffset() == 18);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"a\",\n            termAtt.term().equals(\"a\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" equals: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG + \" and it shouldn't\", flagsAtt.getFlags() != WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 11, offsetAtt.startOffset() == 11);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 12, offsetAtt.endOffset() == 12);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"b\",\n            termAtt.term().equals(\"b\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 13, offsetAtt.startOffset() == 13);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 14, offsetAtt.endOffset() == 14);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"c\",\n            termAtt.term().equals(\"c\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 15, offsetAtt.startOffset() == 15);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 16, offsetAtt.endOffset() == 16);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"d\",\n            termAtt.term().equals(\"d\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 17, offsetAtt.startOffset() == 17);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 18, offsetAtt.endOffset() == 18);\n\n\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"e f g\",\n            termAtt.term().equals(\"e f g\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 32, offsetAtt.startOffset() == 32);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 37, offsetAtt.endOffset() == 37);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"e\",\n            termAtt.term().equals(\"e\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 32, offsetAtt.startOffset() == 32);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 33, offsetAtt.endOffset() == 33);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"f\",\n            termAtt.term().equals(\"f\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 34, offsetAtt.startOffset() == 34);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 35, offsetAtt.endOffset() == 35);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"g\",\n            termAtt.term().equals(\"g\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 36, offsetAtt.startOffset() == 36);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 37, offsetAtt.endOffset() == 37);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"link\",\n            termAtt.term().equals(\"link\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 42, offsetAtt.startOffset() == 42);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 46, offsetAtt.endOffset() == 46);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n            termAtt.term().equals(\"here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 47, offsetAtt.startOffset() == 47);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 51, offsetAtt.endOffset() == 51);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"link\",\n            termAtt.term().equals(\"link\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 56, offsetAtt.startOffset() == 56);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 60, offsetAtt.endOffset() == 60);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"there\",\n            termAtt.term().equals(\"there\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 61, offsetAtt.startOffset() == 61);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 66, offsetAtt.endOffset() == 66);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"italics here\",\n            termAtt.term().equals(\"italics here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 71, offsetAtt.startOffset() == 71);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 83, offsetAtt.endOffset() == 83);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"italics\",\n            termAtt.term().equals(\"italics\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 71, offsetAtt.startOffset() == 71);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 78, offsetAtt.endOffset() == 78);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n            termAtt.term().equals(\"here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 79, offsetAtt.startOffset() == 79);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 83, offsetAtt.endOffset() == 83);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"something\",\n            termAtt.term().equals(\"something\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 86, offsetAtt.startOffset() == 86);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 95, offsetAtt.endOffset() == 95);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"more italics\",\n            termAtt.term().equals(\"more italics\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 98, offsetAtt.startOffset() == 98);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 110, offsetAtt.endOffset() == 110);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"more\",\n            termAtt.term().equals(\"more\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 98, offsetAtt.startOffset() == 98);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 102, offsetAtt.endOffset() == 102);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"italics\",\n            termAtt.term().equals(\"italics\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n        assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 103, offsetAtt.startOffset() == 103);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 110, offsetAtt.endOffset() == 110);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"h   i   j\",\n            termAtt.term().equals(\"h   i   j\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 124, offsetAtt.startOffset() == 124);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 133, offsetAtt.endOffset() == 133);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"h\",\n            termAtt.term().equals(\"h\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 124, offsetAtt.startOffset() == 124);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 125, offsetAtt.endOffset() == 125);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"i\",\n            termAtt.term().equals(\"i\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 128, offsetAtt.startOffset() == 128);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 129, offsetAtt.endOffset() == 129);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"j\",\n            termAtt.term().equals(\"j\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 132, offsetAtt.startOffset() == 132);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 133, offsetAtt.endOffset() == 133);\n\n    assertFalse(tf.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerTest#testBoth().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerTest#testBoth().mjava","sourceNew":"  public void testBoth() throws Exception {\n    Set<String> untoks = new HashSet<String>();\n    untoks.add(WikipediaTokenizer.CATEGORY);\n    untoks.add(WikipediaTokenizer.ITALICS);\n    String test = \"[[Category:a b c d]] [[Category:e f g]] [[link here]] [[link there]] ''italics here'' something ''more italics'' [[Category:h   i   j]]\";\n    //should output all the indivual tokens plus the untokenized tokens as well.  Untokenized tokens\n    WikipediaTokenizer tf = new WikipediaTokenizer(new StringReader(test), WikipediaTokenizer.BOTH, untoks);\n    assertTokenStreamContents(tf,\n        new String[] { \"a b c d\", \"a\", \"b\", \"c\", \"d\", \"e f g\", \"e\", \"f\", \"g\",\n          \"link\", \"here\", \"link\", \"there\", \"italics here\", \"italics\", \"here\",\n          \"something\", \"more italics\", \"more\", \"italics\", \"h   i   j\", \"h\", \"i\", \"j\" },\n        new int[] { 11, 11, 13, 15, 17, 32, 32, 34, 36, 42, 47, 56, 61, 71, 71, 79, 86, 98,  98,  103, 124, 124, 128, 132 },\n        new int[] { 18, 12, 14, 16, 18, 37, 33, 35, 37, 46, 51, 60, 66, 83, 78, 83, 95, 110, 102, 110, 133, 125, 129, 133 },\n        new int[] { 1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,   0,   1,   1,   0,   1,   1 }\n       );\n    \n    // now check the flags, TODO: add way to check flags from BaseTokenStreamTestCase?\n    tf = new WikipediaTokenizer(new StringReader(test), WikipediaTokenizer.BOTH, untoks);\n    int expectedFlags[] = new int[] { UNTOKENIZED_TOKEN_FLAG, 0, 0, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, 0, 0, \n        0, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, 0 };\n    FlagsAttribute flagsAtt = tf.addAttribute(FlagsAttribute.class);\n    tf.reset();\n    for (int i = 0; i < expectedFlags.length; i++) {\n      assertTrue(tf.incrementToken());\n      assertEquals(\"flags \" + i, expectedFlags[i], flagsAtt.getFlags());\n    }\n    assertFalse(tf.incrementToken());\n    tf.close();\n  }\n\n","sourceOld":"  public void testBoth() throws Exception {\n    Set<String> untoks = new HashSet<String>();\n    untoks.add(WikipediaTokenizer.CATEGORY);\n    untoks.add(WikipediaTokenizer.ITALICS);\n    String test = \"[[Category:a b c d]] [[Category:e f g]] [[link here]] [[link there]] ''italics here'' something ''more italics'' [[Category:h   i   j]]\";\n    //should output all the indivual tokens plus the untokenized tokens as well.  Untokenized tokens\n    WikipediaTokenizer tf = new WikipediaTokenizer(new StringReader(test), WikipediaTokenizer.BOTH, untoks);\n    TermAttribute termAtt = tf.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = tf.addAttribute(TypeAttribute.class);\n    PositionIncrementAttribute posIncrAtt = tf.addAttribute(PositionIncrementAttribute.class);\n    OffsetAttribute offsetAtt = tf.addAttribute(OffsetAttribute.class);\n    FlagsAttribute flagsAtt = tf.addAttribute(FlagsAttribute.class);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"a b c d\",\n            termAtt.term().equals(\"a b c d\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 11, offsetAtt.startOffset() == 11);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 18, offsetAtt.endOffset() == 18);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"a\",\n            termAtt.term().equals(\"a\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" equals: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG + \" and it shouldn't\", flagsAtt.getFlags() != WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 11, offsetAtt.startOffset() == 11);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 12, offsetAtt.endOffset() == 12);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"b\",\n            termAtt.term().equals(\"b\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 13, offsetAtt.startOffset() == 13);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 14, offsetAtt.endOffset() == 14);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"c\",\n            termAtt.term().equals(\"c\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 15, offsetAtt.startOffset() == 15);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 16, offsetAtt.endOffset() == 16);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"d\",\n            termAtt.term().equals(\"d\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 17, offsetAtt.startOffset() == 17);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 18, offsetAtt.endOffset() == 18);\n\n\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"e f g\",\n            termAtt.term().equals(\"e f g\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 32, offsetAtt.startOffset() == 32);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 37, offsetAtt.endOffset() == 37);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"e\",\n            termAtt.term().equals(\"e\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 32, offsetAtt.startOffset() == 32);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 33, offsetAtt.endOffset() == 33);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"f\",\n            termAtt.term().equals(\"f\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 34, offsetAtt.startOffset() == 34);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 35, offsetAtt.endOffset() == 35);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"g\",\n            termAtt.term().equals(\"g\") == true);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 36, offsetAtt.startOffset() == 36);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 37, offsetAtt.endOffset() == 37);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"link\",\n            termAtt.term().equals(\"link\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 42, offsetAtt.startOffset() == 42);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 46, offsetAtt.endOffset() == 46);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n            termAtt.term().equals(\"here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 47, offsetAtt.startOffset() == 47);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 51, offsetAtt.endOffset() == 51);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"link\",\n            termAtt.term().equals(\"link\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 56, offsetAtt.startOffset() == 56);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 60, offsetAtt.endOffset() == 60);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"there\",\n            termAtt.term().equals(\"there\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.INTERNAL_LINK, typeAtt.type().equals(WikipediaTokenizer.INTERNAL_LINK) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 61, offsetAtt.startOffset() == 61);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 66, offsetAtt.endOffset() == 66);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"italics here\",\n            termAtt.term().equals(\"italics here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 71, offsetAtt.startOffset() == 71);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 83, offsetAtt.endOffset() == 83);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"italics\",\n            termAtt.term().equals(\"italics\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 71, offsetAtt.startOffset() == 71);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 78, offsetAtt.endOffset() == 78);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n            termAtt.term().equals(\"here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 79, offsetAtt.startOffset() == 79);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 83, offsetAtt.endOffset() == 83);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"something\",\n            termAtt.term().equals(\"something\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 86, offsetAtt.startOffset() == 86);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 95, offsetAtt.endOffset() == 95);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"more italics\",\n            termAtt.term().equals(\"more italics\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 98, offsetAtt.startOffset() == 98);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 110, offsetAtt.endOffset() == 110);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"more\",\n            termAtt.term().equals(\"more\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 98, offsetAtt.startOffset() == 98);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 102, offsetAtt.endOffset() == 102);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"italics\",\n            termAtt.term().equals(\"italics\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n        assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.ITALICS, typeAtt.type().equals(WikipediaTokenizer.ITALICS) == true);\n\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 103, offsetAtt.startOffset() == 103);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 110, offsetAtt.endOffset() == 110);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"h   i   j\",\n            termAtt.term().equals(\"h   i   j\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(flagsAtt.getFlags() + \" does not equal: \" + WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG, flagsAtt.getFlags() == WikipediaTokenizer.UNTOKENIZED_TOKEN_FLAG);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 124, offsetAtt.startOffset() == 124);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 133, offsetAtt.endOffset() == 133);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"h\",\n            termAtt.term().equals(\"h\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 124, offsetAtt.startOffset() == 124);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 125, offsetAtt.endOffset() == 125);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"i\",\n            termAtt.term().equals(\"i\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 128, offsetAtt.startOffset() == 128);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 129, offsetAtt.endOffset() == 129);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"j\",\n            termAtt.term().equals(\"j\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(typeAtt.type() + \" is not equal to \" + WikipediaTokenizer.CATEGORY, typeAtt.type().equals(WikipediaTokenizer.CATEGORY) == true);\n    assertTrue(offsetAtt.startOffset() + \" does not equal: \" + 132, offsetAtt.startOffset() == 132);\n    assertTrue(offsetAtt.endOffset() + \" does not equal: \" + 133, offsetAtt.endOffset() == 133);\n\n    assertFalse(tf.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerTest#testBoth().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerTest#testBoth().mjava","sourceNew":"  public void testBoth() throws Exception {\n    Set<String> untoks = new HashSet<String>();\n    untoks.add(WikipediaTokenizer.CATEGORY);\n    untoks.add(WikipediaTokenizer.ITALICS);\n    String test = \"[[Category:a b c d]] [[Category:e f g]] [[link here]] [[link there]] ''italics here'' something ''more italics'' [[Category:h   i   j]]\";\n    //should output all the indivual tokens plus the untokenized tokens as well.  Untokenized tokens\n    WikipediaTokenizer tf = new WikipediaTokenizer(new StringReader(test), WikipediaTokenizer.BOTH, untoks);\n    assertTokenStreamContents(tf,\n        new String[] { \"a b c d\", \"a\", \"b\", \"c\", \"d\", \"e f g\", \"e\", \"f\", \"g\",\n          \"link\", \"here\", \"link\", \"there\", \"italics here\", \"italics\", \"here\",\n          \"something\", \"more italics\", \"more\", \"italics\", \"h   i   j\", \"h\", \"i\", \"j\" },\n        new int[] { 11, 11, 13, 15, 17, 32, 32, 34, 36, 42, 47, 56, 61, 71, 71, 79, 86, 98,  98,  103, 124, 124, 128, 132 },\n        new int[] { 18, 12, 14, 16, 18, 37, 33, 35, 37, 46, 51, 60, 66, 83, 78, 83, 95, 110, 102, 110, 133, 125, 129, 133 },\n        new int[] { 1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,   0,   1,   1,   0,   1,   1 }\n       );\n    \n    // now check the flags, TODO: add way to check flags from BaseTokenStreamTestCase?\n    tf = new WikipediaTokenizer(new StringReader(test), WikipediaTokenizer.BOTH, untoks);\n    int expectedFlags[] = new int[] { UNTOKENIZED_TOKEN_FLAG, 0, 0, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, 0, 0, \n        0, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, 0 };\n    FlagsAttribute flagsAtt = tf.addAttribute(FlagsAttribute.class);\n    tf.reset();\n    for (int i = 0; i < expectedFlags.length; i++) {\n      assertTrue(tf.incrementToken());\n      assertEquals(\"flags \" + i, expectedFlags[i], flagsAtt.getFlags());\n    }\n    assertFalse(tf.incrementToken());\n    tf.close();\n  }\n\n","sourceOld":"  public void testBoth() throws Exception {\n    Set<String> untoks = new HashSet<String>();\n    untoks.add(WikipediaTokenizer.CATEGORY);\n    untoks.add(WikipediaTokenizer.ITALICS);\n    String test = \"[[Category:a b c d]] [[Category:e f g]] [[link here]] [[link there]] ''italics here'' something ''more italics'' [[Category:h   i   j]]\";\n    //should output all the indivual tokens plus the untokenized tokens as well.  Untokenized tokens\n    WikipediaTokenizer tf = new WikipediaTokenizer(new StringReader(test), WikipediaTokenizer.BOTH, untoks);\n    assertTokenStreamContents(tf,\n        new String[] { \"a b c d\", \"a\", \"b\", \"c\", \"d\", \"e f g\", \"e\", \"f\", \"g\",\n          \"link\", \"here\", \"link\", \"there\", \"italics here\", \"italics\", \"here\",\n          \"something\", \"more italics\", \"more\", \"italics\", \"h   i   j\", \"h\", \"i\", \"j\" },\n        new int[] { 11, 11, 13, 15, 17, 32, 32, 34, 36, 42, 47, 56, 61, 71, 71, 79, 86, 98,  98,  103, 124, 124, 128, 132 },\n        new int[] { 18, 12, 14, 16, 18, 37, 33, 35, 37, 46, 51, 60, 66, 83, 78, 83, 95, 110, 102, 110, 133, 125, 129, 133 },\n        new int[] { 1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,   0,   1,   1,   0,   1,   1 }\n       );\n    \n    // now check the flags, TODO: add way to check flags from BaseTokenStreamTestCase?\n    tf = new WikipediaTokenizer(new StringReader(test), WikipediaTokenizer.BOTH, untoks);\n    int expectedFlags[] = new int[] { UNTOKENIZED_TOKEN_FLAG, 0, 0, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, 0, 0, \n        0, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, UNTOKENIZED_TOKEN_FLAG, 0, 0, 0 };\n    FlagsAttribute flagsAtt = tf.addAttribute(FlagsAttribute.class);\n    tf.reset();\n    for (int i = 0; i < expectedFlags.length; i++) {\n      assertTrue(tf.incrementToken());\n      assertEquals(\"flags \" + i, expectedFlags[i], flagsAtt.getFlags());\n    }\n    assertFalse(tf.incrementToken());\n    tf.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}