{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#getRandomSort(String,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#getRandomSort(String,int).mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#getRandomSort(String,int).mjava","sourceNew":"  private Sort getRandomSort(String prefix, int numFields) {\n    final List<SortField> sortFields = new ArrayList<SortField>();\n    // TODO: sometimes sort by score; problem is scores are\n    // not comparable across the two indices\n    // sortFields.add(SortField.FIELD_SCORE);\n    if (random().nextBoolean()) {\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n    } else if (random().nextBoolean()) {\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n    }\n    // Break ties:\n    sortFields.add(new SortField(prefix + \"ID\", SortField.Type.INT));\n    return new Sort(sortFields.toArray(new SortField[sortFields.size()]));\n  }\n\n","sourceOld":"  private Sort getRandomSort(String prefix, int numFields) {\n    final List<SortField> sortFields = new ArrayList<SortField>();\n    // TODO: sometimes sort by score; problem is scores are\n    // not comparable across the two indices\n    // sortFields.add(SortField.FIELD_SCORE);\n    if (random().nextBoolean()) {\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n    } else if (random().nextBoolean()) {\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n    }\n    // Break ties:\n    sortFields.add(new SortField(prefix + \"ID\", SortField.Type.INT));\n    return new Sort(sortFields.toArray(new SortField[sortFields.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f400d1b6b61e87efe596bd64726f080f9a29f0","date":1366027276,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#getRandomSort(String,int).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#getRandomSort(String,int).mjava","sourceNew":"  private Sort getRandomSort(String prefix, int numFields) {\n    final List<SortField> sortFields = new ArrayList<>();\n    // TODO: sometimes sort by score; problem is scores are\n    // not comparable across the two indices\n    // sortFields.add(SortField.FIELD_SCORE);\n    if (random().nextBoolean()) {\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n    } else if (random().nextBoolean()) {\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n    }\n    // Break ties:\n    sortFields.add(new SortField(prefix + \"ID\", SortField.Type.INT));\n    return new Sort(sortFields.toArray(new SortField[sortFields.size()]));\n  }\n\n","sourceOld":"  private Sort getRandomSort(String prefix, int numFields) {\n    final List<SortField> sortFields = new ArrayList<SortField>();\n    // TODO: sometimes sort by score; problem is scores are\n    // not comparable across the two indices\n    // sortFields.add(SortField.FIELD_SCORE);\n    if (random().nextBoolean()) {\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n    } else if (random().nextBoolean()) {\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n      sortFields.add(new SortField(prefix + random().nextInt(numFields), SortField.Type.STRING, random().nextBoolean()));\n    }\n    // Break ties:\n    sortFields.add(new SortField(prefix + \"ID\", SortField.Type.INT));\n    return new Sort(sortFields.toArray(new SortField[sortFields.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19f400d1b6b61e87efe596bd64726f080f9a29f0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19f400d1b6b61e87efe596bd64726f080f9a29f0"]},"commit2Childs":{"19f400d1b6b61e87efe596bd64726f080f9a29f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}