{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(Path).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(Path).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   */\n  protected void extractFile(Path sgmFile) {\n    try (BufferedReader reader = Files.newBufferedReader(sgmFile, StandardCharsets.UTF_8)) {\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(System.lineSeparator()).append(System.lineSeparator());\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          Path outFile = outputDir.resolve(sgmFile.getFileName() + \"-\" + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          try (BufferedWriter writer = Files.newBufferedWriter(outFile, StandardCharsets.UTF_8)) {\n            writer.write(out);\n          }\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(sgmFile), StandardCharsets.UTF_8));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(outFile), StandardCharsets.UTF_8);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c866d811e9c34e639bb26ff75f0afcf7bb61fe3","date":1447528880,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(Path).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(Path).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   */\n  protected void extractFile(Path sgmFile) {\n    try (BufferedReader reader = Files.newBufferedReader(sgmFile, StandardCharsets.ISO_8859_1)) {\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(System.lineSeparator()).append(System.lineSeparator());\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          Path outFile = outputDir.resolve(sgmFile.getFileName() + \"-\" + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          try (BufferedWriter writer = Files.newBufferedWriter(outFile, StandardCharsets.UTF_8)) {\n            writer.write(out);\n          }\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   */\n  protected void extractFile(Path sgmFile) {\n    try (BufferedReader reader = Files.newBufferedReader(sgmFile, StandardCharsets.UTF_8)) {\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(System.lineSeparator()).append(System.lineSeparator());\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          Path outFile = outputDir.resolve(sgmFile.getFileName() + \"-\" + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          try (BufferedWriter writer = Files.newBufferedWriter(outFile, StandardCharsets.UTF_8)) {\n            writer.write(out);\n          }\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c866d811e9c34e639bb26ff75f0afcf7bb61fe3":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c866d811e9c34e639bb26ff75f0afcf7bb61fe3"]},"commit2Childs":{"4c866d811e9c34e639bb26ff75f0afcf7bb61fe3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["4c866d811e9c34e639bb26ff75f0afcf7bb61fe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}