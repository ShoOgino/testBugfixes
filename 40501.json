{"path":"src/test/org/apache/lucene/search/TestSort#[K,V]_assertSameValues(HashMap[K,V],HashMap[K,V]).mjava","commits":[{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#[K,V]_assertSameValues(HashMap[K,V],HashMap[K,V]).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#assertSameValues(HashMap,HashMap).mjava","sourceNew":"  // make sure all the values in the maps match\n  private <K, V> void assertSameValues (HashMap<K,V> m1, HashMap<K,V> m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator<K> iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      K key = iter.next();\n      V o1 = m1.get(key);\n      V o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","sourceOld":"  // make sure all the values in the maps match\n  private void assertSameValues (HashMap m1, HashMap m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      Object key = iter.next();\n      Object o1 = m1.get(key);\n      Object o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#[K,V]_assertSameValues(HashMap[K,V],HashMap[K,V]).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#[K,V]_assertSameValues(HashMap[K,V],HashMap[K,V]).mjava","sourceNew":"  // make sure all the values in the maps match\n  private <K, V> void assertSameValues (HashMap<K,V> m1, HashMap<K,V> m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator<K> iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      K key = iter.next();\n      V o1 = m1.get(key);\n      V o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","sourceOld":"  // make sure all the values in the maps match\n  private <K, V> void assertSameValues (HashMap<K,V> m1, HashMap<K,V> m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator<K> iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      K key = iter.next();\n      V o1 = m1.get(key);\n      V o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}