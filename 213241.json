{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","sourceNew":"  static void assertPage(int pageStart, TopDocs all, TopDocs paged) {\n    assertEquals(all.totalHits, paged.totalHits);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      assertEquals(all.scoreDocs[pageStart + i].doc, paged.scoreDocs[i].doc);\n      assertEquals(all.scoreDocs[pageStart + i].score, paged.scoreDocs[i].score, 0f);\n    }\n  }\n\n","sourceOld":"  static void assertPage(int pageStart, TopDocs all, TopDocs paged) {\n    assertEquals(all.totalHits, paged.totalHits);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      assertEquals(all.scoreDocs[pageStart + i].doc, paged.scoreDocs[i].doc);\n      assertEquals(all.scoreDocs[pageStart + i].score, paged.scoreDocs[i].score, 0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","sourceNew":"  static void assertPage(int pageStart, TopDocs all, TopDocs paged) {\n    assertEquals(all.totalHits, paged.totalHits);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertPage(int pageStart, TopDocs all, TopDocs paged) {\n    assertEquals(all.totalHits, paged.totalHits);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      assertEquals(all.scoreDocs[pageStart + i].doc, paged.scoreDocs[i].doc);\n      assertEquals(all.scoreDocs[pageStart + i].score, paged.scoreDocs[i].score, 0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","sourceNew":"  static void assertPage(int pageStart, TopDocs all, TopDocs paged) {\n    assertEquals(all.totalHits, paged.totalHits);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertPage(int pageStart, TopDocs all, TopDocs paged) {\n    assertEquals(all.totalHits, paged.totalHits);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      assertEquals(all.scoreDocs[pageStart + i].doc, paged.scoreDocs[i].doc);\n      assertEquals(all.scoreDocs[pageStart + i].score, paged.scoreDocs[i].score, 0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","sourceNew":"  void assertPage(int pageStart, TopDocs all, TopDocs paged) throws IOException {\n    assertEquals(all.totalHits, paged.totalHits);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      if (VERBOSE) {\n        System.out.println(\"    hit \" + (pageStart + i));\n        System.out.println(\"      expected id=\" + searcher.doc(sd1.doc).get(\"id\") + \" \" + sd1);\n        System.out.println(\"        actual id=\" + searcher.doc(sd2.doc).get(\"id\") + \" \" + sd2);\n      }\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertPage(int pageStart, TopDocs all, TopDocs paged) {\n    assertEquals(all.totalHits, paged.totalHits);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","sourceNew":"  void assertPage(int pageStart, TopDocs all, TopDocs paged) throws IOException {\n    assertEquals(all.totalHits, paged.totalHits);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      if (VERBOSE) {\n        System.out.println(\"    hit \" + (pageStart + i));\n        System.out.println(\"      expected id=\" + searcher.doc(sd1.doc).get(\"id\") + \" \" + sd1);\n        System.out.println(\"        actual id=\" + searcher.doc(sd2.doc).get(\"id\") + \" \" + sd2);\n      }\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertPage(int pageStart, TopDocs all, TopDocs paged) {\n    assertEquals(all.totalHits, paged.totalHits);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","sourceNew":"  void assertPage(int pageStart, TopDocs all, TopDocs paged) throws IOException {\n    assertEquals(all.totalHits.value, paged.totalHits.value);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      if (VERBOSE) {\n        System.out.println(\"    hit \" + (pageStart + i));\n        System.out.println(\"      expected id=\" + searcher.doc(sd1.doc).get(\"id\") + \" \" + sd1);\n        System.out.println(\"        actual id=\" + searcher.doc(sd2.doc).get(\"id\") + \" \" + sd2);\n      }\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","sourceOld":"  void assertPage(int pageStart, TopDocs all, TopDocs paged) throws IOException {\n    assertEquals(all.totalHits, paged.totalHits);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      if (VERBOSE) {\n        System.out.println(\"    hit \" + (pageStart + i));\n        System.out.println(\"      expected id=\" + searcher.doc(sd1.doc).get(\"id\") + \" \" + sd1);\n        System.out.println(\"        actual id=\" + searcher.doc(sd2.doc).get(\"id\") + \" \" + sd2);\n      }\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  void assertPage(int pageStart, TopDocs all, TopDocs paged) throws IOException {\n    assertEquals(all.totalHits.value, paged.totalHits.value);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      if (VERBOSE) {\n        System.out.println(\"    hit \" + (pageStart + i));\n        System.out.println(\"      expected id=\" + searcher.doc(sd1.doc).get(\"id\") + \" \" + sd1);\n        System.out.println(\"        actual id=\" + searcher.doc(sd2.doc).get(\"id\") + \" \" + sd2);\n      }\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","sourceOld":"  void assertPage(int pageStart, TopDocs all, TopDocs paged) throws IOException {\n    assertEquals(all.totalHits.value, paged.totalHits.value);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      if (VERBOSE) {\n        System.out.println(\"    hit \" + (pageStart + i));\n        System.out.println(\"      expected id=\" + searcher.doc(sd1.doc).get(\"id\") + \" \" + sd1);\n        System.out.println(\"        actual id=\" + searcher.doc(sd2.doc).get(\"id\") + \" \" + sd2);\n      }\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","sourceNew":"  void assertPage(int pageStart, TopDocs all, TopDocs paged) throws IOException {\n    assertEquals(all.totalHits.value, paged.totalHits.value);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      if (VERBOSE) {\n        System.out.println(\"    hit \" + (pageStart + i));\n        System.out.println(\"      expected id=\" + searcher.doc(sd1.doc).get(\"id\") + \" \" + sd1);\n        System.out.println(\"        actual id=\" + searcher.doc(sd2.doc).get(\"id\") + \" \" + sd2);\n      }\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  void assertPage(int pageStart, TopDocs all, TopDocs paged) throws IOException {\n    assertEquals(all.totalHits.value, paged.totalHits.value);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      if (VERBOSE) {\n        System.out.println(\"    hit \" + (pageStart + i));\n        System.out.println(\"      expected id=\" + searcher.doc(sd1.doc).get(\"id\") + \" \" + sd1);\n        System.out.println(\"        actual id=\" + searcher.doc(sd2.doc).get(\"id\") + \" \" + sd2);\n      }\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearchAfter#assertPage(int,TopDocs,TopDocs).mjava","sourceNew":"  void assertPage(int pageStart, TopDocs all, TopDocs paged) throws IOException {\n    assertEquals(all.totalHits.value, paged.totalHits.value);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      if (VERBOSE) {\n        System.out.println(\"    hit \" + (pageStart + i));\n        System.out.println(\"      expected id=\" + searcher.doc(sd1.doc).get(\"id\") + \" \" + sd1);\n        System.out.println(\"        actual id=\" + searcher.doc(sd2.doc).get(\"id\") + \" \" + sd2);\n      }\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertArrayEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","sourceOld":"  void assertPage(int pageStart, TopDocs all, TopDocs paged) throws IOException {\n    assertEquals(all.totalHits.value, paged.totalHits.value);\n    for (int i = 0; i < paged.scoreDocs.length; i++) {\n      ScoreDoc sd1 = all.scoreDocs[pageStart + i];\n      ScoreDoc sd2 = paged.scoreDocs[i];\n      if (VERBOSE) {\n        System.out.println(\"    hit \" + (pageStart + i));\n        System.out.println(\"      expected id=\" + searcher.doc(sd1.doc).get(\"id\") + \" \" + sd1);\n        System.out.println(\"        actual id=\" + searcher.doc(sd2.doc).get(\"id\") + \" \" + sd2);\n      }\n      assertEquals(sd1.doc, sd2.doc);\n      assertEquals(sd1.score, sd2.score, 0f);\n      if (sd1 instanceof FieldDoc) {\n        assertTrue(sd2 instanceof FieldDoc);\n        assertEquals(((FieldDoc) sd1).fields, ((FieldDoc) sd2).fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","7615b855702e008d91a95a2578bf05d27372f599"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"7615b855702e008d91a95a2578bf05d27372f599":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"ef0d8a69209261514c5739c770bba706c2308450":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599","ef0d8a69209261514c5739c770bba706c2308450"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}