{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","commits":[{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   * <p>\n   * TODO: This method can be private once SOLR-10916 is resolved\n   * </p>\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  public static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = random().nextBoolean();\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   * <p>\n   * TODO: This method can be private once SOLR-10916 is resolved\n   * </p>\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  public static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = random().nextBoolean();\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   * <p>\n   * TODO: This method can be private once SOLR-10916 is resolved\n   * </p>\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  public static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = random().nextBoolean();\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5719bfb2650ba43855e20564d39873bbbdc7f02c","date":1500676092,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","sourceNew":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = random().nextBoolean();\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   * <p>\n   * TODO: This method can be private once SOLR-10916 is resolved\n   * </p>\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  public static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = random().nextBoolean();\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","sourceNew":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = random().nextBoolean();\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   * <p>\n   * TODO: This method can be private once SOLR-10916 is resolved\n   * </p>\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  public static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = random().nextBoolean();\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","sourceNew":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = random().nextBoolean();\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   * <p>\n   * TODO: This method can be private once SOLR-10916 is resolved\n   * </p>\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  public static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = random().nextBoolean();\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa1faeac415a3e04c3efc4ef97eb686a4760be1f","date":1501169306,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","sourceNew":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = 0 != random().nextInt(5);  // 80% likelihood\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = random().nextBoolean();\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ad8c9e9210e008dc7b8ad5a037ff20879150ea","date":1501889566,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","sourceNew":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = 0 != random().nextInt(5);  // 80% likelihood\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumFieldType\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = 0 != random().nextInt(5);  // 80% likelihood\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","sourceNew":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = 0 != random().nextInt(5);  // 80% likelihood\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumFieldType\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = random().nextBoolean();\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","sourceNew":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = 0 != random().nextInt(5);  // 80% likelihood\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP={}\", useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP={}\", useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumFieldType\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = 0 != random().nextInt(5);  // 80% likelihood\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP=\"+useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumFieldType\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6809a6d7924df2c864d6a5863944aff9dfeb372c","date":1591826750,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#randomizeNumericTypesProperties().mjava","sourceNew":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = 0 != random().nextInt(5);  // 80% likelihood\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP={}\", useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP={}\", useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumFieldType\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets various sys props related to user specified or randomized choices regarding the types \n   * of numerics that should be used in tests.\n   *\n   * @see #NUMERIC_DOCVALUES_SYSPROP\n   * @see #NUMERIC_POINTS_SYSPROP\n   * @see #clearNumericTypesProperties\n   * @lucene.experimental\n   * @lucene.internal\n   */\n  private static void randomizeNumericTypesProperties() {\n\n    final boolean useDV = random().nextBoolean();\n    System.setProperty(NUMERIC_DOCVALUES_SYSPROP, \"\"+useDV);\n    \n    // consume a consistent amount of random data even if sysprop/annotation is set\n    final boolean randUsePoints = 0 != random().nextInt(5);  // 80% likelihood\n\n    final String usePointsStr = System.getProperty(USE_NUMERIC_POINTS_SYSPROP);\n    final boolean usePoints = (null == usePointsStr) ? randUsePoints : Boolean.parseBoolean(usePointsStr);\n    \n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SolrTestCaseJ4.SuppressPointFields.class)\n        || (! usePoints)) {\n      log.info(\"Using TrieFields (NUMERIC_POINTS_SYSPROP=false) w/NUMERIC_DOCVALUES_SYSPROP={}\", useDV);\n      \n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = false;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.TrieIntField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.TrieFloatField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.TrieLongField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.TrieDoubleField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.TrieDateField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumField\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"false\");\n    } else {\n      log.info(\"Using PointFields (NUMERIC_POINTS_SYSPROP=true) w/NUMERIC_DOCVALUES_SYSPROP={}\", useDV);\n\n      org.apache.solr.schema.PointField.TEST_HACK_IGNORE_USELESS_TRIEFIELD_ARGS = true;\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Integer.class, \"solr.IntPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Float.class, \"solr.FloatPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Long.class, \"solr.LongPointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Double.class, \"solr.DoublePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Date.class, \"solr.DatePointField\");\n      private_RANDOMIZED_NUMERIC_FIELDTYPES.put(Enum.class, \"solr.EnumFieldType\");\n      \n      System.setProperty(NUMERIC_POINTS_SYSPROP, \"true\");\n    }\n    for (Map.Entry<Class,String> entry : RANDOMIZED_NUMERIC_FIELDTYPES.entrySet()) {\n      System.setProperty(\"solr.tests.\" + entry.getKey().getSimpleName() + \"FieldType\",\n                         entry.getValue());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["28288370235ed02234a64753cdbf0c6ec096304a"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"a52341299179de5479672f7cf518bf4b173f34b3":["28288370235ed02234a64753cdbf0c6ec096304a","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["936cdd5882761db3b844afd6f84ab81cbb011a75","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa1faeac415a3e04c3efc4ef97eb686a4760be1f":["a52341299179de5479672f7cf518bf4b173f34b3"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["aa1faeac415a3e04c3efc4ef97eb686a4760be1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6809a6d7924df2c864d6a5863944aff9dfeb372c"]},"commit2Childs":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"28288370235ed02234a64753cdbf0c6ec096304a":["5719bfb2650ba43855e20564d39873bbbdc7f02c","a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["aa1faeac415a3e04c3efc4ef97eb686a4760be1f"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"aa1faeac415a3e04c3efc4ef97eb686a4760be1f":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["a966532d92cf9ba2856f15a8140151bb6b518e4b","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}