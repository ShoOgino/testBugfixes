{"path":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); continue;\n          case ARR:    vals.add( readArray( parser ) ); continue;\n          case RESULT: vals.add( readDocuments( parser ) ); continue;\n          case DOC:    vals.add( readDocument( parser ) ); continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); continue;\n          case ARR:    vals.add( readArray( parser ) ); continue;\n          case RESULT: vals.add( readDocuments( parser ) ); continue;\n          case DOC:    vals.add( readDocument( parser ) ); continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); continue;\n          case ARR:    vals.add( readArray( parser ) ); continue;\n          case RESULT: vals.add( readDocuments( parser ) ); continue;\n          case DOC:    vals.add( readDocument( parser ) ); continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); continue;\n          case ARR:    vals.add( readArray( parser ) ); continue;\n          case RESULT: vals.add( readDocuments( parser ) ); continue;\n          case DOC:    vals.add( readDocument( parser ) ); continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}