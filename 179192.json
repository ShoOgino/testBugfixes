{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#getDocIdSetIteratorFromQueries(List[Query],LeafReaderContext).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#getDocIdSetIteratorFromQueries(List[Query],LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Given a list of Solr filters/queries, return a doc iterator that\n     * traverses over the documents that matched all the criteria of the\n     * queries.\n     *\n     * @param queries\n     *          Filtering criteria to match documents against\n     * @param context\n     *          Index reader\n     * @return DocIdSetIterator to traverse documents that matched all filter\n     *         criteria\n     */\n    private DocIdSetIterator getDocIdSetIteratorFromQueries(List<Query> queries,\n        LeafReaderContext context) throws IOException {\n      final SolrIndexSearcher.ProcessedFilter pf = ((SolrIndexSearcher) searcher)\n          .getProcessedFilter(null, queries);\n      final Bits liveDocs = context.reader().getLiveDocs();\n\n      DocIdSetIterator idIter = null;\n      if (pf.filter != null) {\n        final DocIdSet idSet = pf.filter.getDocIdSet(context, liveDocs);\n        if (idSet != null) {\n          idIter = idSet.iterator();\n        }\n      }\n\n      return idIter;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#getDocIdSetIteratorFromQueries(List[Query],LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Given a list of Solr filters/queries, return a doc iterator that\n     * traverses over the documents that matched all the criteria of the\n     * queries.\n     *\n     * @param queries\n     *          Filtering criteria to match documents against\n     * @param context\n     *          Index reader\n     * @return DocIdSetIterator to traverse documents that matched all filter\n     *         criteria\n     */\n    private DocIdSetIterator getDocIdSetIteratorFromQueries(List<Query> queries,\n        LeafReaderContext context) throws IOException {\n      final SolrIndexSearcher.ProcessedFilter pf = ((SolrIndexSearcher) searcher)\n          .getProcessedFilter(null, queries);\n      final Bits liveDocs = context.reader().getLiveDocs();\n\n      DocIdSetIterator idIter = null;\n      if (pf.filter != null) {\n        final DocIdSet idSet = pf.filter.getDocIdSet(context, liveDocs);\n        if (idSet != null) {\n          idIter = idSet.iterator();\n        }\n      }\n\n      return idIter;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c4d4ec3bca82c8eac712592ab518cd082026f34","date":1585956055,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#getDocIdSetIteratorFromQueries(List[Query],LeafReaderContext).mjava","sourceNew":null,"sourceOld":"    /**\n     * Given a list of Solr filters/queries, return a doc iterator that\n     * traverses over the documents that matched all the criteria of the\n     * queries.\n     *\n     * @param queries\n     *          Filtering criteria to match documents against\n     * @param context\n     *          Index reader\n     * @return DocIdSetIterator to traverse documents that matched all filter\n     *         criteria\n     */\n    private DocIdSetIterator getDocIdSetIteratorFromQueries(List<Query> queries,\n        LeafReaderContext context) throws IOException {\n      final SolrIndexSearcher.ProcessedFilter pf = ((SolrIndexSearcher) searcher)\n          .getProcessedFilter(null, queries);\n      final Bits liveDocs = context.reader().getLiveDocs();\n\n      DocIdSetIterator idIter = null;\n      if (pf.filter != null) {\n        final DocIdSet idSet = pf.filter.getDocIdSet(context, liveDocs);\n        if (idSet != null) {\n          idIter = idSet.iterator();\n        }\n      }\n\n      return idIter;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c4d4ec3bca82c8eac712592ab518cd082026f34":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c4d4ec3bca82c8eac712592ab518cd082026f34"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","5c4d4ec3bca82c8eac712592ab518cd082026f34"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"5c4d4ec3bca82c8eac712592ab518cd082026f34":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}