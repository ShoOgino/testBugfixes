{"path":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","commits":[{"id":"9d9916984e99244c407152f6cfc2c3bf89a30bc8","date":1284760018,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[MultiCollector]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","sourceNew":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort sort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups;\n\n    SortField[] sortFields = sort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","sourceOld":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort sort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups;\n\n    SortField[] sortFields = sort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129258e6ec9684fea792a51eda00f2e0e03c1480","date":1289770450,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","sourceNew":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort sort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n\n    SortField[] sortFields = sort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","sourceOld":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort sort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups;\n\n    SortField[] sortFields = sort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","sourceNew":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort sort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n\n    SortField[] sortFields = sort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","sourceOld":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort sort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups;\n\n    SortField[] sortFields = sort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort sort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n\n    SortField[] sortFields = sort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"771281b4c7dc712b48ba338b970b49007ca402a1","date":1295480908,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","sourceNew":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort weightedSort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n\n    SortField[] sortFields = weightedSort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","sourceOld":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort sort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n\n    SortField[] sortFields = sort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","sourceNew":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort weightedSort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n\n    SortField[] sortFields = weightedSort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","sourceOld":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort sort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n\n    SortField[] sortFields = sort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","sourceNew":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort weightedSort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n\n    SortField[] sortFields = weightedSort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","sourceOld":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort sort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n\n    SortField[] sortFields = sort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7cdfe5a1ea9db97faa404b251fa644faa73597","date":1308345959,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","sourceNew":null,"sourceOld":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort weightedSort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n\n    SortField[] sortFields = weightedSort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/TopGroupCollector[Grouping]#TopGroupCollector(ValueSource,Map,Sort,int).mjava","sourceNew":null,"sourceOld":"  public TopGroupCollector(ValueSource groupByVS, Map vsContext, Sort weightedSort, int nGroups) throws IOException {\n    this.vs = groupByVS;\n    this.context = vsContext;\n    this.nGroups = nGroups = Math.max(1,nGroups);  // we need a minimum of 1 for this collector\n\n    SortField[] sortFields = weightedSort.getSort();\n    this.comparators = new FieldComparator[sortFields.length];\n    this.reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      SortField sortField = sortFields[i];\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n      // use nGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot)\n      comparators[i] = sortField.getComparator(nGroups + 1, i);\n    }\n    this.spareSlot = nGroups;\n\n    this.groupMap = new HashMap<MutableValue, SearchGroup>(nGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9d9916984e99244c407152f6cfc2c3bf89a30bc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["771281b4c7dc712b48ba338b970b49007ca402a1","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9d9916984e99244c407152f6cfc2c3bf89a30bc8","129258e6ec9684fea792a51eda00f2e0e03c1480"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","771281b4c7dc712b48ba338b970b49007ca402a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["771281b4c7dc712b48ba338b970b49007ca402a1"],"129258e6ec9684fea792a51eda00f2e0e03c1480":["9d9916984e99244c407152f6cfc2c3bf89a30bc8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","129258e6ec9684fea792a51eda00f2e0e03c1480"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","771281b4c7dc712b48ba338b970b49007ca402a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"771281b4c7dc712b48ba338b970b49007ca402a1":["129258e6ec9684fea792a51eda00f2e0e03c1480"]},"commit2Childs":{"9d9916984e99244c407152f6cfc2c3bf89a30bc8":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","129258e6ec9684fea792a51eda00f2e0e03c1480"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":[],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d9916984e99244c407152f6cfc2c3bf89a30bc8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["7edfc3f7caa7b49a18fe367692768b33b018e9db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"129258e6ec9684fea792a51eda00f2e0e03c1480":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","771281b4c7dc712b48ba338b970b49007ca402a1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"771281b4c7dc712b48ba338b970b49007ca402a1":["7edfc3f7caa7b49a18fe367692768b33b018e9db","29ef99d61cda9641b6250bf9567329a6e65f901d","9c7cdfe5a1ea9db97faa404b251fa644faa73597","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7edfc3f7caa7b49a18fe367692768b33b018e9db","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}