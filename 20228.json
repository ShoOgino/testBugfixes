{"path":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#maybeCommit(Random,int,int).mjava","commits":[{"id":"136796946c32863f11b97ebec6b4091cdfe3a20b","date":1468862468,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#maybeCommit(Random,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Randomly chooses to do a commit, where the probability of doing so increases the longer it's been since \n   * a commit was done.\n   *\n   * @returns <code>0</code> if a commit was done, else <code>itersSinceLastCommit + 1</code>\n   */\n  private static int maybeCommit(final Random rand, final int itersSinceLastCommit, final int numIters) throws IOException, SolrServerException {\n    final float threshold = itersSinceLastCommit / numIters;\n    if (rand.nextFloat() < threshold) {\n      log.info(\"COMMIT\");\n      assertEquals(0, getRandClient(rand).commit().getStatus());\n      return 0;\n    }\n    return itersSinceLastCommit + 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#maybeCommit(Random,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Randomly chooses to do a commit, where the probability of doing so increases the longer it's been since \n   * a commit was done.\n   *\n   * @returns <code>0</code> if a commit was done, else <code>itersSinceLastCommit + 1</code>\n   */\n  private static int maybeCommit(final Random rand, final int itersSinceLastCommit, final int numIters) throws IOException, SolrServerException {\n    final float threshold = itersSinceLastCommit / numIters;\n    if (rand.nextFloat() < threshold) {\n      log.info(\"COMMIT\");\n      assertEquals(0, getRandClient(rand).commit().getStatus());\n      return 0;\n    }\n    return itersSinceLastCommit + 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"136796946c32863f11b97ebec6b4091cdfe3a20b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","136796946c32863f11b97ebec6b4091cdfe3a20b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["136796946c32863f11b97ebec6b4091cdfe3a20b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["136796946c32863f11b97ebec6b4091cdfe3a20b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"136796946c32863f11b97ebec6b4091cdfe3a20b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}