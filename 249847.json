{"path":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricsContext,String).mjava","commits":[{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    this.solrMetricsContext = parentContext.getChildContext(this);\n    numErrors = solrMetricsContext.meter(this, \"errors\", getCategory().toString(), scope);\n    numServerErrors = solrMetricsContext.meter(this, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = solrMetricsContext.meter(this, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = solrMetricsContext.meter(this, \"timeouts\", getCategory().toString(), scope);\n    requests = solrMetricsContext.counter(this, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    solrMetricsContext.gauge(this, metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = solrMetricsContext.timer(this,\"requestTimes\", getCategory().toString(), scope);\n    totalTime = solrMetricsContext.counter(this, \"totalTime\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    this.solrMetricsContext = parentContext.getChildContext(this);\n    numErrors = solrMetricsContext.meter(\"errors\", getCategory().toString(), scope);\n    numServerErrors = solrMetricsContext.meter(\"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = solrMetricsContext.meter(\"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = solrMetricsContext.meter(\"timeouts\", getCategory().toString(), scope);\n    requests = solrMetricsContext.counter(\"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    solrMetricsContext.gauge(metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope);\n    totalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    this.solrMetricsContext = parentContext.getChildContext(this);\n    numErrors = solrMetricsContext.meter(this, \"errors\", getCategory().toString(), scope);\n    numServerErrors = solrMetricsContext.meter(this, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = solrMetricsContext.meter(this, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = solrMetricsContext.meter(this, \"timeouts\", getCategory().toString(), scope);\n    requests = solrMetricsContext.counter(this, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    solrMetricsContext.gauge(this, metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = solrMetricsContext.timer(this,\"requestTimes\", getCategory().toString(), scope);\n    totalTime = solrMetricsContext.counter(this, \"totalTime\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68796f2b228600a74c540a78623c01a43894c464","date":1575895593,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    this.solrMetricsContext = parentContext.getChildContext(this);\n    numErrors = solrMetricsContext.meter(\"errors\", getCategory().toString(), scope);\n    numServerErrors = solrMetricsContext.meter(\"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = solrMetricsContext.meter(\"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = solrMetricsContext.meter(\"timeouts\", getCategory().toString(), scope);\n    requests = solrMetricsContext.counter(\"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    solrMetricsContext.gauge(metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope);\n    distribRequestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope, \"distrib\");\n    localRequestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope, \"local\");\n    totalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope);\n    distribTotalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope, \"distrib\");\n    localTotalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope, \"local\");\n    solrMetricsContext.gauge(() -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    this.solrMetricsContext = parentContext.getChildContext(this);\n    numErrors = solrMetricsContext.meter(\"errors\", getCategory().toString(), scope);\n    numServerErrors = solrMetricsContext.meter(\"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = solrMetricsContext.meter(\"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = solrMetricsContext.meter(\"timeouts\", getCategory().toString(), scope);\n    requests = solrMetricsContext.counter(\"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    solrMetricsContext.gauge(metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope);\n    totalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df3f594d6024cc3f64b0d0932c5efc80dfbe64bb","date":1575906501,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    this.solrMetricsContext = parentContext.getChildContext(this);\n    numErrors = solrMetricsContext.meter(\"errors\", getCategory().toString(), scope);\n    numServerErrors = solrMetricsContext.meter(\"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = solrMetricsContext.meter(\"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = solrMetricsContext.meter(\"timeouts\", getCategory().toString(), scope);\n    requests = solrMetricsContext.counter(\"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    solrMetricsContext.gauge(metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope);\n    distribRequestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope, \"distrib\");\n    localRequestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope, \"local\");\n    totalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope);\n    distribTotalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope, \"distrib\");\n    localTotalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope, \"local\");\n    solrMetricsContext.gauge(() -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    this.solrMetricsContext = parentContext.getChildContext(this);\n    numErrors = solrMetricsContext.meter(\"errors\", getCategory().toString(), scope);\n    numServerErrors = solrMetricsContext.meter(\"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = solrMetricsContext.meter(\"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = solrMetricsContext.meter(\"timeouts\", getCategory().toString(), scope);\n    requests = solrMetricsContext.counter(\"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    solrMetricsContext.gauge(metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope);\n    totalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    this.solrMetricsContext = parentContext.getChildContext(this);\n    numErrors = solrMetricsContext.meter(\"errors\", getCategory().toString(), scope);\n    numServerErrors = solrMetricsContext.meter(\"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = solrMetricsContext.meter(\"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = solrMetricsContext.meter(\"timeouts\", getCategory().toString(), scope);\n    requests = solrMetricsContext.counter(\"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap(map ->\n        shardPurposes.forEach((k, v) -> map.putNoEx(k, v.getCount())));\n    solrMetricsContext.gauge(metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope);\n    distribRequestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope, \"distrib\");\n    localRequestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope, \"local\");\n    totalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope);\n    distribTotalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope, \"distrib\");\n    localTotalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope, \"local\");\n    solrMetricsContext.gauge(() -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    this.solrMetricsContext = parentContext.getChildContext(this);\n    numErrors = solrMetricsContext.meter(\"errors\", getCategory().toString(), scope);\n    numServerErrors = solrMetricsContext.meter(\"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = solrMetricsContext.meter(\"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = solrMetricsContext.meter(\"timeouts\", getCategory().toString(), scope);\n    requests = solrMetricsContext.counter(\"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    solrMetricsContext.gauge(metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope);\n    distribRequestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope, \"distrib\");\n    localRequestTimes = solrMetricsContext.timer(\"requestTimes\", getCategory().toString(), scope, \"local\");\n    totalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope);\n    distribTotalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope, \"distrib\");\n    localTotalTime = solrMetricsContext.counter(\"totalTime\", getCategory().toString(), scope, \"local\");\n    solrMetricsContext.gauge(() -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df3f594d6024cc3f64b0d0932c5efc80dfbe64bb":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275","68796f2b228600a74c540a78623c01a43894c464"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["68796f2b228600a74c540a78623c01a43894c464"],"68796f2b228600a74c540a78623c01a43894c464":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["df3f594d6024cc3f64b0d0932c5efc80dfbe64bb","68796f2b228600a74c540a78623c01a43894c464"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"df3f594d6024cc3f64b0d0932c5efc80dfbe64bb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"68796f2b228600a74c540a78623c01a43894c464":["df3f594d6024cc3f64b0d0932c5efc80dfbe64bb","233211c3dbff6f367588be5bbb4ac77f72eae193"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df3f594d6024cc3f64b0d0932c5efc80dfbe64bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}