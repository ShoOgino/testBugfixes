{"path":"src/java/org/apache/lucene/util/ArrayUtil#oversize(int,int).mjava","commits":[{"id":"38c26570a4fd6cf0856801c977a2bc9c28a5424c","date":1264074890,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/ArrayUtil#oversize(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an array size >= minTargetSize, generally\n   *  over-allocating exponentially to achieve amortized\n   *  linear-time cost as the array grows.\n   *\n   *  NOTE: this was originally borrowed from Python 2.4.2\n   *  listobject.c sources (attribution in LICENSE.txt), but\n   *  has now been substantially changed based on\n   *  discussions from java-dev thread with subject \"Dynamic\n   *  array reallocation algorithms\", started on Jan 12\n   *  2010.\n   *\n   * @param minTargetSize Minimum required value to be returned.\n   * @param bytesPerElement Bytes used by each element of\n   * the array.  See constants in {@link RamUsageEstimator}.\n   *\n   * @lucene.internal\n   */\n\n  public static int oversize(int minTargetSize, int bytesPerElement) {\n\n    if (minTargetSize < 0) {\n      // catch usage that accidentally overflows int\n      throw new IllegalArgumentException(\"invalid array size \" + minTargetSize);\n    }\n\n    if (minTargetSize == 0) {\n      // wait until at least one element is requested\n      return 0;\n    }\n\n    // asymptotic exponential growth by 1/8th, favors\n    // spending a bit more CPU to not tye up too much wasted\n    // RAM:\n    int extra = minTargetSize >> 3;\n\n    if (extra < 3) {\n      // for very small arrays, where constant overhead of\n      // realloc is presumably relatively high, we grow\n      // faster\n      extra = 3;\n    }\n\n    int newSize = minTargetSize + extra;\n\n    // add 7 to allow for worst case byte alignment addition below:\n    if (newSize+7 < 0) {\n      // int overflowed -- return max allowed array size\n      return Integer.MAX_VALUE;\n    }\n\n    if (Constants.JRE_IS_64BIT) {\n      // round up to 8 byte alignment in 64bit env\n      switch(bytesPerElement) {\n      case 4:\n        // round up to multiple of 2\n        return (newSize + 1) & 0x7ffffffe;\n      case 2:\n        // round up to multiple of 4\n        return (newSize + 3) & 0x7ffffffc;\n      case 1:\n        // round up to multiple of 8\n        return (newSize + 7) & 0x7ffffff8;\n      case 8:\n        // no rounding\n      default:\n        // odd (invalid?) size\n        return newSize;\n      }\n    } else {\n      // round up to 4 byte alignment in 64bit env\n      switch(bytesPerElement) {\n      case 2:\n        // round up to multiple of 2\n        return (newSize + 1) & 0x7ffffffe;\n      case 1:\n        // round up to multiple of 4\n        return (newSize + 3) & 0x7ffffffc;\n      case 4:\n      case 8:\n        // no rounding\n      default:\n        // odd (invalid?) size\n        return newSize;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#oversize(int,int).mjava","pathOld":"src/java/org/apache/lucene/util/ArrayUtil#oversize(int,int).mjava","sourceNew":"  /** Returns an array size >= minTargetSize, generally\n   *  over-allocating exponentially to achieve amortized\n   *  linear-time cost as the array grows.\n   *\n   *  NOTE: this was originally borrowed from Python 2.4.2\n   *  listobject.c sources (attribution in LICENSE.txt), but\n   *  has now been substantially changed based on\n   *  discussions from java-dev thread with subject \"Dynamic\n   *  array reallocation algorithms\", started on Jan 12\n   *  2010.\n   *\n   * @param minTargetSize Minimum required value to be returned.\n   * @param bytesPerElement Bytes used by each element of\n   * the array.  See constants in {@link RamUsageEstimator}.\n   *\n   * @lucene.internal\n   */\n\n  public static int oversize(int minTargetSize, int bytesPerElement) {\n\n    if (minTargetSize < 0) {\n      // catch usage that accidentally overflows int\n      throw new IllegalArgumentException(\"invalid array size \" + minTargetSize);\n    }\n\n    if (minTargetSize == 0) {\n      // wait until at least one element is requested\n      return 0;\n    }\n\n    // asymptotic exponential growth by 1/8th, favors\n    // spending a bit more CPU to not tye up too much wasted\n    // RAM:\n    int extra = minTargetSize >> 3;\n\n    if (extra < 3) {\n      // for very small arrays, where constant overhead of\n      // realloc is presumably relatively high, we grow\n      // faster\n      extra = 3;\n    }\n\n    int newSize = minTargetSize + extra;\n\n    // add 7 to allow for worst case byte alignment addition below:\n    if (newSize+7 < 0) {\n      // int overflowed -- return max allowed array size\n      return Integer.MAX_VALUE;\n    }\n\n    if (Constants.JRE_IS_64BIT) {\n      // round up to 8 byte alignment in 64bit env\n      switch(bytesPerElement) {\n      case 4:\n        // round up to multiple of 2\n        return (newSize + 1) & 0x7ffffffe;\n      case 2:\n        // round up to multiple of 4\n        return (newSize + 3) & 0x7ffffffc;\n      case 1:\n        // round up to multiple of 8\n        return (newSize + 7) & 0x7ffffff8;\n      case 8:\n        // no rounding\n      default:\n        // odd (invalid?) size\n        return newSize;\n      }\n    } else {\n      // round up to 4 byte alignment in 64bit env\n      switch(bytesPerElement) {\n      case 2:\n        // round up to multiple of 2\n        return (newSize + 1) & 0x7ffffffe;\n      case 1:\n        // round up to multiple of 4\n        return (newSize + 3) & 0x7ffffffc;\n      case 4:\n      case 8:\n        // no rounding\n      default:\n        // odd (invalid?) size\n        return newSize;\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns an array size >= minTargetSize, generally\n   *  over-allocating exponentially to achieve amortized\n   *  linear-time cost as the array grows.\n   *\n   *  NOTE: this was originally borrowed from Python 2.4.2\n   *  listobject.c sources (attribution in LICENSE.txt), but\n   *  has now been substantially changed based on\n   *  discussions from java-dev thread with subject \"Dynamic\n   *  array reallocation algorithms\", started on Jan 12\n   *  2010.\n   *\n   * @param minTargetSize Minimum required value to be returned.\n   * @param bytesPerElement Bytes used by each element of\n   * the array.  See constants in {@link RamUsageEstimator}.\n   *\n   * @lucene.internal\n   */\n\n  public static int oversize(int minTargetSize, int bytesPerElement) {\n\n    if (minTargetSize < 0) {\n      // catch usage that accidentally overflows int\n      throw new IllegalArgumentException(\"invalid array size \" + minTargetSize);\n    }\n\n    if (minTargetSize == 0) {\n      // wait until at least one element is requested\n      return 0;\n    }\n\n    // asymptotic exponential growth by 1/8th, favors\n    // spending a bit more CPU to not tye up too much wasted\n    // RAM:\n    int extra = minTargetSize >> 3;\n\n    if (extra < 3) {\n      // for very small arrays, where constant overhead of\n      // realloc is presumably relatively high, we grow\n      // faster\n      extra = 3;\n    }\n\n    int newSize = minTargetSize + extra;\n\n    // add 7 to allow for worst case byte alignment addition below:\n    if (newSize+7 < 0) {\n      // int overflowed -- return max allowed array size\n      return Integer.MAX_VALUE;\n    }\n\n    if (Constants.JRE_IS_64BIT) {\n      // round up to 8 byte alignment in 64bit env\n      switch(bytesPerElement) {\n      case 4:\n        // round up to multiple of 2\n        return (newSize + 1) & 0x7ffffffe;\n      case 2:\n        // round up to multiple of 4\n        return (newSize + 3) & 0x7ffffffc;\n      case 1:\n        // round up to multiple of 8\n        return (newSize + 7) & 0x7ffffff8;\n      case 8:\n        // no rounding\n      default:\n        // odd (invalid?) size\n        return newSize;\n      }\n    } else {\n      // round up to 4 byte alignment in 64bit env\n      switch(bytesPerElement) {\n      case 2:\n        // round up to multiple of 2\n        return (newSize + 1) & 0x7ffffffe;\n      case 1:\n        // round up to multiple of 4\n        return (newSize + 3) & 0x7ffffffc;\n      case 4:\n      case 8:\n        // no rounding\n      default:\n        // odd (invalid?) size\n        return newSize;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}