{"path":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#orient(double,double,double,double,double,double).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#orient(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#orient(double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,\n   * negative value if clockwise, zero if collinear.\n   */\n  // see the \"Orient2D\" method described here:\n  // http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf\n  // https://www.cs.cmu.edu/~quake/robust.html\n  // Note that this one does not yet have the floating point tricks to be exact!\n  public static int orient(double ax, double ay, double bx, double by, double cx, double cy) {\n    double v1 = (bx - ax) * (cy - ay);\n    double v2 = (cx - ax) * (by - ay);\n    if (v1 > v2) {\n      return 1;\n    } else if (v1 < v2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,\n   * negative value if clockwise, zero if collinear.\n   */\n  // see the \"Orient2D\" method described here:\n  // http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf\n  // https://www.cs.cmu.edu/~quake/robust.html\n  // Note that this one does not yet have the floating point tricks to be exact!\n  private static int orient(double ax, double ay, double bx, double by, double cx, double cy) {\n    double v1 = (bx - ax) * (cy - ay);\n    double v2 = (cx - ax) * (by - ay);\n    if (v1 > v2) {\n      return 1;\n    } else if (v1 < v2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#orient(double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,\n   * negative value if clockwise, zero if collinear.\n   */\n  // see the \"Orient2D\" method described here:\n  // http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf\n  // https://www.cs.cmu.edu/~quake/robust.html\n  // Note that this one does not yet have the floating point tricks to be exact!\n  public static int orient(double ax, double ay, double bx, double by, double cx, double cy) {\n    double v1 = (bx - ax) * (cy - ay);\n    double v2 = (cx - ax) * (by - ay);\n    if (v1 > v2) {\n      return 1;\n    } else if (v1 < v2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoUtils#orient(double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,\n   * negative value if clockwise, zero if collinear.\n   */\n  // see the \"Orient2D\" method described here:\n  // http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf\n  // https://www.cs.cmu.edu/~quake/robust.html\n  // Note that this one does not yet have the floating point tricks to be exact!\n  public static int orient(double ax, double ay, double bx, double by, double cx, double cy) {\n    double v1 = (bx - ax) * (cy - ay);\n    double v2 = (cx - ax) * (by - ay);\n    if (v1 > v2) {\n      return 1;\n    } else if (v1 < v2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}