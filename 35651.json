{"path":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","commits":[{"id":"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03","date":1237412151,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDump(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDump(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDump(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb6255bc49ccd64debd0b43ca8d2f835df0faa07","date":1262510560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","pathOld":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","sourceNew":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.getNextSize(encodedLen)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","sourceOld":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDump(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDump(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDump(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c26570a4fd6cf0856801c977a2bc9c28a5424c","date":1264074890,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","pathOld":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","sourceNew":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.oversize(encodedLen, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","sourceOld":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.getNextSize(encodedLen)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","pathOld":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","sourceNew":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.oversize(encodedLen, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","sourceOld":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1                                                                   \n\n      for (int byteNum = 0; byteNum < numBytes; ++byteNum) {\n        binary[byteNum] = (byte) random.nextInt(0x100);\n      }\n\n      int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n          numBytes);\n      if (encoded.length < encodedLen)\n        encoded = new char[ArrayUtil.oversize(encodedLen, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(binary, 0, numBytes, encoded, 0,\n          encodedLen);\n\n      int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n          encodedLen);\n      IndexableBinaryStringTools.decode(encoded, 0, encodedLen, decoded, 0,\n          decodedLen);\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Round trip decode/decode returned different results:\"\n          + System.getProperty(\"line.separator\") + \"  original: \"\n          + binaryDump(binary, numBytes) + System.getProperty(\"line.separator\")\n          + \"encodedBuf: \" + charArrayDump(encoded, encodedLen)\n          + System.getProperty(\"line.separator\") + \"decodedBuf: \"\n          + binaryDump(decoded, decodedLen), binaryDump(binary, numBytes),\n          binaryDump(decoded, decodedLen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["14f9435cf56ea1dc1185ffc60bcc94728ff9bf03"],"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"]},"commit2Childs":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14f9435cf56ea1dc1185ffc60bcc94728ff9bf03"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}