{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/NodesSysPropsCacher#fetchRemoteProps(String,int).mjava","commits":[{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/NodesSysPropsCacher#fetchRemoteProps(String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/NodesSysPropsCacher#fetchRemoteProps(String,int).mjava","sourceNew":"  private void fetchRemoteProps(String node, int fetchRound) {\n    for (int i = 0; i < NUM_RETRY; i++) {\n      if (isClosed && fetchRound != fetchCounting.get())\n        return;\n\n      try {\n        Map<String, Object> props = nodeStateProvider.getNodeValues(node, tags);\n        cache.put(node, Collections.unmodifiableMap(props));\n        break;\n      } catch (Exception e) {\n        try {\n          // 1, 4, 9\n          int backOffTime = 1000 * (i+1);\n          backOffTime = backOffTime * backOffTime;\n          backOffTime = Math.min(10000, backOffTime);\n          Thread.sleep(backOffTime);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n          break;\n        }\n        log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n      }\n    }\n  }\n\n","sourceOld":"  private void fetchRemoteProps(String node, int fetchRound) {\n    for (int i = 0; i < NUM_RETRY; i++) {\n      if (isClosed && fetchRound != fetchCounting.get())\n        return;\n\n      try {\n        Map<String, Object> props = nodeStateProvider.getNodeValues(node, tags);\n        cache.put(node, Collections.unmodifiableMap(props));\n        break;\n      } catch (Exception e) {\n        try {\n          // 1, 4, 9\n          int backOffTime = 1000 * (i+1);\n          backOffTime = backOffTime * backOffTime;\n          backOffTime = Math.min(10000, backOffTime);\n          Thread.sleep(backOffTime);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n          break;\n        }\n        log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/NodesSysPropsCacher#fetchRemoteProps(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/NodesSysPropsCacher#fetchRemoteProps(String,int).mjava","sourceNew":"  private void fetchRemoteProps(String node, int fetchRound) {\n    for (int i = 0; i < NUM_RETRY; i++) {\n      if (isClosed && fetchRound != fetchCounting.get())\n        return;\n\n      try {\n        Map<String, Object> props = nodeStateProvider.getNodeValues(node, tags);\n        cache.put(node, Collections.unmodifiableMap(props));\n        break;\n      } catch (Exception e) {\n        try {\n          // 1, 4, 9\n          int backOffTime = 1000 * (i+1);\n          backOffTime = backOffTime * backOffTime;\n          backOffTime = Math.min(10000, backOffTime);\n          Thread.sleep(backOffTime);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e); // logOk\n          break;\n        }\n        log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e); // logOk\n      }\n    }\n  }\n\n","sourceOld":"  private void fetchRemoteProps(String node, int fetchRound) {\n    for (int i = 0; i < NUM_RETRY; i++) {\n      if (isClosed && fetchRound != fetchCounting.get())\n        return;\n\n      try {\n        Map<String, Object> props = nodeStateProvider.getNodeValues(node, tags);\n        cache.put(node, Collections.unmodifiableMap(props));\n        break;\n      } catch (Exception e) {\n        try {\n          // 1, 4, 9\n          int backOffTime = 1000 * (i+1);\n          backOffTime = backOffTime * backOffTime;\n          backOffTime = Math.min(10000, backOffTime);\n          Thread.sleep(backOffTime);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n          break;\n        }\n        log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/NodesSysPropsCacher#fetchRemoteProps(String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/NodesSysPropsCacher#fetchRemoteProps(String,int).mjava","sourceNew":"  private void fetchRemoteProps(String node, int fetchRound) {\n    for (int i = 0; i < NUM_RETRY; i++) {\n      if (isClosed && fetchRound != fetchCounting.get())\n        return;\n\n      try {\n        Map<String, Object> props = nodeStateProvider.getNodeValues(node, tags);\n        cache.put(node, Collections.unmodifiableMap(props));\n        break;\n      } catch (Exception e) {\n        try {\n          // 1, 4, 9\n          int backOffTime = 1000 * (i+1);\n          backOffTime = backOffTime * backOffTime;\n          backOffTime = Math.min(10000, backOffTime);\n          Thread.sleep(backOffTime);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e); // nowarn\n          break;\n        }\n        log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e); // nowarn\n      }\n    }\n  }\n\n","sourceOld":"  private void fetchRemoteProps(String node, int fetchRound) {\n    for (int i = 0; i < NUM_RETRY; i++) {\n      if (isClosed && fetchRound != fetchCounting.get())\n        return;\n\n      try {\n        Map<String, Object> props = nodeStateProvider.getNodeValues(node, tags);\n        cache.put(node, Collections.unmodifiableMap(props));\n        break;\n      } catch (Exception e) {\n        try {\n          // 1, 4, 9\n          int backOffTime = 1000 * (i+1);\n          backOffTime = backOffTime * backOffTime;\n          backOffTime = Math.min(10000, backOffTime);\n          Thread.sleep(backOffTime);\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n          log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e); // logOk\n          break;\n        }\n        log.info(\"Exception on caching node:{} system.properties:{}, retry {}/{}\", node, tags, i+1, NUM_RETRY, e); // logOk\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["833432c363468a5df50f87446a68015404b1fbcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2d19164145b2a65acf62a657c75f4a249b649c0":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["833432c363468a5df50f87446a68015404b1fbcf"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}