{"path":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","commits":[{"id":"cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d","date":1395095209,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","pathOld":"/dev/null","sourceNew":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), \n          context, runner.getLocalPort(), getSolrConfigFile(), getSchemaFile(), \n          false, getExtraServlets(), sslConfig, getExtraRequestFilters());\n      newRunner.setDataDir(getDataDir(testDir + \"/shard\" + i + \"/data\"));\n      newRunner.start(true);\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c66158bb16e902a21272772f1b911f04b1a55abb","date":1424959524,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","sourceNew":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig)\n          .build();\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), getSolrConfigFile(), getSchemaFile(), config);\n      newRunner.setDataDir(getDataDir(testDir + \"/shard\" + i + \"/data\"));\n      newRunner.start(true);\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","sourceOld":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), \n          context, runner.getLocalPort(), getSolrConfigFile(), getSchemaFile(), \n          false, getExtraServlets(), sslConfig, getExtraRequestFilters());\n      newRunner.setDataDir(getDataDir(testDir + \"/shard\" + i + \"/data\"));\n      newRunner.start(true);\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bc766d645fa848f86c381c7f6acf2c881c99399","date":1425549246,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","sourceNew":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig)\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","sourceOld":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig)\n          .build();\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), getSolrConfigFile(), getSchemaFile(), config);\n      newRunner.setDataDir(getDataDir(testDir + \"/shard\" + i + \"/data\"));\n      newRunner.start(true);\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","sourceNew":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig)\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","sourceOld":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), \n          context, runner.getLocalPort(), getSolrConfigFile(), getSchemaFile(), \n          false, getExtraServlets(), sslConfig, getExtraRequestFilters());\n      newRunner.setDataDir(getDataDir(testDir + \"/shard\" + i + \"/data\"));\n      newRunner.start(true);\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","sourceNew":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setHttpClientBuilder(sslConfig.getHttpClientBuilder());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig)\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","sourceOld":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setConfigurer(sslConfig.getHttpClientConfigurer());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig)\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","sourceNew":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig)\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","sourceOld":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setHttpClientBuilder(sslConfig.getHttpClientBuilder());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig)\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","sourceNew":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig)\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","sourceOld":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setHttpClientBuilder(sslConfig.getHttpClientBuilder());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig)\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","sourceNew":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig.buildServerSSLConfig())\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","sourceOld":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig)\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e856e5ac973044540959acff90fa900278d2692","date":1585275350,"type":3,"author":"Andy Throgmorton","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SSLMigrationTest#testMigrateSSL(SSLTestConfig).mjava","sourceNew":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setSocketFactoryRegistryProvider(sslConfig.buildClientSocketFactoryRegistryProvider());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig.buildServerSSLConfig())\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","sourceOld":"  public void testMigrateSSL(SSLTestConfig sslConfig) throws Exception {\n    String urlScheme = sslConfig.isSSLMode() ? \"https\" : \"http\";\n    setUrlScheme(urlScheme);\n    \n    for(JettySolrRunner runner : jettys) {\n      runner.stop();\n    }\n    \n    HttpClientUtil.setSchemaRegistryProvider(sslConfig.buildClientSchemaRegistryProvider());\n    for(int i = 0; i < this.jettys.size(); i++) {\n      JettySolrRunner runner = jettys.get(i);\n      JettyConfig config = JettyConfig.builder()\n          .setContext(context)\n          .setPort(runner.getLocalPort())\n          .stopAtShutdown(false)\n          .withServlets(getExtraServlets())\n          .withFilters(getExtraRequestFilters())\n          .withSSLConfig(sslConfig.buildServerSSLConfig())\n          .build();\n\n      Properties props = new Properties();\n      if (getSolrConfigFile() != null)\n        props.setProperty(\"solrconfig\", getSolrConfigFile());\n      if (getSchemaFile() != null)\n        props.setProperty(\"schema\", getSchemaFile());\n      props.setProperty(\"solr.data.dir\", getDataDir(testDir + \"/shard\" + i + \"/data\"));\n\n      JettySolrRunner newRunner = new JettySolrRunner(runner.getSolrHome(), props, config);\n      newRunner.start();\n      jettys.set(i, newRunner);\n    }\n    \n    assertReplicaInformation(urlScheme);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d","9bc766d645fa848f86c381c7f6acf2c881c99399"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"859081acf00749f5dd462772c571d611d4a4d2db":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"9e856e5ac973044540959acff90fa900278d2692":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bc766d645fa848f86c381c7f6acf2c881c99399":["c66158bb16e902a21272772f1b911f04b1a55abb"],"cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e856e5ac973044540959acff90fa900278d2692"],"c66158bb16e902a21272772f1b911f04b1a55abb":["cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["859081acf00749f5dd462772c571d611d4a4d2db","e58bb31b4af6b8eeb1539849575c59df745bc6e6"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["9e856e5ac973044540959acff90fa900278d2692"],"859081acf00749f5dd462772c571d611d4a4d2db":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"9e856e5ac973044540959acff90fa900278d2692":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["1a77e5e21cbd575a8240b0e3926164f15295f4e8","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","859081acf00749f5dd462772c571d611d4a4d2db"],"cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c66158bb16e902a21272772f1b911f04b1a55abb"],"c66158bb16e902a21272772f1b911f04b1a55abb":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}