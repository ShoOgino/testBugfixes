{"path":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#refreshIfNeeded(IndexSearcher).mjava","commits":[{"id":"6e81b0b3c14cf61c8ec366450276ab80654f7d0d","date":1329233774,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#refreshIfNeeded(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected IndexSearcher refreshIfNeeded(IndexSearcher referenceToRefresh) throws IOException {\n    final IndexReader r = referenceToRefresh.getIndexReader();\n    final IndexReader newReader = (r instanceof DirectoryReader) ?\n      DirectoryReader.openIfChanged((DirectoryReader) r) : null;\n    if (newReader == null) {\n      return null;\n    } else {\n      return searcherFactory.newSearcher(newReader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c380c22ff3b659b2d7412a3335f853d354d17568","date":1329505731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#refreshIfNeeded(IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#refreshIfNeeded(IndexSearcher).mjava","sourceNew":"  @Override\n  protected IndexSearcher refreshIfNeeded(IndexSearcher referenceToRefresh) throws IOException {\n    final IndexReader r = referenceToRefresh.getIndexReader();\n    assert r instanceof DirectoryReader: \"searcher's IndexReader should be a DirectoryReader, but got \" + r;\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      return getSearcher(searcherFactory, newReader);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected IndexSearcher refreshIfNeeded(IndexSearcher referenceToRefresh) throws IOException {\n    final IndexReader r = referenceToRefresh.getIndexReader();\n    final IndexReader newReader = (r instanceof DirectoryReader) ?\n      DirectoryReader.openIfChanged((DirectoryReader) r) : null;\n    if (newReader == null) {\n      return null;\n    } else {\n      return searcherFactory.newSearcher(newReader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0dfae671422e7453a9199aa320f91427cd80d60","date":1427895926,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#refreshIfNeeded(IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#refreshIfNeeded(IndexSearcher).mjava","sourceNew":"  @Override\n  protected IndexSearcher refreshIfNeeded(IndexSearcher referenceToRefresh) throws IOException {\n    final IndexReader r = referenceToRefresh.getIndexReader();\n    assert r instanceof DirectoryReader: \"searcher's IndexReader should be a DirectoryReader, but got \" + r;\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      return getSearcher(searcherFactory, newReader, r);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected IndexSearcher refreshIfNeeded(IndexSearcher referenceToRefresh) throws IOException {\n    final IndexReader r = referenceToRefresh.getIndexReader();\n    assert r instanceof DirectoryReader: \"searcher's IndexReader should be a DirectoryReader, but got \" + r;\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      return getSearcher(searcherFactory, newReader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#refreshIfNeeded(IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#refreshIfNeeded(IndexSearcher).mjava","sourceNew":"  @Override\n  protected IndexSearcher refreshIfNeeded(IndexSearcher referenceToRefresh) throws IOException {\n    final IndexReader r = referenceToRefresh.getIndexReader();\n    assert r instanceof DirectoryReader: \"searcher's IndexReader should be a DirectoryReader, but got \" + r;\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      return getSearcher(searcherFactory, newReader, r);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected IndexSearcher refreshIfNeeded(IndexSearcher referenceToRefresh) throws IOException {\n    final IndexReader r = referenceToRefresh.getIndexReader();\n    assert r instanceof DirectoryReader: \"searcher's IndexReader should be a DirectoryReader, but got \" + r;\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      return getSearcher(searcherFactory, newReader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0dfae671422e7453a9199aa320f91427cd80d60":["c380c22ff3b659b2d7412a3335f853d354d17568"],"c380c22ff3b659b2d7412a3335f853d354d17568":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e0dfae671422e7453a9199aa320f91427cd80d60"],"0c924d4069ef5a5bc479a493befe0121aada6896":["c380c22ff3b659b2d7412a3335f853d354d17568","e0dfae671422e7453a9199aa320f91427cd80d60"]},"commit2Childs":{"e0dfae671422e7453a9199aa320f91427cd80d60":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"c380c22ff3b659b2d7412a3335f853d354d17568":["e0dfae671422e7453a9199aa320f91427cd80d60","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["c380c22ff3b659b2d7412a3335f853d354d17568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}