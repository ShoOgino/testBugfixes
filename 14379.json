{"path":"modules/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","commits":[{"id":"9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8","date":1333047008,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/docvalues/StringIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    final BytesRef spare = new BytesRef();\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.binarySearchLookup(new BytesRef(lowerVal), spare);\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.binarySearchLookup(new BytesRef(upperVal), spare);\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    final BytesRef spare = new BytesRef();\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.binarySearchLookup(new BytesRef(lowerVal), spare);\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.binarySearchLookup(new BytesRef(upperVal), spare);\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    final BytesRef spare = new BytesRef();\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.binarySearchLookup(new BytesRef(lowerVal), spare);\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.binarySearchLookup(new BytesRef(upperVal), spare);\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    final BytesRef spare = new BytesRef();\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.binarySearchLookup(new BytesRef(lowerVal), spare);\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.binarySearchLookup(new BytesRef(upperVal), spare);\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(reader, this) {\n      @Override\n      public boolean matchesValue(int doc) {\n        int ord = termsIndex.getOrd(doc);\n        return ord >= ll && ord <= uu;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8"],"9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}