{"path":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","commits":[{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","sourceNew":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      int pos = pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      \n      final TermState termState = termsEnum.termState();\n      assert termState != null;\n      if (pos < 0) {\n        pos = (-pos)-1;\n        array.termState[pos].register(termState, readerContext.ord, termsEnum.docFreq());\n      } else {\n        array.termState[pos] = new PerReaderTermState(topReaderContext, termState, readerContext.ord, termsEnum.docFreq());\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","sourceNew":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      int pos = pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      \n      final TermState termState = termsEnum.termState();\n      assert termState != null;\n      if (pos < 0) {\n        pos = (-pos)-1;\n        array.termState[pos].register(termState, readerContext.ord, termsEnum.docFreq());\n      } else {\n        array.termState[pos] = new PerReaderTermState(topReaderContext, termState, readerContext.ord, termsEnum.docFreq());\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","sourceNew":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      int pos = pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      \n      final TermState termState = termsEnum.termState();\n      assert termState != null;\n      if (pos < 0) {\n        pos = (-pos)-1;\n        array.termState[pos].register(termState, readerContext.ord, termsEnum.docFreq());\n      } else {\n        array.termState[pos] = new PerReaderTermState(topReaderContext, termState, readerContext.ord, termsEnum.docFreq());\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","sourceNew":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      int pos = pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      \n      final TermState termState = termsEnum.termState();\n      assert termState != null;\n      if (pos < 0) {\n        pos = (-pos)-1;\n        array.termState[pos].register(termState, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n      } else {\n        array.termState[pos] = new TermContext(topReaderContext, termState, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      int pos = pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      \n      final TermState termState = termsEnum.termState();\n      assert termState != null;\n      if (pos < 0) {\n        pos = (-pos)-1;\n        array.termState[pos].register(termState, readerContext.ord, termsEnum.docFreq());\n      } else {\n        array.termState[pos] = new PerReaderTermState(topReaderContext, termState, readerContext.ord, termsEnum.docFreq());\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","sourceNew":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      int pos = pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      \n      final TermState termState = termsEnum.termState();\n      assert termState != null;\n      if (pos < 0) {\n        pos = (-pos)-1;\n        array.termState[pos].register(termState, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n      } else {\n        array.termState[pos] = new TermContext(topReaderContext, termState, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      int pos = pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      \n      final TermState termState = termsEnum.termState();\n      assert termState != null;\n      if (pos < 0) {\n        pos = (-pos)-1;\n        array.termState[pos].register(termState, readerContext.ord, termsEnum.docFreq());\n      } else {\n        array.termState[pos] = new PerReaderTermState(topReaderContext, termState, readerContext.ord, termsEnum.docFreq());\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","sourceNew":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      int pos = pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      \n      final TermState termState = termsEnum.termState();\n      assert termState != null;\n      if (pos < 0) {\n        pos = (-pos)-1;\n        array.termState[pos].register(termState, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n      } else {\n        array.termState[pos] = new TermContext(topReaderContext, termState, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      int pos = pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      \n      final TermState termState = termsEnum.termState();\n      assert termState != null;\n      if (pos < 0) {\n        pos = (-pos)-1;\n        array.termState[pos].register(termState, readerContext.ord, termsEnum.docFreq());\n      } else {\n        array.termState[pos] = new PerReaderTermState(topReaderContext, termState, readerContext.ord, termsEnum.docFreq());\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef).mjava","sourceNew":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      int pos = pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      \n      final TermState termState = termsEnum.termState();\n      assert termState != null;\n      if (pos < 0) {\n        pos = (-pos)-1;\n        array.termState[pos].register(termState, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n      } else {\n        array.termState[pos] = new TermContext(topReaderContext, termState, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean collect(BytesRef bytes) throws IOException {\n      int pos = pendingTerms.add(bytes);\n      docVisitCount += termsEnum.docFreq();\n      if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n        hasCutOff = true;\n        return false;\n      }\n      \n      final TermState termState = termsEnum.termState();\n      assert termState != null;\n      if (pos < 0) {\n        pos = (-pos)-1;\n        array.termState[pos].register(termState, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n      } else {\n        array.termState[pos] = new TermContext(topReaderContext, termState, readerContext.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["fa1a999d6674423e5c4ac858b410283f6fe03f20","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["fa1a999d6674423e5c4ac858b410283f6fe03f20","0f3cee3d20b0c786e6fca20539454262e29edcab"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","744486748bc5bee772100e49230e5bca39bac99a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["744486748bc5bee772100e49230e5bca39bac99a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","744486748bc5bee772100e49230e5bca39bac99a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"744486748bc5bee772100e49230e5bca39bac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","744486748bc5bee772100e49230e5bca39bac99a"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","fa1a999d6674423e5c4ac858b410283f6fe03f20","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}