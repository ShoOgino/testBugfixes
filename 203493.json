{"path":"src/test/org/apache/lucene/index/TestParallelReader#testIsCurrent().mjava","commits":[{"id":"4e4962d33c7b8f7092842cb4760383123f35092b","date":1185928991,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsCurrent().mjava","pathOld":"/dev/null","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir1();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    \n    assertTrue(pr.isCurrent());\n    IndexReader modifier = IndexReader.open(dir1);\n    modifier.setNorm(0, \"f1\", 100);\n    modifier.close();\n    \n    // one of the two IndexReaders which ParallelReader is using\n    // is not current anymore\n    assertFalse(pr.isCurrent());\n    \n    modifier = IndexReader.open(dir2);\n    modifier.setNorm(0, \"f3\", 100);\n    modifier.close();\n    \n    // now both are not current anymore\n    assertFalse(pr.isCurrent());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"512366c273bec3211f7d36ef75e58e3d32a06e26","date":1232894323,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    \n    assertTrue(pr.isCurrent());\n    IndexReader modifier = IndexReader.open(dir1);\n    modifier.setNorm(0, \"f1\", 100);\n    modifier.close();\n    \n    // one of the two IndexReaders which ParallelReader is using\n    // is not current anymore\n    assertFalse(pr.isCurrent());\n    \n    modifier = IndexReader.open(dir2);\n    modifier.setNorm(0, \"f3\", 100);\n    modifier.close();\n    \n    // now both are not current anymore\n    assertFalse(pr.isCurrent());\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir1();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    \n    assertTrue(pr.isCurrent());\n    IndexReader modifier = IndexReader.open(dir1);\n    modifier.setNorm(0, \"f1\", 100);\n    modifier.close();\n    \n    // one of the two IndexReaders which ParallelReader is using\n    // is not current anymore\n    assertFalse(pr.isCurrent());\n    \n    modifier = IndexReader.open(dir2);\n    modifier.setNorm(0, \"f3\", 100);\n    modifier.close();\n    \n    // now both are not current anymore\n    assertFalse(pr.isCurrent());\n  }\n\n","bugFix":["4e4962d33c7b8f7092842cb4760383123f35092b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    \n    assertTrue(pr.isCurrent());\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(0, \"f1\", 100);\n    modifier.close();\n    \n    // one of the two IndexReaders which ParallelReader is using\n    // is not current anymore\n    assertFalse(pr.isCurrent());\n    \n    modifier = IndexReader.open(dir2, false);\n    modifier.setNorm(0, \"f3\", 100);\n    modifier.close();\n    \n    // now both are not current anymore\n    assertFalse(pr.isCurrent());\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    \n    assertTrue(pr.isCurrent());\n    IndexReader modifier = IndexReader.open(dir1);\n    modifier.setNorm(0, \"f1\", 100);\n    modifier.close();\n    \n    // one of the two IndexReaders which ParallelReader is using\n    // is not current anymore\n    assertFalse(pr.isCurrent());\n    \n    modifier = IndexReader.open(dir2);\n    modifier.setNorm(0, \"f3\", 100);\n    modifier.close();\n    \n    // now both are not current anymore\n    assertFalse(pr.isCurrent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    \n    assertTrue(pr.isCurrent());\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(0, \"f1\", 100);\n    modifier.close();\n    \n    // one of the two IndexReaders which ParallelReader is using\n    // is not current anymore\n    assertFalse(pr.isCurrent());\n    \n    modifier = IndexReader.open(dir2, false);\n    modifier.setNorm(0, \"f3\", 100);\n    modifier.close();\n    \n    // now both are not current anymore\n    assertFalse(pr.isCurrent());\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1));\n    pr.add(IndexReader.open(dir2));\n    \n    assertTrue(pr.isCurrent());\n    IndexReader modifier = IndexReader.open(dir1);\n    modifier.setNorm(0, \"f1\", 100);\n    modifier.close();\n    \n    // one of the two IndexReaders which ParallelReader is using\n    // is not current anymore\n    assertFalse(pr.isCurrent());\n    \n    modifier = IndexReader.open(dir2);\n    modifier.setNorm(0, \"f3\", 100);\n    modifier.close();\n    \n    // now both are not current anymore\n    assertFalse(pr.isCurrent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsCurrent().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsCurrent().mjava","sourceNew":"  public void testIsCurrent() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    \n    assertTrue(pr.isCurrent());\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(0, \"f1\", 100);\n    modifier.close();\n    \n    // one of the two IndexReaders which ParallelReader is using\n    // is not current anymore\n    assertFalse(pr.isCurrent());\n    \n    modifier = IndexReader.open(dir2, false);\n    modifier.setNorm(0, \"f3\", 100);\n    modifier.close();\n    \n    // now both are not current anymore\n    assertFalse(pr.isCurrent());\n  }\n\n","sourceOld":"  public void testIsCurrent() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    \n    assertTrue(pr.isCurrent());\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(0, \"f1\", 100);\n    modifier.close();\n    \n    // one of the two IndexReaders which ParallelReader is using\n    // is not current anymore\n    assertFalse(pr.isCurrent());\n    \n    modifier = IndexReader.open(dir2, false);\n    modifier.setNorm(0, \"f3\", 100);\n    modifier.close();\n    \n    // now both are not current anymore\n    assertFalse(pr.isCurrent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"512366c273bec3211f7d36ef75e58e3d32a06e26":["4e4962d33c7b8f7092842cb4760383123f35092b"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["512366c273bec3211f7d36ef75e58e3d32a06e26","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"4e4962d33c7b8f7092842cb4760383123f35092b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"512366c273bec3211f7d36ef75e58e3d32a06e26":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e4962d33c7b8f7092842cb4760383123f35092b"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4e4962d33c7b8f7092842cb4760383123f35092b":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}