{"path":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, 1000);\n    return peerSync.sync();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508","4d3e8520fd031bab31fd0e4d480e55958bc45efe","bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, 1000);\n    return peerSync.sync();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, 1000);\n    return peerSync.sync();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221ff19d62d5ff429ffecf8e7f3e01ff93754854","date":1329974551,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, 1000);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, 1000);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce9115008b2600dda16a6765e06b6b380458c02f","date":1343435746,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // TODO should there be a state filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // TODO should there be a state filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // TODO should there be a state filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // should\n    // there\n    // be a\n    // state\n    // filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.getStr(ZkStateReader.NODE_NAME_PROP),\n            props.getStr(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // TODO should there be a state filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.get(ZkStateReader.NODE_NAME_PROP),\n            props.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // TODO should there be a state filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.getStr(ZkStateReader.NODE_NAME_PROP),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.getStr(ZkStateReader.NODE_NAME_PROP),\n            props.getStr(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE); // TODO:\n    // TODO should there be a state filter?\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      // if we see a leader, must be stale state, and this is the guy that went down\n      if (!node.getNodeProps().keySet().contains(ZkStateReader.LEADER_PROP)) {\n        syncWith.add(node.getCoreUrl());\n      }\n    }\n    \n \n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep);\n    return peerSync.sync();\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","fa64435b5902ce266c23755a4a00691a3285dab8","221ff19d62d5ff429ffecf8e7f3e01ff93754854","ce9115008b2600dda16a6765e06b6b380458c02f"],"bugIntro":["1525b4dfbc0d413b8d7247da232009778e624836"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1525b4dfbc0d413b8d7247da232009778e624836","date":1351101135,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.getStr(ZkStateReader.NODE_NAME_PROP),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true, true);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.getStr(ZkStateReader.NODE_NAME_PROP),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true);\n    return peerSync.sync();\n  }\n\n","bugFix":["a6378064655e76cd7b908b1cab4ce425b384b508"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.getStr(ZkStateReader.NODE_NAME_PROP),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true, true);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.getStr(ZkStateReader.NODE_NAME_PROP),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            zkController.getCoreNodeName(core.getCoreDescriptor()),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true, true);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            props.getStr(ZkStateReader.NODE_NAME_PROP),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true, true);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName(),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true, true);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            zkController.getCoreNodeName(core.getCoreDescriptor()),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true, true);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName(),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true, true);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            zkController.getCoreNodeName(core.getCoreDescriptor()),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true, true);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26cb11ce089e71fb909641e7030b53c7d9e3fff3","date":1390348343,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncWithReplicas(ZkController,SolrCore,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId, boolean peerSyncOnlyWithActive) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName(),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true, true, peerSyncOnlyWithActive);\n    return peerSync.sync();\n  }\n\n","sourceOld":"  private boolean syncWithReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps props, String collection, String shardId) {\n    List<ZkCoreNodeProps> nodes = zkController.getZkStateReader()\n        .getReplicaProps(collection, shardId,core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName(),\n            props.getStr(ZkStateReader.CORE_NAME_PROP));\n    \n    if (nodes == null) {\n      // I have no replicas\n      return true;\n    }\n    \n    List<String> syncWith = new ArrayList<String>();\n    for (ZkCoreNodeProps node : nodes) {\n      syncWith.add(node.getCoreUrl());\n    }\n    \n    // if we can't reach a replica for sync, we still consider the overall sync a success\n    // TODO: as an assurance, we should still try and tell the sync nodes that we couldn't reach\n    // to recover once more?\n    PeerSync peerSync = new PeerSync(core, syncWith, core.getUpdateHandler().getUpdateLog().numRecordsToKeep, true, true);\n    return peerSync.sync();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"fa64435b5902ce266c23755a4a00691a3285dab8":["ce9115008b2600dda16a6765e06b6b380458c02f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["fa64435b5902ce266c23755a4a00691a3285dab8"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ce9115008b2600dda16a6765e06b6b380458c02f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"ce9115008b2600dda16a6765e06b6b380458c02f":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ce9115008b2600dda16a6765e06b6b380458c02f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a6378064655e76cd7b908b1cab4ce425b384b508","1525b4dfbc0d413b8d7247da232009778e624836"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["1525b4dfbc0d413b8d7247da232009778e624836"],"1525b4dfbc0d413b8d7247da232009778e624836":["a6378064655e76cd7b908b1cab4ce425b384b508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"]},"commit2Childs":{"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["a6378064655e76cd7b908b1cab4ce425b384b508"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a6378064655e76cd7b908b1cab4ce425b384b508":["f2126b84bd093fa3d921582a109a0ee578c28126","1525b4dfbc0d413b8d7247da232009778e624836"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"ce9115008b2600dda16a6765e06b6b380458c02f":["fa64435b5902ce266c23755a4a00691a3285dab8","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","ce9115008b2600dda16a6765e06b6b380458c02f"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"1525b4dfbc0d413b8d7247da232009778e624836":["f2126b84bd093fa3d921582a109a0ee578c28126","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}