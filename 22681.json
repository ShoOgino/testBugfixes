{"path":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads.RunThread#run().mjava","commits":[{"id":"66f3dadb253a44f4cccc81c8a21b685b18b201fb","date":1247245699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads.RunThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        while (run) {\n          //int n = random.nextInt(2);\n          if (type == 0) {\n            int i = seq.addAndGet(1);\n            Document doc = TestIndexWriterReader.createDocument(i, \"index1\", 10);\n            writer.addDocument(doc);\n            addCount++;\n          } else if (type == 1) {\n            // we may or may not delete because the term may not exist,\n            // however we're opening and closing the reader rapidly\n            IndexReader reader = writer.getReader();\n            int id = random.nextInt(seq.intValue());\n            Term term = new Term(\"id\", Integer.toString(id));\n            int count = TestIndexWriterReader.count(term, reader);\n            writer.deleteDocuments(term);\n            reader.close();\n            delCount += count;\n          }\n        }\n      } catch (Throwable ex) {\n        ex.printStackTrace(System.out);\n        this.ex = ex;\n        run = false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads.RunThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads.RunThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        while (run) {\n          //int n = random.nextInt(2);\n          if (type == 0) {\n            int i = seq.addAndGet(1);\n            Document doc = TestIndexWriterReader.createDocument(i, \"index1\", 10);\n            writer.addDocument(doc);\n            addCount++;\n          } else if (type == 1) {\n            // we may or may not delete because the term may not exist,\n            // however we're opening and closing the reader rapidly\n            IndexReader reader = writer.getReader();\n            int id = random.nextInt(seq.intValue());\n            Term term = new Term(\"id\", Integer.toString(id));\n            int count = TestIndexWriterReader.count(term, reader);\n            writer.deleteDocuments(term);\n            reader.close();\n            delCount += count;\n          }\n        }\n      } catch (Throwable ex) {\n        ex.printStackTrace(System.out);\n        this.ex = ex;\n        run = false;\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        while (run) {\n          //int n = random.nextInt(2);\n          if (type == 0) {\n            int i = seq.addAndGet(1);\n            Document doc = TestIndexWriterReader.createDocument(i, \"index1\", 10);\n            writer.addDocument(doc);\n            addCount++;\n          } else if (type == 1) {\n            // we may or may not delete because the term may not exist,\n            // however we're opening and closing the reader rapidly\n            IndexReader reader = writer.getReader();\n            int id = random.nextInt(seq.intValue());\n            Term term = new Term(\"id\", Integer.toString(id));\n            int count = TestIndexWriterReader.count(term, reader);\n            writer.deleteDocuments(term);\n            reader.close();\n            delCount += count;\n          }\n        }\n      } catch (Throwable ex) {\n        ex.printStackTrace(System.out);\n        this.ex = ex;\n        run = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads.RunThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestNRTReaderWithThreads.RunThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        while (run) {\n          //int n = random.nextInt(2);\n          if (type == 0) {\n            int i = seq.addAndGet(1);\n            Document doc = TestIndexWriterReader.createDocument(i, \"index1\", 10);\n            writer.addDocument(doc);\n            addCount++;\n          } else if (type == 1) {\n            // we may or may not delete because the term may not exist,\n            // however we're opening and closing the reader rapidly\n            IndexReader reader = writer.getReader();\n            int id = random.nextInt(seq.intValue());\n            Term term = new Term(\"id\", Integer.toString(id));\n            int count = TestIndexWriterReader.count(term, reader);\n            writer.deleteDocuments(term);\n            reader.close();\n            delCount += count;\n          }\n        }\n      } catch (Throwable ex) {\n        ex.printStackTrace(System.out);\n        this.ex = ex;\n        run = false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        while (run) {\n          //int n = random.nextInt(2);\n          if (type == 0) {\n            int i = seq.addAndGet(1);\n            Document doc = TestIndexWriterReader.createDocument(i, \"index1\", 10);\n            writer.addDocument(doc);\n            addCount++;\n          } else if (type == 1) {\n            // we may or may not delete because the term may not exist,\n            // however we're opening and closing the reader rapidly\n            IndexReader reader = writer.getReader();\n            int id = random.nextInt(seq.intValue());\n            Term term = new Term(\"id\", Integer.toString(id));\n            int count = TestIndexWriterReader.count(term, reader);\n            writer.deleteDocuments(term);\n            reader.close();\n            delCount += count;\n          }\n        }\n      } catch (Throwable ex) {\n        ex.printStackTrace(System.out);\n        this.ex = ex;\n        run = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}