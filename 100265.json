{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set per-collection value (eg. a metric). This value will be applied to each replica in a selected shard.\n   * @param collection collection name\n   * @param shard shard name. If null then all shards will be affected.\n   * @param key property name\n   * @param value property value\n   * @param divide if the value is a {@link Number} and this is true, then the value will be evenly\n   *               divided by the number of replicas.\n   */\n  public void simSetShardValue(String collection, String shard, String key, Object value, boolean divide) throws Exception {\n    List<ReplicaInfo> infos = new ArrayList<>();\n    nodeReplicaMap.forEach((n, replicas) -> {\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection)) {\n          if (shard != null && !shard.equals(r.getShard())) {\n            return;\n          }\n          infos.add(r);\n        }\n      });\n    });\n    if (infos.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection \" + collection + \" doesn't exist.\");\n    }\n    if (divide && value != null && (value instanceof Number)) {\n      value = ((Number)value).doubleValue() / infos.size();\n    }\n    for (ReplicaInfo r : infos) {\n      synchronized (r) {\n        if (value == null) {\n          r.getVariables().remove(key);\n        } else {\n          r.getVariables().put(key, value);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean).mjava","sourceNew":"  /**\n   * Set per-collection value (eg. a metric). This value will be applied to each replica in a selected shard.\n   * @param collection collection name\n   * @param shard shard name. If null then all shards will be affected.\n   * @param key property name\n   * @param value property value\n   * @param delta if true then treat the numeric value as delta to add to the existing value\n   *              (or set the value to delta if missing)\n   * @param divide if the value is a {@link Number} and this is true, then the value will be evenly\n   *               divided by the number of replicas.\n   */\n  public void simSetShardValue(String collection, String shard, String key, Object value, boolean delta, boolean divide) throws Exception {\n    List<ReplicaInfo> infos = new ArrayList<>();\n    nodeReplicaMap.forEach((n, replicas) -> {\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection)) {\n          if (shard != null && !shard.equals(r.getShard())) {\n            return;\n          }\n          infos.add(r);\n        }\n      });\n    });\n    if (infos.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection \" + collection + \" doesn't exist.\");\n    }\n    if (divide && value != null && (value instanceof Number)) {\n      if ((value instanceof Long) || (value instanceof Integer)) {\n        value = ((Number) value).longValue() / infos.size();\n      } else {\n        value = ((Number) value).doubleValue() / infos.size();\n      }\n    }\n    for (ReplicaInfo r : infos) {\n      synchronized (r) {\n        if (value == null) {\n          r.getVariables().remove(key);\n        } else {\n          if (delta) {\n            Object prevValue = r.getVariables().get(key);\n            if (prevValue != null) {\n              if ((prevValue instanceof Number) && (value instanceof Number)) {\n                if (((prevValue instanceof Long) || (prevValue instanceof Integer)) &&\n                    ((value instanceof Long) || (value instanceof Integer))) {\n                  Long newValue = ((Number)prevValue).longValue() + ((Number)value).longValue();\n                  r.getVariables().put(key, newValue);\n                } else {\n                  Double newValue = ((Number)prevValue).doubleValue() + ((Number)value).doubleValue();\n                  r.getVariables().put(key, newValue);\n                }\n              } else {\n                throw new UnsupportedOperationException(\"delta cannot be applied to non-numeric values: \" + prevValue + \" and \" + value);\n              }\n            } else {\n              r.getVariables().put(key, value);\n            }\n          } else {\n            r.getVariables().put(key, value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Set per-collection value (eg. a metric). This value will be applied to each replica in a selected shard.\n   * @param collection collection name\n   * @param shard shard name. If null then all shards will be affected.\n   * @param key property name\n   * @param value property value\n   * @param divide if the value is a {@link Number} and this is true, then the value will be evenly\n   *               divided by the number of replicas.\n   */\n  public void simSetShardValue(String collection, String shard, String key, Object value, boolean divide) throws Exception {\n    List<ReplicaInfo> infos = new ArrayList<>();\n    nodeReplicaMap.forEach((n, replicas) -> {\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection)) {\n          if (shard != null && !shard.equals(r.getShard())) {\n            return;\n          }\n          infos.add(r);\n        }\n      });\n    });\n    if (infos.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection \" + collection + \" doesn't exist.\");\n    }\n    if (divide && value != null && (value instanceof Number)) {\n      value = ((Number)value).doubleValue() / infos.size();\n    }\n    for (ReplicaInfo r : infos) {\n      synchronized (r) {\n        if (value == null) {\n          r.getVariables().remove(key);\n        } else {\n          r.getVariables().put(key, value);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetShardValue(String,String,String,Object,boolean).mjava","sourceNew":"  /**\n   * Set per-collection value (eg. a metric). This value will be applied to each replica in a selected shard.\n   * @param collection collection name\n   * @param shard shard name. If null then all shards will be affected.\n   * @param key property name\n   * @param value property value\n   * @param delta if true then treat the numeric value as delta to add to the existing value\n   *              (or set the value to delta if missing)\n   * @param divide if the value is a {@link Number} and this is true, then the value will be evenly\n   *               divided by the number of replicas.\n   */\n  public void simSetShardValue(String collection, String shard, String key, Object value, boolean delta, boolean divide) throws Exception {\n    List<ReplicaInfo> infos = new ArrayList<>();\n    nodeReplicaMap.forEach((n, replicas) -> {\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection)) {\n          if (shard != null && !shard.equals(r.getShard())) {\n            return;\n          }\n          infos.add(r);\n        }\n      });\n    });\n    if (infos.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection \" + collection + \" doesn't exist.\");\n    }\n    if (divide && value != null && (value instanceof Number)) {\n      if ((value instanceof Long) || (value instanceof Integer)) {\n        value = ((Number) value).longValue() / infos.size();\n      } else {\n        value = ((Number) value).doubleValue() / infos.size();\n      }\n    }\n    for (ReplicaInfo r : infos) {\n      synchronized (r) {\n        if (value == null) {\n          r.getVariables().remove(key);\n        } else {\n          if (delta) {\n            Object prevValue = r.getVariables().get(key);\n            if (prevValue != null) {\n              if ((prevValue instanceof Number) && (value instanceof Number)) {\n                if (((prevValue instanceof Long) || (prevValue instanceof Integer)) &&\n                    ((value instanceof Long) || (value instanceof Integer))) {\n                  Long newValue = ((Number)prevValue).longValue() + ((Number)value).longValue();\n                  r.getVariables().put(key, newValue);\n                } else {\n                  Double newValue = ((Number)prevValue).doubleValue() + ((Number)value).doubleValue();\n                  r.getVariables().put(key, newValue);\n                }\n              } else {\n                throw new UnsupportedOperationException(\"delta cannot be applied to non-numeric values: \" + prevValue + \" and \" + value);\n              }\n            } else {\n              r.getVariables().put(key, value);\n            }\n          } else {\n            r.getVariables().put(key, value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Set per-collection value (eg. a metric). This value will be applied to each replica in a selected shard.\n   * @param collection collection name\n   * @param shard shard name. If null then all shards will be affected.\n   * @param key property name\n   * @param value property value\n   * @param divide if the value is a {@link Number} and this is true, then the value will be evenly\n   *               divided by the number of replicas.\n   */\n  public void simSetShardValue(String collection, String shard, String key, Object value, boolean divide) throws Exception {\n    List<ReplicaInfo> infos = new ArrayList<>();\n    nodeReplicaMap.forEach((n, replicas) -> {\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection)) {\n          if (shard != null && !shard.equals(r.getShard())) {\n            return;\n          }\n          infos.add(r);\n        }\n      });\n    });\n    if (infos.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection \" + collection + \" doesn't exist.\");\n    }\n    if (divide && value != null && (value instanceof Number)) {\n      value = ((Number)value).doubleValue() / infos.size();\n    }\n    for (ReplicaInfo r : infos) {\n      synchronized (r) {\n        if (value == null) {\n          r.getVariables().remove(key);\n        } else {\n          r.getVariables().put(key, value);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43345f1452f9510f8aaadae6156fe0c834e7d957"]},"commit2Childs":{"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}