{"path":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeFieldTypes(List[SimpleOrderedMap[Object]]).mjava","commits":[{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeFieldTypes(List[SimpleOrderedMap[Object]]).mjava","pathOld":"/dev/null","sourceNew":"  private void writeFieldTypes(List<SimpleOrderedMap<Object>> fieldTypePropertiesList) throws IOException {\n    openStartTag(IndexSchema.TYPES);\n    closeStartTag(false);\n    incLevel();\n    for (SimpleOrderedMap<Object> fieldTypeProperties : fieldTypePropertiesList) {\n      SimpleOrderedMap<Object> analyzerProperties = null;\n      SimpleOrderedMap<Object> indexAnalyzerProperties = null;\n      SimpleOrderedMap<Object> queryAnalyzerProperties = null;\n      SimpleOrderedMap<Object> multiTermAnalyzerProperties = null;\n      SimpleOrderedMap<Object> perFieldSimilarityProperties = null;\n      openStartTag(IndexSchema.FIELD_TYPE);\n      for (int fieldTypePropNum = 0 ; fieldTypePropNum < fieldTypeProperties.size() ; ++fieldTypePropNum) {\n        String fieldTypePropName = fieldTypeProperties.getName(fieldTypePropNum);\n        if (fieldTypePropName.equals(FieldType.ANALYZER)) {\n          analyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.INDEX_ANALYZER)) {\n          indexAnalyzerProperties =  (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum); \n        } else if (fieldTypePropName.equals(FieldType.QUERY_ANALYZER)) {\n          queryAnalyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.MULTI_TERM_ANALYZER)) {\n          multiTermAnalyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.SIMILARITY)) {\n          perFieldSimilarityProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else {\n          writeAttr(fieldTypePropName, fieldTypeProperties.getVal(fieldTypePropNum).toString());\n        }\n      }\n      boolean isEmptyTag = null == analyzerProperties           && null == indexAnalyzerProperties\n                        && null == queryAnalyzerProperties      && null == multiTermAnalyzerProperties\n                        && null == perFieldSimilarityProperties;\n      if (isEmptyTag) {\n        closeStartTag(true);\n      } else {\n        closeStartTag(false);\n        incLevel();\n        if (null != analyzerProperties)           writeAnalyzer(analyzerProperties, null);\n        if (null != indexAnalyzerProperties)      writeAnalyzer(indexAnalyzerProperties, FieldType.INDEX);\n        if (null != queryAnalyzerProperties)      writeAnalyzer(queryAnalyzerProperties, FieldType.QUERY);\n        if (null != multiTermAnalyzerProperties)  writeAnalyzer(multiTermAnalyzerProperties, FieldType.MULTI_TERM);\n        if (null != perFieldSimilarityProperties) writeSimilarity(perFieldSimilarityProperties);\n        decLevel();\n        endTag(IndexSchema.FIELD_TYPE);\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.TYPES);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e1bc9368a5cae1776f5b12df9dac1b0477f8f4","date":1395589252,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeFieldTypes(List[SimpleOrderedMap[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeFieldTypes(List[SimpleOrderedMap[Object]]).mjava","sourceNew":"  private void writeFieldTypes(List<SimpleOrderedMap<Object>> fieldTypePropertiesList) throws IOException {\n    for (SimpleOrderedMap<Object> fieldTypeProperties : fieldTypePropertiesList) {\n      SimpleOrderedMap<Object> analyzerProperties = null;\n      SimpleOrderedMap<Object> indexAnalyzerProperties = null;\n      SimpleOrderedMap<Object> queryAnalyzerProperties = null;\n      SimpleOrderedMap<Object> multiTermAnalyzerProperties = null;\n      SimpleOrderedMap<Object> perFieldSimilarityProperties = null;\n      openStartTag(IndexSchema.FIELD_TYPE);\n      for (int fieldTypePropNum = 0 ; fieldTypePropNum < fieldTypeProperties.size() ; ++fieldTypePropNum) {\n        String fieldTypePropName = fieldTypeProperties.getName(fieldTypePropNum);\n        if (fieldTypePropName.equals(FieldType.ANALYZER)) {\n          analyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.INDEX_ANALYZER)) {\n          indexAnalyzerProperties =  (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum); \n        } else if (fieldTypePropName.equals(FieldType.QUERY_ANALYZER)) {\n          queryAnalyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.MULTI_TERM_ANALYZER)) {\n          multiTermAnalyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.SIMILARITY)) {\n          perFieldSimilarityProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else {\n          writeAttr(fieldTypePropName, fieldTypeProperties.getVal(fieldTypePropNum).toString());\n        }\n      }\n      boolean isEmptyTag = null == analyzerProperties           && null == indexAnalyzerProperties\n                        && null == queryAnalyzerProperties      && null == multiTermAnalyzerProperties\n                        && null == perFieldSimilarityProperties;\n      if (isEmptyTag) {\n        closeStartTag(true);\n      } else {\n        closeStartTag(false);\n        incLevel();\n        if (null != analyzerProperties)           writeAnalyzer(analyzerProperties, null);\n        if (null != indexAnalyzerProperties)      writeAnalyzer(indexAnalyzerProperties, FieldType.INDEX);\n        if (null != queryAnalyzerProperties)      writeAnalyzer(queryAnalyzerProperties, FieldType.QUERY);\n        if (null != multiTermAnalyzerProperties)  writeAnalyzer(multiTermAnalyzerProperties, FieldType.MULTI_TERM);\n        if (null != perFieldSimilarityProperties) writeSimilarity(perFieldSimilarityProperties);\n        decLevel();\n        endTag(IndexSchema.FIELD_TYPE);\n      }\n    }\n  }\n\n","sourceOld":"  private void writeFieldTypes(List<SimpleOrderedMap<Object>> fieldTypePropertiesList) throws IOException {\n    openStartTag(IndexSchema.TYPES);\n    closeStartTag(false);\n    incLevel();\n    for (SimpleOrderedMap<Object> fieldTypeProperties : fieldTypePropertiesList) {\n      SimpleOrderedMap<Object> analyzerProperties = null;\n      SimpleOrderedMap<Object> indexAnalyzerProperties = null;\n      SimpleOrderedMap<Object> queryAnalyzerProperties = null;\n      SimpleOrderedMap<Object> multiTermAnalyzerProperties = null;\n      SimpleOrderedMap<Object> perFieldSimilarityProperties = null;\n      openStartTag(IndexSchema.FIELD_TYPE);\n      for (int fieldTypePropNum = 0 ; fieldTypePropNum < fieldTypeProperties.size() ; ++fieldTypePropNum) {\n        String fieldTypePropName = fieldTypeProperties.getName(fieldTypePropNum);\n        if (fieldTypePropName.equals(FieldType.ANALYZER)) {\n          analyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.INDEX_ANALYZER)) {\n          indexAnalyzerProperties =  (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum); \n        } else if (fieldTypePropName.equals(FieldType.QUERY_ANALYZER)) {\n          queryAnalyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.MULTI_TERM_ANALYZER)) {\n          multiTermAnalyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.SIMILARITY)) {\n          perFieldSimilarityProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else {\n          writeAttr(fieldTypePropName, fieldTypeProperties.getVal(fieldTypePropNum).toString());\n        }\n      }\n      boolean isEmptyTag = null == analyzerProperties           && null == indexAnalyzerProperties\n                        && null == queryAnalyzerProperties      && null == multiTermAnalyzerProperties\n                        && null == perFieldSimilarityProperties;\n      if (isEmptyTag) {\n        closeStartTag(true);\n      } else {\n        closeStartTag(false);\n        incLevel();\n        if (null != analyzerProperties)           writeAnalyzer(analyzerProperties, null);\n        if (null != indexAnalyzerProperties)      writeAnalyzer(indexAnalyzerProperties, FieldType.INDEX);\n        if (null != queryAnalyzerProperties)      writeAnalyzer(queryAnalyzerProperties, FieldType.QUERY);\n        if (null != multiTermAnalyzerProperties)  writeAnalyzer(multiTermAnalyzerProperties, FieldType.MULTI_TERM);\n        if (null != perFieldSimilarityProperties) writeSimilarity(perFieldSimilarityProperties);\n        decLevel();\n        endTag(IndexSchema.FIELD_TYPE);\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.TYPES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeFieldTypes(List[SimpleOrderedMap[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeFieldTypes(List[SimpleOrderedMap[Object]]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void writeFieldTypes(List<SimpleOrderedMap<Object>> fieldTypePropertiesList) throws IOException {\n    for (SimpleOrderedMap<Object> fieldTypeProperties : fieldTypePropertiesList) {\n      SimpleOrderedMap<Object> analyzerProperties = null;\n      SimpleOrderedMap<Object> indexAnalyzerProperties = null;\n      SimpleOrderedMap<Object> queryAnalyzerProperties = null;\n      SimpleOrderedMap<Object> multiTermAnalyzerProperties = null;\n      SimpleOrderedMap<Object> perFieldSimilarityProperties = null;\n      openStartTag(IndexSchema.FIELD_TYPE);\n      for (int fieldTypePropNum = 0 ; fieldTypePropNum < fieldTypeProperties.size() ; ++fieldTypePropNum) {\n        String fieldTypePropName = fieldTypeProperties.getName(fieldTypePropNum);\n        if (fieldTypePropName.equals(FieldType.ANALYZER)) {\n          analyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.INDEX_ANALYZER)) {\n          indexAnalyzerProperties =  (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum); \n        } else if (fieldTypePropName.equals(FieldType.QUERY_ANALYZER)) {\n          queryAnalyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.MULTI_TERM_ANALYZER)) {\n          multiTermAnalyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.SIMILARITY)) {\n          perFieldSimilarityProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else {\n          writeAttr(fieldTypePropName, fieldTypeProperties.getVal(fieldTypePropNum).toString());\n        }\n      }\n      boolean isEmptyTag = null == analyzerProperties           && null == indexAnalyzerProperties\n                        && null == queryAnalyzerProperties      && null == multiTermAnalyzerProperties\n                        && null == perFieldSimilarityProperties;\n      if (isEmptyTag) {\n        closeStartTag(true);\n      } else {\n        closeStartTag(false);\n        incLevel();\n        if (null != analyzerProperties)           writeAnalyzer(analyzerProperties, null);\n        if (null != indexAnalyzerProperties)      writeAnalyzer(indexAnalyzerProperties, FieldType.INDEX);\n        if (null != queryAnalyzerProperties)      writeAnalyzer(queryAnalyzerProperties, FieldType.QUERY);\n        if (null != multiTermAnalyzerProperties)  writeAnalyzer(multiTermAnalyzerProperties, FieldType.MULTI_TERM);\n        if (null != perFieldSimilarityProperties) writeSimilarity(perFieldSimilarityProperties);\n        decLevel();\n        endTag(IndexSchema.FIELD_TYPE);\n      }\n    }\n  }\n\n","sourceOld":"  private void writeFieldTypes(List<SimpleOrderedMap<Object>> fieldTypePropertiesList) throws IOException {\n    for (SimpleOrderedMap<Object> fieldTypeProperties : fieldTypePropertiesList) {\n      SimpleOrderedMap<Object> analyzerProperties = null;\n      SimpleOrderedMap<Object> indexAnalyzerProperties = null;\n      SimpleOrderedMap<Object> queryAnalyzerProperties = null;\n      SimpleOrderedMap<Object> multiTermAnalyzerProperties = null;\n      SimpleOrderedMap<Object> perFieldSimilarityProperties = null;\n      openStartTag(IndexSchema.FIELD_TYPE);\n      for (int fieldTypePropNum = 0 ; fieldTypePropNum < fieldTypeProperties.size() ; ++fieldTypePropNum) {\n        String fieldTypePropName = fieldTypeProperties.getName(fieldTypePropNum);\n        if (fieldTypePropName.equals(FieldType.ANALYZER)) {\n          analyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.INDEX_ANALYZER)) {\n          indexAnalyzerProperties =  (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum); \n        } else if (fieldTypePropName.equals(FieldType.QUERY_ANALYZER)) {\n          queryAnalyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.MULTI_TERM_ANALYZER)) {\n          multiTermAnalyzerProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else if (fieldTypePropName.equals(FieldType.SIMILARITY)) {\n          perFieldSimilarityProperties = (SimpleOrderedMap<Object>)fieldTypeProperties.getVal(fieldTypePropNum);\n        } else {\n          writeAttr(fieldTypePropName, fieldTypeProperties.getVal(fieldTypePropNum).toString());\n        }\n      }\n      boolean isEmptyTag = null == analyzerProperties           && null == indexAnalyzerProperties\n                        && null == queryAnalyzerProperties      && null == multiTermAnalyzerProperties\n                        && null == perFieldSimilarityProperties;\n      if (isEmptyTag) {\n        closeStartTag(true);\n      } else {\n        closeStartTag(false);\n        incLevel();\n        if (null != analyzerProperties)           writeAnalyzer(analyzerProperties, null);\n        if (null != indexAnalyzerProperties)      writeAnalyzer(indexAnalyzerProperties, FieldType.INDEX);\n        if (null != queryAnalyzerProperties)      writeAnalyzer(queryAnalyzerProperties, FieldType.QUERY);\n        if (null != multiTermAnalyzerProperties)  writeAnalyzer(multiTermAnalyzerProperties, FieldType.MULTI_TERM);\n        if (null != perFieldSimilarityProperties) writeSimilarity(perFieldSimilarityProperties);\n        decLevel();\n        endTag(IndexSchema.FIELD_TYPE);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["15e1bc9368a5cae1776f5b12df9dac1b0477f8f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"15e1bc9368a5cae1776f5b12df9dac1b0477f8f4":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"]},"commit2Childs":{"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["15e1bc9368a5cae1776f5b12df9dac1b0477f8f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e1bc9368a5cae1776f5b12df9dac1b0477f8f4":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}