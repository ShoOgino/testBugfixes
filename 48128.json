{"path":"lucene/backwards/src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","sourceNew":null,"sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}