{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f8a098eef38bf48cf964fcd89c03e1e741130e9","date":1385973213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e28b14e7783d24ca69089f13ddadadbd2afdcb29","date":1399840701,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    // nocommit: split test if needed\n    // FieldCache.DEFAULT.purgeAllCaches();   // hide FC insanity\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    // nocommit: split test if needed\n    // FieldCache.DEFAULT.purgeAllCaches();   // hide FC insanity\n  }\n\n","bugFix":["68759a52d8da5c4ac149c4484a1dbc071b480bb3","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n\n    FieldCache.DEFAULT.purgeAllCaches();   // avoid FC insanity\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    int[] vals = { 100,-4,0,10,25,5 };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    int[] vals = { 100,-4,0,10,25,5 };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    int[] vals = { 100,-4,0,10,25,5 };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0141f86b1794b911ab8e3eac773bf583e5cf784","date":1509377191,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    clearIndex();\n\n    // lrf.args.put(\"version\",\"2.0\");\n    int[] vals = { 100,-4,0,10,25,5 };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    int[] vals = { 100,-4,0,10,25,5 };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    clearIndex();\n\n    // lrf.args.put(\"version\",\"2.0\");\n    int[] vals = { 100,-4,0,10,25,5 };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, 0f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,0f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,0, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,0, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,0, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,0, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,0, 100,1, 0,0);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,0, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    clearIndex();\n\n    // lrf.args.put(\"version\",\"2.0\");\n    int[] vals = { 100,-4,0,10,25,5 };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500))\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,0,0,sum(\\0,500),sum(\\0,1))\",10,11, -4,-3, 0,500);\n    singleTest(field,\"map(\\0,-4,5,sum(\\0,1))\",100,100, -4,-3, 0,1, 5,6, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["28288370235ed02234a64753cdbf0c6ec096304a"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["5da0b42730b6b99b31389ef94cb97384e83b9ede","19275ba31e621f6da1b83bf13af75233876fd3d4"],"9274621789ce990dbfef455dabdf026bb3184821":["e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["f0141f86b1794b911ab8e3eac773bf583e5cf784"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"56572ec06f1407c066d6b7399413178b33176cd8":["2f8a098eef38bf48cf964fcd89c03e1e741130e9","93dd449115a9247533e44bab47e8429e5dccbc6d"],"28288370235ed02234a64753cdbf0c6ec096304a":["93dd449115a9247533e44bab47e8429e5dccbc6d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2f8a098eef38bf48cf964fcd89c03e1e741130e9":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["2f8a098eef38bf48cf964fcd89c03e1e741130e9","9274621789ce990dbfef455dabdf026bb3184821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["19275ba31e621f6da1b83bf13af75233876fd3d4","2f8a098eef38bf48cf964fcd89c03e1e741130e9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["2f8a098eef38bf48cf964fcd89c03e1e741130e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["93dd449115a9247533e44bab47e8429e5dccbc6d","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"]},"commit2Childs":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","2f8a098eef38bf48cf964fcd89c03e1e741130e9","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"28288370235ed02234a64753cdbf0c6ec096304a":["f0141f86b1794b911ab8e3eac773bf583e5cf784"],"2f8a098eef38bf48cf964fcd89c03e1e741130e9":["56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d","74f45af4339b0daf7a95c820ab88c1aea74fbce0","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a71f63026529f3c1f03cfdd664910873ab2369ae","56572ec06f1407c066d6b7399413178b33176cd8","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["9274621789ce990dbfef455dabdf026bb3184821"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","56572ec06f1407c066d6b7399413178b33176cd8","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}