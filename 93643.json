{"path":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","commits":[{"id":"9ed5f4bd4ee593745097b1ec9f0110b1997a9e58","date":1396480148,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      for (String term : synonymManager.synonymMappings.keySet()) {\n        for (String mapping : synonymManager.synonymMappings.get(term)) {\n          add(new CharsRef(term), new CharsRef(mapping), false);\n        }\n      }      \n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      for (String term : synonymManager.synonymMappings.keySet()) {\n        for (String mapping : synonymManager.synonymMappings.get(term)) {\n          add(new CharsRef(term), new CharsRef(mapping), false);\n        }\n      }      \n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c897483ab479f5d1bcdd40400d20ef417b3b837","date":1400781817,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","sourceNew":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      boolean ignoreCase = synonymManager.getIgnoreCase();\n      for (CasePreservedSynonymMappings cpsm : synonymManager.synonymMappings.values()) {\n        for (String term : cpsm.mappings.keySet()) {\n          for (String mapping : cpsm.mappings.get(term)) {\n            // apply the case setting to match the behavior of the SynonymMap builder\n            String casedTerm = synonymManager.applyCaseSetting(ignoreCase, term);\n            String casedMapping = synonymManager.applyCaseSetting(ignoreCase, mapping);\n            add(new CharsRef(casedTerm), new CharsRef(casedMapping), false);\n          }          \n        }\n      }      \n    }    \n\n","sourceOld":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      for (String term : synonymManager.synonymMappings.keySet()) {\n        for (String mapping : synonymManager.synonymMappings.get(term)) {\n          add(new CharsRef(term), new CharsRef(mapping), false);\n        }\n      }      \n    }    \n\n","bugFix":null,"bugIntro":["9abfb16d083560e0a83d5c27b03f42ae7b5b22bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9abfb16d083560e0a83d5c27b03f42ae7b5b22bb","date":1491559883,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","sourceNew":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      boolean ignoreCase = synonymManager.getIgnoreCase();\n      for (CasePreservedSynonymMappings cpsm : synonymManager.synonymMappings.values()) {\n        for (String term : cpsm.mappings.keySet()) {\n          for (String mapping : cpsm.mappings.get(term)) {\n            // apply the case setting to match the behavior of the SynonymMap builder\n            CharsRef casedTerm = analyze(synonymManager.applyCaseSetting(ignoreCase, term), new CharsRefBuilder());\n            CharsRef casedMapping = analyze(synonymManager.applyCaseSetting(ignoreCase, mapping), new CharsRefBuilder());\n            add(casedTerm, casedMapping, false);\n          }          \n        }\n      }      \n    }    \n\n","sourceOld":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      boolean ignoreCase = synonymManager.getIgnoreCase();\n      for (CasePreservedSynonymMappings cpsm : synonymManager.synonymMappings.values()) {\n        for (String term : cpsm.mappings.keySet()) {\n          for (String mapping : cpsm.mappings.get(term)) {\n            // apply the case setting to match the behavior of the SynonymMap builder\n            String casedTerm = synonymManager.applyCaseSetting(ignoreCase, term);\n            String casedMapping = synonymManager.applyCaseSetting(ignoreCase, mapping);\n            add(new CharsRef(casedTerm), new CharsRef(casedMapping), false);\n          }          \n        }\n      }      \n    }    \n\n","bugFix":["3c897483ab479f5d1bcdd40400d20ef417b3b837"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","sourceNew":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      boolean ignoreCase = synonymManager.getIgnoreCase();\n      for (CasePreservedSynonymMappings cpsm : synonymManager.synonymMappings.values()) {\n        for (String term : cpsm.mappings.keySet()) {\n          for (String mapping : cpsm.mappings.get(term)) {\n            // apply the case setting to match the behavior of the SynonymMap builder\n            CharsRef casedTerm = analyze(synonymManager.applyCaseSetting(ignoreCase, term), new CharsRefBuilder());\n            CharsRef casedMapping = analyze(synonymManager.applyCaseSetting(ignoreCase, mapping), new CharsRefBuilder());\n            add(casedTerm, casedMapping, false);\n          }          \n        }\n      }      \n    }    \n\n","sourceOld":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      boolean ignoreCase = synonymManager.getIgnoreCase();\n      for (CasePreservedSynonymMappings cpsm : synonymManager.synonymMappings.values()) {\n        for (String term : cpsm.mappings.keySet()) {\n          for (String mapping : cpsm.mappings.get(term)) {\n            // apply the case setting to match the behavior of the SynonymMap builder\n            String casedTerm = synonymManager.applyCaseSetting(ignoreCase, term);\n            String casedMapping = synonymManager.applyCaseSetting(ignoreCase, mapping);\n            add(new CharsRef(casedTerm), new CharsRef(casedMapping), false);\n          }          \n        }\n      }      \n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","sourceNew":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      boolean ignoreCase = synonymManager.getIgnoreCase();\n      for (CasePreservedSynonymMappings cpsm : synonymManager.synonymMappings.values()) {\n        for (Map.Entry<String, Set<String>> entry : cpsm.mappings.entrySet()) {\n          for (String mapping : entry.getValue()) {\n            // apply the case setting to match the behavior of the SynonymMap builder\n            CharsRef casedTerm = analyze(synonymManager.applyCaseSetting(ignoreCase, entry.getKey()), new CharsRefBuilder());\n            CharsRef casedMapping = analyze(synonymManager.applyCaseSetting(ignoreCase, mapping), new CharsRefBuilder());\n            add(casedTerm, casedMapping, false);\n          }          \n        }\n      }      \n    }    \n\n","sourceOld":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      boolean ignoreCase = synonymManager.getIgnoreCase();\n      for (CasePreservedSynonymMappings cpsm : synonymManager.synonymMappings.values()) {\n        for (String term : cpsm.mappings.keySet()) {\n          for (String mapping : cpsm.mappings.get(term)) {\n            // apply the case setting to match the behavior of the SynonymMap builder\n            CharsRef casedTerm = analyze(synonymManager.applyCaseSetting(ignoreCase, term), new CharsRefBuilder());\n            CharsRef casedMapping = analyze(synonymManager.applyCaseSetting(ignoreCase, mapping), new CharsRefBuilder());\n            add(casedTerm, casedMapping, false);\n          }          \n        }\n      }      \n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymFilterFactory.ManagedSynonymParser#parse(Reader).mjava","sourceNew":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      boolean ignoreCase = synonymManager.getIgnoreCase();\n      for (CasePreservedSynonymMappings cpsm : synonymManager.synonymMappings.values()) {\n        for (Map.Entry<String, Set<String>> entry : cpsm.mappings.entrySet()) {\n          for (String mapping : entry.getValue()) {\n            // apply the case setting to match the behavior of the SynonymMap builder\n            CharsRef casedTerm = analyze(synonymManager.applyCaseSetting(ignoreCase, entry.getKey()), new CharsRefBuilder());\n            CharsRef casedMapping = analyze(synonymManager.applyCaseSetting(ignoreCase, mapping), new CharsRefBuilder());\n            add(casedTerm, casedMapping, false);\n          }          \n        }\n      }      \n    }    \n\n","sourceOld":"    /**\n     * Add the managed synonyms and their mappings into the SynonymMap builder.\n     */\n    @Override\n    public void parse(Reader in) throws IOException, ParseException {\n      boolean ignoreCase = synonymManager.getIgnoreCase();\n      for (CasePreservedSynonymMappings cpsm : synonymManager.synonymMappings.values()) {\n        for (String term : cpsm.mappings.keySet()) {\n          for (String mapping : cpsm.mappings.get(term)) {\n            // apply the case setting to match the behavior of the SynonymMap builder\n            CharsRef casedTerm = analyze(synonymManager.applyCaseSetting(ignoreCase, term), new CharsRefBuilder());\n            CharsRef casedMapping = analyze(synonymManager.applyCaseSetting(ignoreCase, mapping), new CharsRefBuilder());\n            add(casedTerm, casedMapping, false);\n          }          \n        }\n      }      \n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3c897483ab479f5d1bcdd40400d20ef417b3b837"],"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ed5f4bd4ee593745097b1ec9f0110b1997a9e58"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["9abfb16d083560e0a83d5c27b03f42ae7b5b22bb"],"9ed5f4bd4ee593745097b1ec9f0110b1997a9e58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9abfb16d083560e0a83d5c27b03f42ae7b5b22bb":["3c897483ab479f5d1bcdd40400d20ef417b3b837"],"3c897483ab479f5d1bcdd40400d20ef417b3b837":["9ed5f4bd4ee593745097b1ec9f0110b1997a9e58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9abfb16d083560e0a83d5c27b03f42ae7b5b22bb","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"9ed5f4bd4ee593745097b1ec9f0110b1997a9e58":["5eb2511ababf862ea11e10761c70ee560cd84510","3c897483ab479f5d1bcdd40400d20ef417b3b837"],"3c897483ab479f5d1bcdd40400d20ef417b3b837":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","9abfb16d083560e0a83d5c27b03f42ae7b5b22bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","9ed5f4bd4ee593745097b1ec9f0110b1997a9e58"],"9abfb16d083560e0a83d5c27b03f42ae7b5b22bb":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}