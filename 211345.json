{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#readFieldInfos(SegmentCommitInfo).mjava","commits":[{"id":"256a0e54e76f18e115a43e7fe793b54d4e9a3005","date":1412426514,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#readFieldInfos(SegmentCommitInfo).mjava","pathOld":"/dev/null","sourceNew":"  // reads latest field infos for the commit\n  // this is used on IW init and addIndexes(Dir) to create/update the global field map.\n  // TODO: fix tests abusing this method!\n  static FieldInfos readFieldInfos(SegmentCommitInfo si) throws IOException {\n    Codec codec = si.info.getCodec();\n    FieldInfosReader reader = codec.fieldInfosFormat().getFieldInfosReader();\n    \n    if (si.hasFieldUpdates()) {\n      // there are updates, we read latest (always outside of CFS)\n      final String segmentSuffix = Long.toString(si.getFieldInfosGen(), Character.MAX_RADIX);\n      return reader.read(si.info.dir, si.info, segmentSuffix, IOContext.READONCE);\n    } else if (si.info.getUseCompoundFile()) {\n      // cfs\n      try (Directory cfs = codec.compoundFormat().getCompoundReader(si.info.dir, si.info, IOContext.DEFAULT)) {\n        return reader.read(cfs, si.info, \"\", IOContext.READONCE);\n      }\n    } else {\n      // no cfs\n      return reader.read(si.info.dir, si.info, \"\", IOContext.READONCE);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#readFieldInfos(SegmentCommitInfo).mjava","pathOld":"/dev/null","sourceNew":"  // reads latest field infos for the commit\n  // this is used on IW init and addIndexes(Dir) to create/update the global field map.\n  // TODO: fix tests abusing this method!\n  static FieldInfos readFieldInfos(SegmentCommitInfo si) throws IOException {\n    Codec codec = si.info.getCodec();\n    FieldInfosReader reader = codec.fieldInfosFormat().getFieldInfosReader();\n    \n    if (si.hasFieldUpdates()) {\n      // there are updates, we read latest (always outside of CFS)\n      final String segmentSuffix = Long.toString(si.getFieldInfosGen(), Character.MAX_RADIX);\n      return reader.read(si.info.dir, si.info, segmentSuffix, IOContext.READONCE);\n    } else if (si.info.getUseCompoundFile()) {\n      // cfs\n      try (Directory cfs = codec.compoundFormat().getCompoundReader(si.info.dir, si.info, IOContext.DEFAULT)) {\n        return reader.read(cfs, si.info, \"\", IOContext.READONCE);\n      }\n    } else {\n      // no cfs\n      return reader.read(si.info.dir, si.info, \"\", IOContext.READONCE);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#readFieldInfos(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#readFieldInfos(SegmentCommitInfo).mjava","sourceNew":"  // reads latest field infos for the commit\n  // this is used on IW init and addIndexes(Dir) to create/update the global field map.\n  // TODO: fix tests abusing this method!\n  static FieldInfos readFieldInfos(SegmentCommitInfo si) throws IOException {\n    Codec codec = si.info.getCodec();\n    FieldInfosFormat reader = codec.fieldInfosFormat();\n    \n    if (si.hasFieldUpdates()) {\n      // there are updates, we read latest (always outside of CFS)\n      final String segmentSuffix = Long.toString(si.getFieldInfosGen(), Character.MAX_RADIX);\n      return reader.read(si.info.dir, si.info, segmentSuffix, IOContext.READONCE);\n    } else if (si.info.getUseCompoundFile()) {\n      // cfs\n      try (Directory cfs = codec.compoundFormat().getCompoundReader(si.info.dir, si.info, IOContext.DEFAULT)) {\n        return reader.read(cfs, si.info, \"\", IOContext.READONCE);\n      }\n    } else {\n      // no cfs\n      return reader.read(si.info.dir, si.info, \"\", IOContext.READONCE);\n    }\n  }\n\n","sourceOld":"  // reads latest field infos for the commit\n  // this is used on IW init and addIndexes(Dir) to create/update the global field map.\n  // TODO: fix tests abusing this method!\n  static FieldInfos readFieldInfos(SegmentCommitInfo si) throws IOException {\n    Codec codec = si.info.getCodec();\n    FieldInfosReader reader = codec.fieldInfosFormat().getFieldInfosReader();\n    \n    if (si.hasFieldUpdates()) {\n      // there are updates, we read latest (always outside of CFS)\n      final String segmentSuffix = Long.toString(si.getFieldInfosGen(), Character.MAX_RADIX);\n      return reader.read(si.info.dir, si.info, segmentSuffix, IOContext.READONCE);\n    } else if (si.info.getUseCompoundFile()) {\n      // cfs\n      try (Directory cfs = codec.compoundFormat().getCompoundReader(si.info.dir, si.info, IOContext.DEFAULT)) {\n        return reader.read(cfs, si.info, \"\", IOContext.READONCE);\n      }\n    } else {\n      // no cfs\n      return reader.read(si.info.dir, si.info, \"\", IOContext.READONCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#readFieldInfos(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#readFieldInfos(SegmentCommitInfo).mjava","sourceNew":"  // reads latest field infos for the commit\n  // this is used on IW init and addIndexes(Dir) to create/update the global field map.\n  // TODO: fix tests abusing this method!\n  static FieldInfos readFieldInfos(SegmentCommitInfo si) throws IOException {\n    Codec codec = si.info.getCodec();\n    FieldInfosFormat reader = codec.fieldInfosFormat();\n    \n    if (si.hasFieldUpdates()) {\n      // there are updates, we read latest (always outside of CFS)\n      final String segmentSuffix = Long.toString(si.getFieldInfosGen(), Character.MAX_RADIX);\n      return reader.read(si.info.dir, si.info, segmentSuffix, IOContext.READONCE);\n    } else if (si.info.getUseCompoundFile()) {\n      // cfs\n      try (Directory cfs = codec.compoundFormat().getCompoundReader(si.info.dir, si.info, IOContext.DEFAULT)) {\n        return reader.read(cfs, si.info, \"\", IOContext.READONCE);\n      }\n    } else {\n      // no cfs\n      return reader.read(si.info.dir, si.info, \"\", IOContext.READONCE);\n    }\n  }\n\n","sourceOld":"  // reads latest field infos for the commit\n  // this is used on IW init and addIndexes(Dir) to create/update the global field map.\n  // TODO: fix tests abusing this method!\n  static FieldInfos readFieldInfos(SegmentCommitInfo si) throws IOException {\n    Codec codec = si.info.getCodec();\n    FieldInfosReader reader = codec.fieldInfosFormat().getFieldInfosReader();\n    \n    if (si.hasFieldUpdates()) {\n      // there are updates, we read latest (always outside of CFS)\n      final String segmentSuffix = Long.toString(si.getFieldInfosGen(), Character.MAX_RADIX);\n      return reader.read(si.info.dir, si.info, segmentSuffix, IOContext.READONCE);\n    } else if (si.info.getUseCompoundFile()) {\n      // cfs\n      try (Directory cfs = codec.compoundFormat().getCompoundReader(si.info.dir, si.info, IOContext.DEFAULT)) {\n        return reader.read(cfs, si.info, \"\", IOContext.READONCE);\n      }\n    } else {\n      // no cfs\n      return reader.read(si.info.dir, si.info, \"\", IOContext.READONCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["9bb9a29a5e71a90295f175df8919802993142c9a"],"55980207f1977bd1463465de1659b821347e2fa8":["256a0e54e76f18e115a43e7fe793b54d4e9a3005","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"256a0e54e76f18e115a43e7fe793b54d4e9a3005":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","256a0e54e76f18e115a43e7fe793b54d4e9a3005"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"256a0e54e76f18e115a43e7fe793b54d4e9a3005":["55980207f1977bd1463465de1659b821347e2fa8","9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["256a0e54e76f18e115a43e7fe793b54d4e9a3005","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}