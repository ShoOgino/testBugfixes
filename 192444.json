{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n\n    waitForSeconds = 1 + random().nextInt(3);\n    triggerFiredCount.set(0);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < NUM_NODES) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n\n    waitForSeconds = 5;\n    triggerFiredCount.set(0);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n\n    waitForSeconds = 1 + random().nextInt(3);\n    triggerFiredCount.set(0);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    while (cluster.getClusterStateProvider().getLiveNodes().size() < NUM_NODES) {\n      // perhaps a test stopped a node but didn't start it back\n      // lets start a node\n      cluster.simAddNode();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n\n    waitForSeconds = 5;\n    triggerFiredCount.set(0);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n\n    waitForSeconds = 5;\n    triggerFiredCount.set(0);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerFiredCount.set(0);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n\n    waitForSeconds = 5;\n    triggerFiredCount.set(0);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1294fc81133ad1c53ea75edf471f5bea39621e68","date":1528194755,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerFiredCount.set(0);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n\n    waitForSeconds = 5;\n    triggerFiredCount.set(0);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n\n    waitForSeconds = 5;\n    triggerFiredCount.set(0);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b55cd711a129fb7fc4c3c4672d652149c9a4faa","date":1528813320,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1));\n    }\n  }\n\n","bugFix":["6b55cd711a129fb7fc4c3c4672d652149c9a4faa","9c6c0dad4932399aec99b4818086cb1772773916","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#setupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#setupTest().mjava","sourceNew":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","sourceOld":"  @Before\n  public void setupTest() throws Exception {\n    waitForSeconds = 5;\n    triggerStartedCount.set(0);\n    triggerFinishedCount.set(0);\n    triggerStartedLatch = new CountDownLatch(1);\n    triggerFinishedLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    // disable .scheduled_maintenance and .auto_add_replicas\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.scheduled_maintenance'}\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    SolrClient solrClient = cluster.simGetSolrClient();\n    NamedList<Object> response;\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {'name' : '.auto_add_replicas'}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n    } catch (Exception e) {\n      if (!e.toString().contains(\"No trigger exists\")) {\n        throw e;\n      }\n    }\n\n    // do this in advance if missing\n    if (!cluster.getSimClusterStateProvider().simListCollections().contains(CollectionAdminParams.SYSTEM_COLL)) {\n      cluster.getSimClusterStateProvider().createSystemCollection();\n      CloudTestUtils.waitForState(cluster, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, 1, false, true));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"1294fc81133ad1c53ea75edf471f5bea39621e68":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["6b55cd711a129fb7fc4c3c4672d652149c9a4faa"],"9c6c0dad4932399aec99b4818086cb1772773916":["a4422b331d00607258b0ed3e43934306e67764aa"],"6b55cd711a129fb7fc4c3c4672d652149c9a4faa":["1294fc81133ad1c53ea75edf471f5bea39621e68"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b70042a8a492f7054d480ccdd2be9796510d4327","6b55cd711a129fb7fc4c3c4672d652149c9a4faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["9c6c0dad4932399aec99b4818086cb1772773916","1294fc81133ad1c53ea75edf471f5bea39621e68"],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["9c6c0dad4932399aec99b4818086cb1772773916"],"f592209545c71895260367152601e9200399776d":["9c6c0dad4932399aec99b4818086cb1772773916","1294fc81133ad1c53ea75edf471f5bea39621e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f592209545c71895260367152601e9200399776d","6b55cd711a129fb7fc4c3c4672d652149c9a4faa"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1294fc81133ad1c53ea75edf471f5bea39621e68":["6b55cd711a129fb7fc4c3c4672d652149c9a4faa","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9c6c0dad4932399aec99b4818086cb1772773916":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"6b55cd711a129fb7fc4c3c4672d652149c9a4faa":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a4422b331d00607258b0ed3e43934306e67764aa":["9c6c0dad4932399aec99b4818086cb1772773916"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["1294fc81133ad1c53ea75edf471f5bea39621e68"],"f592209545c71895260367152601e9200399776d":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}