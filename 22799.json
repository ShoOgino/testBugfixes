{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","sourceNew":"  /**\n   * @param buckets\n   *          The number of buckets for weight discretization. Buckets are used\n   *          in {@link #add(BytesRef, int)} and must be smaller than the number\n   *          given here.\n   *          \n   * @param sorter\n   *          {@link BytesRefSorter} used for re-sorting input for the automaton.\n   *          For large inputs, use on-disk sorting implementations. The sorter\n   *          is closed automatically in {@link #build()} if it implements\n   *          {@link Closeable}.\n   *          \n   * @param shareMaxTailLength\n   *          Max shared suffix sharing length.\n   *          \n   *          See the description of this parameter in {@link Builder}'s constructor.\n   *          In general, for very large inputs you'll want to construct a non-minimal\n   *          automaton which will be larger, but the construction will take far less ram.\n   *          For minimal automata, set it to {@link Integer#MAX_VALUE}.\n   */\n  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {\n    if (buckets < 1 || buckets > 255) {\n      throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"\n          + buckets);\n    }\n    \n    if (sorter == null) throw new IllegalArgumentException(\n        \"BytesRefSorter must not be null.\");\n    \n    this.sorter = sorter;\n    this.buckets = buckets;\n    this.shareMaxTailLength = shareMaxTailLength;\n  }\n\n","sourceOld":"  /**\n   * @param buckets\n   *          The number of buckets for weight discretization. Buckets are used\n   *          in {@link #add(BytesRef, int)} and must be smaller than the number\n   *          given here.\n   *          \n   * @param sorter\n   *          {@link BytesRefSorter} used for re-sorting input for the automaton.\n   *          For large inputs, use on-disk sorting implementations. The sorter\n   *          is closed automatically in {@link #build()} if it implements\n   *          {@link Closeable}.\n   *          \n   * @param shareMaxTailLength\n   *          Max shared suffix sharing length.\n   *          \n   *          See the description of this parameter in {@link Builder}'s constructor.\n   *          In general, for very large inputs you'll want to construct a non-minimal\n   *          automaton which will be larger, but the construction will take far less ram.\n   *          For minimal automata, set it to {@link Integer#MAX_VALUE}.\n   */\n  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {\n    if (buckets < 1 || buckets > 255) {\n      throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"\n          + buckets);\n    }\n    \n    if (sorter == null) throw new IllegalArgumentException(\n        \"BytesRefSorter must not be null.\");\n    \n    this.sorter = sorter;\n    this.buckets = buckets;\n    this.shareMaxTailLength = shareMaxTailLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d36385b9911b2a5be7b1920f55c058f801417ee4","date":1348192394,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","sourceNew":"  /**\n   * Creates an FSTCompletion with the specified options.\n   * @param buckets\n   *          The number of buckets for weight discretization. Buckets are used\n   *          in {@link #add(BytesRef, int)} and must be smaller than the number\n   *          given here.\n   *          \n   * @param sorter\n   *          {@link BytesRefSorter} used for re-sorting input for the automaton.\n   *          For large inputs, use on-disk sorting implementations. The sorter\n   *          is closed automatically in {@link #build()} if it implements\n   *          {@link Closeable}.\n   *          \n   * @param shareMaxTailLength\n   *          Max shared suffix sharing length.\n   *          \n   *          See the description of this parameter in {@link Builder}'s constructor.\n   *          In general, for very large inputs you'll want to construct a non-minimal\n   *          automaton which will be larger, but the construction will take far less ram.\n   *          For minimal automata, set it to {@link Integer#MAX_VALUE}.\n   */\n  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {\n    if (buckets < 1 || buckets > 255) {\n      throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"\n          + buckets);\n    }\n    \n    if (sorter == null) throw new IllegalArgumentException(\n        \"BytesRefSorter must not be null.\");\n    \n    this.sorter = sorter;\n    this.buckets = buckets;\n    this.shareMaxTailLength = shareMaxTailLength;\n  }\n\n","sourceOld":"  /**\n   * @param buckets\n   *          The number of buckets for weight discretization. Buckets are used\n   *          in {@link #add(BytesRef, int)} and must be smaller than the number\n   *          given here.\n   *          \n   * @param sorter\n   *          {@link BytesRefSorter} used for re-sorting input for the automaton.\n   *          For large inputs, use on-disk sorting implementations. The sorter\n   *          is closed automatically in {@link #build()} if it implements\n   *          {@link Closeable}.\n   *          \n   * @param shareMaxTailLength\n   *          Max shared suffix sharing length.\n   *          \n   *          See the description of this parameter in {@link Builder}'s constructor.\n   *          In general, for very large inputs you'll want to construct a non-minimal\n   *          automaton which will be larger, but the construction will take far less ram.\n   *          For minimal automata, set it to {@link Integer#MAX_VALUE}.\n   */\n  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {\n    if (buckets < 1 || buckets > 255) {\n      throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"\n          + buckets);\n    }\n    \n    if (sorter == null) throw new IllegalArgumentException(\n        \"BytesRefSorter must not be null.\");\n    \n    this.sorter = sorter;\n    this.buckets = buckets;\n    this.shareMaxTailLength = shareMaxTailLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","sourceNew":"  /**\n   * Creates an FSTCompletion with the specified options.\n   * @param buckets\n   *          The number of buckets for weight discretization. Buckets are used\n   *          in {@link #add(BytesRef, int)} and must be smaller than the number\n   *          given here.\n   *          \n   * @param sorter\n   *          {@link BytesRefSorter} used for re-sorting input for the automaton.\n   *          For large inputs, use on-disk sorting implementations. The sorter\n   *          is closed automatically in {@link #build()} if it implements\n   *          {@link Closeable}.\n   *          \n   * @param shareMaxTailLength\n   *          Max shared suffix sharing length.\n   *          \n   *          See the description of this parameter in {@link org.apache.lucene.util.fst.FSTCompiler.Builder}.\n   *          In general, for very large inputs you'll want to construct a non-minimal\n   *          automaton which will be larger, but the construction will take far less ram.\n   *          For minimal automata, set it to {@link Integer#MAX_VALUE}.\n   */\n  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {\n    if (buckets < 1 || buckets > 255) {\n      throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"\n          + buckets);\n    }\n    \n    if (sorter == null) throw new IllegalArgumentException(\n        \"BytesRefSorter must not be null.\");\n    \n    this.sorter = sorter;\n    this.buckets = buckets;\n    this.shareMaxTailLength = shareMaxTailLength;\n  }\n\n","sourceOld":"  /**\n   * Creates an FSTCompletion with the specified options.\n   * @param buckets\n   *          The number of buckets for weight discretization. Buckets are used\n   *          in {@link #add(BytesRef, int)} and must be smaller than the number\n   *          given here.\n   *          \n   * @param sorter\n   *          {@link BytesRefSorter} used for re-sorting input for the automaton.\n   *          For large inputs, use on-disk sorting implementations. The sorter\n   *          is closed automatically in {@link #build()} if it implements\n   *          {@link Closeable}.\n   *          \n   * @param shareMaxTailLength\n   *          Max shared suffix sharing length.\n   *          \n   *          See the description of this parameter in {@link Builder}'s constructor.\n   *          In general, for very large inputs you'll want to construct a non-minimal\n   *          automaton which will be larger, but the construction will take far less ram.\n   *          For minimal automata, set it to {@link Integer#MAX_VALUE}.\n   */\n  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {\n    if (buckets < 1 || buckets > 255) {\n      throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"\n          + buckets);\n    }\n    \n    if (sorter == null) throw new IllegalArgumentException(\n        \"BytesRefSorter must not be null.\");\n    \n    this.sorter = sorter;\n    this.buckets = buckets;\n    this.shareMaxTailLength = shareMaxTailLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","sourceNew":"  /**\n   * Creates an FSTCompletion with the specified options.\n   * @param buckets\n   *          The number of buckets for weight discretization. Buckets are used\n   *          in {@link #add(BytesRef, int)} and must be smaller than the number\n   *          given here.\n   *          \n   * @param sorter\n   *          {@link BytesRefSorter} used for re-sorting input for the automaton.\n   *          For large inputs, use on-disk sorting implementations. The sorter\n   *          is closed automatically in {@link #build()} if it implements\n   *          {@link Closeable}.\n   *          \n   * @param shareMaxTailLength\n   *          Max shared suffix sharing length.\n   *          \n   *          See the description of this parameter in {@link org.apache.lucene.util.fst.FSTCompiler.Builder}.\n   *          In general, for very large inputs you'll want to construct a non-minimal\n   *          automaton which will be larger, but the construction will take far less ram.\n   *          For minimal automata, set it to {@link Integer#MAX_VALUE}.\n   */\n  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {\n    if (buckets < 1 || buckets > 255) {\n      throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"\n          + buckets);\n    }\n    \n    if (sorter == null) throw new IllegalArgumentException(\n        \"BytesRefSorter must not be null.\");\n    \n    this.sorter = sorter;\n    this.buckets = buckets;\n    this.shareMaxTailLength = shareMaxTailLength;\n  }\n\n","sourceOld":"  /**\n   * Creates an FSTCompletion with the specified options.\n   * @param buckets\n   *          The number of buckets for weight discretization. Buckets are used\n   *          in {@link #add(BytesRef, int)} and must be smaller than the number\n   *          given here.\n   *          \n   * @param sorter\n   *          {@link BytesRefSorter} used for re-sorting input for the automaton.\n   *          For large inputs, use on-disk sorting implementations. The sorter\n   *          is closed automatically in {@link #build()} if it implements\n   *          {@link Closeable}.\n   *          \n   * @param shareMaxTailLength\n   *          Max shared suffix sharing length.\n   *          \n   *          See the description of this parameter in {@link Builder}'s constructor.\n   *          In general, for very large inputs you'll want to construct a non-minimal\n   *          automaton which will be larger, but the construction will take far less ram.\n   *          For minimal automata, set it to {@link Integer#MAX_VALUE}.\n   */\n  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {\n    if (buckets < 1 || buckets > 255) {\n      throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"\n          + buckets);\n    }\n    \n    if (sorter == null) throw new IllegalArgumentException(\n        \"BytesRefSorter must not be null.\");\n    \n    this.sorter = sorter;\n    this.buckets = buckets;\n    this.shareMaxTailLength = shareMaxTailLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d36385b9911b2a5be7b1920f55c058f801417ee4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["d36385b9911b2a5be7b1920f55c058f801417ee4","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["d36385b9911b2a5be7b1920f55c058f801417ee4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"d36385b9911b2a5be7b1920f55c058f801417ee4":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d36385b9911b2a5be7b1920f55c058f801417ee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}