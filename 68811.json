{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandom2GraphBefore().mjava","commits":[{"id":"6795c6bc2f5a6b2a2230cb20ff4744003faf7802","date":1333839972,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandom2GraphBefore().mjava","pathOld":"/dev/null","sourceNew":"  // Adds MockGraphTokenFilter before SynFilter:\n  public void testRandom2GraphBefore() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream graph = new MockGraphTokenFilter(random, tokenizer);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(graph, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f595dff46c8bd30f84f62bce9585508142037961","date":1334085495,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandom2GraphBefore().mjava","sourceNew":null,"sourceOld":"  // Adds MockGraphTokenFilter before SynFilter:\n  public void testRandom2GraphBefore() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream graph = new MockGraphTokenFilter(random, tokenizer);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(graph, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandom2GraphBefore().mjava","sourceNew":null,"sourceOld":"  // Adds MockGraphTokenFilter before SynFilter:\n  public void testRandom2GraphBefore() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream graph = new MockGraphTokenFilter(random, tokenizer);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(graph, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a238fc456663f685a9db1ed8d680e348bb45171":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802","f595dff46c8bd30f84f62bce9585508142037961"],"f595dff46c8bd30f84f62bce9585508142037961":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f595dff46c8bd30f84f62bce9585508142037961"]},"commit2Childs":{"5a238fc456663f685a9db1ed8d680e348bb45171":[],"f595dff46c8bd30f84f62bce9585508142037961":["5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["5a238fc456663f685a9db1ed8d680e348bb45171","f595dff46c8bd30f84f62bce9585508142037961"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}