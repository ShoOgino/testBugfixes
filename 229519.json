{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Condition).mjava","commits":[{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":1,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Condition).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Clause.Condition).mjava","sourceNew":"  @Override\n  public String postValidate(Condition condition) {\n    if (condition.computedType == ComputedType.EQUAL) {\n      if (condition.getClause().tag != null &&\n//              condition.getClause().tag.varType == NODE &&\n          (condition.getClause().tag.op == Operand.WILDCARD || condition.getClause().tag.op == Operand.IN)) {\n        return null;\n      } else {\n        return \"'replica': '#EQUAL` must be used with 'node':'#ANY'\";\n      }\n    }\n    if (condition.computedType == ComputedType.ALL) {\n      if (condition.getClause().tag != null && (condition.getClause().getTag().op == Operand.IN ||\n          condition.getClause().getTag().op == Operand.WILDCARD)) {\n        return StrUtils.formatString(\"array value or wild card cannot be used for tag {0} with replica : '#ALL'\",\n            condition.getClause().tag.getName());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public String postValidate(Clause.Condition condition) {\n    if (condition.computedType == Clause.ComputedType.EQUAL) {\n      if (condition.getClause().tag != null &&\n//              condition.getClause().tag.varType == NODE &&\n          (condition.getClause().tag.op == Operand.WILDCARD || condition.getClause().tag.op == Operand.IN)) {\n        return null;\n      } else {\n        return \"'replica': '#EQUAL` must be used with 'node':'#ANY'\";\n      }\n    }\n    if (condition.computedType == Clause.ComputedType.ALL) {\n      if (condition.getClause().tag != null && (condition.getClause().getTag().op == Operand.IN ||\n          condition.getClause().getTag().op == Operand.WILDCARD)) {\n        return StrUtils.formatString(\"array value or wild card cannot be used for tag {0} with replica : '#ALL'\",\n            condition.getClause().tag.getName());\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff","date":1534173061,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Condition).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Condition).mjava","sourceNew":"  @Override\n  public String postValidate(Condition condition) {\n    if (condition.computedType == ComputedType.EQUAL) {\n      if (condition.getClause().tag != null &&\n//              condition.getClause().tag.varType == NODE &&\n          (condition.getClause().tag.op == Operand.WILDCARD || condition.getClause().tag.op == Operand.IN)) {\n        return null;\n      } else {\n        return \"'replica': '#EQUAL` must be used with 'node':'#ANY'\";\n      }\n    } else if (condition.computedType == ComputedType.ALL) {\n      if (condition.getClause().tag != null && (condition.getClause().getTag().op == Operand.IN ||\n          condition.getClause().getTag().op == Operand.WILDCARD)) {\n        return StrUtils.formatString(\"array value or wild card cannot be used for tag {0} with replica : '#ALL'\",\n            condition.getClause().tag.getName());\n      }\n    } else {\n      return checkNonEqualOp(condition);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public String postValidate(Condition condition) {\n    if (condition.computedType == ComputedType.EQUAL) {\n      if (condition.getClause().tag != null &&\n//              condition.getClause().tag.varType == NODE &&\n          (condition.getClause().tag.op == Operand.WILDCARD || condition.getClause().tag.op == Operand.IN)) {\n        return null;\n      } else {\n        return \"'replica': '#EQUAL` must be used with 'node':'#ANY'\";\n      }\n    }\n    if (condition.computedType == ComputedType.ALL) {\n      if (condition.getClause().tag != null && (condition.getClause().getTag().op == Operand.IN ||\n          condition.getClause().getTag().op == Operand.WILDCARD)) {\n        return StrUtils.formatString(\"array value or wild card cannot be used for tag {0} with replica : '#ALL'\",\n            condition.getClause().tag.getName());\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7194afdfe9b45ca331c1cd5001cd9766688688b","date":1560867417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Condition).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Condition).mjava","sourceNew":"  @Override\n  public String postValidate(Condition condition) {\n    Object val = condition.clause.getThirdTag().val;\n    boolean isNodesetObjectList = condition.clause.nodeSetPresent &&  (val instanceof List) && ((List)val).get(0) instanceof Condition ;\n    if(condition.clause.nodeSetPresent ){\n      if(condition.computedType == ComputedType.EQUAL){\n        if(!isNodesetObjectList) return \" 'nodeset' must have an array value when 'replica': '#EQUAL` is used\";\n      } else {\n        if(isNodesetObjectList){\n          return \"cannot use array value for nodeset if replica : '#EQUAL' is not used\";\n        }\n\n      }\n\n    }\n\n    if (condition.computedType == ComputedType.EQUAL) {\n      if (condition.getClause().tag != null &&\n          (condition.getClause().tag.op == Operand.WILDCARD || condition.getClause().tag.op == Operand.IN)) {\n        return null;\n      } else {\n        return \"'replica': '#EQUAL` must be used with 'node':'#ANY'\";\n      }\n    } else if (condition.computedType == ComputedType.ALL) {\n      if(isNodesetObjectList) return \"replica: '#ALL' cannot be used with a list of values in nodeset\";\n      if (condition.getClause().tag != null && (condition.getClause().getTag().op == Operand.IN ||\n          condition.getClause().getTag().op == Operand.WILDCARD)) {\n        return StrUtils.formatString(\"array value or wild card cannot be used for tag {0} with replica : '#ALL'\",\n            condition.getClause().tag.getName());\n      }\n    } else {\n      return checkNonEqualOp(condition);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public String postValidate(Condition condition) {\n    if (condition.computedType == ComputedType.EQUAL) {\n      if (condition.getClause().tag != null &&\n//              condition.getClause().tag.varType == NODE &&\n          (condition.getClause().tag.op == Operand.WILDCARD || condition.getClause().tag.op == Operand.IN)) {\n        return null;\n      } else {\n        return \"'replica': '#EQUAL` must be used with 'node':'#ANY'\";\n      }\n    } else if (condition.computedType == ComputedType.ALL) {\n      if (condition.getClause().tag != null && (condition.getClause().getTag().op == Operand.IN ||\n          condition.getClause().getTag().op == Operand.WILDCARD)) {\n        return StrUtils.formatString(\"array value or wild card cannot be used for tag {0} with replica : '#ALL'\",\n            condition.getClause().tag.getName());\n      }\n    } else {\n      return checkNonEqualOp(condition);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#postValidate(Condition).mjava","sourceNew":null,"sourceOld":"  @Override\n  public String postValidate(Condition condition) {\n    Object val = condition.clause.getThirdTag().val;\n    boolean isNodesetObjectList = condition.clause.nodeSetPresent &&  (val instanceof List) && ((List)val).get(0) instanceof Condition ;\n    if(condition.clause.nodeSetPresent ){\n      if(condition.computedType == ComputedType.EQUAL){\n        if(!isNodesetObjectList) return \" 'nodeset' must have an array value when 'replica': '#EQUAL` is used\";\n      } else {\n        if(isNodesetObjectList){\n          return \"cannot use array value for nodeset if replica : '#EQUAL' is not used\";\n        }\n\n      }\n\n    }\n\n    if (condition.computedType == ComputedType.EQUAL) {\n      if (condition.getClause().tag != null &&\n          (condition.getClause().tag.op == Operand.WILDCARD || condition.getClause().tag.op == Operand.IN)) {\n        return null;\n      } else {\n        return \"'replica': '#EQUAL` must be used with 'node':'#ANY'\";\n      }\n    } else if (condition.computedType == ComputedType.ALL) {\n      if(isNodesetObjectList) return \"replica: '#ALL' cannot be used with a list of values in nodeset\";\n      if (condition.getClause().tag != null && (condition.getClause().getTag().op == Operand.IN ||\n          condition.getClause().getTag().op == Operand.WILDCARD)) {\n        return StrUtils.formatString(\"array value or wild card cannot be used for tag {0} with replica : '#ALL'\",\n            condition.getClause().tag.getName());\n      }\n    } else {\n      return checkNonEqualOp(condition);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff"],"3f504512a03d978990cbff30db0522b354e846db":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff"],"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}