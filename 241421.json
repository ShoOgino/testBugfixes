{"path":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection#setDefaultHeaders(NVPair[]).mjava","commits":[{"id":"bc6055f4a2e8e9f9caaec2297010c9502480ed69","date":1050060580,"type":0,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection#setDefaultHeaders(NVPair[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sets the default http headers to be sent with each request. The actual\n     * headers sent are determined as follows: for each header specified in\n     * multiple places a value given as part of the request takes priority over\n     * any default values set by this method, which in turn takes priority over\n     * any built-in default values. A different way of looking at it is that we\n     * start off with a list of all headers specified with the request, then add\n     * any default headers set by this method which aren't already in our list,\n     * and finally add any built-in headers which aren't yet in the list. There\n     * is one exception to this rule: the \"Content-length\" header is always\n     * ignored; and when posting form-data any default \"Content-type\" is ignored\n     * in favor of the built-in \"application/x-www-form-urlencoded\" (however it\n     * will be overriden by any content-type header specified as part of the\n     * request). <P>\n     *\n     * Typical headers you might want to set here are \"Accept\" and its\n     * \"Accept-*\" relatives, \"Connection\", \"From\", \"User-Agent\", etc.\n     *\n     * @param headers  an array of header-name/value pairs (do not give the\n     *      separating ':').\n     */\n    public void setDefaultHeaders(NVPair[] headers)\n    {\n        int length = (headers == null ? 0 : headers.length);\n        NVPair[] def_hdrs = new NVPair[length];\n\n        // weed out undesired headers\n        int sidx;\n\n        // weed out undesired headers\n        int didx;\n        for (sidx = 0, didx = 0; sidx < length; sidx++)\n        {\n            if (headers[sidx] == null)\n            {\n                continue;\n            }\n\n            String name = headers[sidx].getName().trim();\n            if (name.equalsIgnoreCase(\"Content-length\"))\n            {\n                continue;\n            }\n\n            def_hdrs[didx++] = headers[sidx];\n        }\n\n        if (didx < length)\n        {\n            def_hdrs = Util.resizeArray(def_hdrs, didx);\n        }\n\n        synchronized (DefaultHeaders)\n        {\n            DefaultHeaders = def_hdrs;\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection#setDefaultHeaders(NVPair[]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Sets the default http headers to be sent with each request. The actual\n     * headers sent are determined as follows: for each header specified in\n     * multiple places a value given as part of the request takes priority over\n     * any default values set by this method, which in turn takes priority over\n     * any built-in default values. A different way of looking at it is that we\n     * start off with a list of all headers specified with the request, then add\n     * any default headers set by this method which aren't already in our list,\n     * and finally add any built-in headers which aren't yet in the list. There\n     * is one exception to this rule: the \"Content-length\" header is always\n     * ignored; and when posting form-data any default \"Content-type\" is ignored\n     * in favor of the built-in \"application/x-www-form-urlencoded\" (however it\n     * will be overriden by any content-type header specified as part of the\n     * request). <P>\n     *\n     * Typical headers you might want to set here are \"Accept\" and its\n     * \"Accept-*\" relatives, \"Connection\", \"From\", \"User-Agent\", etc.\n     *\n     * @param headers  an array of header-name/value pairs (do not give the\n     *      separating ':').\n     */\n    public void setDefaultHeaders(NVPair[] headers)\n    {\n        int length = (headers == null ? 0 : headers.length);\n        NVPair[] def_hdrs = new NVPair[length];\n\n        // weed out undesired headers\n        int sidx;\n\n        // weed out undesired headers\n        int didx;\n        for (sidx = 0, didx = 0; sidx < length; sidx++)\n        {\n            if (headers[sidx] == null)\n            {\n                continue;\n            }\n\n            String name = headers[sidx].getName().trim();\n            if (name.equalsIgnoreCase(\"Content-length\"))\n            {\n                continue;\n            }\n\n            def_hdrs[didx++] = headers[sidx];\n        }\n\n        if (didx < length)\n        {\n            def_hdrs = Util.resizeArray(def_hdrs, didx);\n        }\n\n        synchronized (DefaultHeaders)\n        {\n            DefaultHeaders = def_hdrs;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}