{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getStringIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.StringIndex fcsi = FieldCache.DEFAULT.getStringIndex(reader, field);\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal);\n        \n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we never need to use TermDocs,\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, false) {\n          @Override\n          final boolean matchDoc(int doc) {\n            return fcsi.order[doc] >= inclusiveLowerPoint && fcsi.order[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getStringIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.StringIndex fcsi = FieldCache.DEFAULT.getStringIndex(reader, field);\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal);\n        \n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we never need to use TermDocs,\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, false) {\n          @Override\n          final boolean matchDoc(int doc) {\n            return fcsi.order[doc] >= inclusiveLowerPoint && fcsi.order[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getStringIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.StringIndex fcsi = FieldCache.DEFAULT.getStringIndex(reader, field);\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal);\n        \n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            return fcsi.order[doc] >= inclusiveLowerPoint && fcsi.order[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getStringIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.StringIndex fcsi = FieldCache.DEFAULT.getStringIndex(reader, field);\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal);\n        \n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we never need to use TermDocs,\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, false) {\n          @Override\n          final boolean matchDoc(int doc) {\n            return fcsi.order[doc] >= inclusiveLowerPoint && fcsi.order[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getStringIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getStringIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.StringIndex fcsi = FieldCache.DEFAULT.getStringIndex(reader, field);\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal);\n        \n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            return fcsi.order[doc] >= inclusiveLowerPoint && fcsi.order[doc] <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"444ad7e7387cb262e7c9515d0847b4082e7227a3","date":1283181885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getStringIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getStringIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(context.reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(context.reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(context.reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(context.reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(context.reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        // for this DocIdSet, we can ignore deleted docs\n        // because deleted docs have an order of 0 (null entry in StringIndex)\n        return new FieldCacheDocIdSet(context.reader, true) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d55536a3153c541924af58559781c36228d25420","date":1322184113,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheRangeFilter#newStringRange(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a string range filter using {@link FieldCache#getTermsIndex}. This works with all\n   * fields containing zero or one term in the field. The range can be half-open by setting one\n   * of the values to <code>null</code>.\n   */\n  public static FieldCacheRangeFilter<String> newStringRange(String field, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    return new FieldCacheRangeFilter<String>(field, null, lowerVal, upperVal, includeLower, includeUpper) {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), field);\n        final BytesRef spare = new BytesRef();\n        final int lowerPoint = fcsi.binarySearchLookup(lowerVal == null ? null : new BytesRef(lowerVal), spare);\n        final int upperPoint = fcsi.binarySearchLookup(upperVal == null ? null : new BytesRef(upperVal), spare);\n\n        final int inclusiveLowerPoint, inclusiveUpperPoint;\n\n        // Hints:\n        // * binarySearchLookup returns 0, if value was null.\n        // * the value is <0 if no exact hit was found, the returned value\n        //   is (-(insertion point) - 1)\n        if (lowerPoint == 0) {\n          assert lowerVal == null;\n          inclusiveLowerPoint = 1;\n        } else if (includeLower && lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint;\n        } else if (lowerPoint > 0) {\n          inclusiveLowerPoint = lowerPoint + 1;\n        } else {\n          inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);\n        }\n        \n        if (upperPoint == 0) {\n          assert upperVal == null;\n          inclusiveUpperPoint = Integer.MAX_VALUE;  \n        } else if (includeUpper && upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint;\n        } else if (upperPoint > 0) {\n          inclusiveUpperPoint = upperPoint - 1;\n        } else {\n          inclusiveUpperPoint = -upperPoint - 2;\n        }      \n\n        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)\n          return DocIdSet.EMPTY_DOCIDSET;\n        \n        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;\n        \n        return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n          @Override\n          protected final boolean matchDoc(int doc) {\n            final int docOrd = fcsi.getOrd(doc);\n            return docOrd >= inclusiveLowerPoint && docOrd <= inclusiveUpperPoint;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"444ad7e7387cb262e7c9515d0847b4082e7227a3":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"6620df8541b174097b1133a4fc370adb2e570524":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["d55536a3153c541924af58559781c36228d25420"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","444ad7e7387cb262e7c9515d0847b4082e7227a3"],"d55536a3153c541924af58559781c36228d25420":["6620df8541b174097b1133a4fc370adb2e570524"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d55536a3153c541924af58559781c36228d25420","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["444ad7e7387cb262e7c9515d0847b4082e7227a3","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["444ad7e7387cb262e7c9515d0847b4082e7227a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"444ad7e7387cb262e7c9515d0847b4082e7227a3":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["444ad7e7387cb262e7c9515d0847b4082e7227a3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"6620df8541b174097b1133a4fc370adb2e570524":["d55536a3153c541924af58559781c36228d25420"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d55536a3153c541924af58559781c36228d25420":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["6620df8541b174097b1133a4fc370adb2e570524","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}