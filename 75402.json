{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","pathOld":"/dev/null","sourceNew":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commondCloudSolrClient == null) {\n        commondCloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(),\n            random().nextBoolean());\n        commondCloudSolrClient.getLbClient().setConnectionTimeout(30000);\n        commondCloudSolrClient.setParallelUpdates(random().nextBoolean());\n        commondCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commondCloudSolrClient.connect();\n      }\n    }\n    return commondCloudSolrClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"234afba21d42e6c527535c6aa11baba09a4771f3","date":1432825127,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","sourceNew":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        boolean updatesToLeaders = random().nextBoolean();\n        boolean parallelUpdates = random().nextBoolean();\n        commonCloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(),\n                updatesToLeaders);\n        commonCloudSolrClient.getLbClient().setConnectionTimeout(5000);\n        commonCloudSolrClient.getLbClient().setSoTimeout(120000);\n        commonCloudSolrClient.setParallelUpdates(parallelUpdates);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\", updatesToLeaders, parallelUpdates);\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","sourceOld":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commondCloudSolrClient == null) {\n        commondCloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(),\n            random().nextBoolean());\n        commondCloudSolrClient.getLbClient().setConnectionTimeout(30000);\n        commondCloudSolrClient.setParallelUpdates(random().nextBoolean());\n        commondCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commondCloudSolrClient.connect();\n      }\n    }\n    return commondCloudSolrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","sourceNew":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        boolean updatesToLeaders = random().nextBoolean();\n        boolean parallelUpdates = random().nextBoolean();\n        commonCloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(),\n                updatesToLeaders);\n        commonCloudSolrClient.getLbClient().setConnectionTimeout(5000);\n        commonCloudSolrClient.getLbClient().setSoTimeout(120000);\n        commonCloudSolrClient.setParallelUpdates(parallelUpdates);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\", updatesToLeaders, parallelUpdates);\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","sourceOld":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        boolean updatesToLeaders = random().nextBoolean();\n        boolean parallelUpdates = random().nextBoolean();\n        commonCloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(),\n                updatesToLeaders);\n        commonCloudSolrClient.getLbClient().setConnectionTimeout(5000);\n        commonCloudSolrClient.getLbClient().setSoTimeout(120000);\n        commonCloudSolrClient.setParallelUpdates(parallelUpdates);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\", updatesToLeaders, parallelUpdates);\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","sourceNew":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        boolean updatesToLeaders = random().nextBoolean();\n        boolean parallelUpdates = random().nextBoolean();\n        commonCloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(),\n                updatesToLeaders);\n        commonCloudSolrClient.getLbClient().setConnectionTimeout(5000);\n        commonCloudSolrClient.getLbClient().setSoTimeout(120000);\n        commonCloudSolrClient.setParallelUpdates(parallelUpdates);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\", updatesToLeaders, parallelUpdates);\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","sourceOld":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        boolean updatesToLeaders = random().nextBoolean();\n        boolean parallelUpdates = random().nextBoolean();\n        commonCloudSolrClient = new CloudSolrClient(zkServer.getZkAddress(),\n                updatesToLeaders);\n        commonCloudSolrClient.getLbClient().setConnectionTimeout(5000);\n        commonCloudSolrClient.getLbClient().setSoTimeout(120000);\n        commonCloudSolrClient.setParallelUpdates(parallelUpdates);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\", updatesToLeaders, parallelUpdates);\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","sourceNew":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        boolean updatesToLeaders = random().nextBoolean();\n        boolean parallelUpdates = random().nextBoolean();\n        commonCloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(),\n                updatesToLeaders, 5000, 120000);\n        commonCloudSolrClient.setParallelUpdates(parallelUpdates);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\", updatesToLeaders, parallelUpdates);\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","sourceOld":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        boolean updatesToLeaders = random().nextBoolean();\n        boolean parallelUpdates = random().nextBoolean();\n        commonCloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(),\n                updatesToLeaders);\n        commonCloudSolrClient.getLbClient().setConnectionTimeout(5000);\n        commonCloudSolrClient.getLbClient().setSoTimeout(120000);\n        commonCloudSolrClient.setParallelUpdates(parallelUpdates);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\", updatesToLeaders, parallelUpdates);\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","sourceNew":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        boolean updatesToLeaders = random().nextBoolean();\n        boolean parallelUpdates = random().nextBoolean();\n        commonCloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(),\n                updatesToLeaders, 5000, 120000);\n        commonCloudSolrClient.setParallelUpdates(parallelUpdates);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\", updatesToLeaders, parallelUpdates);\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","sourceOld":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        boolean updatesToLeaders = random().nextBoolean();\n        boolean parallelUpdates = random().nextBoolean();\n        commonCloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(),\n                updatesToLeaders);\n        commonCloudSolrClient.getLbClient().setConnectionTimeout(5000);\n        commonCloudSolrClient.getLbClient().setSoTimeout(120000);\n        commonCloudSolrClient.setParallelUpdates(parallelUpdates);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\", updatesToLeaders, parallelUpdates);\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c","date":1510261138,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","sourceNew":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        commonCloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(),\n            random().nextBoolean(), 5000, 120000);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\",\n            commonCloudSolrClient.isUpdatesToLeaders(), commonCloudSolrClient.isParallelUpdates());\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","sourceOld":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        boolean updatesToLeaders = random().nextBoolean();\n        boolean parallelUpdates = random().nextBoolean();\n        commonCloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(),\n                updatesToLeaders, 5000, 120000);\n        commonCloudSolrClient.setParallelUpdates(parallelUpdates);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\", updatesToLeaders, parallelUpdates);\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrClient().mjava","sourceNew":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        commonCloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(),\n            random().nextBoolean(), 5000, 120000);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        if (log.isInfoEnabled()) {\n          log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\",\n              commonCloudSolrClient.isUpdatesToLeaders(), commonCloudSolrClient.isParallelUpdates());\n        }\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","sourceOld":"  protected CloudSolrClient getCommonCloudSolrClient() {\n    synchronized (this) {\n      if (commonCloudSolrClient == null) {\n        commonCloudSolrClient = getCloudSolrClient(zkServer.getZkAddress(),\n            random().nextBoolean(), 5000, 120000);\n        commonCloudSolrClient.setDefaultCollection(DEFAULT_COLLECTION);\n        commonCloudSolrClient.connect();\n        log.info(\"Created commonCloudSolrClient with updatesToLeaders={} and parallelUpdates={}\",\n            commonCloudSolrClient.isUpdatesToLeaders(), commonCloudSolrClient.isParallelUpdates());\n      }\n    }\n    return commonCloudSolrClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c":["43d1e498704edd2bba13548a189eed4dfccff11b"],"43d1e498704edd2bba13548a189eed4dfccff11b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","43d1e498704edd2bba13548a189eed4dfccff11b"],"234afba21d42e6c527535c6aa11baba09a4771f3":["bafca15d8e408346a67f4282ad1143b88023893b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["234afba21d42e6c527535c6aa11baba09a4771f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["234afba21d42e6c527535c6aa11baba09a4771f3","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"43d1e498704edd2bba13548a189eed4dfccff11b":["15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"234afba21d42e6c527535c6aa11baba09a4771f3":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"bafca15d8e408346a67f4282ad1143b88023893b":["234afba21d42e6c527535c6aa11baba09a4771f3"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}