{"path":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testComputePivotFeatureValue().mjava","commits":[{"id":"966dd6f2a1942842f7efe2bdcc7537ea6597a290","date":1521543449,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testComputePivotFeatureValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testComputePivotFeatureValue() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n    Document doc = new Document();\n    FeatureField pagerank = new FeatureField(\"features\", \"pagerank\", 1);\n    doc.add(pagerank);\n\n    pagerank.setFeatureValue(10);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(100);\n    writer.addDocument(doc);\n\n    writer.addDocument(new Document()); // gap\n\n    pagerank.setFeatureValue(1);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(42);\n    writer.addDocument(doc);\n\n    DirectoryReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    float pivot = FeatureField.computePivotFeatureValue(searcher, \"features\", \"pagerank\");\n    double expected = Math.pow(10 * 100 * 1 * 42, 1/4.); // geometric mean\n    assertEquals(expected, pivot, 0.1);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testComputePivotFeatureValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testComputePivotFeatureValue() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n    Document doc = new Document();\n    FeatureField pagerank = new FeatureField(\"features\", \"pagerank\", 1);\n    doc.add(pagerank);\n\n    pagerank.setFeatureValue(10);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(100);\n    writer.addDocument(doc);\n\n    writer.addDocument(new Document()); // gap\n\n    pagerank.setFeatureValue(1);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(42);\n    writer.addDocument(doc);\n\n    DirectoryReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    float pivot = FeatureField.computePivotFeatureValue(searcher, \"features\", \"pagerank\");\n    double expected = Math.pow(10 * 100 * 1 * 42, 1/4.); // geometric mean\n    assertEquals(expected, pivot, 0.1);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302","date":1526484586,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testComputePivotFeatureValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testComputePivotFeatureValue().mjava","sourceNew":"  public void testComputePivotFeatureValue() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n\n    // Make sure that we create a legal pivot on missing features\n    DirectoryReader reader = writer.getReader();\n    float pivot = FeatureField.computePivotFeatureValue(reader, \"features\", \"pagerank\");\n    assertTrue(Float.isFinite(pivot));\n    assertTrue(pivot > 0);\n    reader.close();\n\n    Document doc = new Document();\n    FeatureField pagerank = new FeatureField(\"features\", \"pagerank\", 1);\n    doc.add(pagerank);\n\n    pagerank.setFeatureValue(10);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(100);\n    writer.addDocument(doc);\n\n    writer.addDocument(new Document()); // gap\n\n    pagerank.setFeatureValue(1);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(42);\n    writer.addDocument(doc);\n\n    reader = writer.getReader();\n    writer.close();\n\n    pivot = FeatureField.computePivotFeatureValue(reader, \"features\", \"pagerank\");\n    double expected = Math.pow(10 * 100 * 1 * 42, 1/4.); // geometric mean\n    assertEquals(expected, pivot, 0.1);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testComputePivotFeatureValue() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig());\n    Document doc = new Document();\n    FeatureField pagerank = new FeatureField(\"features\", \"pagerank\", 1);\n    doc.add(pagerank);\n\n    pagerank.setFeatureValue(10);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(100);\n    writer.addDocument(doc);\n\n    writer.addDocument(new Document()); // gap\n\n    pagerank.setFeatureValue(1);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(42);\n    writer.addDocument(doc);\n\n    DirectoryReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    float pivot = FeatureField.computePivotFeatureValue(searcher, \"features\", \"pagerank\");\n    double expected = Math.pow(10 * 100 * 1 * 42, 1/4.); // geometric mean\n    assertEquals(expected, pivot, 0.1);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["808f86d4b1e5fa52de29b80a5e44b1dcc79ea302"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["808f86d4b1e5fa52de29b80a5e44b1dcc79ea302"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}