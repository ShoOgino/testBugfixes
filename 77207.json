{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#SectorLinearCrossingEdgeIterator(GeoPoint,Plane,Plane,Plane,double,double,double).mjava","commits":[{"id":"039615f2ceafe5881c61222281f45a0631b90174","date":1524725949,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#SectorLinearCrossingEdgeIterator(GeoPoint,Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#SectorLinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","sourceNew":"    public SectorLinearCrossingEdgeIterator(final GeoPoint testPoint,\n      final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.testPoint = testPoint;\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      // This is safe since we know we aren't doing a full 1/2 a world.\n      this.bound1 = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","sourceOld":"    public SectorLinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      // This is safe since we know we aren't doing a full 1/2 a world.\n      this.bound1 = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ddb4f16cfdfa4f6fa9349fb90d48b0f1e6f040","date":1524832766,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#SectorLinearCrossingEdgeIterator(GeoPoint,Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#SectorLinearCrossingEdgeIterator(GeoPoint,Plane,Plane,Plane,double,double,double).mjava","sourceNew":"    public SectorLinearCrossingEdgeIterator(final GeoPoint testPoint,\n      final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      assert plane.evaluateIsZero(thePointX, thePointY, thePointZ) : \"Check point is not on travel plane\";\n      assert plane.evaluateIsZero(testPoint) : \"Test point is not on travel plane\";\n      this.testPoint = testPoint;\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      // We have to be sure we don't accidently create two bounds that would exclude all points.\n      // Not sure this can happen but...\n      final SidedPlane bound1Plane = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      final SidedPlane bound2Plane = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      if (bound1Plane.isNumericallyIdentical(bound2Plane)) {\n        throw new IllegalArgumentException(\"Sector iterator unreliable when bounds planes are numerically identical\");\n      }\n      this.bound1 = bound1Plane;\n      this.bound2 = bound2Plane;\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n      //System.out.println(\" Constructing sector linear crossing edge iterator\");\n      //debugIntersectAllEdges(plane, bound1, bound2);\n    }\n\n","sourceOld":"    public SectorLinearCrossingEdgeIterator(final GeoPoint testPoint,\n      final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.testPoint = testPoint;\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      // This is safe since we know we aren't doing a full 1/2 a world.\n      this.bound1 = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","bugFix":["1e7090fb56105afb6515b6506724359c32ec7639"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e456381ade0a256838cbf558702284e345c8d3d6","date":1524920804,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#SectorLinearCrossingEdgeIterator(GeoPoint,Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#SectorLinearCrossingEdgeIterator(GeoPoint,Plane,Plane,Plane,double,double,double).mjava","sourceNew":"    public SectorLinearCrossingEdgeIterator(final GeoPoint testPoint,\n      final Plane plane, final Plane abovePlane, final Plane belowPlane, \n      final double thePointX, final double thePointY, final double thePointZ) {\n      assert plane.evaluateIsZero(thePointX, thePointY, thePointZ) : \"Check point is not on travel plane\";\n      assert plane.evaluateIsZero(testPoint) : \"Test point is not on travel plane\";\n      this.testPoint = testPoint;\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      // We have to be sure we don't accidently create two bounds that would exclude all points.\n      // Not sure this can happen but...\n      final SidedPlane bound1Plane = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      final SidedPlane bound2Plane = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      if (bound1Plane.isNumericallyIdentical(bound2Plane)) {\n        throw new IllegalArgumentException(\"Sector iterator unreliable when bounds planes are numerically identical\");\n      }\n      this.bound1 = bound1Plane;\n      this.bound2 = bound2Plane;\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n      //System.out.println(\" Constructing sector linear crossing edge iterator\");\n      //debugIntersectAllEdges(plane, bound1, bound2);\n    }\n\n","sourceOld":"    public SectorLinearCrossingEdgeIterator(final GeoPoint testPoint,\n      final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      assert plane.evaluateIsZero(thePointX, thePointY, thePointZ) : \"Check point is not on travel plane\";\n      assert plane.evaluateIsZero(testPoint) : \"Test point is not on travel plane\";\n      this.testPoint = testPoint;\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      // We have to be sure we don't accidently create two bounds that would exclude all points.\n      // Not sure this can happen but...\n      final SidedPlane bound1Plane = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      final SidedPlane bound2Plane = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      if (bound1Plane.isNumericallyIdentical(bound2Plane)) {\n        throw new IllegalArgumentException(\"Sector iterator unreliable when bounds planes are numerically identical\");\n      }\n      this.bound1 = bound1Plane;\n      this.bound2 = bound2Plane;\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n      //System.out.println(\" Constructing sector linear crossing edge iterator\");\n      //debugIntersectAllEdges(plane, bound1, bound2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e456381ade0a256838cbf558702284e345c8d3d6":["d1ddb4f16cfdfa4f6fa9349fb90d48b0f1e6f040"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1ddb4f16cfdfa4f6fa9349fb90d48b0f1e6f040":["039615f2ceafe5881c61222281f45a0631b90174"],"039615f2ceafe5881c61222281f45a0631b90174":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e456381ade0a256838cbf558702284e345c8d3d6"]},"commit2Childs":{"e456381ade0a256838cbf558702284e345c8d3d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["039615f2ceafe5881c61222281f45a0631b90174"],"d1ddb4f16cfdfa4f6fa9349fb90d48b0f1e6f040":["e456381ade0a256838cbf558702284e345c8d3d6"],"039615f2ceafe5881c61222281f45a0631b90174":["d1ddb4f16cfdfa4f6fa9349fb90d48b0f1e6f040"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}