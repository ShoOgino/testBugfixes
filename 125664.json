{"path":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(ReaderContext).mjava","sourceNew":"  @Override\n  public synchronized DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public synchronized DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7da4ef858fd1769c26618bc6a24e479d88e7180f","date":1313600819,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public synchronized DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public synchronized DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7da4ef858fd1769c26618bc6a24e479d88e7180f":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7da4ef858fd1769c26618bc6a24e479d88e7180f"]},"commit2Childs":{"7da4ef858fd1769c26618bc6a24e479d88e7180f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["7da4ef858fd1769c26618bc6a24e479d88e7180f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}