{"path":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","commits":[{"id":"8293bb9f086fce9590482de97de6eac8381ae15a","date":1432275970,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      Map<String, String> params = new HashMap();\n      params.put(\"type\", \"kerberos\");\n      params.put(\"kerberos.name.rules\", System.getProperty(\"solr.kerberos.name.rules\", \"DEFAULT\"));\n      params.put(\"token.valid\", System.getProperty(\"solr.kerberos.token.valid\", \"30\"));\n      params.put(\"cookie.domain\", System.getProperty(\"solr.kerberos.cookie.domain\"));\n      params.put(\"cookie.path\", System.getProperty(\"solr.kerberos.cookie.path\", \"/\"));\n      params.put(\"kerberos.principal\", System.getProperty(\"solr.kerberos.principal\"));\n      params.put(\"kerberos.keytab\", System.getProperty(\"solr.kerberos.keytab\"));\n\n      log.info(\"Params: \"+params);\n\n      FilterConfig conf = new FilterConfig() {\n        @Override\n        public ServletContext getServletContext() {\n          return noContext;\n        }\n\n        @Override\n        public Enumeration<String> getInitParameterNames() {\n          return new IteratorEnumeration(params.keySet().iterator());\n        }\n\n        @Override\n        public String getInitParameter(String param) {\n          return params.get(param);\n        }\n\n        @Override\n        public String getFilterName() {\n          return \"KerberosFilter\";\n        }\n      };\n\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"814b09f7caddc0d041bf4bac96336638511c7f5f","date":1432568708,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      Map<String, String> params = new HashMap();\n      params.put(\"type\", \"kerberos\");\n      putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n      putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n      putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n\n      log.info(\"Params: \"+params);\n\n      FilterConfig conf = new FilterConfig() {\n        @Override\n        public ServletContext getServletContext() {\n          return noContext;\n        }\n\n        @Override\n        public Enumeration<String> getInitParameterNames() {\n          return new IteratorEnumeration(params.keySet().iterator());\n        }\n\n        @Override\n        public String getInitParameter(String param) {\n          return params.get(param);\n        }\n\n        @Override\n        public String getFilterName() {\n          return \"KerberosFilter\";\n        }\n      };\n\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      Map<String, String> params = new HashMap();\n      params.put(\"type\", \"kerberos\");\n      params.put(\"kerberos.name.rules\", System.getProperty(\"solr.kerberos.name.rules\", \"DEFAULT\"));\n      params.put(\"token.valid\", System.getProperty(\"solr.kerberos.token.valid\", \"30\"));\n      params.put(\"cookie.domain\", System.getProperty(\"solr.kerberos.cookie.domain\"));\n      params.put(\"cookie.path\", System.getProperty(\"solr.kerberos.cookie.path\", \"/\"));\n      params.put(\"kerberos.principal\", System.getProperty(\"solr.kerberos.principal\"));\n      params.put(\"kerberos.keytab\", System.getProperty(\"solr.kerberos.keytab\"));\n\n      log.info(\"Params: \"+params);\n\n      FilterConfig conf = new FilterConfig() {\n        @Override\n        public ServletContext getServletContext() {\n          return noContext;\n        }\n\n        @Override\n        public Enumeration<String> getInitParameterNames() {\n          return new IteratorEnumeration(params.keySet().iterator());\n        }\n\n        @Override\n        public String getInitParameter(String param) {\n          return params.get(param);\n        }\n\n        @Override\n        public String getFilterName() {\n          return \"KerberosFilter\";\n        }\n      };\n\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d8478e1507f625c01f80a2f9f6dccd426a95708","date":1449667316,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      Map<String, String> params = new HashMap();\n      params.put(\"type\", \"kerberos\");\n      putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n      putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n      putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n\n      // Special handling for the \"cookie.domain\" based on whether port should be\n      // appended to the domain. Useful for situations where multiple solr nodes are\n      // on the same host.\n      String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n      boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n      if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n        putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n      } else { // we need port aware cookies and we are in SolrCloud mode.\n        String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n        if (host==null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n        }\n        int port = coreContainer.getZkController().getHostPort();\n        params.put(\"cookie.domain\", host + \":\" + port);\n      }\n      \n      log.info(\"Params: \"+params);\n\n      FilterConfig conf = new FilterConfig() {\n        @Override\n        public ServletContext getServletContext() {\n          return noContext;\n        }\n\n        @Override\n        public Enumeration<String> getInitParameterNames() {\n          return new IteratorEnumeration(params.keySet().iterator());\n        }\n\n        @Override\n        public String getInitParameter(String param) {\n          return params.get(param);\n        }\n\n        @Override\n        public String getFilterName() {\n          return \"KerberosFilter\";\n        }\n      };\n\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      Map<String, String> params = new HashMap();\n      params.put(\"type\", \"kerberos\");\n      putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n      putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n      putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n      putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n\n      log.info(\"Params: \"+params);\n\n      FilterConfig conf = new FilterConfig() {\n        @Override\n        public ServletContext getServletContext() {\n          return noContext;\n        }\n\n        @Override\n        public Enumeration<String> getInitParameterNames() {\n          return new IteratorEnumeration(params.keySet().iterator());\n        }\n\n        @Override\n        public String getInitParameter(String param) {\n          return params.get(param);\n        }\n\n        @Override\n        public String getFilterName() {\n          return \"KerberosFilter\";\n        }\n      };\n\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      Map<String, String> params = new HashMap();\n      putParam(params, \"type\", AUTH_HANDLER_PARAM, \"kerberos\");\n      putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n      putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n      putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n      if (\"kerberos\".equals(params.get(\"type\"))) {\n        putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n        putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n      } else {\n        // allow tests which specify AUTH_HANDLER_PARAM to avoid specifying kerberos principal/keytab\n        putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n        putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n      }\n\n      String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n      boolean delegationTokenEnabled =\n          (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n      ZkController controller = coreContainer.getZkController();\n\n      if (delegationTokenEnabled) {\n        putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n        if (coreContainer.isZooKeeperAware()) {\n          putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n          if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n            String zkHost = controller.getZkServerAddress();\n            putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n            params.put(\"zk-dt-secret-manager.enable\", \"true\");\n            // Note - Curator complains if the znodeWorkingPath starts with /\n            String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"));\n            String relativePath = chrootPath.startsWith(\"/\") ? chrootPath.substring(1) : chrootPath;\n            putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n                DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH,\n                relativePath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\");\n            putParam(params, \"signer.secret.provider.zookeeper.path\",\n                DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n            // ensure krb5 is setup properly before running curator\n            getHttpClientBuilder(SolrHttpClientBuilder.create());\n          }\n        } else {\n          log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n        }\n      }\n\n      // Special handling for the \"cookie.domain\" based on whether port should be\n      // appended to the domain. Useful for situations where multiple solr nodes are\n      // on the same host.\n      String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n      boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n      if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n        putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n      } else { // we need port aware cookies and we are in SolrCloud mode.\n        String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n        if (host==null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n        }\n        int port = controller.getHostPort();\n        params.put(\"cookie.domain\", host + \":\" + port);\n      }\n\n      final ServletContext servletContext = new AttributeOnlyServletContext();\n      if (delegationTokenEnabled) {\n        kerberosFilter = new DelegationTokenKerberosFilter();\n        // pass an attribute-enabled context in order to pass the zkClient\n        // and because the filter may pass a curator instance.\n        if (controller != null) {\n          servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n        }\n      } else {\n        kerberosFilter = new KerberosFilter();\n      }\n      log.info(\"Params: \"+params);\n\n      FilterConfig conf = new FilterConfig() {\n        @Override\n        public ServletContext getServletContext() {\n          return servletContext;\n        }\n\n        @Override\n        public Enumeration<String> getInitParameterNames() {\n          return new IteratorEnumeration(params.keySet().iterator());\n        }\n\n        @Override\n        public String getInitParameter(String param) {\n          return params.get(param);\n        }\n\n        @Override\n        public String getFilterName() {\n          return \"KerberosFilter\";\n        }\n      };\n\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      Map<String, String> params = new HashMap();\n      params.put(\"type\", \"kerberos\");\n      putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n      putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n      putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n\n      // Special handling for the \"cookie.domain\" based on whether port should be\n      // appended to the domain. Useful for situations where multiple solr nodes are\n      // on the same host.\n      String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n      boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n      if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n        putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n      } else { // we need port aware cookies and we are in SolrCloud mode.\n        String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n        if (host==null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n        }\n        int port = coreContainer.getZkController().getHostPort();\n        params.put(\"cookie.domain\", host + \":\" + port);\n      }\n      \n      log.info(\"Params: \"+params);\n\n      FilterConfig conf = new FilterConfig() {\n        @Override\n        public ServletContext getServletContext() {\n          return noContext;\n        }\n\n        @Override\n        public Enumeration<String> getInitParameterNames() {\n          return new IteratorEnumeration(params.keySet().iterator());\n        }\n\n        @Override\n        public String getInitParameter(String param) {\n          return params.get(param);\n        }\n\n        @Override\n        public String getFilterName() {\n          return \"KerberosFilter\";\n        }\n      };\n\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3d73ce4049cb1520abaaae57fe8267639bda1d","date":1470181330,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      FilterConfig conf = getInitFilterConfig(pluginConfig, false);\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      Map<String, String> params = new HashMap();\n      putParam(params, \"type\", AUTH_HANDLER_PARAM, \"kerberos\");\n      putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n      putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n      putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n      if (\"kerberos\".equals(params.get(\"type\"))) {\n        putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n        putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n      } else {\n        // allow tests which specify AUTH_HANDLER_PARAM to avoid specifying kerberos principal/keytab\n        putParamOptional(params, \"kerberos.principal\", PRINCIPAL_PARAM);\n        putParamOptional(params, \"kerberos.keytab\", KEYTAB_PARAM);\n      }\n\n      String delegationTokenStr = System.getProperty(DELEGATION_TOKEN_ENABLED, null);\n      boolean delegationTokenEnabled =\n          (delegationTokenStr == null) ? false : Boolean.parseBoolean(delegationTokenStr);\n      ZkController controller = coreContainer.getZkController();\n\n      if (delegationTokenEnabled) {\n        putParam(params, \"delegation-token.token-kind\", DELEGATION_TOKEN_KIND, DELEGATION_TOKEN_TYPE_DEFAULT);\n        if (coreContainer.isZooKeeperAware()) {\n          putParam(params, \"signer.secret.provider\", DELEGATION_TOKEN_SECRET_PROVIDER, \"zookeeper\");\n          if (\"zookeeper\".equals(params.get(\"signer.secret.provider\"))) {\n            String zkHost = controller.getZkServerAddress();\n            putParam(params, \"token.validity\", DELEGATION_TOKEN_VALIDITY, \"36000\");\n            params.put(\"zk-dt-secret-manager.enable\", \"true\");\n            // Note - Curator complains if the znodeWorkingPath starts with /\n            String chrootPath = zkHost.substring(zkHost.indexOf(\"/\"));\n            String relativePath = chrootPath.startsWith(\"/\") ? chrootPath.substring(1) : chrootPath;\n            putParam(params, \"zk-dt-secret-manager.znodeWorkingPath\",\n                DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH,\n                relativePath + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH + \"/zkdtsm\");\n            putParam(params, \"signer.secret.provider.zookeeper.path\",\n                DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH, \"/token\");\n            // ensure krb5 is setup properly before running curator\n            getHttpClientBuilder(SolrHttpClientBuilder.create());\n          }\n        } else {\n          log.info(\"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties\");\n        }\n      }\n\n      // Special handling for the \"cookie.domain\" based on whether port should be\n      // appended to the domain. Useful for situations where multiple solr nodes are\n      // on the same host.\n      String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n      boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n      if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n        putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n      } else { // we need port aware cookies and we are in SolrCloud mode.\n        String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n        if (host==null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n        }\n        int port = controller.getHostPort();\n        params.put(\"cookie.domain\", host + \":\" + port);\n      }\n\n      final ServletContext servletContext = new AttributeOnlyServletContext();\n      if (delegationTokenEnabled) {\n        kerberosFilter = new DelegationTokenKerberosFilter();\n        // pass an attribute-enabled context in order to pass the zkClient\n        // and because the filter may pass a curator instance.\n        if (controller != null) {\n          servletContext.setAttribute(DELEGATION_TOKEN_ZK_CLIENT, controller.getZkClient());\n        }\n      } else {\n        kerberosFilter = new KerberosFilter();\n      }\n      log.info(\"Params: \"+params);\n\n      FilterConfig conf = new FilterConfig() {\n        @Override\n        public ServletContext getServletContext() {\n          return servletContext;\n        }\n\n        @Override\n        public Enumeration<String> getInitParameterNames() {\n          return new IteratorEnumeration(params.keySet().iterator());\n        }\n\n        @Override\n        public String getInitParameter(String param) {\n          return params.get(param);\n        }\n\n        @Override\n        public String getFilterName() {\n          return \"KerberosFilter\";\n        }\n      };\n\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      FilterConfig conf = getInitFilterConfig(pluginConfig, false);\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      Map<String, String> params = new HashMap();\n      params.put(\"type\", \"kerberos\");\n      putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n      putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n      putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n\n      // Special handling for the \"cookie.domain\" based on whether port should be\n      // appended to the domain. Useful for situations where multiple solr nodes are\n      // on the same host.\n      String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n      boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n      if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n        putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n      } else { // we need port aware cookies and we are in SolrCloud mode.\n        String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n        if (host==null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n        }\n        int port = coreContainer.getZkController().getHostPort();\n        params.put(\"cookie.domain\", host + \":\" + port);\n      }\n      \n      log.info(\"Params: \"+params);\n\n      FilterConfig conf = new FilterConfig() {\n        @Override\n        public ServletContext getServletContext() {\n          return noContext;\n        }\n\n        @Override\n        public Enumeration<String> getInitParameterNames() {\n          return new IteratorEnumeration(params.keySet().iterator());\n        }\n\n        @Override\n        public String getInitParameter(String param) {\n          return params.get(param);\n        }\n\n        @Override\n        public String getFilterName() {\n          return \"KerberosFilter\";\n        }\n      };\n\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosPlugin#init(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      FilterConfig conf = getInitFilterConfig(pluginConfig, false);\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    try {\n      Map<String, String> params = new HashMap();\n      params.put(\"type\", \"kerberos\");\n      putParam(params, \"kerberos.name.rules\", NAME_RULES_PARAM, \"DEFAULT\");\n      putParam(params, \"token.valid\", TOKEN_VALID_PARAM, \"30\");\n      putParam(params, \"cookie.path\", COOKIE_PATH_PARAM, \"/\");\n      putParam(params, \"kerberos.principal\", PRINCIPAL_PARAM, null);\n      putParam(params, \"kerberos.keytab\", KEYTAB_PARAM, null);\n\n      // Special handling for the \"cookie.domain\" based on whether port should be\n      // appended to the domain. Useful for situations where multiple solr nodes are\n      // on the same host.\n      String usePortStr = System.getProperty(COOKIE_PORT_AWARE_PARAM, null);\n      boolean needPortAwareCookies = (usePortStr == null) ? false: Boolean.parseBoolean(usePortStr);\n\n      if (!needPortAwareCookies || !coreContainer.isZooKeeperAware()) {\n        putParam(params, \"cookie.domain\", COOKIE_DOMAIN_PARAM, null);\n      } else { // we need port aware cookies and we are in SolrCloud mode.\n        String host = System.getProperty(COOKIE_DOMAIN_PARAM, null);\n        if (host==null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required parameter '\"+COOKIE_DOMAIN_PARAM+\"'.\");\n        }\n        int port = coreContainer.getZkController().getHostPort();\n        params.put(\"cookie.domain\", host + \":\" + port);\n      }\n      \n      log.info(\"Params: \"+params);\n\n      FilterConfig conf = new FilterConfig() {\n        @Override\n        public ServletContext getServletContext() {\n          return noContext;\n        }\n\n        @Override\n        public Enumeration<String> getInitParameterNames() {\n          return new IteratorEnumeration(params.keySet().iterator());\n        }\n\n        @Override\n        public String getInitParameter(String param) {\n          return params.get(param);\n        }\n\n        @Override\n        public String getFilterName() {\n          return \"KerberosFilter\";\n        }\n      };\n\n      kerberosFilter.init(conf);\n    } catch (ServletException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing kerberos authentication plugin: \"+e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["20be168d828ac40d262f85364d02f15b491dd88b"],"814b09f7caddc0d041bf4bac96336638511c7f5f":["8293bb9f086fce9590482de97de6eac8381ae15a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8293bb9f086fce9590482de97de6eac8381ae15a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d8478e1507f625c01f80a2f9f6dccd426a95708":["814b09f7caddc0d041bf4bac96336638511c7f5f"],"20be168d828ac40d262f85364d02f15b491dd88b":["5d8478e1507f625c01f80a2f9f6dccd426a95708"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5d8478e1507f625c01f80a2f9f6dccd426a95708","cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["5d8478e1507f625c01f80a2f9f6dccd426a95708","cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc3d73ce4049cb1520abaaae57fe8267639bda1d"]},"commit2Childs":{"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"814b09f7caddc0d041bf4bac96336638511c7f5f":["5d8478e1507f625c01f80a2f9f6dccd426a95708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8293bb9f086fce9590482de97de6eac8381ae15a"],"8293bb9f086fce9590482de97de6eac8381ae15a":["814b09f7caddc0d041bf4bac96336638511c7f5f"],"5d8478e1507f625c01f80a2f9f6dccd426a95708":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"20be168d828ac40d262f85364d02f15b491dd88b":["cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}