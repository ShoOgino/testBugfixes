{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","commits":[{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","sourceNew":"  /**\n   * Extracts all the aliased fields from the requests and adds them to up\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = config.solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = config.solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Extracts all the aliased fields from the requests and adds them to up\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addAliasesFromRequest(ExtendedSolrQueryParser,float).mjava","sourceNew":"  /**\n   * Extracts all the aliased fields from the requests and adds them to up\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = config.solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = config.solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Extracts all the aliased fields from the requests and adds them to up\n   */\n  private void addAliasesFromRequest(ExtendedSolrQueryParser up, float tiebreaker) {\n    Iterator<String> it = solrParams.getParameterNamesIterator();\n    while(it.hasNext()) {\n      String param = it.next();\n      if(param.startsWith(\"f.\") && param.endsWith(\".qf\")) {\n        // Add the alias\n        String fname = param.substring(2,param.length()-3);\n        String qfReplacement = solrParams.get(param);\n        Map<String,Float> parsedQf = SolrPluginUtils.parseFieldBoosts(qfReplacement);\n        if(parsedQf.size() == 0)\n          return;\n        up.addAlias(fname, tiebreaker, parsedQf);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}