{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if ((!indexHasOffsets || (flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (BlockDocsAndPositionsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if ((!indexHasOffsets || (flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (BlockDocsAndPositionsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if ((!indexHasOffsets || (flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (BlockDocsAndPositionsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if ((!indexHasOffsets || (flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (BlockDocsAndPositionsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if ((flags & PostingsEnum.FLAG_POSITIONS) < PostingsEnum.FLAG_POSITIONS) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n\n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (!indexHasPositions)\n      return null;\n\n    if ((!indexHasOffsets || (flags & PostingsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & PostingsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if ((!indexHasOffsets || (flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (BlockDocsAndPositionsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"51f5280f31484820499077f41fcdfe92d527d9dc":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}