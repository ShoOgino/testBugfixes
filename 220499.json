{"path":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).node + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).node;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).node + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).node;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).node + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).node;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).address + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).address;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#hash(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).node + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).node;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for an unfrozen node.  This must be identical\n  // to the un-frozen case (below)!!\n  private int hash(Builder.UnCompiledNode<T> node) {\n    final int PRIME = 31;\n    //System.out.println(\"hash unfrozen\");\n    int h = 0;\n    // TODO: maybe if number of arcs is high we can safely subsample?\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      //System.out.println(\"  label=\" + arc.label + \" target=\" + ((Builder.CompiledNode) arc.target).node + \" h=\" + h + \" output=\" + fst.outputs.outputToString(arc.output) + \" isFinal?=\" + arc.isFinal);\n      h = PRIME * h + arc.label;\n      h = PRIME * h + ((Builder.CompiledNode) arc.target).node;\n      h = PRIME * h + arc.output.hashCode();\n      h = PRIME * h + arc.nextFinalOutput.hashCode();\n      if (arc.isFinal) {\n        h += 17;\n      }\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}