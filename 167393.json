{"path":"src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(IndexReader).mjava","commits":[{"id":"055a5456c9cb576f8b2eff4183fe68762252d188","date":1203478609,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((ExtendedFieldCache) cache).getDoubles(reader, field) :\n            ((ExtendedFieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0d9871701755df956b8bb5e417776dacc7dc1f2","date":1237846124,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(IndexReader).mjava","sourceNew":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((ExtendedFieldCache) cache).getDoubles(reader, field) :\n            ((ExtendedFieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + floatVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","sourceOld":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((ExtendedFieldCache) cache).getDoubles(reader, field) :\n            ((ExtendedFieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3","a397491f6601f7c45bc425f45e95c41c3a6d1ca3","a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e77721aaf23393f6ea7926045ae6f8efea0ce8e","date":1247678464,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(IndexReader).mjava","sourceNew":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + floatVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","sourceOld":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((ExtendedFieldCache) cache).getDoubles(reader, field) :\n            ((ExtendedFieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + floatVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71453c48d710b4670f7e9f9ec53c2acaae99f356","date":1249142743,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(IndexReader).mjava","sourceNew":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","sourceOld":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + floatVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42","date":1253196493,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/DoubleFieldSource#getValues(IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","sourceOld":"  public DocValues getValues(IndexReader reader) throws IOException {\n    final double[] arr = (parser == null) ?\n            ((FieldCache) cache).getDoubles(reader, field) :\n            ((FieldCache) cache).getDoubles(reader, field, parser);\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + doubleVal(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        double lower,upper;\n\n        if (lowerVal==null) {\n          lower = Double.NEGATIVE_INFINITY;\n        } else {\n          lower = Double.parseDouble(lowerVal);\n        }\n\n         if (upperVal==null) {\n          upper = Double.POSITIVE_INFINITY;\n        } else {\n          upper = Double.parseDouble(upperVal);\n        }\n\n        final double l = lower;\n        final double u = upper;\n\n\n        if (includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal <= u;\n            }\n          };\n        }\n        else if (includeLower && !includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal >= l && docVal < u;\n            }\n          };\n        }\n        else if (!includeLower && includeUpper) {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal <= u;\n            }\n          };\n        }\n        else {\n          return new ValueSourceScorer(reader, this) {\n            @Override\n            public boolean matchesValue(int doc) {\n              double docVal = doubleVal(doc);\n              return docVal > l && docVal < u;\n            }\n          };\n        }\n      }\n\n\n      };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":["71453c48d710b4670f7e9f9ec53c2acaae99f356"],"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"71453c48d710b4670f7e9f9ec53c2acaae99f356":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"055a5456c9cb576f8b2eff4183fe68762252d188":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["055a5456c9cb576f8b2eff4183fe68762252d188"]},"commit2Childs":{"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":[],"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["71453c48d710b4670f7e9f9ec53c2acaae99f356"],"71453c48d710b4670f7e9f9ec53c2acaae99f356":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["055a5456c9cb576f8b2eff4183fe68762252d188"],"055a5456c9cb576f8b2eff4183fe68762252d188":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}