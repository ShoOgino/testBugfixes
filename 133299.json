{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}