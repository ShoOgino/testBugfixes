{"path":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(SegmentReader,SegmentCommitInfo).mjava","commits":[{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(SegmentReader,SegmentCommitInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void onNewReader(SegmentReader reader, SegmentCommitInfo info) throws IOException {\n    super.onNewReader(reader, info);\n    hardDeletes.onNewReader(reader, info);\n    if (dvGeneration != info.getDocValuesGen()) { // only re-calculate this if we haven't seen this generation\n      final DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) { // nothing is deleted we don't have a soft deletes field in this segment\n        this.pendingDeleteCount = 0;\n      } else {\n        assert info.info.maxDoc() > 0 : \"maxDoc is 0\";\n        applyUpdates(iterator);\n      }\n      dvGeneration = info.getDocValuesGen();\n    }\n    assert numPendingDeletes() + info.getDelCount() <= info.info.maxDoc() :\n        numPendingDeletes() + \" + \" + info.getDelCount() + \" > \" + info.info.maxDoc();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb0130363fa13c53e4e78317c35b3b45a3089276","date":1523267438,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(SegmentReader,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(SegmentReader,SegmentCommitInfo).mjava","sourceNew":"  @Override\n  void onNewReader(SegmentReader reader, SegmentCommitInfo info) throws IOException {\n    super.onNewReader(reader, info);\n    hardDeletes.onNewReader(reader, info);\n    if (dvGeneration != info.getDocValuesGen()) { // only re-calculate this if we haven't seen this generation\n      final DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) { // nothing is deleted we don't have a soft deletes field in this segment\n        this.pendingDeleteCount = 0;\n      } else {\n        assert info.info.maxDoc() > 0 : \"maxDoc is 0\";\n        pendingDeleteCount += applySoftDeletes(iterator, getMutableBits());\n      }\n      dvGeneration = info.getDocValuesGen();\n    }\n    assert numPendingDeletes() + info.getDelCount() <= info.info.maxDoc() :\n        numPendingDeletes() + \" + \" + info.getDelCount() + \" > \" + info.info.maxDoc();\n  }\n\n","sourceOld":"  @Override\n  void onNewReader(SegmentReader reader, SegmentCommitInfo info) throws IOException {\n    super.onNewReader(reader, info);\n    hardDeletes.onNewReader(reader, info);\n    if (dvGeneration != info.getDocValuesGen()) { // only re-calculate this if we haven't seen this generation\n      final DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) { // nothing is deleted we don't have a soft deletes field in this segment\n        this.pendingDeleteCount = 0;\n      } else {\n        assert info.info.maxDoc() > 0 : \"maxDoc is 0\";\n        applyUpdates(iterator);\n      }\n      dvGeneration = info.getDocValuesGen();\n    }\n    assert numPendingDeletes() + info.getDelCount() <= info.info.maxDoc() :\n        numPendingDeletes() + \" + \" + info.getDelCount() + \" > \" + info.info.maxDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(SegmentReader,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(SegmentReader,SegmentCommitInfo).mjava","sourceNew":"  @Override\n  void onNewReader(SegmentReader reader, SegmentCommitInfo info) throws IOException {\n    super.onNewReader(reader, info);\n    hardDeletes.onNewReader(reader, info);\n    if (dvGeneration != info.getDocValuesGen()) { // only re-calculate this if we haven't seen this generation\n      final DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) { // nothing is deleted we don't have a soft deletes field in this segment\n        this.pendingDeleteCount = 0;\n      } else {\n        assert info.info.maxDoc() > 0 : \"maxDoc is 0\";\n        pendingDeleteCount += applySoftDeletes(iterator, getMutableBits());\n      }\n      dvGeneration = info.getDocValuesGen();\n    }\n    assert numPendingDeletes() + info.getDelCount() <= info.info.maxDoc() :\n        numPendingDeletes() + \" + \" + info.getDelCount() + \" > \" + info.info.maxDoc();\n  }\n\n","sourceOld":"  @Override\n  void onNewReader(SegmentReader reader, SegmentCommitInfo info) throws IOException {\n    super.onNewReader(reader, info);\n    hardDeletes.onNewReader(reader, info);\n    if (dvGeneration != info.getDocValuesGen()) { // only re-calculate this if we haven't seen this generation\n      final DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) { // nothing is deleted we don't have a soft deletes field in this segment\n        this.pendingDeleteCount = 0;\n      } else {\n        assert info.info.maxDoc() > 0 : \"maxDoc is 0\";\n        applyUpdates(iterator);\n      }\n      dvGeneration = info.getDocValuesGen();\n    }\n    assert numPendingDeletes() + info.getDelCount() <= info.info.maxDoc() :\n        numPendingDeletes() + \" + \" + info.getDelCount() + \" > \" + info.info.maxDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49575fe0d33c4904ac42b0526411d1dee7549e9b","date":1523529874,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(SegmentReader,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(SegmentReader,SegmentCommitInfo).mjava","sourceNew":"  @Override\n  void onNewReader(SegmentReader reader, SegmentCommitInfo info) throws IOException {\n    super.onNewReader(reader, info);\n    hardDeletes.onNewReader(reader, info);\n    if (dvGeneration < info.getDocValuesGen()) { // only re-calculate this if we haven't seen this generation\n      final DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) { // nothing is deleted we don't have a soft deletes field in this segment\n        this.pendingDeleteCount = 0;\n      } else {\n        assert info.info.maxDoc() > 0 : \"maxDoc is 0\";\n        pendingDeleteCount += applySoftDeletes(iterator, getMutableBits());\n      }\n      dvGeneration = info.getDocValuesGen();\n    }\n    assert numPendingDeletes() + info.getDelCount() <= info.info.maxDoc() :\n        numPendingDeletes() + \" + \" + info.getDelCount() + \" > \" + info.info.maxDoc();\n  }\n\n","sourceOld":"  @Override\n  void onNewReader(SegmentReader reader, SegmentCommitInfo info) throws IOException {\n    super.onNewReader(reader, info);\n    hardDeletes.onNewReader(reader, info);\n    if (dvGeneration != info.getDocValuesGen()) { // only re-calculate this if we haven't seen this generation\n      final DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) { // nothing is deleted we don't have a soft deletes field in this segment\n        this.pendingDeleteCount = 0;\n      } else {\n        assert info.info.maxDoc() > 0 : \"maxDoc is 0\";\n        pendingDeleteCount += applySoftDeletes(iterator, getMutableBits());\n      }\n      dvGeneration = info.getDocValuesGen();\n    }\n    assert numPendingDeletes() + info.getDelCount() <= info.info.maxDoc() :\n        numPendingDeletes() + \" + \" + info.getDelCount() + \" > \" + info.info.maxDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d36ba65c7e095c7938bfc2343a9a6cf689bfb43","date":1523531370,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(SegmentReader,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(SegmentReader,SegmentCommitInfo).mjava","sourceNew":"  @Override\n  void onNewReader(SegmentReader reader, SegmentCommitInfo info) throws IOException {\n    super.onNewReader(reader, info);\n    hardDeletes.onNewReader(reader, info);\n    if (dvGeneration < info.getDocValuesGen()) { // only re-calculate this if we haven't seen this generation\n      final DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) { // nothing is deleted we don't have a soft deletes field in this segment\n        this.pendingDeleteCount = 0;\n      } else {\n        assert info.info.maxDoc() > 0 : \"maxDoc is 0\";\n        pendingDeleteCount += applySoftDeletes(iterator, getMutableBits());\n      }\n      dvGeneration = info.getDocValuesGen();\n    }\n    assert numPendingDeletes() + info.getDelCount() <= info.info.maxDoc() :\n        numPendingDeletes() + \" + \" + info.getDelCount() + \" > \" + info.info.maxDoc();\n  }\n\n","sourceOld":"  @Override\n  void onNewReader(SegmentReader reader, SegmentCommitInfo info) throws IOException {\n    super.onNewReader(reader, info);\n    hardDeletes.onNewReader(reader, info);\n    if (dvGeneration != info.getDocValuesGen()) { // only re-calculate this if we haven't seen this generation\n      final DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) { // nothing is deleted we don't have a soft deletes field in this segment\n        this.pendingDeleteCount = 0;\n      } else {\n        assert info.info.maxDoc() > 0 : \"maxDoc is 0\";\n        pendingDeleteCount += applySoftDeletes(iterator, getMutableBits());\n      }\n      dvGeneration = info.getDocValuesGen();\n    }\n    assert numPendingDeletes() + info.getDelCount() <= info.info.maxDoc() :\n        numPendingDeletes() + \" + \" + info.getDelCount() + \" > \" + info.info.maxDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(CodecReader,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#onNewReader(SegmentReader,SegmentCommitInfo).mjava","sourceNew":"  @Override\n  void onNewReader(CodecReader reader, SegmentCommitInfo info) throws IOException {\n    super.onNewReader(reader, info);\n    hardDeletes.onNewReader(reader, info);\n    if (dvGeneration < info.getDocValuesGen()) { // only re-calculate this if we haven't seen this generation\n      final DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator != null) { // nothing is deleted we don't have a soft deletes field in this segment\n        assert info.info.maxDoc() > 0 : \"maxDoc is 0\";\n        pendingDeleteCount += applySoftDeletes(iterator, getMutableBits());\n      }\n      dvGeneration = info.getDocValuesGen();\n    }\n    assert numPendingDeletes() + info.getDelCount() <= info.info.maxDoc() :\n        numPendingDeletes() + \" + \" + info.getDelCount() + \" > \" + info.info.maxDoc();\n  }\n\n","sourceOld":"  @Override\n  void onNewReader(SegmentReader reader, SegmentCommitInfo info) throws IOException {\n    super.onNewReader(reader, info);\n    hardDeletes.onNewReader(reader, info);\n    if (dvGeneration < info.getDocValuesGen()) { // only re-calculate this if we haven't seen this generation\n      final DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) { // nothing is deleted we don't have a soft deletes field in this segment\n        this.pendingDeleteCount = 0;\n      } else {\n        assert info.info.maxDoc() > 0 : \"maxDoc is 0\";\n        pendingDeleteCount += applySoftDeletes(iterator, getMutableBits());\n      }\n      dvGeneration = info.getDocValuesGen();\n    }\n    assert numPendingDeletes() + info.getDelCount() <= info.info.maxDoc() :\n        numPendingDeletes() + \" + \" + info.getDelCount() + \" > \" + info.info.maxDoc();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["5ee0394b8176abd7c90a4be8c05465be1879db79","cb0130363fa13c53e4e78317c35b3b45a3089276"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb0130363fa13c53e4e78317c35b3b45a3089276":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"49575fe0d33c4904ac42b0526411d1dee7549e9b":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"36d13f271b6649357e07f71f7e46559479f69b5b":["5d36ba65c7e095c7938bfc2343a9a6cf689bfb43"],"5d36ba65c7e095c7938bfc2343a9a6cf689bfb43":["d58e44159788900f4a2113b84463dc3fbbf80f20","49575fe0d33c4904ac42b0526411d1dee7549e9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36d13f271b6649357e07f71f7e46559479f69b5b"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["49575fe0d33c4904ac42b0526411d1dee7549e9b","5d36ba65c7e095c7938bfc2343a9a6cf689bfb43"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["d58e44159788900f4a2113b84463dc3fbbf80f20","cb0130363fa13c53e4e78317c35b3b45a3089276"],"cb0130363fa13c53e4e78317c35b3b45a3089276":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"49575fe0d33c4904ac42b0526411d1dee7549e9b":["5d36ba65c7e095c7938bfc2343a9a6cf689bfb43"],"36d13f271b6649357e07f71f7e46559479f69b5b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d36ba65c7e095c7938bfc2343a9a6cf689bfb43":["36d13f271b6649357e07f71f7e46559479f69b5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}