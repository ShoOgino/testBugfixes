{"path":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","commits":[{"id":"6f5efa46fb27648cd98137d9898d819e115911bc","date":1036690287,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a c\"));\n\n    Document d2 = new Document();\n    d2.add(Field.Text(\"field\", \"a b c\"));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), false, false);\n    bq.add(new TermQuery(b), false, false);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ac91e23fa8f2a59342e85d87eb6eeca11b1bba","date":1091993819,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a c\"));\n\n    Document d2 = new Document();\n    d2.add(Field.Text(\"field\", \"a b c\"));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), false, false);\n    bq.add(new TermQuery(b), false, false);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a c\"));\n\n    Document d2 = new Document();\n    d2.add(Field.Text(\"field\", \"a b c\"));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), false, false);\n    bq.add(new TermQuery(b), false, false);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72e756875123955582aefc8e36c7ad4f13aafd0a","date":1093643971,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a c\"));\n\n    Document d2 = new Document();\n    d2.add(Field.Text(\"field\", \"a b c\"));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a c\"));\n\n    Document d2 = new Document();\n    d2.add(Field.Text(\"field\", \"a b c\"));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), false, false);\n    bq.add(new TermQuery(b), false, false);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773e104db917d6cc9acade5a8aeb91a886192b99","date":1094581596,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.TOKENIZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(Field.Text(\"field\", \"a c\"));\n\n    Document d2 = new Document();\n    d2.add(Field.Text(\"field\", \"a b c\"));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.TOKENIZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.TOKENIZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.TOKENIZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new MultiReaderHitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new MultiReaderHitCollector() {\n         private int base = -1;\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+base+1);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new MultiReaderHitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new MultiReaderHitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+1);\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new Collector() {\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == (float)doc+base+1);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 2.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new MultiReaderHitCollector() {\n         public final void collect(int doc, float score) {\n           assertTrue(score == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new MultiReaderHitCollector() {\n         private int base = -1;\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == (float)doc+base+1);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new MultiReaderHitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new MultiReaderHitCollector() {\n         public final void collect(int doc, float score) {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(score == 2.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == (float)doc+base+1);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 2.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search\n      (new TermQuery(b),\n       new Collector() {\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search\n      (bq,\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == (float)doc+base+1);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 2.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == (float)doc+base+1);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 2.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == (float)doc+base+1);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 2.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == (float)doc+base+1);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 2.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == (float)doc+base+1);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 2.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58","date":1256297148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(2.0f, scorer.score());\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == (float)doc+base+1);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search\n      (pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 1.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertTrue(scorer.score() == 2.0f);\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n        private Scorer scorer;\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n        }\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(2.0f, scorer.score());\n         }\n         public void setNextReader(IndexReader reader, int docBase) {}\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setSimilarity(new SimpleSimilarity());\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimilarity#testSimilarity().mjava","sourceNew":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","sourceOld":"  public void testSimilarity() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(new SimpleSimilarity()));\n    \n    Document d1 = new Document();\n    d1.add(new Field(\"field\", \"a c\", Field.Store.YES, Field.Index.ANALYZED));\n\n    Document d2 = new Document();\n    d2.add(new Field(\"field\", \"a b c\", Field.Store.YES, Field.Index.ANALYZED));\n    \n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(store, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n\n    Term a = new Term(\"field\", \"a\");\n    Term b = new Term(\"field\", \"b\");\n    Term c = new Term(\"field\", \"c\");\n\n    searcher.search(new TermQuery(b), new Collector() {\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(b), BooleanClause.Occur.SHOULD);\n    //System.out.println(bq.toString(\"field\"));\n    searcher.search(bq, new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n        public void setScorer(Scorer scorer) throws IOException {\n           this.scorer = scorer; \n         }\n         @Override\n        public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals((float)doc+base+1, scorer.score());\n         }\n         @Override\n        public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n        public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq,\n       new Collector() {\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer; \n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n           assertEquals(1.0f, scorer.score());\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {}\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    pq.setSlop(2);\n    //System.out.println(pq.toString(\"field\"));\n    searcher.search(pq, new Collector() {\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer; \n      }\n      @Override\n      public final void collect(int doc) throws IOException {\n        //System.out.println(\"Doc=\" + doc + \" score=\" + score);\n        assertEquals(2.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {}\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["773e104db917d6cc9acade5a8aeb91a886192b99"],"c0ac91e23fa8f2a59342e85d87eb6eeca11b1bba":["6f5efa46fb27648cd98137d9898d819e115911bc"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["052fac7830290bd38a04cddee1a121ee07656b56","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"6f5efa46fb27648cd98137d9898d819e115911bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63bc3238545c6012bd44f5d294077997f236bc4e":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"773e104db917d6cc9acade5a8aeb91a886192b99":["72e756875123955582aefc8e36c7ad4f13aafd0a"],"72e756875123955582aefc8e36c7ad4f13aafd0a":["c0ac91e23fa8f2a59342e85d87eb6eeca11b1bba"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"c0ac91e23fa8f2a59342e85d87eb6eeca11b1bba":["72e756875123955582aefc8e36c7ad4f13aafd0a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["63bc3238545c6012bd44f5d294077997f236bc4e"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"6f5efa46fb27648cd98137d9898d819e115911bc":["c0ac91e23fa8f2a59342e85d87eb6eeca11b1bba"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f5efa46fb27648cd98137d9898d819e115911bc"],"773e104db917d6cc9acade5a8aeb91a886192b99":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"72e756875123955582aefc8e36c7ad4f13aafd0a":["773e104db917d6cc9acade5a8aeb91a886192b99"],"052fac7830290bd38a04cddee1a121ee07656b56":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}