{"path":"src/java/org/apache/solr/analysis/WordDelimiterFilter#incrementToken().mjava","commits":[{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  public boolean incrementToken() throws IOException {\n    while (true) {\n      if (!hasSavedState) {\n        // process a new input word\n        if (!input.incrementToken()) {\n          return false;\n        }\n\n        int termLength = termAtttribute.termLength();\n        char[] termBuffer = termAtttribute.termBuffer();\n        \n        accumPosInc += posIncAttribute.getPositionIncrement();\n\n        iterator.setText(termBuffer, termLength);\n        iterator.next();\n\n        // word of no delimiters, or protected word: just return it\n        if ((iterator.current == 0 && iterator.end == termLength) ||\n            (protWords != null && protWords.contains(termBuffer, 0, termLength))) {\n          posIncAttribute.setPositionIncrement(accumPosInc);\n          accumPosInc = 0;\n          return true;\n        }\n        \n        // word of simply delimiters\n        if (iterator.end == WordDelimiterIterator.DONE && !preserveOriginal) {\n          // if the posInc is 1, simply ignore it in the accumulation\n          if (posIncAttribute.getPositionIncrement() == 1) {\n            accumPosInc--;\n          }\n          continue;\n        }\n\n        saveState();\n\n        hasOutputToken = false;\n        hasOutputFollowingOriginal = !preserveOriginal;\n        lastConcatCount = 0;\n        \n        if (preserveOriginal) {\n          posIncAttribute.setPositionIncrement(accumPosInc);\n          accumPosInc = 0;\n          return true;\n        }\n      }\n      \n      // at the end of the string, output any concatenations\n      if (iterator.end == WordDelimiterIterator.DONE) {\n        if (!concat.isEmpty()) {\n          if (flushConcatenation(concat)) {\n            return true;\n          }\n        }\n        \n        if (!concatAll.isEmpty()) {\n          // only if we haven't output this same combo above!\n          if (concatAll.subwordCount > lastConcatCount) {\n            concatAll.writeAndClear();\n            return true;\n          }\n          concatAll.clear();\n        }\n        \n        // no saved concatenations, on to the next input word\n        hasSavedState = false;\n        continue;\n      }\n      \n      // word surrounded by delimiters: always output\n      if (iterator.isSingleWord()) {\n        generatePart(true);\n        iterator.next();\n        return true;\n      }\n      \n      int wordType = iterator.type();\n      \n      // do we already have queued up incompatible concatenations?\n      if (!concat.isEmpty() && (concat.type & wordType) == 0) {\n        if (flushConcatenation(concat)) {\n          hasOutputToken = false;\n          return true;\n        }\n        hasOutputToken = false;\n      }\n      \n      // add subwords depending upon options\n      if (shouldConcatenate(wordType)) {\n        if (concat.isEmpty()) {\n          concat.type = wordType;\n        }\n        concatenate(concat);\n      }\n      \n      // add all subwords (catenateAll)\n      if (catenateAll) {\n        concatenate(concatAll);\n      }\n      \n      // if we should output the word or number part\n      if (shouldGenerateParts(wordType)) {\n        generatePart(false);\n        iterator.next();\n        return true;\n      }\n        \n      iterator.next();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c85fa43e6918808743daa7847ba0264373af687f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#incrementToken().mjava","sourceNew":"  public boolean incrementToken() throws IOException {\n    while (true) {\n      if (!hasSavedState) {\n        // process a new input word\n        if (!input.incrementToken()) {\n          return false;\n        }\n\n        int termLength = termAtttribute.termLength();\n        char[] termBuffer = termAtttribute.termBuffer();\n        \n        accumPosInc += posIncAttribute.getPositionIncrement();\n\n        iterator.setText(termBuffer, termLength);\n        iterator.next();\n\n        // word of no delimiters, or protected word: just return it\n        if ((iterator.current == 0 && iterator.end == termLength) ||\n            (protWords != null && protWords.contains(termBuffer, 0, termLength))) {\n          posIncAttribute.setPositionIncrement(accumPosInc);\n          accumPosInc = 0;\n          return true;\n        }\n        \n        // word of simply delimiters\n        if (iterator.end == WordDelimiterIterator.DONE && !preserveOriginal) {\n          // if the posInc is 1, simply ignore it in the accumulation\n          if (posIncAttribute.getPositionIncrement() == 1) {\n            accumPosInc--;\n          }\n          continue;\n        }\n\n        saveState();\n\n        hasOutputToken = false;\n        hasOutputFollowingOriginal = !preserveOriginal;\n        lastConcatCount = 0;\n        \n        if (preserveOriginal) {\n          posIncAttribute.setPositionIncrement(accumPosInc);\n          accumPosInc = 0;\n          return true;\n        }\n      }\n      \n      // at the end of the string, output any concatenations\n      if (iterator.end == WordDelimiterIterator.DONE) {\n        if (!concat.isEmpty()) {\n          if (flushConcatenation(concat)) {\n            return true;\n          }\n        }\n        \n        if (!concatAll.isEmpty()) {\n          // only if we haven't output this same combo above!\n          if (concatAll.subwordCount > lastConcatCount) {\n            concatAll.writeAndClear();\n            return true;\n          }\n          concatAll.clear();\n        }\n        \n        // no saved concatenations, on to the next input word\n        hasSavedState = false;\n        continue;\n      }\n      \n      // word surrounded by delimiters: always output\n      if (iterator.isSingleWord()) {\n        generatePart(true);\n        iterator.next();\n        return true;\n      }\n      \n      int wordType = iterator.type();\n      \n      // do we already have queued up incompatible concatenations?\n      if (!concat.isEmpty() && (concat.type & wordType) == 0) {\n        if (flushConcatenation(concat)) {\n          hasOutputToken = false;\n          return true;\n        }\n        hasOutputToken = false;\n      }\n      \n      // add subwords depending upon options\n      if (shouldConcatenate(wordType)) {\n        if (concat.isEmpty()) {\n          concat.type = wordType;\n        }\n        concatenate(concat);\n      }\n      \n      // add all subwords (catenateAll)\n      if (catenateAll) {\n        concatenate(concatAll);\n      }\n      \n      // if we should output the word or number part\n      if (shouldGenerateParts(wordType)) {\n        generatePart(false);\n        iterator.next();\n        return true;\n      }\n        \n      iterator.next();\n    }\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {\n    while (true) {\n      if (!hasSavedState) {\n        // process a new input word\n        if (!input.incrementToken()) {\n          return false;\n        }\n\n        int termLength = termAtttribute.termLength();\n        char[] termBuffer = termAtttribute.termBuffer();\n        \n        accumPosInc += posIncAttribute.getPositionIncrement();\n\n        iterator.setText(termBuffer, termLength);\n        iterator.next();\n\n        // word of no delimiters, or protected word: just return it\n        if ((iterator.current == 0 && iterator.end == termLength) ||\n            (protWords != null && protWords.contains(termBuffer, 0, termLength))) {\n          posIncAttribute.setPositionIncrement(accumPosInc);\n          accumPosInc = 0;\n          return true;\n        }\n        \n        // word of simply delimiters\n        if (iterator.end == WordDelimiterIterator.DONE && !preserveOriginal) {\n          // if the posInc is 1, simply ignore it in the accumulation\n          if (posIncAttribute.getPositionIncrement() == 1) {\n            accumPosInc--;\n          }\n          continue;\n        }\n\n        saveState();\n\n        hasOutputToken = false;\n        hasOutputFollowingOriginal = !preserveOriginal;\n        lastConcatCount = 0;\n        \n        if (preserveOriginal) {\n          posIncAttribute.setPositionIncrement(accumPosInc);\n          accumPosInc = 0;\n          return true;\n        }\n      }\n      \n      // at the end of the string, output any concatenations\n      if (iterator.end == WordDelimiterIterator.DONE) {\n        if (!concat.isEmpty()) {\n          if (flushConcatenation(concat)) {\n            return true;\n          }\n        }\n        \n        if (!concatAll.isEmpty()) {\n          // only if we haven't output this same combo above!\n          if (concatAll.subwordCount > lastConcatCount) {\n            concatAll.writeAndClear();\n            return true;\n          }\n          concatAll.clear();\n        }\n        \n        // no saved concatenations, on to the next input word\n        hasSavedState = false;\n        continue;\n      }\n      \n      // word surrounded by delimiters: always output\n      if (iterator.isSingleWord()) {\n        generatePart(true);\n        iterator.next();\n        return true;\n      }\n      \n      int wordType = iterator.type();\n      \n      // do we already have queued up incompatible concatenations?\n      if (!concat.isEmpty() && (concat.type & wordType) == 0) {\n        if (flushConcatenation(concat)) {\n          hasOutputToken = false;\n          return true;\n        }\n        hasOutputToken = false;\n      }\n      \n      // add subwords depending upon options\n      if (shouldConcatenate(wordType)) {\n        if (concat.isEmpty()) {\n          concat.type = wordType;\n        }\n        concatenate(concat);\n      }\n      \n      // add all subwords (catenateAll)\n      if (catenateAll) {\n        concatenate(concatAll);\n      }\n      \n      // if we should output the word or number part\n      if (shouldGenerateParts(wordType)) {\n        generatePart(false);\n        iterator.next();\n        return true;\n      }\n        \n      iterator.next();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}