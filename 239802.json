{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperRequiredQueryParsing().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperRequiredQueryParsing().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperRequiredQueryParsing().mjava","sourceNew":"  /*\n   * Same as above, is tokenized without using the analyzer.\n   */\n  public void testShingleAnalyzerWrapperRequiredQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2),\n                                 \"+test +sentence\");\n    int[] ranks = new int[] { 1, 2 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * Same as above, is tokenized without using the analyzer.\n   */\n  public void testShingleAnalyzerWrapperRequiredQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2),\n                                 \"+test +sentence\");\n    int[] ranks = new int[] { 1, 2 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperRequiredQueryParsing().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperRequiredQueryParsing().mjava","sourceNew":"  /*\n   * Same as above, is tokenized without using the analyzer.\n   */\n  public void testShingleAnalyzerWrapperRequiredQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2),\n                                 \"+test +sentence\");\n    int[] ranks = new int[] { 1, 2 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * Same as above, is tokenized without using the analyzer.\n   */\n  public void testShingleAnalyzerWrapperRequiredQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2),\n                                 \"+test +sentence\");\n    int[] ranks = new int[] { 1, 2 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperRequiredQueryParsing().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperRequiredQueryParsing().mjava","sourceNew":"  /*\n   * Same as above, is tokenized without using the analyzer.\n   */\n  public void testShingleAnalyzerWrapperRequiredQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2),\n                                 \"+test +sentence\");\n    int[] ranks = new int[] { 1, 2 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * Same as above, is tokenized without using the analyzer.\n   */\n  public void testShingleAnalyzerWrapperRequiredQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2),\n                                 \"+test +sentence\");\n    int[] ranks = new int[] { 1, 2 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperRequiredQueryParsing().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperRequiredQueryParsing().mjava","sourceNew":"  /*\n   * Same as above, is tokenized without using the analyzer.\n   */\n  public void testShingleAnalyzerWrapperRequiredQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2),\n                                 \"+test +sentence\");\n    int[] ranks = new int[] { 1, 2 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * Same as above, is tokenized without using the analyzer.\n   */\n  public void testShingleAnalyzerWrapperRequiredQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2),\n                                 \"+test +sentence\");\n    int[] ranks = new int[] { 1, 2 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":4,"author":"Christopher John Male","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperRequiredQueryParsing().mjava","sourceNew":null,"sourceOld":"  /*\n   * Same as above, is tokenized without using the analyzer.\n   */\n  public void testShingleAnalyzerWrapperRequiredQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2),\n                                 \"+test +sentence\");\n    int[] ranks = new int[] { 1, 2 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperRequiredQueryParsing().mjava","sourceNew":null,"sourceOld":"  /*\n   * Same as above, is tokenized without using the analyzer.\n   */\n  public void testShingleAnalyzerWrapperRequiredQueryParsing() throws Exception {\n    ScoreDoc[] hits = queryParsingTest(new ShingleAnalyzerWrapper\n                                     (new MockAnalyzer(random, MockTokenizer.WHITESPACE, false), 2),\n                                 \"+test +sentence\");\n    int[] ranks = new int[] { 1, 2 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["a3776dccca01c11e7046323cfad46a3b4a471233","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}