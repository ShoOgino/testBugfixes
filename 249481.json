{"path":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeNumber(String,Number).mjava","commits":[{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeNumber(String,Number).mjava","sourceNew":"  default void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  protected void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeNumber(String,Number).mjava","pathOld":"/dev/null","sourceNew":"  default void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TextWriter#writeNumber(String,Number).mjava","pathOld":"/dev/null","sourceNew":"  default void writeNumber(String name, Number val) throws IOException {\n    if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, val.floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, val.doubleValue());\n    } else if (val instanceof Short) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Byte) {\n      writeInt(name, val.toString());\n    } else if (val instanceof AtomicInteger) {\n      writeInt(name, ((AtomicInteger) val).get());\n    } else if (val instanceof AtomicLong) {\n      writeLong(name, ((AtomicLong) val).get());\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"],"26dad91f15019714a045b4d8c5f40162b2058b54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26dad91f15019714a045b4d8c5f40162b2058b54"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"26dad91f15019714a045b4d8c5f40162b2058b54":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","26dad91f15019714a045b4d8c5f40162b2058b54","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}