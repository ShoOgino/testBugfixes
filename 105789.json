{"path":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","commits":[{"id":"7ef42f5d49d3a54e82653530696f6fff0eb81b5b","date":1269640557,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"solr/src/test/org/apache/solr/SolrJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    sb.append(\"Tests run: \");\n    sb.append(suite.runCount());\n    sb.append(\", Failures: \");\n    sb.append(suite.failureCount());\n    sb.append(\", Errors: \");\n    sb.append(suite.errorCount());\n    sb.append(\", Time elapsed: \");\n    sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    sb.append(\" sec\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      sb.append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      sb.append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          out.write(sb.toString().getBytes());\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    sb.append(\"Tests run: \");\n    sb.append(suite.runCount());\n    sb.append(\", Failures: \");\n    sb.append(suite.failureCount());\n    sb.append(\", Errors: \");\n    sb.append(suite.errorCount());\n    sb.append(\", Time elapsed: \");\n    sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    sb.append(\" sec\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      sb.append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      sb.append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        out.write(sb.toString().getBytes());\n        out.flush();\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caf652eb8fee0d4f3a19aef43ca31ec6663b4cb8","date":1291411131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    sb.append(\"Tests run: \");\n    sb.append(suite.runCount());\n    sb.append(\", Failures: \");\n    sb.append(suite.failureCount());\n    sb.append(\", Errors: \");\n    sb.append(suite.errorCount());\n    sb.append(\", Time elapsed: \");\n    sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    sb.append(\" sec\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      sb.append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      sb.append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          out.write(sb.toString().getBytes());\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    sb.append(\"Tests run: \");\n    sb.append(suite.runCount());\n    sb.append(\", Failures: \");\n    sb.append(suite.failureCount());\n    sb.append(\", Errors: \");\n    sb.append(suite.errorCount());\n    sb.append(\", Time elapsed: \");\n    sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    sb.append(\" sec\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      sb.append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      sb.append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          out.write(sb.toString().getBytes());\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    sb.append(\"Tests run: \");\n    sb.append(suite.runCount());\n    sb.append(\", Failures: \");\n    sb.append(suite.failureCount());\n    sb.append(\", Errors: \");\n    sb.append(suite.errorCount());\n    sb.append(\", Time elapsed: \");\n    sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    sb.append(\" sec\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      sb.append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      sb.append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          out.write(sb.toString().getBytes());\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0277bf8102a4c3eeec04fef2273fe6af421a09a","date":1293024966,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    append(\"Tests run: \");\n    append(suite.runCount());\n    append(\", Failures: \");\n    append(suite.failureCount());\n    append(\", Errors: \");\n    append(suite.errorCount());\n    append(\", Time elapsed: \");\n    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    append(\" sec\");\n    append(StringUtils.LINE_SEP);\n    append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    // HACK: junit gives us no way to do this in LuceneTestCase\n    try {\n      Class<?> clazz = Class.forName(suite.getName());\n      Ignore ignore = clazz.getAnnotation(Ignore.class);\n      if (ignore != null) {\n        if (systemError == null) systemError = \"\";\n        systemError += \"NOTE: Ignoring test class '\" + clazz.getSimpleName() + \"': \" \n                    + ignore.value() + StringUtils.LINE_SEP;\n      }\n    } catch (ClassNotFoundException e) { /* no problem */ }\n    // END HACK\n    \n    if (systemError != null && systemError.length() > 0) {\n      append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          sb.writeTo(out);\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"caf652eb8fee0d4f3a19aef43ca31ec6663b4cb8":["7ef42f5d49d3a54e82653530696f6fff0eb81b5b"],"70ad682703b8585f5d0a637efec044d57ec05efb":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","a0277bf8102a4c3eeec04fef2273fe6af421a09a"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a0277bf8102a4c3eeec04fef2273fe6af421a09a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ef42f5d49d3a54e82653530696f6fff0eb81b5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["7ef42f5d49d3a54e82653530696f6fff0eb81b5b"],"a0277bf8102a4c3eeec04fef2273fe6af421a09a":["caf652eb8fee0d4f3a19aef43ca31ec6663b4cb8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["7ef42f5d49d3a54e82653530696f6fff0eb81b5b","caf652eb8fee0d4f3a19aef43ca31ec6663b4cb8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0277bf8102a4c3eeec04fef2273fe6af421a09a"]},"commit2Childs":{"caf652eb8fee0d4f3a19aef43ca31ec6663b4cb8":["a0277bf8102a4c3eeec04fef2273fe6af421a09a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ef42f5d49d3a54e82653530696f6fff0eb81b5b"],"7ef42f5d49d3a54e82653530696f6fff0eb81b5b":["caf652eb8fee0d4f3a19aef43ca31ec6663b4cb8","4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["70ad682703b8585f5d0a637efec044d57ec05efb"],"a0277bf8102a4c3eeec04fef2273fe6af421a09a":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}