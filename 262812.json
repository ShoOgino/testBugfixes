{"path":"lucene/core/src/java/org/apache/lucene/search/Matches#fromSubMatches(List[Matches]).mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Matches#fromSubMatches(List[Matches]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Amalgamate a collection of {@link Matches} into a single object\n   */\n  static Matches fromSubMatches(List<Matches> subMatches) {\n    if (subMatches == null || subMatches.size() == 0) {\n      return null;\n    }\n    List<Matches> sm = subMatches.stream().filter(m -> m != MATCH_WITH_NO_TERMS).collect(Collectors.toList());\n    if (sm.size() == 0) {\n      return MATCH_WITH_NO_TERMS;\n    }\n    if (sm.size() == 1) {\n      return sm.get(0);\n    }\n    Set<String> fields = new HashSet<>();\n    for (Matches m : sm) {\n      for (String field : m) {\n        fields.add(field);\n      }\n    }\n    return new Matches() {\n      @Override\n      public MatchesIterator getMatches(String field) throws IOException {\n        List<MatchesIterator> subIterators = new ArrayList<>();\n        for (Matches m : sm) {\n          MatchesIterator it = m.getMatches(field);\n          if (it != null) {\n            subIterators.add(it);\n          }\n        }\n        return DisjunctionMatchesIterator.fromSubIterators(subIterators);\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        return fields.iterator();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Matches#fromSubMatches(List[Matches]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Amalgamate a collection of {@link Matches} into a single object\n   */\n  static Matches fromSubMatches(List<Matches> subMatches) {\n    if (subMatches == null || subMatches.size() == 0) {\n      return null;\n    }\n    List<Matches> sm = subMatches.stream().filter(m -> m != MATCH_WITH_NO_TERMS).collect(Collectors.toList());\n    if (sm.size() == 0) {\n      return MATCH_WITH_NO_TERMS;\n    }\n    if (sm.size() == 1) {\n      return sm.get(0);\n    }\n    Set<String> fields = new HashSet<>();\n    for (Matches m : sm) {\n      for (String field : m) {\n        fields.add(field);\n      }\n    }\n    return new Matches() {\n      @Override\n      public MatchesIterator getMatches(String field) throws IOException {\n        List<MatchesIterator> subIterators = new ArrayList<>();\n        for (Matches m : sm) {\n          MatchesIterator it = m.getMatches(field);\n          if (it != null) {\n            subIterators.add(it);\n          }\n        }\n        return DisjunctionMatchesIterator.fromSubIterators(subIterators);\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        return fields.iterator();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f096f495a4a51c97c82cf6fd06e107c12f797b","date":1523545198,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Matches#fromSubMatches(List[Matches]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Matches#fromSubMatches(List[Matches]).mjava","sourceNew":"  /**\n   * Amalgamate a collection of {@link Matches} into a single object\n   */\n  static Matches fromSubMatches(List<Matches> subMatches) {\n    if (subMatches == null || subMatches.size() == 0) {\n      return null;\n    }\n    List<Matches> sm = subMatches.stream().filter(m -> m != MATCH_WITH_NO_TERMS).collect(Collectors.toList());\n    if (sm.size() == 0) {\n      return MATCH_WITH_NO_TERMS;\n    }\n    if (sm.size() == 1) {\n      return sm.get(0);\n    }\n\n    return new Matches() {\n      @Override\n      public MatchesIterator getMatches(String field) throws IOException {\n        List<MatchesIterator> subIterators = new ArrayList<>(sm.size());\n        for (Matches m : sm) {\n          MatchesIterator it = m.getMatches(field);\n          if (it != null) {\n            subIterators.add(it);\n          }\n        }\n        return DisjunctionMatchesIterator.fromSubIterators(subIterators);\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        // for each sub-match, iterate its fields (it's an Iterable of the fields), and return the distinct set\n        return sm.stream().flatMap(m -> StreamSupport.stream(m.spliterator(), false)).distinct().iterator();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Amalgamate a collection of {@link Matches} into a single object\n   */\n  static Matches fromSubMatches(List<Matches> subMatches) {\n    if (subMatches == null || subMatches.size() == 0) {\n      return null;\n    }\n    List<Matches> sm = subMatches.stream().filter(m -> m != MATCH_WITH_NO_TERMS).collect(Collectors.toList());\n    if (sm.size() == 0) {\n      return MATCH_WITH_NO_TERMS;\n    }\n    if (sm.size() == 1) {\n      return sm.get(0);\n    }\n    Set<String> fields = new HashSet<>();\n    for (Matches m : sm) {\n      for (String field : m) {\n        fields.add(field);\n      }\n    }\n    return new Matches() {\n      @Override\n      public MatchesIterator getMatches(String field) throws IOException {\n        List<MatchesIterator> subIterators = new ArrayList<>();\n        for (Matches m : sm) {\n          MatchesIterator it = m.getMatches(field);\n          if (it != null) {\n            subIterators.add(it);\n          }\n        }\n        return DisjunctionMatchesIterator.fromSubIterators(subIterators);\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        return fields.iterator();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchesUtils#fromSubMatches(List[Matches]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Matches#fromSubMatches(List[Matches]).mjava","sourceNew":"  /**\n   * Amalgamate a collection of {@link Matches} into a single object\n   */\n  public static Matches fromSubMatches(List<Matches> subMatches) {\n    if (subMatches == null || subMatches.size() == 0) {\n      return null;\n    }\n    List<Matches> sm = subMatches.stream().filter(m -> m != MATCH_WITH_NO_TERMS).collect(Collectors.toList());\n    if (sm.size() == 0) {\n      return MATCH_WITH_NO_TERMS;\n    }\n    if (sm.size() == 1) {\n      return sm.get(0);\n    }\n\n    return new Matches() {\n      @Override\n      public MatchesIterator getMatches(String field) throws IOException {\n        List<MatchesIterator> subIterators = new ArrayList<>(sm.size());\n        for (Matches m : sm) {\n          MatchesIterator it = m.getMatches(field);\n          if (it != null) {\n            subIterators.add(it);\n          }\n        }\n        return DisjunctionMatchesIterator.fromSubIterators(subIterators);\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        // for each sub-match, iterate its fields (it's an Iterable of the fields), and return the distinct set\n        return sm.stream().flatMap(m -> StreamSupport.stream(m.spliterator(), false)).distinct().iterator();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Amalgamate a collection of {@link Matches} into a single object\n   */\n  static Matches fromSubMatches(List<Matches> subMatches) {\n    if (subMatches == null || subMatches.size() == 0) {\n      return null;\n    }\n    List<Matches> sm = subMatches.stream().filter(m -> m != MATCH_WITH_NO_TERMS).collect(Collectors.toList());\n    if (sm.size() == 0) {\n      return MATCH_WITH_NO_TERMS;\n    }\n    if (sm.size() == 1) {\n      return sm.get(0);\n    }\n\n    return new Matches() {\n      @Override\n      public MatchesIterator getMatches(String field) throws IOException {\n        List<MatchesIterator> subIterators = new ArrayList<>(sm.size());\n        for (Matches m : sm) {\n          MatchesIterator it = m.getMatches(field);\n          if (it != null) {\n            subIterators.add(it);\n          }\n        }\n        return DisjunctionMatchesIterator.fromSubIterators(subIterators);\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        // for each sub-match, iterate its fields (it's an Iterable of the fields), and return the distinct set\n        return sm.stream().flatMap(m -> StreamSupport.stream(m.spliterator(), false)).distinct().iterator();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2375622520a4e480775e3104a2f9a423536755b4":["70f096f495a4a51c97c82cf6fd06e107c12f797b"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"70f096f495a4a51c97c82cf6fd06e107c12f797b":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2375622520a4e480775e3104a2f9a423536755b4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"2375622520a4e480775e3104a2f9a423536755b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["70f096f495a4a51c97c82cf6fd06e107c12f797b"],"70f096f495a4a51c97c82cf6fd06e107c12f797b":["2375622520a4e480775e3104a2f9a423536755b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}