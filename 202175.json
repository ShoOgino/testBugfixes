{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d1cb61e3c441c59676a6c0d1fdbfd8298789576","date":1314193471,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(250));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(250));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(100));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(100));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    DefaultHttpClient myHttpClient = new DefaultHttpClient(new ThreadSafeClientConnManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(250));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(250));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    HttpClient myHttpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(250));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(250));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, 250);\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 250);\n    HttpClient myHttpClient = HttpClientUtil.createClient(params);\n\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    DefaultHttpClient myHttpClient = new DefaultHttpClient(new ThreadSafeClientConnManager());\n\n    myHttpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(250));\n    myHttpClient.getParams().setParameter(\"http.socket.timeout\", new Integer(250));\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, 250);\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 250);\n    HttpClient myHttpClient = HttpClientUtil.createClient(params);\n\n    LBHttpSolrClient client = new LBHttpSolrClient(myHttpClient, s);\n    client.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      client.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, client, 3, \"solr1\");\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, 250);\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 250);\n    HttpClient myHttpClient = HttpClientUtil.createClient(params);\n\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1d1cb61e3c441c59676a6c0d1fdbfd8298789576":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["1d1cb61e3c441c59676a6c0d1fdbfd8298789576"],"bafca15d8e408346a67f4282ad1143b88023893b":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"1d1cb61e3c441c59676a6c0d1fdbfd8298789576":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1d1cb61e3c441c59676a6c0d1fdbfd8298789576"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"eb99886ff640d94edb43e0d36112a2b7023379ba":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}