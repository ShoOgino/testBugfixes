{"path":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","sourceOld":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","sourceOld":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","sourceOld":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba3a184cc785359756dd0a77bbdb0e4f06bf727b","date":1344450045,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":null,"sourceOld":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":null,"sourceOld":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":null,"sourceOld":"  // TODO: this test is really fragile since it pokes around in solr's guts and makes many assumptions.\n  // it should be rewritten to use the real distributed interface\n  @Test\n  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n\n    ResponseBuilder rb = new ResponseBuilder(new LocalSolrQueryRequest(core, params), new SolrQueryResponse(), (List)Arrays.asList(tvComp));\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      log.info(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n\n    rb.req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba3a184cc785359756dd0a77bbdb0e4f06bf727b":["c26f00b574427b55127e869b935845554afde1fa"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["c26f00b574427b55127e869b935845554afde1fa","ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c26f00b574427b55127e869b935845554afde1fa","ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b"]},"commit2Childs":{"ba3a184cc785359756dd0a77bbdb0e4f06bf727b":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}