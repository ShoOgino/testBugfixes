{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<String>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5","date":1440505299,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need to check.\n      if (fl.indexOf('*') >= 0) { \n        return;\n      }\n\n      String name = getClusteringEngineName(rb);\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        Set<String> fields = engine.getFieldsToLoad(rb.req);\n        if (fields == null || fields.size() == 0) { \n          return;\n        }\n  \n        StringBuilder sb = new StringBuilder();\n        String[] flparams = fl.split( \"[,\\\\s]+\" );\n        Set<String> flParamSet = new HashSet<>(flparams.length);\n        for (String flparam : flparams) {\n          // no need trim() because of split() by \\s+\n          flParamSet.add(flparam);\n        }\n        for (String aFieldToLoad : fields) {\n          if (!flParamSet.contains(aFieldToLoad )) {\n            sb.append(',').append(aFieldToLoad);\n          }\n        }\n        if (sb.length() > 0) {\n          sreq.params.set(CommonParams.FL, fl + sb.toString());\n        }\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need check\n      if( fl.indexOf( '*' ) >= 0 ) return;\n      Set<String> fields = getSearchClusteringEngine(rb).getFieldsToLoad(rb.req);\n      if( fields == null || fields.size() == 0 ) return;\n      StringBuilder sb = new StringBuilder();\n      String[] flparams = fl.split( \"[,\\\\s]+\" );\n      Set<String> flParamSet = new HashSet<>(flparams.length);\n      for( String flparam : flparams ){\n        // no need trim() because of split() by \\s+\n        flParamSet.add(flparam);\n      }\n      for( String aFieldToLoad : fields ){\n        if( !flParamSet.contains( aFieldToLoad ) ){\n          sb.append( ',' ).append( aFieldToLoad );\n        }\n      }\n      if( sb.length() > 0 ){\n        sreq.params.set( CommonParams.FL, fl + sb.toString() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need to check.\n      if (fl.indexOf('*') >= 0) { \n        return;\n      }\n\n      String name = getClusteringEngineName(rb);\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        Set<String> fields = engine.getFieldsToLoad(rb.req);\n        if (fields == null || fields.size() == 0) { \n          return;\n        }\n  \n        StringBuilder sb = new StringBuilder();\n        String[] flparams = fl.split( \"[,\\\\s]+\" );\n        Set<String> flParamSet = new HashSet<>(flparams.length);\n        for (String flparam : flparams) {\n          // no need trim() because of split() by \\s+\n          flParamSet.add(flparam);\n        }\n        for (String aFieldToLoad : fields) {\n          if (!flParamSet.contains(aFieldToLoad )) {\n            sb.append(',').append(aFieldToLoad);\n          }\n        }\n        if (sb.length() > 0) {\n          sreq.params.set(CommonParams.FL, fl + sb.toString());\n        }\n      } else {\n        log.warn(\"No engine named: {}\", name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || !params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false)) {\n      return;\n    }\n    sreq.params.remove(COMPONENT_NAME);\n    if( ( sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS ) != 0 ){\n      String fl = sreq.params.get(CommonParams.FL,\"*\");\n      // if fl=* then we don't need to check.\n      if (fl.indexOf('*') >= 0) { \n        return;\n      }\n\n      String name = getClusteringEngineName(rb);\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        Set<String> fields = engine.getFieldsToLoad(rb.req);\n        if (fields == null || fields.size() == 0) { \n          return;\n        }\n  \n        StringBuilder sb = new StringBuilder();\n        String[] flparams = fl.split( \"[,\\\\s]+\" );\n        Set<String> flParamSet = new HashSet<>(flparams.length);\n        for (String flparam : flparams) {\n          // no need trim() because of split() by \\s+\n          flParamSet.add(flparam);\n        }\n        for (String aFieldToLoad : fields) {\n          if (!flParamSet.contains(aFieldToLoad )) {\n            sb.append(',').append(aFieldToLoad);\n          }\n        }\n        if (sb.length() > 0) {\n          sreq.params.set(CommonParams.FL, fl + sb.toString());\n        }\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}