{"path":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","commits":[{"id":"71130cfca9e17db547b4f78cce4b0ad0af72f638","date":1362280541,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      verbose(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        verbose(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds);\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads);\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messsed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b16415d71f34d00bd12f3db116f7cac330f123e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4185e899497a40e256a0ae02a47da9e2872d79f2","date":1362408234,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","sourceNew":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      verbose(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        verbose(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds);\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads);\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messsed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      verbose(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        verbose(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds);\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads);\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messsed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e","date":1362676527,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","sourceNew":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds);\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads);\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messsed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      verbose(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        verbose(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds);\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads);\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messsed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"766227a9d9a3552cabc928671006564df47e6d6f","date":1363176788,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","sourceNew":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messsed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds);\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads);\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messsed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b16415d71f34d00bd12f3db116f7cac330f123e0","date":1372531249,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","sourceNew":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","sourceOld":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messsed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":["71130cfca9e17db547b4f78cce4b0ad0af72f638"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","sourceNew":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","sourceOld":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messsed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","sourceNew":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    buildClients();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingClients, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryingClients, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryingClients.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryingClients.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","sourceOld":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    getServers();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingServers, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryServers, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryServers.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryServers.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","sourceNew":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun) throws Exception {\n    makeCores(solrHomeDirectory);\n\n    //MUST start the server after the cores are made.\n    buildClients();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingClients, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryingClients, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryingClients.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryingClients.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","sourceOld":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    buildClients();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingClients, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryingClients, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryingClients.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryingClients.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"766227a9d9a3552cabc928671006564df47e6d6f":["e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["766227a9d9a3552cabc928671006564df47e6d6f","b16415d71f34d00bd12f3db116f7cac330f123e0"],"4185e899497a40e256a0ae02a47da9e2872d79f2":["71130cfca9e17db547b4f78cce4b0ad0af72f638"],"b16415d71f34d00bd12f3db116f7cac330f123e0":["766227a9d9a3552cabc928671006564df47e6d6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71130cfca9e17db547b4f78cce4b0ad0af72f638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["b16415d71f34d00bd12f3db116f7cac330f123e0"],"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e":["4185e899497a40e256a0ae02a47da9e2872d79f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"]},"commit2Childs":{"766227a9d9a3552cabc928671006564df47e6d6f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b16415d71f34d00bd12f3db116f7cac330f123e0"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"4185e899497a40e256a0ae02a47da9e2872d79f2":["e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e"],"b16415d71f34d00bd12f3db116f7cac330f123e0":["37a0f60745e53927c4c876cfe5b5a58170f0646c","bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71130cfca9e17db547b4f78cce4b0ad0af72f638"],"71130cfca9e17db547b4f78cce4b0ad0af72f638":["4185e899497a40e256a0ae02a47da9e2872d79f2"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bafca15d8e408346a67f4282ad1143b88023893b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e":["766227a9d9a3552cabc928671006564df47e6d6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}