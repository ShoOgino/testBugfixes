{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockRAMDirectory dir = newDirectory(random);      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockRAMDirectory dir = newDirectory(random);      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2047784e704fe141e0ff36affac8a7cb6c7bbec","date":1295352100,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxFieldLength(100000000).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getLiveDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getLiveDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getLiveDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getDeletedDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getLiveDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(newField(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getLiveDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getLiveDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n                                                MultiFields.getLiveDocs(reader),\n                                                \"field\",\n                                                new BytesRef(\"a\"));\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01));\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", b.toString(), customType));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   \"field\",\n                                   new BytesRef(\"a\"),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   true);\n      td.nextDoc();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["872cff1d3a554e0cd64014cd97f88d3002b0f491","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","132903c28af3aa6f67284b78de91c0f0a99488c2"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","28427ef110c4c5bf5b4057731b83110bd1e13724"],"962d04139994fce5193143ef35615499a9a96d78":["e79a6d080bdd5b2a8f56342cf571b5476de04180","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["1509f151d7692d84fae414b2b799ac06ba60fcb4","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c2047784e704fe141e0ff36affac8a7cb6c7bbec","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["872cff1d3a554e0cd64014cd97f88d3002b0f491","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c2047784e704fe141e0ff36affac8a7cb6c7bbec","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["b21422ff1d1d56499dec481f193b402e5e8def5b","5f4e87790277826a2aea119328600dfb07761f32"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"d572389229127c297dd1fa5ce4758e1cec41e799":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","b65b350ca9588f9fc76ce7d6804160d06c45ff42","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["962d04139994fce5193143ef35615499a9a96d78"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}