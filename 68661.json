{"path":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","commits":[{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), zkDataHome, zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String solrHostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == solrHostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(zookeeperHost), zkDataHome, zkConfHome, solrHostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, solrHostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","pathOld":"/dev/null","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), zkDataHome, zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06913e78cf7eba43ba25e73c01678f04f274dbb7","date":1453125482,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), zkDataHome, zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), zkDataHome, zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), zkDataHome, zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getLoadedCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), zkDataHome, zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), zkDataHome, zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getLoadedCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), zkDataHome, zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getLoadedCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), zkDataHome, zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getLoadedCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    String solrHome = cc.getSolrHome();\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getLoadedCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", Paths.get(solrHome).resolve(\"zoo_data\").toString());\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), new File(zkDataHome), zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getLoadedCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["06913e78cf7eba43ba25e73c01678f04f274dbb7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15199583d3635cb940942caed05132dd6c4c7c6"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"06913e78cf7eba43ba25e73c01678f04f274dbb7":["e15199583d3635cb940942caed05132dd6c4c7c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["06913e78cf7eba43ba25e73c01678f04f274dbb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06913e78cf7eba43ba25e73c01678f04f274dbb7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e15199583d3635cb940942caed05132dd6c4c7c6"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","06913e78cf7eba43ba25e73c01678f04f274dbb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}