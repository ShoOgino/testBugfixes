{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","commits":[{"id":"28bce66b0b769a7827b1f4df30b3f50a2ed6c355","date":1347720564,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point)}.\n   * The formula is <code>c/(d + c)</code> where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter()), 1f, c, c);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a538ad124424bb29a1a6b3d94f142b8264b802","date":1348462001,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter()), 1f, c, c);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point)}.\n   * The formula is <code>c/(d + c)</code> where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter()), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db81fe5f1911f062c87abbb053871c166d57d849","date":1374686410,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter()), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter()), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/SpatialStrategy#makeRecipDistanceValueSource(Shape).mjava","sourceNew":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","sourceOld":"  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * on the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point,double)}.\n   * The formula is {@code c/(d + c)} where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n    Rectangle bbox = queryShape.getBoundingBox();\n    double diagonalDist = ctx.getDistCalc().distance(\n        ctx.makePoint(bbox.getMinX(), bbox.getMinY()), bbox.getMaxX(), bbox.getMaxY());\n    double distToEdge = diagonalDist * 0.5;\n    float c = (float)distToEdge * 0.1f;//one tenth\n    return new ReciprocalFloatFunction(makeDistanceValueSource(queryShape.getCenter(), 1.0), 1f, c, c);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["db81fe5f1911f062c87abbb053871c166d57d849","112d77ac8d3e10a362516ad834c9a11d35c94234"],"11a538ad124424bb29a1a6b3d94f142b8264b802":["28bce66b0b769a7827b1f4df30b3f50a2ed6c355"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["db81fe5f1911f062c87abbb053871c166d57d849"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["11a538ad124424bb29a1a6b3d94f142b8264b802"],"28bce66b0b769a7827b1f4df30b3f50a2ed6c355":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db81fe5f1911f062c87abbb053871c166d57d849":["11a538ad124424bb29a1a6b3d94f142b8264b802"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11a538ad124424bb29a1a6b3d94f142b8264b802":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","db81fe5f1911f062c87abbb053871c166d57d849"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28bce66b0b769a7827b1f4df30b3f50a2ed6c355"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"28bce66b0b769a7827b1f4df30b3f50a2ed6c355":["11a538ad124424bb29a1a6b3d94f142b8264b802"],"db81fe5f1911f062c87abbb053871c166d57d849":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}