{"path":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","commits":[{"id":"f8d5405ac4f2510f9f83e07236792d1056c19640","date":1322235986,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-folding.xml\");\n    IndexWriter iw;\n\n    String docs[] = {\n        \"abcdefg1 finger\",\n        \"gangs hijklmn1\",\n        \"opqrstu1 zilly\",\n    };\n\n    // prepare the index\n    for (int i = 0; i < docs.length; i++) {\n      String num = Integer.toString(i);\n      String boolVal = ((i % 2) == 0) ? \"true\" : \"false\";\n      assertU(adoc(\"id\", num,\n          \"int_f\", num,\n          \"float_f\", num,\n          \"long_f\", num,\n          \"double_f\", num,\n          \"byte_f\", num,\n          \"short_f\", num,\n          \"bool_f\", boolVal,\n          \"date_f\", \"200\" + Integer.toString(i % 10) + \"-01-01T00:00:00Z\",\n          \"content\", docs[i],\n          \"content_ws\", docs[i],\n          \"content_rev\", docs[i],\n          \"content_multi\", docs[i],\n          \"content_lower_token\", docs[i],\n          \"content_oldstyle\", docs[i],\n          \"content_charfilter\", docs[i],\n          \"content_multi_bad\", docs[i]\n      ));\n    }\n    assertU(optimize());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15795b2193a8dd132f374975d4243687bee9351","date":1322413478,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-folding.xml\");\n    IndexWriter iw;\n\n    String docs[] = {\n        \"abcdefg1 finger\",\n        \"gangs hijklmn1\",\n        \"opqrstu1 zilly\",\n    };\n\n    // prepare the index\n    for (int i = 0; i < docs.length; i++) {\n      String num = Integer.toString(i);\n      String boolVal = ((i % 2) == 0) ? \"true\" : \"false\";\n      assertU(adoc(\"id\", num,\n          \"int_f\", num,\n          \"float_f\", num,\n          \"long_f\", num,\n          \"double_f\", num,\n          \"byte_f\", num,\n          \"short_f\", num,\n          \"bool_f\", boolVal,\n          \"date_f\", \"200\" + Integer.toString(i % 10) + \"-01-01T00:00:00Z\",\n          \"content\", docs[i],\n          \"content_ws\", docs[i],\n          \"content_rev\", docs[i],\n          \"content_multi\", docs[i],\n          \"content_lower_token\", docs[i],\n          \"content_oldstyle\", docs[i],\n          \"content_charfilter\", docs[i],\n          \"content_multi_bad\", docs[i],\n          \"content_straight\", docs[i],\n          \"content_lower\", docs[i],\n          \"content_folding\", docs[i],\n          \"content_stemming\", docs[i],\n          \"content_keyword\", docs[i]\n      ));\n    }\n    assertU(optimize());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-folding.xml\");\n    IndexWriter iw;\n\n    String docs[] = {\n        \"abcdefg1 finger\",\n        \"gangs hijklmn1\",\n        \"opqrstu1 zilly\",\n    };\n\n    // prepare the index\n    for (int i = 0; i < docs.length; i++) {\n      String num = Integer.toString(i);\n      String boolVal = ((i % 2) == 0) ? \"true\" : \"false\";\n      assertU(adoc(\"id\", num,\n          \"int_f\", num,\n          \"float_f\", num,\n          \"long_f\", num,\n          \"double_f\", num,\n          \"byte_f\", num,\n          \"short_f\", num,\n          \"bool_f\", boolVal,\n          \"date_f\", \"200\" + Integer.toString(i % 10) + \"-01-01T00:00:00Z\",\n          \"content\", docs[i],\n          \"content_ws\", docs[i],\n          \"content_rev\", docs[i],\n          \"content_multi\", docs[i],\n          \"content_lower_token\", docs[i],\n          \"content_oldstyle\", docs[i],\n          \"content_charfilter\", docs[i],\n          \"content_multi_bad\", docs[i]\n      ));\n    }\n    assertU(optimize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aa6ef14ffd15aa20e622be1a9a86296d8818bd8","date":1332439401,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-folding.xml\");\n    IndexWriter iw;\n\n    String docs[] = {\n        \"abcdefg1 finger\",\n        \"gangs hijklmn1\",\n        \"opqrstu1 zilly\",\n    };\n\n    // prepare the index\n    for (int i = 0; i < docs.length; i++) {\n      String num = Integer.toString(i);\n      String boolVal = ((i % 2) == 0) ? \"true\" : \"false\";\n      assertU(adoc(\"id\", num,\n          \"int_f\", num,\n          \"float_f\", num,\n          \"long_f\", num,\n          \"double_f\", num,\n          \"byte_f\", num,\n          \"short_f\", num,\n          \"bool_f\", boolVal,\n          \"date_f\", \"200\" + Integer.toString(i % 10) + \"-01-01T00:00:00Z\",\n          \"content\", docs[i],\n          \"content_ws\", docs[i],\n          \"content_rev\", docs[i],\n          \"content_multi\", docs[i],\n          \"content_lower_token\", docs[i],\n          \"content_oldstyle\", docs[i],\n          \"content_charfilter\", docs[i],\n          \"content_multi_bad\", docs[i],\n          \"content_straight\", docs[i],\n          \"content_lower\", docs[i],\n          \"content_folding\", docs[i],\n          \"content_stemming\", docs[i],\n          \"content_keyword\", docs[i]\n      ));\n    }\n    // Mixing and matching amongst various languages is probalby a bad thing, so add some tests for various\n    // special filters\n    int idx = docs.length;\n    // Greek\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"Μάϊος\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"ΜΆΪΟΣ\"));\n\n    // Turkish\n\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"\\u0130STANBUL\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"ISPARTA\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"izmir\"));\n\n\n    // Russian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"электромагнитной\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"Вместе\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"силе\"));\n\n    assertU(optimize());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-folding.xml\");\n    IndexWriter iw;\n\n    String docs[] = {\n        \"abcdefg1 finger\",\n        \"gangs hijklmn1\",\n        \"opqrstu1 zilly\",\n    };\n\n    // prepare the index\n    for (int i = 0; i < docs.length; i++) {\n      String num = Integer.toString(i);\n      String boolVal = ((i % 2) == 0) ? \"true\" : \"false\";\n      assertU(adoc(\"id\", num,\n          \"int_f\", num,\n          \"float_f\", num,\n          \"long_f\", num,\n          \"double_f\", num,\n          \"byte_f\", num,\n          \"short_f\", num,\n          \"bool_f\", boolVal,\n          \"date_f\", \"200\" + Integer.toString(i % 10) + \"-01-01T00:00:00Z\",\n          \"content\", docs[i],\n          \"content_ws\", docs[i],\n          \"content_rev\", docs[i],\n          \"content_multi\", docs[i],\n          \"content_lower_token\", docs[i],\n          \"content_oldstyle\", docs[i],\n          \"content_charfilter\", docs[i],\n          \"content_multi_bad\", docs[i],\n          \"content_straight\", docs[i],\n          \"content_lower\", docs[i],\n          \"content_folding\", docs[i],\n          \"content_stemming\", docs[i],\n          \"content_keyword\", docs[i]\n      ));\n    }\n    assertU(optimize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d5711430419c04dcbe58f6ee77485e71df3b717","date":1332450238,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-folding.xml\");\n\n    String docs[] = {\n        \"abcdefg1 finger\",\n        \"gangs hijklmn1\",\n        \"opqrstu1 zilly\",\n    };\n\n    // prepare the index\n    for (int i = 0; i < docs.length; i++) {\n      String num = Integer.toString(i);\n      String boolVal = ((i % 2) == 0) ? \"true\" : \"false\";\n      assertU(adoc(\"id\", num,\n          \"int_f\", num,\n          \"float_f\", num,\n          \"long_f\", num,\n          \"double_f\", num,\n          \"byte_f\", num,\n          \"short_f\", num,\n          \"bool_f\", boolVal,\n          \"date_f\", \"200\" + Integer.toString(i % 10) + \"-01-01T00:00:00Z\",\n          \"content\", docs[i],\n          \"content_ws\", docs[i],\n          \"content_rev\", docs[i],\n          \"content_multi\", docs[i],\n          \"content_lower_token\", docs[i],\n          \"content_oldstyle\", docs[i],\n          \"content_charfilter\", docs[i],\n          \"content_multi_bad\", docs[i],\n          \"content_straight\", docs[i],\n          \"content_lower\", docs[i],\n          \"content_folding\", docs[i],\n          \"content_stemming\", docs[i],\n          \"content_keyword\", docs[i]\n      ));\n    }\n    // Mixing and matching amongst various languages is probalby a bad thing, so add some tests for various\n    // special filters\n    int idx = docs.length;\n    // Greek\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"Μάϊος\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"ΜΆΪΟΣ\"));\n\n    // Turkish\n\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"\\u0130STANBUL\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"ISPARTA\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"izmir\"));\n\n\n    // Russian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"электромагнитной\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"Вместе\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"силе\"));\n\n    // persian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_persian\", \"هاي\"));\n    \n    // arabic normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_arabic\", \"روبرت\"));\n\n    // hindi normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_hindi\", \"हिंदी\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_hindi\", \"अाअा\"));\n    \n    // german normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_german\", \"weissbier\"));\n    \n    // cjk width normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_width\", \"ｳﾞｨｯﾂ\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-folding.xml\");\n    IndexWriter iw;\n\n    String docs[] = {\n        \"abcdefg1 finger\",\n        \"gangs hijklmn1\",\n        \"opqrstu1 zilly\",\n    };\n\n    // prepare the index\n    for (int i = 0; i < docs.length; i++) {\n      String num = Integer.toString(i);\n      String boolVal = ((i % 2) == 0) ? \"true\" : \"false\";\n      assertU(adoc(\"id\", num,\n          \"int_f\", num,\n          \"float_f\", num,\n          \"long_f\", num,\n          \"double_f\", num,\n          \"byte_f\", num,\n          \"short_f\", num,\n          \"bool_f\", boolVal,\n          \"date_f\", \"200\" + Integer.toString(i % 10) + \"-01-01T00:00:00Z\",\n          \"content\", docs[i],\n          \"content_ws\", docs[i],\n          \"content_rev\", docs[i],\n          \"content_multi\", docs[i],\n          \"content_lower_token\", docs[i],\n          \"content_oldstyle\", docs[i],\n          \"content_charfilter\", docs[i],\n          \"content_multi_bad\", docs[i],\n          \"content_straight\", docs[i],\n          \"content_lower\", docs[i],\n          \"content_folding\", docs[i],\n          \"content_stemming\", docs[i],\n          \"content_keyword\", docs[i]\n      ));\n    }\n    // Mixing and matching amongst various languages is probalby a bad thing, so add some tests for various\n    // special filters\n    int idx = docs.length;\n    // Greek\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"Μάϊος\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"ΜΆΪΟΣ\"));\n\n    // Turkish\n\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"\\u0130STANBUL\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"ISPARTA\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"izmir\"));\n\n\n    // Russian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"электромагнитной\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"Вместе\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"силе\"));\n\n    assertU(optimize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-folding.xml\");\n\n    String docs[] = {\n        \"abcdefg1 finger\",\n        \"gangs hijklmn1\",\n        \"opqrstu1 zilly\",\n    };\n\n    // prepare the index\n    for (int i = 0; i < docs.length; i++) {\n      String num = Integer.toString(i);\n      String boolVal = ((i % 2) == 0) ? \"true\" : \"false\";\n      assertU(adoc(\"id\", num,\n          \"int_f\", num,\n          \"float_f\", num,\n          \"long_f\", num,\n          \"double_f\", num,\n          \"bool_f\", boolVal,\n          \"date_f\", \"200\" + Integer.toString(i % 10) + \"-01-01T00:00:00Z\",\n          \"content\", docs[i],\n          \"content_ws\", docs[i],\n          \"content_rev\", docs[i],\n          \"content_multi\", docs[i],\n          \"content_lower_token\", docs[i],\n          \"content_oldstyle\", docs[i],\n          \"content_charfilter\", docs[i],\n          \"content_multi_bad\", docs[i],\n          \"content_straight\", docs[i],\n          \"content_lower\", docs[i],\n          \"content_folding\", docs[i],\n          \"content_stemming\", docs[i],\n          \"content_keyword\", docs[i]\n      ));\n    }\n    // Mixing and matching amongst various languages is probalby a bad thing, so add some tests for various\n    // special filters\n    int idx = docs.length;\n    // Greek\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"Μάϊος\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"ΜΆΪΟΣ\"));\n\n    // Turkish\n\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"\\u0130STANBUL\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"ISPARTA\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"izmir\"));\n\n\n    // Russian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"электромагнитной\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"Вместе\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"силе\"));\n\n    // persian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_persian\", \"هاي\"));\n    \n    // arabic normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_arabic\", \"روبرت\"));\n\n    // hindi normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_hindi\", \"हिंदी\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_hindi\", \"अाअा\"));\n    \n    // german normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_german\", \"weissbier\"));\n    \n    // cjk width normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_width\", \"ｳﾞｨｯﾂ\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-folding.xml\");\n\n    String docs[] = {\n        \"abcdefg1 finger\",\n        \"gangs hijklmn1\",\n        \"opqrstu1 zilly\",\n    };\n\n    // prepare the index\n    for (int i = 0; i < docs.length; i++) {\n      String num = Integer.toString(i);\n      String boolVal = ((i % 2) == 0) ? \"true\" : \"false\";\n      assertU(adoc(\"id\", num,\n          \"int_f\", num,\n          \"float_f\", num,\n          \"long_f\", num,\n          \"double_f\", num,\n          \"byte_f\", num,\n          \"short_f\", num,\n          \"bool_f\", boolVal,\n          \"date_f\", \"200\" + Integer.toString(i % 10) + \"-01-01T00:00:00Z\",\n          \"content\", docs[i],\n          \"content_ws\", docs[i],\n          \"content_rev\", docs[i],\n          \"content_multi\", docs[i],\n          \"content_lower_token\", docs[i],\n          \"content_oldstyle\", docs[i],\n          \"content_charfilter\", docs[i],\n          \"content_multi_bad\", docs[i],\n          \"content_straight\", docs[i],\n          \"content_lower\", docs[i],\n          \"content_folding\", docs[i],\n          \"content_stemming\", docs[i],\n          \"content_keyword\", docs[i]\n      ));\n    }\n    // Mixing and matching amongst various languages is probalby a bad thing, so add some tests for various\n    // special filters\n    int idx = docs.length;\n    // Greek\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"Μάϊος\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"ΜΆΪΟΣ\"));\n\n    // Turkish\n\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"\\u0130STANBUL\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"ISPARTA\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"izmir\"));\n\n\n    // Russian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"электромагнитной\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"Вместе\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"силе\"));\n\n    // persian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_persian\", \"هاي\"));\n    \n    // arabic normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_arabic\", \"روبرت\"));\n\n    // hindi normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_hindi\", \"हिंदी\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_hindi\", \"अाअा\"));\n    \n    // german normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_german\", \"weissbier\"));\n    \n    // cjk width normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_width\", \"ｳﾞｨｯﾂ\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-folding.xml\");\n\n    String docs[] = {\n        \"abcdefg1 finger\",\n        \"gangs hijklmn1\",\n        \"opqrstu1 zilly\",\n    };\n\n    // prepare the index\n    for (int i = 0; i < docs.length; i++) {\n      String num = Integer.toString(i);\n      String boolVal = ((i % 2) == 0) ? \"true\" : \"false\";\n      assertU(adoc(\"id\", num,\n          \"int_f\", num,\n          \"float_f\", num,\n          \"long_f\", num,\n          \"double_f\", num,\n          \"bool_f\", boolVal,\n          \"date_f\", \"200\" + Integer.toString(i % 10) + \"-01-01T00:00:00Z\",\n          \"content\", docs[i],\n          \"content_ws\", docs[i],\n          \"content_rev\", docs[i],\n          \"content_multi\", docs[i],\n          \"content_lower_token\", docs[i],\n          \"content_oldstyle\", docs[i],\n          \"content_charfilter\", docs[i],\n          \"content_multi_bad\", docs[i],\n          \"content_straight\", docs[i],\n          \"content_lower\", docs[i],\n          \"content_folding\", docs[i],\n          \"content_stemming\", docs[i],\n          \"content_keyword\", docs[i]\n      ));\n    }\n    // Mixing and matching amongst various languages is probalby a bad thing, so add some tests for various\n    // special filters\n    int idx = docs.length;\n    // Greek\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"Μάϊος\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"ΜΆΪΟΣ\"));\n\n    // Turkish\n\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"\\u0130STANBUL\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"ISPARTA\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"izmir\"));\n\n\n    // Russian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"электромагнитной\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"Вместе\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"силе\"));\n\n    // persian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_persian\", \"هاي\"));\n    \n    // arabic normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_arabic\", \"روبرت\"));\n\n    // hindi normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_hindi\", \"हिंदी\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_hindi\", \"अाअा\"));\n    \n    // german normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_german\", \"weissbier\"));\n    \n    // cjk width normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_width\", \"ｳﾞｨｯﾂ\"));\n    assertU(commit());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-folding.xml\");\n\n    String docs[] = {\n        \"abcdefg1 finger\",\n        \"gangs hijklmn1\",\n        \"opqrstu1 zilly\",\n    };\n\n    // prepare the index\n    for (int i = 0; i < docs.length; i++) {\n      String num = Integer.toString(i);\n      String boolVal = ((i % 2) == 0) ? \"true\" : \"false\";\n      assertU(adoc(\"id\", num,\n          \"int_f\", num,\n          \"float_f\", num,\n          \"long_f\", num,\n          \"double_f\", num,\n          \"byte_f\", num,\n          \"short_f\", num,\n          \"bool_f\", boolVal,\n          \"date_f\", \"200\" + Integer.toString(i % 10) + \"-01-01T00:00:00Z\",\n          \"content\", docs[i],\n          \"content_ws\", docs[i],\n          \"content_rev\", docs[i],\n          \"content_multi\", docs[i],\n          \"content_lower_token\", docs[i],\n          \"content_oldstyle\", docs[i],\n          \"content_charfilter\", docs[i],\n          \"content_multi_bad\", docs[i],\n          \"content_straight\", docs[i],\n          \"content_lower\", docs[i],\n          \"content_folding\", docs[i],\n          \"content_stemming\", docs[i],\n          \"content_keyword\", docs[i]\n      ));\n    }\n    // Mixing and matching amongst various languages is probalby a bad thing, so add some tests for various\n    // special filters\n    int idx = docs.length;\n    // Greek\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"Μάϊος\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_greek\", \"ΜΆΪΟΣ\"));\n\n    // Turkish\n\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"\\u0130STANBUL\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"ISPARTA\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_turkish\", \"izmir\"));\n\n\n    // Russian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"электромагнитной\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"Вместе\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_russian\", \"силе\"));\n\n    // persian normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_persian\", \"هاي\"));\n    \n    // arabic normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_arabic\", \"روبرت\"));\n\n    // hindi normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_hindi\", \"हिंदी\"));\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_hindi\", \"अाअा\"));\n    \n    // german normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_german\", \"weissbier\"));\n    \n    // cjk width normalization\n    assertU(adoc(\"id\", Integer.toString(idx++), \"content_width\", \"ｳﾞｨｯﾂ\"));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7aa6ef14ffd15aa20e622be1a9a86296d8818bd8":["f15795b2193a8dd132f374975d4243687bee9351"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["6d5711430419c04dcbe58f6ee77485e71df3b717","59a0020b413d44dd79d85d7a66ed5004265fb453"],"6d5711430419c04dcbe58f6ee77485e71df3b717":["7aa6ef14ffd15aa20e622be1a9a86296d8818bd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["6d5711430419c04dcbe58f6ee77485e71df3b717"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15795b2193a8dd132f374975d4243687bee9351":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0020b413d44dd79d85d7a66ed5004265fb453"]},"commit2Childs":{"7aa6ef14ffd15aa20e622be1a9a86296d8818bd8":["6d5711430419c04dcbe58f6ee77485e71df3b717"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"6d5711430419c04dcbe58f6ee77485e71df3b717":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["f15795b2193a8dd132f374975d4243687bee9351"],"f15795b2193a8dd132f374975d4243687bee9351":["7aa6ef14ffd15aa20e622be1a9a86296d8818bd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}