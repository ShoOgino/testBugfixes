{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEquals().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEquals().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEquals().mjava","sourceNew":"  @Test \n  public void testEquals() {\n    // check that two empty paths are equal, even if they have different\n    // capacities:\n    CategoryPath p1 = new CategoryPath(0,0);\n    CategoryPath p2 = new CategoryPath(1000,300);\n    assertEquals(true, p1.equals(p2));\n    // If we make p2 different, it is no longer equals:\n    p2.add(\"hi\");\n    assertEquals(false, p1.equals(p2));\n    // A categoryPath is definitely not equals to an object of some other\n    // type:\n    assertEquals(false, p1.equals(Integer.valueOf(3)));\n    // Build two paths separately, and compare them\n    p1.clear();\n    p1.add(\"hello\");\n    p1.add(\"world\");\n    p2.clear();\n    p2.add(\"hello\");\n    p2.add(\"world\");\n    assertEquals(true, p1.equals(p2));    \n    // Check that comparison really don't look at old data which might\n    // be stored in the array\n    p1.clear();\n    p1.add(\"averylongcategoryname\");\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hi\");\n    assertEquals(true, p1.equals(p2));\n    // Being of the same length is obviously not enough to be equal\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hello\");\n    assertEquals(false, p1.equals(p2));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"ho\");\n    assertEquals(false, p1.equals(p2));\n  }\n\n","sourceOld":"  @Test \n  public void testEquals() {\n    // check that two empty paths are equal, even if they have different\n    // capacities:\n    CategoryPath p1 = new CategoryPath(0,0);\n    CategoryPath p2 = new CategoryPath(1000,300);\n    assertEquals(true, p1.equals(p2));\n    // If we make p2 different, it is no longer equals:\n    p2.add(\"hi\");\n    assertEquals(false, p1.equals(p2));\n    // A categoryPath is definitely not equals to an object of some other\n    // type:\n    assertEquals(false, p1.equals(Integer.valueOf(3)));\n    // Build two paths separately, and compare them\n    p1.clear();\n    p1.add(\"hello\");\n    p1.add(\"world\");\n    p2.clear();\n    p2.add(\"hello\");\n    p2.add(\"world\");\n    assertEquals(true, p1.equals(p2));    \n    // Check that comparison really don't look at old data which might\n    // be stored in the array\n    p1.clear();\n    p1.add(\"averylongcategoryname\");\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hi\");\n    assertEquals(true, p1.equals(p2));\n    // Being of the same length is obviously not enough to be equal\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hello\");\n    assertEquals(false, p1.equals(p2));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"ho\");\n    assertEquals(false, p1.equals(p2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEquals().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEquals().mjava","sourceNew":"  @Test \n  public void testEquals() {\n    assertEquals(CategoryPath.EMPTY, CategoryPath.EMPTY);\n    assertFalse(CategoryPath.EMPTY.equals(new CategoryPath(\"hi\")));\n    assertFalse(CategoryPath.EMPTY.equals(Integer.valueOf(3)));\n    assertEquals(new CategoryPath(\"hello\", \"world\"), new CategoryPath(\"hello\", \"world\"));    \n  }\n\n","sourceOld":"  @Test \n  public void testEquals() {\n    // check that two empty paths are equal, even if they have different\n    // capacities:\n    CategoryPath p1 = new CategoryPath(0,0);\n    CategoryPath p2 = new CategoryPath(1000,300);\n    assertEquals(true, p1.equals(p2));\n    // If we make p2 different, it is no longer equals:\n    p2.add(\"hi\");\n    assertEquals(false, p1.equals(p2));\n    // A categoryPath is definitely not equals to an object of some other\n    // type:\n    assertEquals(false, p1.equals(Integer.valueOf(3)));\n    // Build two paths separately, and compare them\n    p1.clear();\n    p1.add(\"hello\");\n    p1.add(\"world\");\n    p2.clear();\n    p2.add(\"hello\");\n    p2.add(\"world\");\n    assertEquals(true, p1.equals(p2));    \n    // Check that comparison really don't look at old data which might\n    // be stored in the array\n    p1.clear();\n    p1.add(\"averylongcategoryname\");\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hi\");\n    assertEquals(true, p1.equals(p2));\n    // Being of the same length is obviously not enough to be equal\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hello\");\n    assertEquals(false, p1.equals(p2));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"ho\");\n    assertEquals(false, p1.equals(p2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEquals().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEquals().mjava","sourceNew":"  @Test \n  public void testEquals() {\n    assertEquals(CategoryPath.EMPTY, CategoryPath.EMPTY);\n    assertFalse(CategoryPath.EMPTY.equals(new CategoryPath(\"hi\")));\n    assertFalse(CategoryPath.EMPTY.equals(Integer.valueOf(3)));\n    assertEquals(new CategoryPath(\"hello\", \"world\"), new CategoryPath(\"hello\", \"world\"));    \n  }\n\n","sourceOld":"  @Test \n  public void testEquals() {\n    // check that two empty paths are equal, even if they have different\n    // capacities:\n    CategoryPath p1 = new CategoryPath(0,0);\n    CategoryPath p2 = new CategoryPath(1000,300);\n    assertEquals(true, p1.equals(p2));\n    // If we make p2 different, it is no longer equals:\n    p2.add(\"hi\");\n    assertEquals(false, p1.equals(p2));\n    // A categoryPath is definitely not equals to an object of some other\n    // type:\n    assertEquals(false, p1.equals(Integer.valueOf(3)));\n    // Build two paths separately, and compare them\n    p1.clear();\n    p1.add(\"hello\");\n    p1.add(\"world\");\n    p2.clear();\n    p2.add(\"hello\");\n    p2.add(\"world\");\n    assertEquals(true, p1.equals(p2));    \n    // Check that comparison really don't look at old data which might\n    // be stored in the array\n    p1.clear();\n    p1.add(\"averylongcategoryname\");\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hi\");\n    assertEquals(true, p1.equals(p2));\n    // Being of the same length is obviously not enough to be equal\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"hello\");\n    assertEquals(false, p1.equals(p2));\n    p1.clear();\n    p1.add(\"hi\");\n    p2.clear();\n    p2.add(\"ho\");\n    assertEquals(false, p1.equals(p2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEquals().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEquals().mjava","sourceNew":"  @Test \n  public void testEquals() {\n    assertEquals(FacetLabel.EMPTY, FacetLabel.EMPTY);\n    assertFalse(FacetLabel.EMPTY.equals(new FacetLabel(\"hi\")));\n    assertFalse(FacetLabel.EMPTY.equals(Integer.valueOf(3)));\n    assertEquals(new FacetLabel(\"hello\", \"world\"), new FacetLabel(\"hello\", \"world\"));    \n  }\n\n","sourceOld":"  @Test \n  public void testEquals() {\n    assertEquals(CategoryPath.EMPTY, CategoryPath.EMPTY);\n    assertFalse(CategoryPath.EMPTY.equals(new CategoryPath(\"hi\")));\n    assertFalse(CategoryPath.EMPTY.equals(Integer.valueOf(3)));\n    assertEquals(new CategoryPath(\"hello\", \"world\"), new CategoryPath(\"hello\", \"world\"));    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testEquals().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEquals().mjava","sourceNew":"  @Test \n  public void testEquals() {\n    assertEquals(FacetLabel.EMPTY, FacetLabel.EMPTY);\n    assertFalse(FacetLabel.EMPTY.equals(new FacetLabel(\"hi\")));\n    assertFalse(FacetLabel.EMPTY.equals(Integer.valueOf(3)));\n    assertEquals(new FacetLabel(\"hello\", \"world\"), new FacetLabel(\"hello\", \"world\"));    \n  }\n\n","sourceOld":"  @Test \n  public void testEquals() {\n    assertEquals(FacetLabel.EMPTY, FacetLabel.EMPTY);\n    assertFalse(FacetLabel.EMPTY.equals(new FacetLabel(\"hi\")));\n    assertFalse(FacetLabel.EMPTY.equals(Integer.valueOf(3)));\n    assertEquals(new FacetLabel(\"hello\", \"world\"), new FacetLabel(\"hello\", \"world\"));    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEquals().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testEquals() {\n    assertEquals(CategoryPath.EMPTY, CategoryPath.EMPTY);\n    assertFalse(CategoryPath.EMPTY.equals(new CategoryPath(\"hi\")));\n    assertFalse(CategoryPath.EMPTY.equals(Integer.valueOf(3)));\n    assertEquals(new CategoryPath(\"hello\", \"world\"), new CategoryPath(\"hello\", \"world\"));    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78522aad83283ca58fae08fd89406b65429d0229":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","78522aad83283ca58fae08fd89406b65429d0229"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"78522aad83283ca58fae08fd89406b65429d0229":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["78522aad83283ca58fae08fd89406b65429d0229"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}