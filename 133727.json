{"path":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Gener#optimize(Trie).mjava","commits":[{"id":"67748b41458c73d49a48168362cc7f4c960a2542","date":1272890662,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Gener#optimize(Trie).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a Trie with infrequent values occurring in the given Trie removed.\n   * \n   * @param orig the Trie to optimize\n   * @return a new optimized Trie\n   */\n  @Override\n  public Trie optimize(Trie orig) {\n    List<CharSequence> cmds = orig.cmds;\n    List<Row> rows = new ArrayList<Row>();\n    List<Row> orows = orig.rows;\n    int remap[] = new int[orows.size()];\n    \n    Arrays.fill(remap, 1);\n    for (int j = orows.size() - 1; j >= 0; j--) {\n      if (eat(orows.get(j), remap)) {\n        remap[j] = 0;\n      }\n    }\n    \n    Arrays.fill(remap, -1);\n    rows = removeGaps(orig.root, orows, new ArrayList<Row>(), remap);\n    \n    return new Trie(orig.forward, remap[orig.root], cmds, rows);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/stempel/src/java/org/egothor/stemmer/Gener#optimize(Trie).mjava","pathOld":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Gener#optimize(Trie).mjava","sourceNew":"  /**\n   * Return a Trie with infrequent values occurring in the given Trie removed.\n   * \n   * @param orig the Trie to optimize\n   * @return a new optimized Trie\n   */\n  @Override\n  public Trie optimize(Trie orig) {\n    List<CharSequence> cmds = orig.cmds;\n    List<Row> rows = new ArrayList<Row>();\n    List<Row> orows = orig.rows;\n    int remap[] = new int[orows.size()];\n    \n    Arrays.fill(remap, 1);\n    for (int j = orows.size() - 1; j >= 0; j--) {\n      if (eat(orows.get(j), remap)) {\n        remap[j] = 0;\n      }\n    }\n    \n    Arrays.fill(remap, -1);\n    rows = removeGaps(orig.root, orows, new ArrayList<Row>(), remap);\n    \n    return new Trie(orig.forward, remap[orig.root], cmds, rows);\n  }\n\n","sourceOld":"  /**\n   * Return a Trie with infrequent values occurring in the given Trie removed.\n   * \n   * @param orig the Trie to optimize\n   * @return a new optimized Trie\n   */\n  @Override\n  public Trie optimize(Trie orig) {\n    List<CharSequence> cmds = orig.cmds;\n    List<Row> rows = new ArrayList<Row>();\n    List<Row> orows = orig.rows;\n    int remap[] = new int[orows.size()];\n    \n    Arrays.fill(remap, 1);\n    for (int j = orows.size() - 1; j >= 0; j--) {\n      if (eat(orows.get(j), remap)) {\n        remap[j] = 0;\n      }\n    }\n    \n    Arrays.fill(remap, -1);\n    rows = removeGaps(orig.root, orows, new ArrayList<Row>(), remap);\n    \n    return new Trie(orig.forward, remap[orig.root], cmds, rows);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67748b41458c73d49a48168362cc7f4c960a2542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["67748b41458c73d49a48168362cc7f4c960a2542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67748b41458c73d49a48168362cc7f4c960a2542"],"67748b41458c73d49a48168362cc7f4c960a2542":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}