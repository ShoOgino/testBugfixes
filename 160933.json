{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(PostingsEnum,List[Integer]).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(PostingsEnum,List[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressAdvance#testOne(DocsEnum,List[Integer]).mjava","sourceNew":"  private void testOne(PostingsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random().nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = TestUtil.nextInt(random(), 1, expected.size() - 1 - upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocIdSetIterator.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","sourceOld":"  private void testOne(DocsEnum docs, List<Integer> expected) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"test\");\n    }\n    int upto = -1;\n    while(upto < expected.size()) {\n      if (VERBOSE) {\n        System.out.println(\"  cycle upto=\" + upto + \" of \" + expected.size());\n      }\n      final int docID;\n      if (random().nextInt(4) == 1 || upto == expected.size()-1) {\n        // test nextDoc()\n        if (VERBOSE) {\n          System.out.println(\"    do nextDoc\");\n        }\n        upto++;\n        docID = docs.nextDoc();\n      } else {\n        // test advance()\n        final int inc = TestUtil.nextInt(random(), 1, expected.size() - 1 - upto);\n        if (VERBOSE) {\n          System.out.println(\"    do advance inc=\" + inc);\n        }\n        upto += inc;\n        docID = docs.advance(expected.get(upto));\n      }\n      if (upto == expected.size()) {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + DocIdSetIterator.NO_MORE_DOCS + \" actual=\" + docID);\n        }\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docID);\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  expect docID=\" + expected.get(upto) + \" actual=\" + docID);\n        }\n        assertTrue(docID != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(expected.get(upto).intValue(), docID);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}