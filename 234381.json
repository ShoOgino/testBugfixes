{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScoreBlockBoundaryPropagator#advanceShallow(int).mjava","commits":[{"id":"bcc716154659eaae17d9a262f1444c401b3b76da","date":1563973977,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScoreBlockBoundaryPropagator#advanceShallow(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * See {@link Scorer#advanceShallow(int)}.\n   */\n  int advanceShallow(int target) throws IOException {\n    // For scorers that are below the lead index, just propagate.\n    for (int i = 0; i < leadIndex; ++i) {\n      Scorer s = scorers[i];\n      if (s.docID() < target) {\n        s.advanceShallow(target);\n      }\n    }\n\n    // For scorers above the lead index, we take the minimum\n    // boundary.\n    Scorer leadScorer = scorers[leadIndex];\n    int upTo = leadScorer.advanceShallow(Math.max(leadScorer.docID(), target));\n\n    for (int i = leadIndex + 1; i < scorers.length; ++i) {\n      Scorer scorer = scorers[i];\n      if (scorer.docID() <= target) {\n        upTo = Math.min(scorer.advanceShallow(target), upTo);\n      }\n    }\n\n    // If the maximum scoring clauses are beyond `target`, then we use their\n    // docID as a boundary. It helps not consider them when computing the\n    // maximum score and get a lower score upper bound.\n    for (int i = scorers.length - 1; i > leadIndex; --i) {\n      Scorer scorer = scorers[i];\n      if (scorer.docID() > target) {\n        upTo = Math.min(upTo, scorer.docID() - 1);\n      } else {\n        break;\n      }\n    }\n\n    return upTo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcc716154659eaae17d9a262f1444c401b3b76da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bcc716154659eaae17d9a262f1444c401b3b76da"]},"commit2Childs":{"bcc716154659eaae17d9a262f1444c401b3b76da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bcc716154659eaae17d9a262f1444c401b3b76da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}