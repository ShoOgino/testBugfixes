{"path":"backwards/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n      wq.setBoost(0.3F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestWildcard#testTermWithoutWildcard().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n      wq.setBoost(0.3F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has no wildcard in the term is rewritten to a single\n   * TermQuery. The boost should be preserved, and the rewrite should return\n   * a ConstantScoreQuery if the WildcardQuery had a ConstantScore rewriteMethod.\n   */\n  public void testTermWithoutWildcard() throws IOException {\n      RAMDirectory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n      MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\n      assertMatches(searcher, wq, 1);\n\n      wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.1F);\n      Query q = searcher.rewrite(wq);\n      assertTrue(q instanceof TermQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n      wq.setBoost(0.2F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n      wq.setBoost(0.3F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n      \n      wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n      wq.setBoost(0.4F);\n      q = searcher.rewrite(wq);\n      assertTrue(q instanceof ConstantScoreQuery);\n      assertEquals(q.getBoost(), wq.getBoost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}