{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,Bits,TermsEnum,Bits).mjava","commits":[{"id":"0efcf27cd5ca23def8376b4c321970c14dd71623","date":1400662679,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,Bits,TermsEnum,Bits).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, Bits liveOrdsExpected, TermsEnum actual, Bits liveOrdsActual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = next(expected, liveOrdsExpected)) != null) {\n      assertEquals(ref, next(actual, liveOrdsActual));\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(next(actual, liveOrdsActual));\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      if (liveOrdsExpected.get((int) randomOrd) == false) {\n        continue;\n      }\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = seekCeil(expected, target, liveOrdsExpected);\n      assertEquals(expectedStatus, seekCeil(actual, target, liveOrdsActual));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a621dd071a902e1fd30367200d7bbbea037706","date":1400686915,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#assertEquals(long,TermsEnum,Bits,TermsEnum,Bits).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, Bits liveOrdsExpected, TermsEnum actual, Bits liveOrdsActual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = next(expected, liveOrdsExpected)) != null) {\n      assertEquals(ref, next(actual, liveOrdsActual));\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(next(actual, liveOrdsActual));\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      if (liveOrdsExpected.get((int) randomOrd) == false) {\n        continue;\n      }\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      if (liveOrdsExpected.get((int) i) == false) {\n        continue;\n      }\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = seekCeil(expected, target, liveOrdsExpected);\n      assertEquals(expectedStatus, seekCeil(actual, target, liveOrdsActual));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"45a621dd071a902e1fd30367200d7bbbea037706":["0efcf27cd5ca23def8376b4c321970c14dd71623"],"0efcf27cd5ca23def8376b4c321970c14dd71623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"45a621dd071a902e1fd30367200d7bbbea037706":[],"0efcf27cd5ca23def8376b4c321970c14dd71623":["45a621dd071a902e1fd30367200d7bbbea037706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efcf27cd5ca23def8376b4c321970c14dd71623","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["45a621dd071a902e1fd30367200d7bbbea037706","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}