{"path":"backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","sourceNew":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","sourceOld":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}