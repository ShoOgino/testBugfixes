{"path":"src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","pathOld":"/dev/null","sourceNew":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.tvf.writeTo(tvf);\n      perDoc.tvf.reset();\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.perDocTvf.reset();\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.tvf.writeTo(tvf);\n      perDoc.tvf.reset();\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.perDocTvf.reset();\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.perDocTvf.reset();\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5350389bf83287111f7760b9e3db3af8e3648474":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}