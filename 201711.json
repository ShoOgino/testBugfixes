{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","commits":[{"id":"7aca5c321bc9760dbfc9cefcc9d648e946b4615e","date":1429714020,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,Membership...).mjava","sourceNew":"    @Override\n    public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds)\n    {\n        //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n            final SidedPlane edge = edges[edgeIndex];\n            final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n            if (!internalEdges[edgeIndex]) {\n                //System.err.println(\" non-internal edge \"+edge);\n                // Edges flagged as 'internal only' are excluded from the matching\n                // Construct boundaries\n                final Membership[] membershipBounds = new Membership[edges.length-1];\n                int count = 0;\n                for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n                    if (otherIndex != edgeIndex) {\n                        membershipBounds[count++] = edges[otherIndex];\n                    }\n                }\n                if (edge.intersects(p,notablePoints, points, bounds,membershipBounds)) {\n                    //System.err.println(\" intersects!\");\n                    return true;\n                }\n            }\n        }\n        //System.err.println(\" no intersection\");\n        return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean intersects(final Plane p, final Membership... bounds)\n    {\n        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n            final SidedPlane edge = edges[edgeIndex];\n            if (!internalEdges[edgeIndex]) {\n                // Edges flagged as 'internal only' are excluded from the matching\n                // Construct boundaries\n                final Membership[] membershipBounds = new Membership[edges.length-1];\n                int count = 0;\n                for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n                    if (otherIndex != edgeIndex) {\n                        membershipBounds[count++] = edges[otherIndex];\n                    }\n                }\n                if (edge.intersects(p,bounds,membershipBounds))\n                    return true;\n            }\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!internalEdges[edgeIndex]) {\n        //System.err.println(\" non-internal edge \"+edge);\n        // Edges flagged as 'internal only' are excluded from the matching\n        // Construct boundaries\n        final Membership[] membershipBounds = new Membership[edges.length - 1];\n        int count = 0;\n        for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n          if (otherIndex != edgeIndex) {\n            membershipBounds[count++] = edges[otherIndex];\n          }\n        }\n        if (edge.intersects(p, notablePoints, points, bounds, membershipBounds)) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","sourceOld":"    @Override\n    public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds)\n    {\n        //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n            final SidedPlane edge = edges[edgeIndex];\n            final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n            if (!internalEdges[edgeIndex]) {\n                //System.err.println(\" non-internal edge \"+edge);\n                // Edges flagged as 'internal only' are excluded from the matching\n                // Construct boundaries\n                final Membership[] membershipBounds = new Membership[edges.length-1];\n                int count = 0;\n                for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n                    if (otherIndex != edgeIndex) {\n                        membershipBounds[count++] = edges[otherIndex];\n                    }\n                }\n                if (edge.intersects(p,notablePoints, points, bounds,membershipBounds)) {\n                    //System.err.println(\" intersects!\");\n                    return true;\n                }\n            }\n        }\n        //System.err.println(\" no intersection\");\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!internalEdges[edgeIndex]) {\n        //System.err.println(\" non-internal edge \"+edge);\n        // Edges flagged as 'internal only' are excluded from the matching\n        // Construct boundaries\n        final Membership[] membershipBounds = new Membership[edges.length - 1];\n        int count = 0;\n        for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n          if (otherIndex != edgeIndex) {\n            membershipBounds[count++] = edges[otherIndex];\n          }\n        }\n        if (edge.intersects(p, notablePoints, points, bounds, membershipBounds)) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!internalEdges[edgeIndex]) {\n        //System.err.println(\" non-internal edge \"+edge);\n        // Edges flagged as 'internal only' are excluded from the matching\n        // Construct boundaries\n        final Membership[] membershipBounds = new Membership[edges.length - 1];\n        int count = 0;\n        for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n          if (otherIndex != edgeIndex) {\n            membershipBounds[count++] = edges[otherIndex];\n          }\n        }\n        if (edge.intersects(planetModel, p, notablePoints, points, bounds, membershipBounds)) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!internalEdges[edgeIndex]) {\n        //System.err.println(\" non-internal edge \"+edge);\n        // Edges flagged as 'internal only' are excluded from the matching\n        // Construct boundaries\n        final Membership[] membershipBounds = new Membership[edges.length - 1];\n        int count = 0;\n        for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n          if (otherIndex != edgeIndex) {\n            membershipBounds[count++] = edges[otherIndex];\n          }\n        }\n        if (edge.intersects(p, notablePoints, points, bounds, membershipBounds)) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":3,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!internalEdges[edgeIndex]) {\n        //System.err.println(\" non-internal edge \"+edge);\n        // Edges flagged as 'internal only' are excluded from the matching\n        // Construct boundaries\n        final Membership[] membershipBounds = new Membership[edges.length - 1];\n        int count = 0;\n        for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n          if (otherIndex != edgeIndex) {\n            membershipBounds[count++] = edges[otherIndex];\n          }\n        }\n        if (edge.intersects(planetModel, p, notablePoints, points, bounds, membershipBounds)) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!internalEdges[edgeIndex]) {\n        //System.err.println(\" non-internal edge \"+edge);\n        // Edges flagged as 'internal only' are excluded from the matching\n        // Construct boundaries\n        final Membership[] membershipBounds = new Membership[edges.length - 1];\n        int count = 0;\n        for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n          if (otherIndex != edgeIndex) {\n            membershipBounds[count++] = edges[otherIndex];\n          }\n        }\n        if (edge.intersects(p, notablePoints, points, bounds, membershipBounds)) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"535df84251be5af3be84d750beba0021aff9132d","date":1434649368,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!isInternalEdges.get(edgeIndex)) {\n        //System.err.println(\" non-internal edge \"+edge);\n        // Edges flagged as 'internal only' are excluded from the matching\n        // Construct boundaries\n        final Membership[] membershipBounds = new Membership[edges.length - 1];\n        int count = 0;\n        for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n          if (otherIndex != edgeIndex) {\n            membershipBounds[count++] = edges[otherIndex];\n          }\n        }\n        if (edge.intersects(planetModel, p, notablePoints, points, bounds, membershipBounds)) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!internalEdges[edgeIndex]) {\n        //System.err.println(\" non-internal edge \"+edge);\n        // Edges flagged as 'internal only' are excluded from the matching\n        // Construct boundaries\n        final Membership[] membershipBounds = new Membership[edges.length - 1];\n        int count = 0;\n        for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n          if (otherIndex != edgeIndex) {\n            membershipBounds[count++] = edges[otherIndex];\n          }\n        }\n        if (edge.intersects(planetModel, p, notablePoints, points, bounds, membershipBounds)) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!isInternalEdges.get(edgeIndex)) {\n        //System.err.println(\" non-internal edge \"+edge);\n        // Edges flagged as 'internal only' are excluded from the matching\n        // Construct boundaries\n        final Membership[] membershipBounds = new Membership[edges.length - 1];\n        int count = 0;\n        for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n          if (otherIndex != edgeIndex) {\n            membershipBounds[count++] = edges[otherIndex];\n          }\n        }\n        if (edge.intersects(planetModel, p, notablePoints, points, bounds, membershipBounds)) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!isInternalEdges.get(edgeIndex)) {\n        //System.err.println(\" non-internal edge \"+edge);\n        // Edges flagged as 'internal only' are excluded from the matching\n        // Construct boundaries\n        final Membership[] membershipBounds = new Membership[edges.length - 1];\n        int count = 0;\n        for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n          if (otherIndex != edgeIndex) {\n            membershipBounds[count++] = edges[otherIndex];\n          }\n        }\n        if (edge.intersects(planetModel, p, notablePoints, points, bounds, membershipBounds)) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["535df84251be5af3be84d750beba0021aff9132d"],"535df84251be5af3be84d750beba0021aff9132d":["fec06d6753751ae302c7d35866763e6cb414112d"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"fec06d6753751ae302c7d35866763e6cb414112d":["535df84251be5af3be84d750beba0021aff9132d"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"535df84251be5af3be84d750beba0021aff9132d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}