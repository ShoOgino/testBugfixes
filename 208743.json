{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#onTragicEvent(Throwable,String).mjava","commits":[{"id":"845b760a99e5f369fcd0a5d723a87b8def6a3f56","date":1521117993,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#onTragicEvent(Throwable,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method should be called on a tragic event ie. if a downstream class of the writer\n   * hits an unrecoverable exception. This method does not rethrow the tragic event exception. \n   * Note: This method will not close the writer but can be called from any location without respecting any lock order\n   */\n  final void onTragicEvent(Throwable tragedy, String location) {\n    // This is not supposed to be tragic: IW is supposed to catch this and\n    // ignore, because it means we asked the merge to abort:\n    assert tragedy instanceof MergePolicy.MergeAbortedException == false;\n    // How can it be a tragedy when nothing happened?\n    assert tragedy != null;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"hit tragic \" + tragedy.getClass().getSimpleName() + \" inside \" + location);\n    }\n    this.tragedy.compareAndSet(null, tragedy); // only set it once\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#onTragicEvent(Throwable,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#onTragicEvent(Throwable,String).mjava","sourceNew":"  /**\n   * This method should be called on a tragic event ie. if a downstream class of the writer\n   * hits an unrecoverable exception. This method does not rethrow the tragic event exception. \n   * Note: This method will not close the writer but can be called from any location without respecting any lock order\n   */\n  private void onTragicEvent(Throwable tragedy, String location) {\n    // This is not supposed to be tragic: IW is supposed to catch this and\n    // ignore, because it means we asked the merge to abort:\n    assert tragedy instanceof MergePolicy.MergeAbortedException == false;\n    // How can it be a tragedy when nothing happened?\n    assert tragedy != null;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"hit tragic \" + tragedy.getClass().getSimpleName() + \" inside \" + location);\n    }\n    this.tragedy.compareAndSet(null, tragedy); // only set it once\n  }\n\n","sourceOld":"  /**\n   * This method should be called on a tragic event ie. if a downstream class of the writer\n   * hits an unrecoverable exception. This method does not rethrow the tragic event exception. \n   * Note: This method will not close the writer but can be called from any location without respecting any lock order\n   */\n  final void onTragicEvent(Throwable tragedy, String location) {\n    // This is not supposed to be tragic: IW is supposed to catch this and\n    // ignore, because it means we asked the merge to abort:\n    assert tragedy instanceof MergePolicy.MergeAbortedException == false;\n    // How can it be a tragedy when nothing happened?\n    assert tragedy != null;\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"hit tragic \" + tragedy.getClass().getSimpleName() + \" inside \" + location);\n    }\n    this.tragedy.compareAndSet(null, tragedy); // only set it once\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}