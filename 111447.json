{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    if (mapping.get(field) == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30b6ad849a21206db510322a3f583ca70ae20a2f","date":1399996150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = mapping.get(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else if (v != null && v != Type.SORTED) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + v);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    if (mapping.get(field) == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":["b0b3768e97375c7a745c68f0b54710e8bedccc11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = mapping.get(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else if (v != null && v != Type.SORTED) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + v);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = mapping.get(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else if (v != null && v != Type.SORTED) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + v);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b3768e97375c7a745c68f0b54710e8bedccc11","date":1406635606,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = getType(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = mapping.get(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else if (v != null && v != Type.SORTED) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + v);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","bugFix":["30b6ad849a21206db510322a3f583ca70ae20a2f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = getType(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = getType(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = getType(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = getType(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = getType(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = getType(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getBinaryDocValues(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    Type v = getType(field);\n    if (v == Type.BINARY) {\n      return FieldCache.DEFAULT.getTerms(in, field, true);\n    } else {\n      return in.getBinaryDocValues(field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["b0b3768e97375c7a745c68f0b54710e8bedccc11"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["b0b3768e97375c7a745c68f0b54710e8bedccc11","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30b6ad849a21206db510322a3f583ca70ae20a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"30b6ad849a21206db510322a3f583ca70ae20a2f":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"83870855d82aba6819217abeff5a40779dbb28b4":["b0b3768e97375c7a745c68f0b54710e8bedccc11","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b0b3768e97375c7a745c68f0b54710e8bedccc11","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["b0b3768e97375c7a745c68f0b54710e8bedccc11","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["30b6ad849a21206db510322a3f583ca70ae20a2f"],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"30b6ad849a21206db510322a3f583ca70ae20a2f":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}