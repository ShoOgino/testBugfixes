{"path":"src/java/org/apache/solr/analysis/HTMLStripReader#readBang(boolean).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripReader#readBang(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    int ch = next();\n    if (ch=='>') return MATCH;\n\n    // if it starts with <! and isn't a comment,\n    // simply read until \">\"\n    while (true) {\n      ch = next();\n      if (ch=='>') {\n        return MATCH;\n      }\n      else if (ch<0) {\n        return MISMATCH;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"187b932e3f791668d245124e03d899af557d22df","date":1199907679,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripReader#readBang(boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#readBang(boolean).mjava","sourceNew":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < readAheadLimitMinus1 || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < readAheadLimitMinus1) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    int ch = next();\n    if (ch=='>') return MATCH;\n\n    // if it starts with <! and isn't a comment,\n    // simply read until \">\"\n    while (true) {\n      ch = next();\n      if (ch=='>') {\n        return MATCH;\n      }\n      else if (ch<0) {\n        return MISMATCH;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc8463025ae069ea6b9e8206613cb2d0d6f372f","date":1242140461,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripReader#readBang(boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#readBang(boolean).mjava","sourceNew":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < readAheadLimitMinus1 || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < readAheadLimitMinus1) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd69280df0902763e47cb14745388ee17a2fb602","date":1249686305,"type":5,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readBang(boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#readBang(boolean).mjava","sourceNew":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc8463025ae069ea6b9e8206613cb2d0d6f372f":["187b932e3f791668d245124e03d899af557d22df"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"bd69280df0902763e47cb14745388ee17a2fb602":["6dc8463025ae069ea6b9e8206613cb2d0d6f372f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"187b932e3f791668d245124e03d899af557d22df":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"]},"commit2Childs":{"6dc8463025ae069ea6b9e8206613cb2d0d6f372f":["bd69280df0902763e47cb14745388ee17a2fb602"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["187b932e3f791668d245124e03d899af557d22df"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd69280df0902763e47cb14745388ee17a2fb602":[],"187b932e3f791668d245124e03d899af557d22df":["6dc8463025ae069ea6b9e8206613cb2d0d6f372f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bd69280df0902763e47cb14745388ee17a2fb602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}