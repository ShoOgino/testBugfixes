{"path":"src/java/org/apache/lucene/index/MultiSegmentReader#readerIndex(int).mjava","commits":[{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#readerIndex(int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#readerIndex(int).mjava","sourceNew":"  private int readerIndex(int n) {    // find reader for doc n:\r\n    int lo = 0;                                      // search starts array\r\n    int hi = subReaders.length - 1;                  // for first element less\r\n\r\n    while (hi >= lo) {\r\n      int mid = (lo + hi) >> 1;\r\n      int midValue = starts[mid];\r\n      if (n < midValue)\r\n        hi = mid - 1;\r\n      else if (n > midValue)\r\n        lo = mid + 1;\r\n      else {                                      // found a match\r\n        while (mid+1 < subReaders.length && starts[mid+1] == midValue) {\r\n          mid++;                                  // scan to last match\r\n        }\r\n        return mid;\r\n      }\r\n    }\r\n    return hi;\r\n  }\r\n\n","sourceOld":"  private int readerIndex(int n) {    // find reader for doc n:\n    int lo = 0;                                      // search starts array\n    int hi = subReaders.length - 1;                  // for first element less\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >> 1;\n      int midValue = starts[mid];\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else {                                      // found a match\n        while (mid+1 < subReaders.length && starts[mid+1] == midValue) {\n          mid++;                                  // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520a9bce43d52d77add8f09727f7a698289d6882","date":1190097977,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#readerIndex(int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#readerIndex(int).mjava","sourceNew":"  private int readerIndex(int n) {    // find reader for doc n:\n    int lo = 0;                                      // search starts array\n    int hi = subReaders.length - 1;                  // for first element less\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >> 1;\n      int midValue = starts[mid];\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else {                                      // found a match\n        while (mid+1 < subReaders.length && starts[mid+1] == midValue) {\n          mid++;                                  // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","sourceOld":"  private int readerIndex(int n) {    // find reader for doc n:\r\n    int lo = 0;                                      // search starts array\r\n    int hi = subReaders.length - 1;                  // for first element less\r\n\r\n    while (hi >= lo) {\r\n      int mid = (lo + hi) >> 1;\r\n      int midValue = starts[mid];\r\n      if (n < midValue)\r\n        hi = mid - 1;\r\n      else if (n > midValue)\r\n        lo = mid + 1;\r\n      else {                                      // found a match\r\n        while (mid+1 < subReaders.length && starts[mid+1] == midValue) {\r\n          mid++;                                  // scan to last match\r\n        }\r\n        return mid;\r\n      }\r\n    }\r\n    return hi;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#readerIndex(int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#readerIndex(int).mjava","sourceNew":"  private int readerIndex(int n) {    // find reader for doc n:\n    return readerIndex(n, this.starts, this.subReaders.length);\n  }\n\n","sourceOld":"  private int readerIndex(int n) {    // find reader for doc n:\n    int lo = 0;                                      // search starts array\n    int hi = subReaders.length - 1;                  // for first element less\n\n    while (hi >= lo) {\n      int mid = (lo + hi) >> 1;\n      int midValue = starts[mid];\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else {                                      // found a match\n        while (mid+1 < subReaders.length && starts[mid+1] == midValue) {\n          mid++;                                  // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#readerIndex(int).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#readerIndex(int).mjava","sourceNew":"  private int readerIndex(int n) {    // find reader for doc n:\n    return readerIndex(n, this.starts, this.subReaders.length);\n  }\n\n","sourceOld":"  private int readerIndex(int n) {    // find reader for doc n:\n    return readerIndex(n, this.starts, this.subReaders.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"520a9bce43d52d77add8f09727f7a698289d6882":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["520a9bce43d52d77add8f09727f7a698289d6882"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"520a9bce43d52d77add8f09727f7a698289d6882":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["520a9bce43d52d77add8f09727f7a698289d6882"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}