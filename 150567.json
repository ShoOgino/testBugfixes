{"path":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(TimeOut).mjava","commits":[{"id":"484264228e1de4c93d0f9ec7ad2181223b11889a","date":1460910418,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(TimeOut).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForOtherReplicasToUpdate(TimeOut timeOut) {\n    CoreDescriptor cd = req.getCore().getCoreDescriptor();\n    String collection = cd.getCollectionName();\n    if (collection != null) {\n      ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n      if (timeOut.hasTimedOut()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Not enough time left to update replicas. However, the schema is updated already.\");\n      }\n      ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n          cd.getCloudDescriptor().getCoreNodeName(),\n          (managedIndexSchema).getSchemaZkVersion(),\n          zkLoader.getZkController(),\n          (int) timeOut.timeLeft(TimeUnit.SECONDS));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(TimeOut).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForOtherReplicasToUpdate(TimeOut timeOut) {\n    CoreDescriptor cd = req.getCore().getCoreDescriptor();\n    String collection = cd.getCollectionName();\n    if (collection != null) {\n      ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n      if (timeOut.hasTimedOut()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Not enough time left to update replicas. However, the schema is updated already.\");\n      }\n      ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n          cd.getCloudDescriptor().getCoreNodeName(),\n          (managedIndexSchema).getSchemaZkVersion(),\n          zkLoader.getZkController(),\n          (int) timeOut.timeLeft(TimeUnit.SECONDS));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"734d38d5abe4f98cce936b31450702d597f6fc69","date":1467794285,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(TimeOut,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(TimeOut).mjava","sourceNew":"  private void waitForOtherReplicasToUpdate(TimeOut timeOut, int latestVersion) {\n    CoreDescriptor cd = req.getCore().getCoreDescriptor();\n    String collection = cd.getCollectionName();\n    if (collection != null) {\n      ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n      if (timeOut.hasTimedOut()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Not enough time left to update replicas. However, the schema is updated already.\");\n      }\n      ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection, cd.getCloudDescriptor().getCoreNodeName(),\n          latestVersion, zkLoader.getZkController(), (int) timeOut.timeLeft(TimeUnit.SECONDS));\n    }\n  }\n\n","sourceOld":"  private void waitForOtherReplicasToUpdate(TimeOut timeOut) {\n    CoreDescriptor cd = req.getCore().getCoreDescriptor();\n    String collection = cd.getCollectionName();\n    if (collection != null) {\n      ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n      if (timeOut.hasTimedOut()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Not enough time left to update replicas. However, the schema is updated already.\");\n      }\n      ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n          cd.getCloudDescriptor().getCoreNodeName(),\n          (managedIndexSchema).getSchemaZkVersion(),\n          zkLoader.getZkController(),\n          (int) timeOut.timeLeft(TimeUnit.SECONDS));\n    }\n  }\n\n","bugFix":null,"bugIntro":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#waitForOtherReplicasToUpdate(TimeOut).mjava","sourceNew":null,"sourceOld":"  private void waitForOtherReplicasToUpdate(TimeOut timeOut) {\n    CoreDescriptor cd = req.getCore().getCoreDescriptor();\n    String collection = cd.getCollectionName();\n    if (collection != null) {\n      ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) managedIndexSchema.getResourceLoader();\n      if (timeOut.hasTimedOut()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Not enough time left to update replicas. However, the schema is updated already.\");\n      }\n      ManagedIndexSchema.waitForSchemaZkVersionAgreement(collection,\n          cd.getCloudDescriptor().getCoreNodeName(),\n          (managedIndexSchema).getSchemaZkVersion(),\n          zkLoader.getZkController(),\n          (int) timeOut.timeLeft(TimeUnit.SECONDS));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"734d38d5abe4f98cce936b31450702d597f6fc69":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","484264228e1de4c93d0f9ec7ad2181223b11889a"],"484264228e1de4c93d0f9ec7ad2181223b11889a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f8cb57c50beb99a1245256e866350af8e5ea1f36","734d38d5abe4f98cce936b31450702d597f6fc69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["734d38d5abe4f98cce936b31450702d597f6fc69"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8cb57c50beb99a1245256e866350af8e5ea1f36","484264228e1de4c93d0f9ec7ad2181223b11889a"],"734d38d5abe4f98cce936b31450702d597f6fc69":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["734d38d5abe4f98cce936b31450702d597f6fc69","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"484264228e1de4c93d0f9ec7ad2181223b11889a":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}