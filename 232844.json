{"path":"lucene/core/src/java/org/apache/lucene/index/TermsHashPerField#writeByte(int,byte).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsHashPerField#writeByte(int,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#writeByte(int,byte).mjava","sourceNew":"  void writeByte(int stream, byte b) {\n    int upto = intUptos[intUptoStart+stream];\n    byte[] bytes = bytePool.buffers[upto >> ByteBlockPool.BYTE_BLOCK_SHIFT];\n    assert bytes != null;\n    int offset = upto & ByteBlockPool.BYTE_BLOCK_MASK;\n    if (bytes[offset] != 0) {\n      // End of slice; allocate a new one\n      offset = bytePool.allocSlice(bytes, offset);\n      bytes = bytePool.buffer;\n      intUptos[intUptoStart+stream] = offset + bytePool.byteOffset;\n    }\n    bytes[offset] = b;\n    (intUptos[intUptoStart+stream])++;\n  }\n\n","sourceOld":"  void writeByte(int stream, byte b) {\n    int upto = intUptos[intUptoStart+stream];\n    byte[] bytes = bytePool.buffers[upto >> ByteBlockPool.BYTE_BLOCK_SHIFT];\n    assert bytes != null;\n    int offset = upto & ByteBlockPool.BYTE_BLOCK_MASK;\n    if (bytes[offset] != 0) {\n      // End of slice; allocate a new one\n      offset = bytePool.allocSlice(bytes, offset);\n      bytes = bytePool.buffer;\n      intUptos[intUptoStart+stream] = offset + bytePool.byteOffset;\n    }\n    bytes[offset] = b;\n    (intUptos[intUptoStart+stream])++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3cc3fa1ecad75b99ec55169e44628808f9866ad","date":1592311545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsHashPerField#writeByte(int,byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermsHashPerField#writeByte(int,byte).mjava","sourceNew":"  final void writeByte(int stream, byte b) {\n    int streamAddress = streamAddressOffset + stream;\n    int upto = termStreamAddressBuffer[streamAddress];\n    byte[] bytes = bytePool.buffers[upto >> ByteBlockPool.BYTE_BLOCK_SHIFT];\n    assert bytes != null;\n    int offset = upto & ByteBlockPool.BYTE_BLOCK_MASK;\n    if (bytes[offset] != 0) {\n      // End of slice; allocate a new one\n      offset = bytePool.allocSlice(bytes, offset);\n      bytes = bytePool.buffer;\n      termStreamAddressBuffer[streamAddress] = offset + bytePool.byteOffset;\n    }\n    bytes[offset] = b;\n    (termStreamAddressBuffer[streamAddress])++;\n  }\n\n","sourceOld":"  void writeByte(int stream, byte b) {\n    int upto = intUptos[intUptoStart+stream];\n    byte[] bytes = bytePool.buffers[upto >> ByteBlockPool.BYTE_BLOCK_SHIFT];\n    assert bytes != null;\n    int offset = upto & ByteBlockPool.BYTE_BLOCK_MASK;\n    if (bytes[offset] != 0) {\n      // End of slice; allocate a new one\n      offset = bytePool.allocSlice(bytes, offset);\n      bytes = bytePool.buffer;\n      intUptos[intUptoStart+stream] = offset + bytePool.byteOffset;\n    }\n    bytes[offset] = b;\n    (intUptos[intUptoStart+stream])++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}