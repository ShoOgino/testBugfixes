{"path":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String,String).mjava","commits":[{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), tag, true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), tag, true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), tag, true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", tag, true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), tag, true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", tag, true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), tag, true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), tag, true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), tag, true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), tag, true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), tag, true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), tag, true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), tag, true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), tag, true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", tag, true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), tag, true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", tag, true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), tag, true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), tag, true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), tag, true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), tag, true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), tag, true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd","date":1525384847,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), tag, true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), tag, true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), tag, true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", tag, true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTLogFileSizeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getTLogFileSizeUpperBound(), tag, true, \"autoCommitMaxSize\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), tag, true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", tag, true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), tag, true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), tag, true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), tag, true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), tag, true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), tag, true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), tag, true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), tag, true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), tag, true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", tag, true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), tag, true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", tag, true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), tag, true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), tag, true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), tag, true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), tag, true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), tag, true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), tag, true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), tag, true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), tag, true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", tag, true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTLogFileSizeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getTLogFileSizeUpperBound(), tag, true, \"autoCommitMaxSize\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), tag, true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", tag, true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), tag, true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), tag, true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), tag, true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), tag, true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), tag, true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfc52860e6d13d034226a760813c59d984c6817a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"]},"commit2Childs":{"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"43564cbb30b064675027cfb569564e8531096e97":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}