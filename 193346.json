{"path":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","commits":[{"id":"259055feeba9afa10e21ab63032f3778bb1802f1","date":1291199138,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","pathOld":"/dev/null","sourceNew":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","pathOld":"/dev/null","sourceNew":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","pathOld":"/dev/null","sourceNew":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","sourceNew":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","sourceNew":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","sourceNew":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","sourceNew":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new StringField (\"string\", \"a\"+i));\n      doc.add (new StringField (\"string\", \"b\"+i));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","sourceNew":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new StringField (\"string\", \"a\"+i));\n      doc.add (new StringField (\"string\", \"b\"+i));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new StringField (\"string\", \"a\"+i));\n      doc.add (new StringField (\"string\", \"b\"+i));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","sourceNew":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new StringField (\"string\", \"a\"+i));\n      doc.add (new StringField (\"string\", \"b\"+i));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new StringField (\"string\", \"a\"+i));\n      doc.add (new StringField (\"string\", \"b\"+i));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testCountingCollector().mjava","sourceNew":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new StringField (\"string\", \"a\"+i));\n      doc.add (new StringField (\"string\", \"b\"+i));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testCountingCollector() throws Exception {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    for (int i=0; i<5; i++) {\n      Document doc = new Document();\n      doc.add (new StringField (\"string\", \"a\"+i));\n      doc.add (new StringField (\"string\", \"b\"+i));\n      writer.addDocument (doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TotalHitCountCollector c = new TotalHitCountCollector();\n    searcher.search(new MatchAllDocsQuery(), null, c);\n    assertEquals(5, c.getTotalHits());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["259055feeba9afa10e21ab63032f3778bb1802f1"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["1509f151d7692d84fae414b2b799ac06ba60fcb4","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"259055feeba9afa10e21ab63032f3778bb1802f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","259055feeba9afa10e21ab63032f3778bb1802f1"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","259055feeba9afa10e21ab63032f3778bb1802f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","1509f151d7692d84fae414b2b799ac06ba60fcb4","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["259055feeba9afa10e21ab63032f3778bb1802f1","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"259055feeba9afa10e21ab63032f3778bb1802f1":["790e1fde4caa765b3faaad3fbcd25c6973450336","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}