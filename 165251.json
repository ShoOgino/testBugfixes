{"path":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","commits":[{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealArc(int address, Arc<T> arc, final BytesReader in) throws IOException {\n    in.pos = address;\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readInt();\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealArc(int address, Arc<T> arc, final BytesReader in) throws IOException {\n    in.pos = address;\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readInt();\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealArc(int address, Arc<T> arc, final BytesReader in) throws IOException {\n    in.pos = address;\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readInt();\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealTargetArc(int,Arc[T],BytesReader).mjava","sourceNew":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealTargetArc(int node, Arc<T> arc, final BytesReader in) throws IOException {\n    final int address = getNodeAddress(node);\n    in.pos = address;\n    //System.out.println(\"  readFirstRealTargtArc address=\"\n    //+ address);\n    //System.out.println(\"   flags=\" + arc.flags);\n    arc.node = node;\n\n    if (in.readByte() == ARCS_AS_FIXED_ARRAY) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      if (packed) {\n        arc.bytesPerArc = in.readVInt();\n      } else {\n        arc.bytesPerArc = in.readInt();\n      }\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      //arc.flags = b;\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}