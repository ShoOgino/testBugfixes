{"path":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testModifyRequestTrack().mjava","commits":[{"id":"d9d424bd039937b4125152b454b3a32754b06f6c","date":1384391321,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testModifyRequestTrack().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testModifyRequestTrack() {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<SearchComponent>(1);\n    components.add(component);\n    for(int i = 0; i < 10; i++) {\n      SolrQueryRequest req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123456-my_rid\");\n      SolrQueryResponse resp = new SolrQueryResponse();\n      ResponseBuilder rb = new ResponseBuilder(req, resp, components);\n      ShardRequest sreq = new ShardRequest();\n      sreq.params = new ModifiableSolrParams();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.modifyRequest(rb, null, sreq);\n      //if the request has debugQuery=true or debug=track, the sreq should get debug=track always\n      assertTrue(Arrays.asList(sreq.params.getParams(CommonParams.DEBUG)).contains(CommonParams.TRACK));\n      //the purpose must be added as readable param to be included in the shard logs\n      assertEquals(\"GET_FIELDS,GET_DEBUG\", sreq.params.get(CommonParams.REQUEST_PURPOSE));\n      //the rid must be added to be included in the shard logs\n      assertEquals(\"123456-my_rid\", sreq.params.get(CommonParams.REQUEST_ID));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df72a23fb74bebe914e3f3972063a884327c0436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testModifyRequestTrack().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testModifyRequestTrack().mjava","sourceNew":"  @Test\n  public void testModifyRequestTrack() {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    for(int i = 0; i < 10; i++) {\n      SolrQueryRequest req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123456-my_rid\");\n      SolrQueryResponse resp = new SolrQueryResponse();\n      ResponseBuilder rb = new ResponseBuilder(req, resp, components);\n      ShardRequest sreq = new ShardRequest();\n      sreq.params = new ModifiableSolrParams();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.modifyRequest(rb, null, sreq);\n      //if the request has debugQuery=true or debug=track, the sreq should get debug=track always\n      assertTrue(Arrays.asList(sreq.params.getParams(CommonParams.DEBUG)).contains(CommonParams.TRACK));\n      //the purpose must be added as readable param to be included in the shard logs\n      assertEquals(\"GET_FIELDS,GET_DEBUG\", sreq.params.get(CommonParams.REQUEST_PURPOSE));\n      //the rid must be added to be included in the shard logs\n      assertEquals(\"123456-my_rid\", sreq.params.get(CommonParams.REQUEST_ID));\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testModifyRequestTrack() {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<SearchComponent>(1);\n    components.add(component);\n    for(int i = 0; i < 10; i++) {\n      SolrQueryRequest req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123456-my_rid\");\n      SolrQueryResponse resp = new SolrQueryResponse();\n      ResponseBuilder rb = new ResponseBuilder(req, resp, components);\n      ShardRequest sreq = new ShardRequest();\n      sreq.params = new ModifiableSolrParams();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.modifyRequest(rb, null, sreq);\n      //if the request has debugQuery=true or debug=track, the sreq should get debug=track always\n      assertTrue(Arrays.asList(sreq.params.getParams(CommonParams.DEBUG)).contains(CommonParams.TRACK));\n      //the purpose must be added as readable param to be included in the shard logs\n      assertEquals(\"GET_FIELDS,GET_DEBUG\", sreq.params.get(CommonParams.REQUEST_PURPOSE));\n      //the rid must be added to be included in the shard logs\n      assertEquals(\"123456-my_rid\", sreq.params.get(CommonParams.REQUEST_ID));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testModifyRequestTrack().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testModifyRequestTrack().mjava","sourceNew":"  @Test\n  public void testModifyRequestTrack() {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    for(int i = 0; i < 10; i++) {\n      SolrQueryRequest req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123456-my_rid\");\n      SolrQueryResponse resp = new SolrQueryResponse();\n      ResponseBuilder rb = new ResponseBuilder(req, resp, components);\n      ShardRequest sreq = new ShardRequest();\n      sreq.params = new ModifiableSolrParams();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.modifyRequest(rb, null, sreq);\n      //if the request has debugQuery=true or debug=track, the sreq should get debug=track always\n      assertTrue(Arrays.asList(sreq.params.getParams(CommonParams.DEBUG)).contains(CommonParams.TRACK));\n      //the purpose must be added as readable param to be included in the shard logs\n      assertEquals(\"GET_FIELDS,GET_DEBUG,SET_TERM_STATS\", sreq.params.get(CommonParams.REQUEST_PURPOSE));\n      //the rid must be added to be included in the shard logs\n      assertEquals(\"123456-my_rid\", sreq.params.get(CommonParams.REQUEST_ID));\n      // close requests - this method obtains a searcher in order to access its StatsCache\n      req.close();\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testModifyRequestTrack() {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    for(int i = 0; i < 10; i++) {\n      SolrQueryRequest req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123456-my_rid\");\n      SolrQueryResponse resp = new SolrQueryResponse();\n      ResponseBuilder rb = new ResponseBuilder(req, resp, components);\n      ShardRequest sreq = new ShardRequest();\n      sreq.params = new ModifiableSolrParams();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.modifyRequest(rb, null, sreq);\n      //if the request has debugQuery=true or debug=track, the sreq should get debug=track always\n      assertTrue(Arrays.asList(sreq.params.getParams(CommonParams.DEBUG)).contains(CommonParams.TRACK));\n      //the purpose must be added as readable param to be included in the shard logs\n      assertEquals(\"GET_FIELDS,GET_DEBUG\", sreq.params.get(CommonParams.REQUEST_PURPOSE));\n      //the rid must be added to be included in the shard logs\n      assertEquals(\"123456-my_rid\", sreq.params.get(CommonParams.REQUEST_ID));\n    }\n    \n  }\n\n","bugFix":["d9d424bd039937b4125152b454b3a32754b06f6c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testModifyRequestTrack().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testModifyRequestTrack().mjava","sourceNew":"  @Test\n  public void testModifyRequestTrack() {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    for(int i = 0; i < 10; i++) {\n      SolrQueryRequest req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123456-my_rid\");\n      SolrQueryResponse resp = new SolrQueryResponse();\n      ResponseBuilder rb = new ResponseBuilder(req, resp, components);\n      ShardRequest sreq = new ShardRequest();\n      sreq.params = new ModifiableSolrParams();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.modifyRequest(rb, null, sreq);\n      //if the request has debugQuery=true or debug=track, the sreq should get debug=track always\n      assertTrue(Arrays.asList(sreq.params.getParams(CommonParams.DEBUG)).contains(CommonParams.TRACK));\n      //the purpose must be added as readable param to be included in the shard logs\n      assertEquals(\"GET_FIELDS,GET_DEBUG,SET_TERM_STATS\", sreq.params.get(CommonParams.REQUEST_PURPOSE));\n      //the rid must be added to be included in the shard logs\n      assertEquals(\"123456-my_rid\", sreq.params.get(CommonParams.REQUEST_ID));\n      // close requests - this method obtains a searcher in order to access its StatsCache\n      req.close();\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testModifyRequestTrack() {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    for(int i = 0; i < 10; i++) {\n      SolrQueryRequest req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123456-my_rid\");\n      SolrQueryResponse resp = new SolrQueryResponse();\n      ResponseBuilder rb = new ResponseBuilder(req, resp, components);\n      ShardRequest sreq = new ShardRequest();\n      sreq.params = new ModifiableSolrParams();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.modifyRequest(rb, null, sreq);\n      //if the request has debugQuery=true or debug=track, the sreq should get debug=track always\n      assertTrue(Arrays.asList(sreq.params.getParams(CommonParams.DEBUG)).contains(CommonParams.TRACK));\n      //the purpose must be added as readable param to be included in the shard logs\n      assertEquals(\"GET_FIELDS,GET_DEBUG\", sreq.params.get(CommonParams.REQUEST_PURPOSE));\n      //the rid must be added to be included in the shard logs\n      assertEquals(\"123456-my_rid\", sreq.params.get(CommonParams.REQUEST_ID));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d9d424bd039937b4125152b454b3a32754b06f6c"],"d9d424bd039937b4125152b454b3a32754b06f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df72a23fb74bebe914e3f3972063a884327c0436":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df72a23fb74bebe914e3f3972063a884327c0436"],"b0b597c65628ca9e73913a07e81691f8229bae35":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"d9d424bd039937b4125152b454b3a32754b06f6c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9d424bd039937b4125152b454b3a32754b06f6c"],"df72a23fb74bebe914e3f3972063a884327c0436":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}