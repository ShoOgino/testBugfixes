{"path":"solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots#listCommits(String).mjava","commits":[{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots#listCommits(String).mjava","pathOld":"/dev/null","sourceNew":"  private List<IndexCommit> listCommits(String directory) throws Exception {\n    SimpleFSDirectory dir = new SimpleFSDirectory(Paths.get(directory));\n    try {\n      return DirectoryReader.listCommits(dir);\n    } catch (IndexNotFoundException ex) {\n      // This can happen when the delete snapshot functionality cleans up the index files (when the directory\n      // storing these files is not the *current* index directory).\n      return Collections.emptyList();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots#listCommits(String).mjava","pathOld":"/dev/null","sourceNew":"  private List<IndexCommit> listCommits(String directory) throws Exception {\n    SimpleFSDirectory dir = new SimpleFSDirectory(Paths.get(directory));\n    try {\n      return DirectoryReader.listCommits(dir);\n    } catch (IndexNotFoundException ex) {\n      // This can happen when the delete snapshot functionality cleans up the index files (when the directory\n      // storing these files is not the *current* index directory).\n      return Collections.emptyList();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots#listCommits(String).mjava","pathOld":"/dev/null","sourceNew":"  private List<IndexCommit> listCommits(String directory) throws Exception {\n    SimpleFSDirectory dir = new SimpleFSDirectory(Paths.get(directory));\n    try {\n      return DirectoryReader.listCommits(dir);\n    } catch (IndexNotFoundException ex) {\n      // This can happen when the delete snapshot functionality cleans up the index files (when the directory\n      // storing these files is not the *current* index directory).\n      return Collections.emptyList();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots#listCommits(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots#listCommits(String).mjava","sourceNew":"  private List<IndexCommit> listCommits(String directory) throws Exception {\n    Directory dir = new NIOFSDirectory(Paths.get(directory));\n    try {\n      return DirectoryReader.listCommits(dir);\n    } catch (IndexNotFoundException ex) {\n      // This can happen when the delete snapshot functionality cleans up the index files (when the directory\n      // storing these files is not the *current* index directory).\n      return Collections.emptyList();\n    }\n  }\n\n","sourceOld":"  private List<IndexCommit> listCommits(String directory) throws Exception {\n    SimpleFSDirectory dir = new SimpleFSDirectory(Paths.get(directory));\n    try {\n      return DirectoryReader.listCommits(dir);\n    } catch (IndexNotFoundException ex) {\n      // This can happen when the delete snapshot functionality cleans up the index files (when the directory\n      // storing these files is not the *current* index directory).\n      return Collections.emptyList();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots#listCommits(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots#listCommits(String).mjava","sourceNew":"  private List<IndexCommit> listCommits(String directory) throws Exception {\n    Directory dir = new NIOFSDirectory(Paths.get(directory));\n    try {\n      return DirectoryReader.listCommits(dir);\n    } catch (IndexNotFoundException ex) {\n      // This can happen when the delete snapshot functionality cleans up the index files (when the directory\n      // storing these files is not the *current* index directory).\n      return Collections.emptyList();\n    }\n  }\n\n","sourceOld":"  private List<IndexCommit> listCommits(String directory) throws Exception {\n    SimpleFSDirectory dir = new SimpleFSDirectory(Paths.get(directory));\n    try {\n      return DirectoryReader.listCommits(dir);\n    } catch (IndexNotFoundException ex) {\n      // This can happen when the delete snapshot functionality cleans up the index files (when the directory\n      // storing these files is not the *current* index directory).\n      return Collections.emptyList();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["91e2345fb81b6c1c7faefa550ee5eaafadc54486","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}