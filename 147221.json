{"path":"src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e","date":1260705517,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<Object>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<Object>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<Object>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e"],"d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}