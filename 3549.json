{"path":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","sourceNew":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    \n    HashMap<String,OrdinalPolicy> policies = new HashMap<String,CategoryListParams.OrdinalPolicy>();\n    policies.put(DIMENSIONS[2], OrdinalPolicy.ALL_PARENTS);\n    policies.put(DIMENSIONS[3], OrdinalPolicy.ALL_PARENTS);\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params, new PerDimensionOrdinalPolicy(policies)) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    \n    HashMap<String,OrdinalPolicy> policies = new HashMap<String,CategoryListParams.OrdinalPolicy>();\n    policies.put(DIMENSIONS[2], OrdinalPolicy.ALL_PARENTS);\n    policies.put(DIMENSIONS[3], OrdinalPolicy.ALL_PARENTS);\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params, new PerDimensionOrdinalPolicy(policies)) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","sourceNew":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<FacetLabel,CategoryListParams> params = new HashMap<FacetLabel,CategoryListParams>();\n    params.put(new FacetLabel(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    params.put(new FacetLabel(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    \n    HashMap<String,OrdinalPolicy> policies = new HashMap<String,CategoryListParams.OrdinalPolicy>();\n    policies.put(DIMENSIONS[2], OrdinalPolicy.ALL_PARENTS);\n    policies.put(DIMENSIONS[3], OrdinalPolicy.ALL_PARENTS);\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params, new PerDimensionOrdinalPolicy(policies)) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    \n    HashMap<String,OrdinalPolicy> policies = new HashMap<String,CategoryListParams.OrdinalPolicy>();\n    policies.put(DIMENSIONS[2], OrdinalPolicy.ALL_PARENTS);\n    policies.put(DIMENSIONS[3], OrdinalPolicy.ALL_PARENTS);\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params, new PerDimensionOrdinalPolicy(policies)) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","sourceNew":null,"sourceOld":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<FacetLabel,CategoryListParams> params = new HashMap<FacetLabel,CategoryListParams>();\n    params.put(new FacetLabel(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    params.put(new FacetLabel(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    \n    HashMap<String,OrdinalPolicy> policies = new HashMap<String,CategoryListParams.OrdinalPolicy>();\n    policies.put(DIMENSIONS[2], OrdinalPolicy.ALL_PARENTS);\n    policies.put(DIMENSIONS[3], OrdinalPolicy.ALL_PARENTS);\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params, new PerDimensionOrdinalPolicy(policies)) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","sourceNew":null,"sourceOld":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    \n    HashMap<String,OrdinalPolicy> policies = new HashMap<String,CategoryListParams.OrdinalPolicy>();\n    policies.put(DIMENSIONS[2], OrdinalPolicy.ALL_PARENTS);\n    policies.put(DIMENSIONS[3], OrdinalPolicy.ALL_PARENTS);\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params, new PerDimensionOrdinalPolicy(policies)) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}