{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,Type,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,Type,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,Type,boolean).mjava","sourceNew":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, Type type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","sourceOld":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, Type type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,Type,boolean).mjava","sourceNew":null,"sourceOld":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, Type type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,Type,boolean).mjava","sourceNew":null,"sourceOld":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, Type type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}