{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getStateFormat2CollectionNames().mjava","commits":[{"id":"78659e56d5a8c1ce0316a13dea09532e1ccb2dd6","date":1434002938,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getStateFormat2CollectionNames().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getIndividualColls().mjava","sourceNew":"  private Set<String> getStateFormat2CollectionNames() throws KeeperException, InterruptedException {\n    List<String> children = null;\n    try {\n      children = zkClient.getChildren(COLLECTIONS_ZKNODE, null, true);\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"Error fetching collection names\");\n      \n      return new HashSet<>();\n    }\n    if (children == null || children.isEmpty()) return new HashSet<>();\n    HashSet<String> result = new HashSet<>(children.size(), 1.0f);\n\n    for (String c : children) {\n      try {\n        // this exists call is necessary because we only want to return\n        // those collections which have their own state.json.\n        // The getCollectionPath() calls returns the complete path to the\n        // collection's state.json\n        if (zkClient.exists(getCollectionPath(c), true)) {\n          result.add(c);\n        }\n      } catch (Exception e) {\n        log.warn(\"Error reading collections nodes\", e);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private Set<String> getIndividualColls() throws KeeperException, InterruptedException {\n    List<String> children = null;\n    try {\n      children = zkClient.getChildren(COLLECTIONS_ZKNODE, null, true);\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"Error fetching collection names\");\n      \n      return new HashSet<>();\n    }\n    if (children == null || children.isEmpty()) return new HashSet<>();\n    HashSet<String> result = new HashSet<>(children.size());\n    \n    for (String c : children) {\n      try {\n        if (zkClient.exists(getCollectionPath(c), true)) {\n          result.add(c);\n        }\n      } catch (Exception e) {\n        log.warn(\"Error reading collections nodes\", e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getStateFormat2CollectionNames().mjava","sourceNew":null,"sourceOld":"  private Set<String> getStateFormat2CollectionNames() throws KeeperException, InterruptedException {\n    List<String> children = null;\n    try {\n      children = zkClient.getChildren(COLLECTIONS_ZKNODE, null, true);\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"Error fetching collection names\");\n      \n      return new HashSet<>();\n    }\n    if (children == null || children.isEmpty()) return new HashSet<>();\n    HashSet<String> result = new HashSet<>(children.size(), 1.0f);\n\n    for (String c : children) {\n      try {\n        // this exists call is necessary because we only want to return\n        // those collections which have their own state.json.\n        // The getCollectionPath() calls returns the complete path to the\n        // collection's state.json\n        if (zkClient.exists(getCollectionPath(c), true)) {\n          result.add(c);\n        }\n      } catch (Exception e) {\n        log.warn(\"Error reading collections nodes\", e);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78659e56d5a8c1ce0316a13dea09532e1ccb2dd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["78659e56d5a8c1ce0316a13dea09532e1ccb2dd6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78659e56d5a8c1ce0316a13dea09532e1ccb2dd6"],"78659e56d5a8c1ce0316a13dea09532e1ccb2dd6":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}