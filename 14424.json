{"path":"lucene/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","sourceNew":"  /**\n   * Two IndexCommits are equal if both their Directory and versions are equal.\n   */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getVersion() == getVersion();\n    } else\n      return false;\n  }\n\n","sourceOld":"  /**\n   * Two IndexCommits are equal if both their Directory and versions are equal.\n   */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getVersion() == getVersion();\n    } else\n      return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c6d762d78ab230c3cf5f372ce5dac31dbf7a93a","date":1272629239,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","sourceNew":"  /** Two IndexCommits are equal if both their Directory and versions are equal. */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getVersion() == getVersion();\n    } else\n      return false;\n  }\n\n","sourceOld":"  /**\n   * Two IndexCommits are equal if both their Directory and versions are equal.\n   */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getVersion() == getVersion();\n    } else\n      return false;\n  }\n\n","bugFix":["8a1559506fd82ede79bd8e60facef2a57524e175","ac785906c92e4048ffc28f7c23a45541d3cca9bf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","sourceNew":"  /** Two IndexCommits are equal if both their Directory and versions are equal. */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getGeneration() == getGeneration();\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Two IndexCommits are equal if both their Directory and versions are equal. */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getVersion() == getVersion();\n    } else\n      return false;\n  }\n\n","bugFix":["21d3cf4e18f0d14132783b26d5531fb5e475f575","8a1559506fd82ede79bd8e60facef2a57524e175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","sourceNew":"  /** Two IndexCommits are equal if both their Directory and versions are equal. */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getGeneration() == getGeneration();\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Two IndexCommits are equal if both their Directory and versions are equal. */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getVersion() == getVersion();\n    } else\n      return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","sourceNew":"  /** Two IndexCommits are equal if both their Directory and versions are equal. */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getGeneration() == getGeneration();\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Two IndexCommits are equal if both their Directory and versions are equal. */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getVersion() == getVersion();\n    } else\n      return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexCommit#equals(Object).mjava","sourceNew":"  /** Two IndexCommits are equal if both their Directory and versions are equal. */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getGeneration() == getGeneration();\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Two IndexCommits are equal if both their Directory and versions are equal. */\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof IndexCommit) {\n      IndexCommit otherCommit = (IndexCommit) other;\n      return otherCommit.getDirectory().equals(getDirectory()) && otherCommit.getGeneration() == getGeneration();\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["2c6d762d78ab230c3cf5f372ce5dac31dbf7a93a"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["2c6d762d78ab230c3cf5f372ce5dac31dbf7a93a","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c6d762d78ab230c3cf5f372ce5dac31dbf7a93a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["2c6d762d78ab230c3cf5f372ce5dac31dbf7a93a","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2c6d762d78ab230c3cf5f372ce5dac31dbf7a93a":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2c6d762d78ab230c3cf5f372ce5dac31dbf7a93a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}