{"path":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestTermInfosReaderIndex#populate(Directory).mjava","commits":[{"id":"39509e0276e70b38a5e76aa9d2c468955a1c7855","date":1319748553,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestTermInfosReaderIndex#populate(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private int populate(Directory directory) throws CorruptIndexException, LockObtainFailedException, IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    CoreCodecProvider cp = new CoreCodecProvider();\n    cp.unregister(cp.lookup(\"PreFlex\"));\n    cp.register(new PreFlexRWCodec());\n    cp.setDefaultFieldCodec(\"PreFlex\");\n    config.setCodecProvider(cp);\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, config);\n    for (int i = 0; i < NUMBER_OF_DOCUMENTS; i++) {\n      Document document = new Document();\n      for (int f = 0; f < NUMBER_OF_FIELDS; f++) {\n        document.add(newField(\"field\" + f, getText(), StringField.TYPE_UNSTORED));\n      }\n      writer.addDocument(document);\n    }\n    writer.optimize();\n    writer.close();\n    return config.getTermIndexInterval();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex#populate(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestTermInfosReaderIndex#populate(Directory).mjava","sourceNew":"  private int populate(Directory directory) throws CorruptIndexException, LockObtainFailedException, IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, config);\n    for (int i = 0; i < NUMBER_OF_DOCUMENTS; i++) {\n      Document document = new Document();\n      for (int f = 0; f < NUMBER_OF_FIELDS; f++) {\n        document.add(newField(\"field\" + f, getText(), StringField.TYPE_UNSTORED));\n      }\n      writer.addDocument(document);\n    }\n    writer.optimize();\n    writer.close();\n    return config.getTermIndexInterval();\n  }\n\n","sourceOld":"  private int populate(Directory directory) throws CorruptIndexException, LockObtainFailedException, IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    CoreCodecProvider cp = new CoreCodecProvider();\n    cp.unregister(cp.lookup(\"PreFlex\"));\n    cp.register(new PreFlexRWCodec());\n    cp.setDefaultFieldCodec(\"PreFlex\");\n    config.setCodecProvider(cp);\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, config);\n    for (int i = 0; i < NUMBER_OF_DOCUMENTS; i++) {\n      Document document = new Document();\n      for (int f = 0; f < NUMBER_OF_FIELDS; f++) {\n        document.add(newField(\"field\" + f, getText(), StringField.TYPE_UNSTORED));\n      }\n      writer.addDocument(document);\n    }\n    writer.optimize();\n    writer.close();\n    return config.getTermIndexInterval();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}