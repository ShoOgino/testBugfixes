{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","sourceNew":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.replaceForFlush(state, closed);\n    } finally {\n      stallControl.updateStalled(this);\n    }\n  }\n\n","sourceOld":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.replaceForFlush(state, closed);\n    } finally {\n      stallControl.updateStalled(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e38f40562eb7c165ae08ab2367a031883138354","date":1340287338,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","sourceNew":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.replaceForFlush(state, closed);\n    } finally {\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.replaceForFlush(state, closed);\n    } finally {\n      stallControl.updateStalled(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","sourceNew":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.replaceForFlush(state, closed);\n    } finally {\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.replaceForFlush(state, closed);\n    } finally {\n      stallControl.updateStalled(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","sourceNew":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.reset(state, closed);\n    } finally {\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.replaceForFlush(state, closed);\n    } finally {\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","sourceNew":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.reset(state, closed);\n    } finally {\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.replaceForFlush(state, closed);\n    } finally {\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","sourceNew":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.reset(state, closed);\n    } finally {\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.replaceForFlush(state, closed);\n    } finally {\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5898ca35059bc3a89ba6a275ec92a5c32057aedc","date":1436893905,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","sourceNew":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.reset(state);\n    } finally {\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.reset(state, closed);\n    } finally {\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#doOnAbort(ThreadState).mjava","sourceNew":null,"sourceOld":"  synchronized void doOnAbort(ThreadState state) {\n    try {\n      if (state.flushPending) {\n        flushBytes -= state.bytesUsed;\n      } else {\n        activeBytes -= state.bytesUsed;\n      }\n      assert assertMemory();\n      // Take it out of the loop this DWPT is stale\n      perThreadPool.reset(state);\n    } finally {\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["5898ca35059bc3a89ba6a275ec92a5c32057aedc"],"7af110b00ea8df9429309d83e38e0533d82e144f":["5e38f40562eb7c165ae08ab2367a031883138354"],"5e38f40562eb7c165ae08ab2367a031883138354":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["5e38f40562eb7c165ae08ab2367a031883138354","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["5e38f40562eb7c165ae08ab2367a031883138354","7af110b00ea8df9429309d83e38e0533d82e144f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5e38f40562eb7c165ae08ab2367a031883138354"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"],"5898ca35059bc3a89ba6a275ec92a5c32057aedc":["7af110b00ea8df9429309d83e38e0533d82e144f"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","5898ca35059bc3a89ba6a275ec92a5c32057aedc"],"5e38f40562eb7c165ae08ab2367a031883138354":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5e38f40562eb7c165ae08ab2367a031883138354","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5898ca35059bc3a89ba6a275ec92a5c32057aedc":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}