{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeAreaValueSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeAreaValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues shapeValues = shapeValueSource.getValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        Shape shape = (Shape) shapeValues.objectVal(doc);\n        if (shape == null || shape.isEmpty())\n          return 0;//or NaN?\n        //This part of Spatial4j API is kinda weird. Passing null means 2D area, otherwise geo\n        //   assuming ctx.isGeo()\n        return shape.getArea( geoArea ? ctx : null );\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return shapeValues.exists(doc);\n      }\n\n      @Override\n      public Explanation explain(int doc) {\n        Explanation exp = super.explain(doc);\n        exp.addDetail(shapeValues.explain(doc));\n        return exp;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"167133992e7b384ce97f83ddb1dd2ddd09daf7aa","date":1420315776,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeAreaValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeAreaValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues shapeValues = shapeValueSource.getValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        Shape shape = (Shape) shapeValues.objectVal(doc);\n        if (shape == null || shape.isEmpty())\n          return 0;//or NaN?\n        //This part of Spatial4j API is kinda weird. Passing null means 2D area, otherwise geo\n        //   assuming ctx.isGeo()\n        return shape.getArea( geoArea ? ctx : null ) * multiplier;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return shapeValues.exists(doc);\n      }\n\n      @Override\n      public Explanation explain(int doc) {\n        Explanation exp = super.explain(doc);\n        exp.addDetail(shapeValues.explain(doc));\n        return exp;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues shapeValues = shapeValueSource.getValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        Shape shape = (Shape) shapeValues.objectVal(doc);\n        if (shape == null || shape.isEmpty())\n          return 0;//or NaN?\n        //This part of Spatial4j API is kinda weird. Passing null means 2D area, otherwise geo\n        //   assuming ctx.isGeo()\n        return shape.getArea( geoArea ? ctx : null );\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return shapeValues.exists(doc);\n      }\n\n      @Override\n      public Explanation explain(int doc) {\n        Explanation exp = super.explain(doc);\n        exp.addDetail(shapeValues.explain(doc));\n        return exp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeAreaValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeAreaValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues shapeValues = shapeValueSource.getValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        Shape shape = (Shape) shapeValues.objectVal(doc);\n        if (shape == null || shape.isEmpty())\n          return 0;//or NaN?\n        //This part of Spatial4j API is kinda weird. Passing null means 2D area, otherwise geo\n        //   assuming ctx.isGeo()\n        return shape.getArea( geoArea ? ctx : null ) * multiplier;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return shapeValues.exists(doc);\n      }\n\n      @Override\n      public Explanation explain(int doc) {\n        Explanation exp = super.explain(doc);\n        List<Explanation> details = new ArrayList<>(Arrays.asList(exp.getDetails()));\n        details.add(shapeValues.explain(doc));\n        return Explanation.match(exp.getValue(), exp.getDescription(), details);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues shapeValues = shapeValueSource.getValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        Shape shape = (Shape) shapeValues.objectVal(doc);\n        if (shape == null || shape.isEmpty())\n          return 0;//or NaN?\n        //This part of Spatial4j API is kinda weird. Passing null means 2D area, otherwise geo\n        //   assuming ctx.isGeo()\n        return shape.getArea( geoArea ? ctx : null ) * multiplier;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return shapeValues.exists(doc);\n      }\n\n      @Override\n      public Explanation explain(int doc) {\n        Explanation exp = super.explain(doc);\n        exp.addDetail(shapeValues.explain(doc));\n        return exp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/util/ShapeAreaValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeAreaValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues shapeValues = shapeValueSource.getValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        Shape shape = (Shape) shapeValues.objectVal(doc);\n        if (shape == null || shape.isEmpty())\n          return 0;//or NaN?\n        //This part of Spatial4j API is kinda weird. Passing null means 2D area, otherwise geo\n        //   assuming ctx.isGeo()\n        return shape.getArea( geoArea ? ctx : null ) * multiplier;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return shapeValues.exists(doc);\n      }\n\n      @Override\n      public Explanation explain(int doc) {\n        Explanation exp = super.explain(doc);\n        List<Explanation> details = new ArrayList<>(Arrays.asList(exp.getDetails()));\n        details.add(shapeValues.explain(doc));\n        return Explanation.match(exp.getValue(), exp.getDescription(), details);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues shapeValues = shapeValueSource.getValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        Shape shape = (Shape) shapeValues.objectVal(doc);\n        if (shape == null || shape.isEmpty())\n          return 0;//or NaN?\n        //This part of Spatial4j API is kinda weird. Passing null means 2D area, otherwise geo\n        //   assuming ctx.isGeo()\n        return shape.getArea( geoArea ? ctx : null ) * multiplier;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return shapeValues.exists(doc);\n      }\n\n      @Override\n      public Explanation explain(int doc) {\n        Explanation exp = super.explain(doc);\n        List<Explanation> details = new ArrayList<>(Arrays.asList(exp.getDetails()));\n        details.add(shapeValues.explain(doc));\n        return Explanation.match(exp.getValue(), exp.getDescription(), details);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/util/ShapeAreaValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeAreaValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues shapeValues = shapeValueSource.getValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        Shape shape = (Shape) shapeValues.objectVal(doc);\n        if (shape == null || shape.isEmpty())\n          return 0;//or NaN?\n        //This part of Spatial4j API is kinda weird. Passing null means 2D area, otherwise geo\n        //   assuming ctx.isGeo()\n        return shape.getArea( geoArea ? ctx : null ) * multiplier;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return shapeValues.exists(doc);\n      }\n\n      @Override\n      public Explanation explain(int doc) {\n        Explanation exp = super.explain(doc);\n        List<Explanation> details = new ArrayList<>(Arrays.asList(exp.getDetails()));\n        details.add(shapeValues.explain(doc));\n        return Explanation.match(exp.getValue(), exp.getDescription(), details);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues shapeValues = shapeValueSource.getValues(context, readerContext);\n\n    return new DoubleDocValues(this) {\n      @Override\n      public double doubleVal(int doc) {\n        Shape shape = (Shape) shapeValues.objectVal(doc);\n        if (shape == null || shape.isEmpty())\n          return 0;//or NaN?\n        //This part of Spatial4j API is kinda weird. Passing null means 2D area, otherwise geo\n        //   assuming ctx.isGeo()\n        return shape.getArea( geoArea ? ctx : null ) * multiplier;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return shapeValues.exists(doc);\n      }\n\n      @Override\n      public Explanation explain(int doc) {\n        Explanation exp = super.explain(doc);\n        List<Explanation> details = new ArrayList<>(Arrays.asList(exp.getDetails()));\n        details.add(shapeValues.explain(doc));\n        return Explanation.match(exp.getValue(), exp.getDescription(), details);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}