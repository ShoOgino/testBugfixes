{"path":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n   if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    return new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":null,"bugIntro":["2a186ae8733084223c22044e935e4ef848a143d1","527cc14542789f47d75da436cb4287d1ab887e34","527cc14542789f47d75da436cb4287d1ab887e34","527cc14542789f47d75da436cb4287d1ab887e34","527cc14542789f47d75da436cb4287d1ab887e34","527cc14542789f47d75da436cb4287d1ab887e34","527cc14542789f47d75da436cb4287d1ab887e34","527cc14542789f47d75da436cb4287d1ab887e34","527cc14542789f47d75da436cb4287d1ab887e34","527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a05409176bd65129d67a785ee70e881e238a9aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a05409176bd65129d67a785ee70e881e238a9aef"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a05409176bd65129d67a785ee70e881e238a9aef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}