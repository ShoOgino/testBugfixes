{"path":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testCommit().mjava","commits":[{"id":"2e38054de362483189e0fdd850b779ed766aa7aa","date":1578059239,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testCommit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCommit() throws Exception{\n    String record = \"2019-12-16 14:20:19.708 INFO  (qtp812143047-22671) [c:production_201912 s:shard128 r:core_node7 x:production_201912_shard128_replica] o.a.s.u.DirectUpdateHandler2 start commit{_version_=1653086376121335808,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=false,prepareCommit=false}\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField openSearcher = doc.getField(\"open_searcher_s\");\n    SolrInputField softCommit = doc.getField(\"soft_commit_s\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n\n    assertEquals(date.getValue(), \"2019-12-16T14:20:19.708\");\n    assertEquals(type.getValue(), \"commit\");\n    assertEquals(shard.getValue(), \"shard128\");\n    assertEquals(replica.getValue(), \"core_node7\");\n    assertEquals(core.getValue(), \"production_201912_shard128_replica\");\n    assertEquals(openSearcher.getValue(), \"true\");\n    assertEquals(softCommit.getValue(), \"false\");\n    assertEquals(collection.getValue(), \"production_201912\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testCommit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCommit() throws Exception{\n    String record = \"2019-12-16 14:20:19.708 INFO  (qtp812143047-22671) [c:production_201912 s:shard128 r:core_node7 x:production_201912_shard128_replica] o.a.s.u.DirectUpdateHandler2 start commit{_version_=1653086376121335808,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=false,prepareCommit=false}\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField openSearcher = doc.getField(\"open_searcher_s\");\n    SolrInputField softCommit = doc.getField(\"soft_commit_s\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n\n    assertEquals(date.getValue(), \"2019-12-16T14:20:19.708\");\n    assertEquals(type.getValue(), \"commit\");\n    assertEquals(shard.getValue(), \"shard128\");\n    assertEquals(replica.getValue(), \"core_node7\");\n    assertEquals(core.getValue(), \"production_201912_shard128_replica\");\n    assertEquals(openSearcher.getValue(), \"true\");\n    assertEquals(softCommit.getValue(), \"false\");\n    assertEquals(collection.getValue(), \"production_201912\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a031986bdc711900b2b0b7a0ae9a37f608057e8b","date":1578663540,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testCommit().mjava","sourceNew":"  @Test\n  public void testCommit() throws Exception{\n    String record = \"2019-12-16T14:20:19.708 INFO  (qtp812143047-22671) [c:production_201912 s:shard128 r:core_node7 x:production_201912_shard128_replica] o.a.s.u.DirectUpdateHandler2 start commit{_version_=1653086376121335808,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=false,prepareCommit=false}\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField openSearcher = doc.getField(\"open_searcher_s\");\n    SolrInputField softCommit = doc.getField(\"soft_commit_s\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n\n    assertEquals(date.getValue(), \"2019-12-16T14:20:19.708\");\n    assertEquals(type.getValue(), \"commit\");\n    assertEquals(shard.getValue(), \"shard128\");\n    assertEquals(replica.getValue(), \"core_node7\");\n    assertEquals(core.getValue(), \"production_201912_shard128_replica\");\n    assertEquals(openSearcher.getValue(), \"true\");\n    assertEquals(softCommit.getValue(), \"false\");\n    assertEquals(collection.getValue(), \"production_201912\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommit() throws Exception{\n    String record = \"2019-12-16 14:20:19.708 INFO  (qtp812143047-22671) [c:production_201912 s:shard128 r:core_node7 x:production_201912_shard128_replica] o.a.s.u.DirectUpdateHandler2 start commit{_version_=1653086376121335808,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=false,prepareCommit=false}\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField openSearcher = doc.getField(\"open_searcher_s\");\n    SolrInputField softCommit = doc.getField(\"soft_commit_s\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n\n    assertEquals(date.getValue(), \"2019-12-16T14:20:19.708\");\n    assertEquals(type.getValue(), \"commit\");\n    assertEquals(shard.getValue(), \"shard128\");\n    assertEquals(replica.getValue(), \"core_node7\");\n    assertEquals(core.getValue(), \"production_201912_shard128_replica\");\n    assertEquals(openSearcher.getValue(), \"true\");\n    assertEquals(softCommit.getValue(), \"false\");\n    assertEquals(collection.getValue(), \"production_201912\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","date":1578901035,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testCommit().mjava","sourceNew":"  @Test\n  public void testCommit() throws Exception{\n    String record = \"2019-12-16T14:20:19.708 INFO  (qtp812143047-22671) [c:production_201912 s:shard128 r:core_node7 x:production_201912_shard128_replica] o.a.s.u.DirectUpdateHandler2 start commit{_version_=1653086376121335808,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=false,prepareCommit=false}\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField openSearcher = doc.getField(\"open_searcher_s\");\n    SolrInputField softCommit = doc.getField(\"soft_commit_s\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n\n    assertEquals(date.getValue(), \"2019-12-16T14:20:19.708\");\n    assertEquals(type.getValue(), \"commit\");\n    assertEquals(shard.getValue(), \"shard128\");\n    assertEquals(replica.getValue(), \"core_node7\");\n    assertEquals(core.getValue(), \"production_201912_shard128_replica\");\n    assertEquals(openSearcher.getValue(), \"true\");\n    assertEquals(softCommit.getValue(), \"false\");\n    assertEquals(collection.getValue(), \"production_201912\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommit() throws Exception{\n    String record = \"2019-12-16 14:20:19.708 INFO  (qtp812143047-22671) [c:production_201912 s:shard128 r:core_node7 x:production_201912_shard128_replica] o.a.s.u.DirectUpdateHandler2 start commit{_version_=1653086376121335808,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=false,prepareCommit=false}\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField openSearcher = doc.getField(\"open_searcher_s\");\n    SolrInputField softCommit = doc.getField(\"soft_commit_s\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n\n    assertEquals(date.getValue(), \"2019-12-16T14:20:19.708\");\n    assertEquals(type.getValue(), \"commit\");\n    assertEquals(shard.getValue(), \"shard128\");\n    assertEquals(replica.getValue(), \"core_node7\");\n    assertEquals(core.getValue(), \"production_201912_shard128_replica\");\n    assertEquals(openSearcher.getValue(), \"true\");\n    assertEquals(softCommit.getValue(), \"false\");\n    assertEquals(collection.getValue(), \"production_201912\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","a031986bdc711900b2b0b7a0ae9a37f608057e8b"],"a031986bdc711900b2b0b7a0ae9a37f608057e8b":["2e38054de362483189e0fdd850b779ed766aa7aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e38054de362483189e0fdd850b779ed766aa7aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e38054de362483189e0fdd850b779ed766aa7aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a031986bdc711900b2b0b7a0ae9a37f608057e8b"]},"commit2Childs":{"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":[],"a031986bdc711900b2b0b7a0ae9a37f608057e8b":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e38054de362483189e0fdd850b779ed766aa7aa","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"2e38054de362483189e0fdd850b779ed766aa7aa":["a031986bdc711900b2b0b7a0ae9a37f608057e8b","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}