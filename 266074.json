{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/ClassInfo#main(String[]).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/ClassInfo#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Usage: java ClassInfo PackageName.MyNewClassName PackageName.DerivedClassName\n     */\n    public static void main(String[] args)\n    {\n\n        String name = args[0];\n        String derivedName = args[1];\n        LinkedList l = new LinkedList();\n        ListIterator itry = l.listIterator();\n\n        try\n        {\n            Class cls = Class.forName(name);\n            name = cls.getName();\n            String pkg =  getPackageName(name);\n            String clss = getClassName(name);\n\n            StringWriter importsWriter = new StringWriter();\n            PrintWriter imports = new PrintWriter(importsWriter);\n            StringWriter outWriter = new StringWriter();\n            PrintWriter out = new PrintWriter(outWriter);\n\n            TreeSet importClasses = new TreeSet();\n            importClasses.add(getImportStatement(name));\n\n            out.println(\"/**\\n * (class description here)\\n */\\npublic class \" + derivedName + \" \" + (cls.isInterface() ? \"implements \" : \"extends \") + clss + \"\\n{\");\n\n            Method[] m = cls.getMethods();\n            for(int i= 0; i< m.length; i++)\n            {\n                Method thism = m[i];\n                if((thism.getModifiers() & Modifier.PRIVATE) == 0 && ((thism.getModifiers() & Modifier.FINAL) == 0)\n                   && (thism.getDeclaringClass().getName() != \"java.lang.Object\"))\n                {\n                    out.println(\"    /**\");\n                    out.println(\"     * (method description here)\");\n                    out.println(\"     * defined in \" + thism.getDeclaringClass().getName());\n\n                    Class[] parameters = thism.getParameterTypes();\n                    for(int j = 0; j < parameters.length; j ++)\n                    {\n                        if(getPackageName(parameters[j].getName()) != \"\")\n                        {\n                            importClasses.add(getImportStatement(parameters[j].getName()));\n                        }\n                        out.println(\"     * @param p\" + j + \" (parameter description here)\");\n                    }\n\n                    if(thism.getReturnType().getName() != \"void\")\n                    {\n                        String returnPackage = getPackageName(thism.getReturnType().getName());\n                        if(returnPackage != \"\")\n                        {\n                            importClasses.add(getImportStatement(thism.getReturnType().getName()));\n                        }\n                        out.println(\"     * @return (return value description here)\");\n                    }\n\n                    out.println(\"     */\");\n\n                    out.print(\"    \" + getModifierString(thism.getModifiers()) + getClassName(thism.getReturnType().getName()) + \" \");\n                    out.print(thism.getName() + \"(\");\n\n                    for(int j = 0; j < parameters.length; j ++)\n                    {\n                        if(j>0)\n                        {\n                            out.print(\", \");\n                        }\n                        out.print(getClassName(parameters[j].getName()) + \" p\" + j);\n                    }\n                    out.print(\")\");\n                    Class[] exceptions = thism.getExceptionTypes();\n\n                    if (exceptions.length > 0)\n                    {\n                       out.print(\" throws \");\n                    }\n\n                    for(int k = 0; k < exceptions.length; k++)\n                    {\n                       if(k > 0)\n                       {\n                           out.print(\", \");\n                       }\n                       String exCompleteName = exceptions[k].getName();\n                       String exName = getClassName(exCompleteName);\n                       importClasses.add(getImportStatement(exCompleteName));\n\n                       out.print(exName);\n                    }\n                    out.print(\"\\n\" +\n                              \"    {\\n\" +\n                              \"        /**@todo: Implement this \" + thism.getName() + \"() method */\\n\" +\n                              \"        throw new UnsupportedOperationException(\\\"Method \" + thism.getName() + \"() not yet implemented.\\\");\\n\" +\n                              \"    }\\n\\n\");\n\n\n                }\n            }\n            out.println(\"}\");\n\n            Iterator importIterator = importClasses.iterator();\n            while(importIterator.hasNext())\n            {\n                String importName = (String)importIterator.next();\n                if(!importName.startsWith(\"java.lang\"))\n                {\n                    imports.println(\"import \" + importName + \";\");\n                }\n            }\n\n            out.flush();\n            imports.flush();\n\n            if(getPackageName(derivedName) != \"\")\n            {\n                System.out.println(\"package \" + getPackageName(derivedName) + \";\\n\");\n            }\n            System.out.println( \"/**\\n\" +\n                                \" * Title:        \\n\" +\n                                \" * Description:\\n\" +\n                                \" * Copyright:    Copyright (c)\\n\" +\n                                \" * Company:\\n\" +\n                                \" * @author\\n\" +\n                                \" * @version 1.0\\n\" +\n                                \" */\\n\");\n            System.out.println(importsWriter.getBuffer());\n            System.out.print(outWriter.getBuffer());\n        }\n        catch(Throwable t)\n        {\n            t.printStackTrace();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37ad635dce04d2ba99e2808780c397e5251878b5","date":1035301248,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/ClassInfo#main(String[]).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/ClassInfo#main(String[]).mjava","sourceNew":"    /**\n     * Usage: java ClassInfo PackageName.MyNewClassName PackageName.DerivedClassName\n     */\n    public static void main(String[] args)\n    {\n\n        String name = args[0];\n        String derivedName = args[1];\n        LinkedList l = new LinkedList();\n        ListIterator itry = l.listIterator();\n\n        try\n        {\n            Class cls = Class.forName(name);\n            classInfo(derivedName, cls);\n        }\n        catch(Throwable t)\n        {\n            t.printStackTrace();\n        }\n    }\n\n","sourceOld":"    /**\n     * Usage: java ClassInfo PackageName.MyNewClassName PackageName.DerivedClassName\n     */\n    public static void main(String[] args)\n    {\n\n        String name = args[0];\n        String derivedName = args[1];\n        LinkedList l = new LinkedList();\n        ListIterator itry = l.listIterator();\n\n        try\n        {\n            Class cls = Class.forName(name);\n            name = cls.getName();\n            String pkg =  getPackageName(name);\n            String clss = getClassName(name);\n\n            StringWriter importsWriter = new StringWriter();\n            PrintWriter imports = new PrintWriter(importsWriter);\n            StringWriter outWriter = new StringWriter();\n            PrintWriter out = new PrintWriter(outWriter);\n\n            TreeSet importClasses = new TreeSet();\n            importClasses.add(getImportStatement(name));\n\n            out.println(\"/**\\n * (class description here)\\n */\\npublic class \" + derivedName + \" \" + (cls.isInterface() ? \"implements \" : \"extends \") + clss + \"\\n{\");\n\n            Method[] m = cls.getMethods();\n            for(int i= 0; i< m.length; i++)\n            {\n                Method thism = m[i];\n                if((thism.getModifiers() & Modifier.PRIVATE) == 0 && ((thism.getModifiers() & Modifier.FINAL) == 0)\n                   && (thism.getDeclaringClass().getName() != \"java.lang.Object\"))\n                {\n                    out.println(\"    /**\");\n                    out.println(\"     * (method description here)\");\n                    out.println(\"     * defined in \" + thism.getDeclaringClass().getName());\n\n                    Class[] parameters = thism.getParameterTypes();\n                    for(int j = 0; j < parameters.length; j ++)\n                    {\n                        if(getPackageName(parameters[j].getName()) != \"\")\n                        {\n                            importClasses.add(getImportStatement(parameters[j].getName()));\n                        }\n                        out.println(\"     * @param p\" + j + \" (parameter description here)\");\n                    }\n\n                    if(thism.getReturnType().getName() != \"void\")\n                    {\n                        String returnPackage = getPackageName(thism.getReturnType().getName());\n                        if(returnPackage != \"\")\n                        {\n                            importClasses.add(getImportStatement(thism.getReturnType().getName()));\n                        }\n                        out.println(\"     * @return (return value description here)\");\n                    }\n\n                    out.println(\"     */\");\n\n                    out.print(\"    \" + getModifierString(thism.getModifiers()) + getClassName(thism.getReturnType().getName()) + \" \");\n                    out.print(thism.getName() + \"(\");\n\n                    for(int j = 0; j < parameters.length; j ++)\n                    {\n                        if(j>0)\n                        {\n                            out.print(\", \");\n                        }\n                        out.print(getClassName(parameters[j].getName()) + \" p\" + j);\n                    }\n                    out.print(\")\");\n                    Class[] exceptions = thism.getExceptionTypes();\n\n                    if (exceptions.length > 0)\n                    {\n                       out.print(\" throws \");\n                    }\n\n                    for(int k = 0; k < exceptions.length; k++)\n                    {\n                       if(k > 0)\n                       {\n                           out.print(\", \");\n                       }\n                       String exCompleteName = exceptions[k].getName();\n                       String exName = getClassName(exCompleteName);\n                       importClasses.add(getImportStatement(exCompleteName));\n\n                       out.print(exName);\n                    }\n                    out.print(\"\\n\" +\n                              \"    {\\n\" +\n                              \"        /**@todo: Implement this \" + thism.getName() + \"() method */\\n\" +\n                              \"        throw new UnsupportedOperationException(\\\"Method \" + thism.getName() + \"() not yet implemented.\\\");\\n\" +\n                              \"    }\\n\\n\");\n\n\n                }\n            }\n            out.println(\"}\");\n\n            Iterator importIterator = importClasses.iterator();\n            while(importIterator.hasNext())\n            {\n                String importName = (String)importIterator.next();\n                if(!importName.startsWith(\"java.lang\"))\n                {\n                    imports.println(\"import \" + importName + \";\");\n                }\n            }\n\n            out.flush();\n            imports.flush();\n\n            if(getPackageName(derivedName) != \"\")\n            {\n                System.out.println(\"package \" + getPackageName(derivedName) + \";\\n\");\n            }\n            System.out.println( \"/**\\n\" +\n                                \" * Title:        \\n\" +\n                                \" * Description:\\n\" +\n                                \" * Copyright:    Copyright (c)\\n\" +\n                                \" * Company:\\n\" +\n                                \" * @author\\n\" +\n                                \" * @version 1.0\\n\" +\n                                \" */\\n\");\n            System.out.println(importsWriter.getBuffer());\n            System.out.print(outWriter.getBuffer());\n        }\n        catch(Throwable t)\n        {\n            t.printStackTrace();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/ClassInfo#main(String[]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Usage: java ClassInfo PackageName.MyNewClassName PackageName.DerivedClassName\n     */\n    public static void main(String[] args)\n    {\n\n        String name = args[0];\n        String derivedName = args[1];\n        LinkedList l = new LinkedList();\n        ListIterator itry = l.listIterator();\n\n        try\n        {\n            Class cls = Class.forName(name);\n            classInfo(derivedName, cls);\n        }\n        catch(Throwable t)\n        {\n            t.printStackTrace();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["37ad635dce04d2ba99e2808780c397e5251878b5"],"37ad635dce04d2ba99e2808780c397e5251878b5":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37ad635dce04d2ba99e2808780c397e5251878b5":["afc16d717d9ed1a8e45371668ca6de674164d624"],"05d36e0b328ec96237035fbcca240e73631396e5":["37ad635dce04d2ba99e2808780c397e5251878b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}