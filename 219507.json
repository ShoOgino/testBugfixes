{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName, flushState.numDocs, directory);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  oldRAMSize=\" + numBytesUsed +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName, flushState.numDocs, directory);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  oldRAMSize=\" + numBytesUsed +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName, flushState.numDocs, directory, flushState.codec);\n        si.setHasProx(hasProx());\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(((double) numBytesUsed)/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName, flushState.numDocs, directory);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  oldRAMSize=\" + numBytesUsed +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.codec);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(numBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName, flushState.numDocs, directory, flushState.codec);\n        si.setHasProx(hasProx());\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(((double) numBytesUsed)/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":null,"sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.codec);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(numBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.codec);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(numBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":null,"sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.codec);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(numBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5d2713bf46d98021f1a00be8d59dceb80caa73b","date":1284719403,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n\n      final long startNumBytesUsed = numBytesUsed;\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.codec);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(startNumBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/startNumBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.codec);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(numBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/numBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n\n      final long startNumBytesUsed = bytesUsed();\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.codec);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(startNumBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/startNumBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n\n      final long startNumBytesUsed = numBytesUsed;\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.codec);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(startNumBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/startNumBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n\n      final long startNumBytesUsed = bytesUsed();\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.segmentCodecs);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(startNumBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/startNumBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n\n      final long startNumBytesUsed = bytesUsed();\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.codec);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(startNumBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/startNumBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n\n      final long startNumBytesUsed = bytesUsed();\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.segmentCodecs);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(startNumBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/startNumBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n\n      final long startNumBytesUsed = bytesUsed();\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.codec);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(startNumBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/startNumBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":null,"sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n\n      final long startNumBytesUsed = bytesUsed();\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.segmentCodecs);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(startNumBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/startNumBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#flush(boolean).mjava","sourceNew":null,"sourceOld":"  /** Flush all pending docs to a new segment */\n  synchronized int flush(boolean closeDocStore) throws IOException {\n\n    assert allThreadsIdle();\n\n    assert numDocsInRAM > 0;\n\n    assert nextDocID == numDocsInRAM;\n    assert waitQueue.numWaiting == 0;\n    assert waitQueue.waitingBytes == 0;\n\n    initFlushState(false);\n\n    docStoreOffset = numDocsInStore;\n\n    if (infoStream != null)\n      message(\"flush postings as segment \" + flushState.segmentName + \" numDocs=\" + numDocsInRAM);\n    \n    boolean success = false;\n\n    try {\n\n      if (closeDocStore) {\n        assert flushState.docStoreSegmentName != null;\n        assert flushState.docStoreSegmentName.equals(flushState.segmentName);\n        closeDocStore();\n        flushState.numDocsInStore = 0;\n      }\n\n      Collection<DocConsumerPerThread> threads = new HashSet<DocConsumerPerThread>();\n      for(int i=0;i<threadStates.length;i++)\n        threads.add(threadStates[i].consumer);\n\n      final long startNumBytesUsed = bytesUsed();\n      consumer.flush(threads, flushState);\n\n      if (infoStream != null) {\n        SegmentInfo si = new SegmentInfo(flushState.segmentName,\n            flushState.numDocs, directory, false, -1, flushState.segmentName,\n            false, hasProx(), flushState.segmentCodecs);\n        final long newSegmentSize = si.sizeInBytes();\n        String message = \"  ramUsed=\" + nf.format(startNumBytesUsed/1024./1024.) + \" MB\" +\n          \" newFlushedSize=\" + newSegmentSize +\n          \" docs/MB=\" + nf.format(numDocsInRAM/(newSegmentSize/1024./1024.)) +\n          \" new/old=\" + nf.format(100.0*newSegmentSize/startNumBytesUsed) + \"%\";\n        message(message);\n      }\n\n      flushedDocCount += flushState.numDocs;\n\n      doAfterFlush();\n\n      success = true;\n\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n\n    assert waitQueue.waitingBytes == 0;\n\n    return flushState.numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["d5d2713bf46d98021f1a00be8d59dceb80caa73b"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"85a883878c0af761245ab048babc63d099f835f3":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["85a883878c0af761245ab048babc63d099f835f3","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["6267e1ce56c2eec111425690cd04e251b6f14952"],"6267e1ce56c2eec111425690cd04e251b6f14952":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"d5d2713bf46d98021f1a00be8d59dceb80caa73b":["334c1175813aea771a71728cd2c4ee4754fd0603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","85a883878c0af761245ab048babc63d099f835f3"],"85a883878c0af761245ab048babc63d099f835f3":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6267e1ce56c2eec111425690cd04e251b6f14952"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"334c1175813aea771a71728cd2c4ee4754fd0603":["d5d2713bf46d98021f1a00be8d59dceb80caa73b"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"6267e1ce56c2eec111425690cd04e251b6f14952":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014","8fe956d65251358d755c56f14fe8380644790e47"],"d5d2713bf46d98021f1a00be8d59dceb80caa73b":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","8fe956d65251358d755c56f14fe8380644790e47","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}