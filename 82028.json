{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","commits":[{"id":"bbd200b2732aefbc96902b61cb6bb51ec45c8a79","date":1197030109,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new WhitespaceTokenizer(new StringReader(test))), 3, \"D\");\n    Token tok = new Token();\n    boolean seenDogs = false;\n    while ((tok = nptf.next(tok)) != null){\n      if (tok.termText().equals(\"dogs\")){\n        seenDogs = true;\n        assertTrue(tok.type() + \" is not equal to \" + \"D\", tok.type().equals(\"D\") == true);\n        assertTrue(\"tok.getPayload() is null and it shouldn't be\", tok.getPayload() != null);\n        byte [] bytes = tok.getPayload().getData();//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + tok.getPayload().length(), bytes.length == tok.getPayload().length());\n        assertTrue(tok.getPayload().getOffset() + \" does not equal: \" + 0, tok.getPayload().getOffset() == 0);\n        float pay = NumericPayloadTokenFilter.decodePayload(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(tok.type() + \" is not null and it should be\", tok.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ed61ec7f37eae0b7b6545998048315202379e05","date":1197899746,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new WhitespaceTokenizer(new StringReader(test))), 3, \"D\");\n    Token tok = new Token();\n    boolean seenDogs = false;\n    while ((tok = nptf.next(tok)) != null){\n      if (tok.termText().equals(\"dogs\")){\n        seenDogs = true;\n        assertTrue(tok.type() + \" is not equal to \" + \"D\", tok.type().equals(\"D\") == true);\n        assertTrue(\"tok.getPayload() is null and it shouldn't be\", tok.getPayload() != null);\n        byte [] bytes = tok.getPayload().getData();//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + tok.getPayload().length(), bytes.length == tok.getPayload().length());\n        assertTrue(tok.getPayload().getOffset() + \" does not equal: \" + 0, tok.getPayload().getOffset() == 0);\n        float pay = PayloadHelper.decodeFloat(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(tok.type() + \" is not null and it should be\", tok.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new WhitespaceTokenizer(new StringReader(test))), 3, \"D\");\n    Token tok = new Token();\n    boolean seenDogs = false;\n    while ((tok = nptf.next(tok)) != null){\n      if (tok.termText().equals(\"dogs\")){\n        seenDogs = true;\n        assertTrue(tok.type() + \" is not equal to \" + \"D\", tok.type().equals(\"D\") == true);\n        assertTrue(\"tok.getPayload() is null and it shouldn't be\", tok.getPayload() != null);\n        byte [] bytes = tok.getPayload().getData();//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + tok.getPayload().length(), bytes.length == tok.getPayload().length());\n        assertTrue(tok.getPayload().getOffset() + \" does not equal: \" + 0, tok.getPayload().getOffset() == 0);\n        float pay = NumericPayloadTokenFilter.decodePayload(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(tok.type() + \" is not null and it should be\", tok.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new WhitespaceTokenizer(new StringReader(test))), 3, \"D\");\n    boolean seenDogs = false;\n    final Token reusableToken = new Token();\n    for (Token nextToken = nptf.next(reusableToken); nextToken != null; nextToken = nptf.next(reusableToken)) {\n      if (nextToken.term().equals(\"dogs\")){\n        seenDogs = true;\n        assertTrue(nextToken.type() + \" is not equal to \" + \"D\", nextToken.type().equals(\"D\") == true);\n        assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", nextToken.getPayload() != null);\n        byte [] bytes = nextToken.getPayload().getData();//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + nextToken.getPayload().length(), bytes.length == nextToken.getPayload().length());\n        assertTrue(nextToken.getPayload().getOffset() + \" does not equal: \" + 0, nextToken.getPayload().getOffset() == 0);\n        float pay = PayloadHelper.decodeFloat(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(nextToken.type() + \" is not null and it should be\", nextToken.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new WhitespaceTokenizer(new StringReader(test))), 3, \"D\");\n    Token tok = new Token();\n    boolean seenDogs = false;\n    while ((tok = nptf.next(tok)) != null){\n      if (tok.termText().equals(\"dogs\")){\n        seenDogs = true;\n        assertTrue(tok.type() + \" is not equal to \" + \"D\", tok.type().equals(\"D\") == true);\n        assertTrue(\"tok.getPayload() is null and it shouldn't be\", tok.getPayload() != null);\n        byte [] bytes = tok.getPayload().getData();//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + tok.getPayload().length(), bytes.length == tok.getPayload().length());\n        assertTrue(tok.getPayload().getOffset() + \" does not equal: \" + 0, tok.getPayload().getOffset() == 0);\n        float pay = PayloadHelper.decodeFloat(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(tok.type() + \" is not null and it should be\", tok.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new WhitespaceTokenizer(new StringReader(test))), 3, \"D\");\n    boolean seenDogs = false;\n    final Token reusableToken = new Token();\n    for (Token nextToken = nptf.next(reusableToken); nextToken != null; nextToken = nptf.next(reusableToken)) {\n      if (nextToken.term().equals(\"dogs\")){\n        seenDogs = true;\n        assertTrue(nextToken.type() + \" is not equal to \" + \"D\", nextToken.type().equals(\"D\") == true);\n        assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", nextToken.getPayload() != null);\n        byte [] bytes = nextToken.getPayload().getData();//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + nextToken.getPayload().length(), bytes.length == nextToken.getPayload().length());\n        assertTrue(nextToken.getPayload().getOffset() + \" does not equal: \" + 0, nextToken.getPayload().getOffset() == 0);\n        float pay = PayloadHelper.decodeFloat(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(nextToken.type() + \" is not null and it should be\", nextToken.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    NumericPayloadTokenFilter nptf = new NumericPayloadTokenFilter(new WordTokenFilter(new WhitespaceTokenizer(new StringReader(test))), 3, \"D\");\n    boolean seenDogs = false;\n    final Token reusableToken = new Token();\n    for (Token nextToken = nptf.next(reusableToken); nextToken != null; nextToken = nptf.next(reusableToken)) {\n      if (nextToken.term().equals(\"dogs\")){\n        seenDogs = true;\n        assertTrue(nextToken.type() + \" is not equal to \" + \"D\", nextToken.type().equals(\"D\") == true);\n        assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", nextToken.getPayload() != null);\n        byte [] bytes = nextToken.getPayload().getData();//safe here to just use the bytes, otherwise we should use offset, length\n        assertTrue(bytes.length + \" does not equal: \" + nextToken.getPayload().length(), bytes.length == nextToken.getPayload().length());\n        assertTrue(nextToken.getPayload().getOffset() + \" does not equal: \" + 0, nextToken.getPayload().getOffset() == 0);\n        float pay = PayloadHelper.decodeFloat(bytes);\n        assertTrue(pay + \" does not equal: \" + 3, pay == 3);\n      } else {\n        assertTrue(nextToken.type() + \" is not null and it should be\", nextToken.type().equals(\"word\"));\n      }\n    }\n    assertTrue(seenDogs + \" does not equal: \" + true, seenDogs == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["8ed61ec7f37eae0b7b6545998048315202379e05"],"bbd200b2732aefbc96902b61cb6bb51ec45c8a79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ed61ec7f37eae0b7b6545998048315202379e05":["bbd200b2732aefbc96902b61cb6bb51ec45c8a79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"bbd200b2732aefbc96902b61cb6bb51ec45c8a79":["8ed61ec7f37eae0b7b6545998048315202379e05"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbd200b2732aefbc96902b61cb6bb51ec45c8a79"],"8ed61ec7f37eae0b7b6545998048315202379e05":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}