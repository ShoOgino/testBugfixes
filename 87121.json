{"path":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCounts#doTestWriteRead(int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCounts#doTestWriteRead(int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCounts#doTestWriteRead(int).mjava","sourceNew":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache();\n\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    FacetIndexingParams iParams = new FacetIndexingParams() {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return new CategoryListParams() {\n          @Override\n          public OrdinalPolicy getOrdinalPolicy(String dimension) {\n            return OrdinalPolicy.ALL_PARENTS;\n          }\n        };\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    String[] categories = new String[] { \"a/b\", \"c/d\", \"a/e\", \"a/d\", \"c/g\", \"c/z\", \"b/a\", \"1/2\", \"b/c\" };\n\n    FacetFields facetFields = new FacetFields(taxoWriter, iParams);\n    for (String cat : categories) {\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(cat, '/')));\n      indexWriter.addDocument(doc);\n    }\n\n    // Commit Changes\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, indexReader, taxoReader, iParams);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, indexReader, taxoReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = tfcc.getTotalCounts(indexReader, taxoReader, iParams);\n\n    int partition = 0;\n    for (int i = 0; i < expectedCounts.length; i += partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    IOUtils.close(indexReader, taxoReader);\n    IOUtils.close(indexDir, taxoDir);\n    tmpFile.delete();\n  }\n\n","sourceOld":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache();\n\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    FacetIndexingParams iParams = new FacetIndexingParams() {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return new CategoryListParams() {\n          @Override\n          public OrdinalPolicy getOrdinalPolicy(String dimension) {\n            return OrdinalPolicy.ALL_PARENTS;\n          }\n        };\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    String[] categories = new String[] { \"a/b\", \"c/d\", \"a/e\", \"a/d\", \"c/g\", \"c/z\", \"b/a\", \"1/2\", \"b/c\" };\n\n    FacetFields facetFields = new FacetFields(taxoWriter, iParams);\n    for (String cat : categories) {\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(cat, '/')));\n      indexWriter.addDocument(doc);\n    }\n\n    // Commit Changes\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, indexReader, taxoReader, iParams);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, indexReader, taxoReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = tfcc.getTotalCounts(indexReader, taxoReader, iParams);\n\n    int partition = 0;\n    for (int i = 0; i < expectedCounts.length; i += partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    IOUtils.close(indexReader, taxoReader);\n    IOUtils.close(indexDir, taxoDir);\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCounts#doTestWriteRead(int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCounts#doTestWriteRead(int).mjava","sourceNew":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache();\n\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    FacetIndexingParams iParams = new FacetIndexingParams() {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(FacetLabel category) {\n        return new CategoryListParams() {\n          @Override\n          public OrdinalPolicy getOrdinalPolicy(String dimension) {\n            return OrdinalPolicy.ALL_PARENTS;\n          }\n        };\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    String[] categories = new String[] { \"a/b\", \"c/d\", \"a/e\", \"a/d\", \"c/g\", \"c/z\", \"b/a\", \"1/2\", \"b/c\" };\n\n    FacetFields facetFields = new FacetFields(taxoWriter, iParams);\n    for (String cat : categories) {\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(new FacetLabel(cat, '/')));\n      indexWriter.addDocument(doc);\n    }\n\n    // Commit Changes\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, indexReader, taxoReader, iParams);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, indexReader, taxoReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = tfcc.getTotalCounts(indexReader, taxoReader, iParams);\n\n    int partition = 0;\n    for (int i = 0; i < expectedCounts.length; i += partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    IOUtils.close(indexReader, taxoReader);\n    IOUtils.close(indexDir, taxoDir);\n    tmpFile.delete();\n  }\n\n","sourceOld":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache();\n\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    FacetIndexingParams iParams = new FacetIndexingParams() {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return new CategoryListParams() {\n          @Override\n          public OrdinalPolicy getOrdinalPolicy(String dimension) {\n            return OrdinalPolicy.ALL_PARENTS;\n          }\n        };\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    String[] categories = new String[] { \"a/b\", \"c/d\", \"a/e\", \"a/d\", \"c/g\", \"c/z\", \"b/a\", \"1/2\", \"b/c\" };\n\n    FacetFields facetFields = new FacetFields(taxoWriter, iParams);\n    for (String cat : categories) {\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(cat, '/')));\n      indexWriter.addDocument(doc);\n    }\n\n    // Commit Changes\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, indexReader, taxoReader, iParams);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, indexReader, taxoReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = tfcc.getTotalCounts(indexReader, taxoReader, iParams);\n\n    int partition = 0;\n    for (int i = 0; i < expectedCounts.length; i += partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    IOUtils.close(indexReader, taxoReader);\n    IOUtils.close(indexDir, taxoDir);\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCounts#doTestWriteRead(int).mjava","sourceNew":null,"sourceOld":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache();\n\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    FacetIndexingParams iParams = new FacetIndexingParams() {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(FacetLabel category) {\n        return new CategoryListParams() {\n          @Override\n          public OrdinalPolicy getOrdinalPolicy(String dimension) {\n            return OrdinalPolicy.ALL_PARENTS;\n          }\n        };\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    String[] categories = new String[] { \"a/b\", \"c/d\", \"a/e\", \"a/d\", \"c/g\", \"c/z\", \"b/a\", \"1/2\", \"b/c\" };\n\n    FacetFields facetFields = new FacetFields(taxoWriter, iParams);\n    for (String cat : categories) {\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(new FacetLabel(cat, '/')));\n      indexWriter.addDocument(doc);\n    }\n\n    // Commit Changes\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, indexReader, taxoReader, iParams);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, indexReader, taxoReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = tfcc.getTotalCounts(indexReader, taxoReader, iParams);\n\n    int partition = 0;\n    for (int i = 0; i < expectedCounts.length; i += partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    IOUtils.close(indexReader, taxoReader);\n    IOUtils.close(indexDir, taxoDir);\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCounts#doTestWriteRead(int).mjava","sourceNew":null,"sourceOld":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache();\n\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    FacetIndexingParams iParams = new FacetIndexingParams() {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return new CategoryListParams() {\n          @Override\n          public OrdinalPolicy getOrdinalPolicy(String dimension) {\n            return OrdinalPolicy.ALL_PARENTS;\n          }\n        };\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    String[] categories = new String[] { \"a/b\", \"c/d\", \"a/e\", \"a/d\", \"c/g\", \"c/z\", \"b/a\", \"1/2\", \"b/c\" };\n\n    FacetFields facetFields = new FacetFields(taxoWriter, iParams);\n    for (String cat : categories) {\n      Document doc = new Document();\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(cat, '/')));\n      indexWriter.addDocument(doc);\n    }\n\n    // Commit Changes\n    IOUtils.close(indexWriter, taxoWriter);\n\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, indexReader, taxoReader, iParams);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, indexReader, taxoReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = tfcc.getTotalCounts(indexReader, taxoReader, iParams);\n\n    int partition = 0;\n    for (int i = 0; i < expectedCounts.length; i += partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    IOUtils.close(indexReader, taxoReader);\n    IOUtils.close(indexDir, taxoDir);\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}