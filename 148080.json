{"path":"backwards/src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected boolean lessThan(final Entry hitA, final Entry hitB) {\n\n      assert hitA != hitB;\n      assert hitA.slot != hitB.slot;\n\n      int numComparators = comparators.length;\n      for (int i = 0; i < numComparators; ++i) {\n        final int c = reverseMul[i] * comparators[i].compare(hitA.slot, hitB.slot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // avoid random sort order that could lead to duplicates (bug #31241):\n      return hitA.doc > hitB.doc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/FieldValueHitQueue.MultiComparatorsFieldValueHitQueue#lessThan(Entry,Entry).mjava","sourceNew":"    @Override\n    protected boolean lessThan(final Entry hitA, final Entry hitB) {\n\n      assert hitA != hitB;\n      assert hitA.slot != hitB.slot;\n\n      int numComparators = comparators.length;\n      for (int i = 0; i < numComparators; ++i) {\n        final int c = reverseMul[i] * comparators[i].compare(hitA.slot, hitB.slot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // avoid random sort order that could lead to duplicates (bug #31241):\n      return hitA.doc > hitB.doc;\n    }\n\n","sourceOld":"    @Override\n    protected boolean lessThan(final Entry hitA, final Entry hitB) {\n\n      assert hitA != hitB;\n      assert hitA.slot != hitB.slot;\n\n      int numComparators = comparators.length;\n      for (int i = 0; i < numComparators; ++i) {\n        final int c = reverseMul[i] * comparators[i].compare(hitA.slot, hitB.slot);\n        if (c != 0) {\n          // Short circuit\n          return c > 0;\n        }\n      }\n\n      // avoid random sort order that could lead to duplicates (bug #31241):\n      return hitA.doc > hitB.doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}