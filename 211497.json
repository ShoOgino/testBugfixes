{"path":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    lock.lock();\n    try {\n      if (cache == null) {\n        cache = new WeakHashMap<IndexReader,DocIdSet>();\n      }\n\n      final DocIdSet cached = cache.get(reader);\n      if (cached != null) return cached;\n    } finally {\n      lock.unlock();\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n    if (docIdSet != null) {\n      lock.lock();\n      try {\n        cache.put(reader, docIdSet);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    lock.lock();\n    try {\n      if (cache == null) {\n        cache = new WeakHashMap<IndexReader,DocIdSet>();\n      }\n\n      final DocIdSet cached = cache.get(reader);\n      if (cached != null) return cached;\n    } finally {\n      lock.unlock();\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n    if (docIdSet != null) {\n      lock.lock();\n      try {\n        cache.put(reader, docIdSet);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbf497fc92342be81ff184a144dfa7c96264116b","date":1275079529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? MultiFields.getDeletedDocs(reader) : coreKey;\n\n    DocIdSet docIdSet = cache.get(reader, coreKey, delCoreKey);\n    if (docIdSet != null) {\n      hitCount++;\n      return docIdSet;\n    }\n\n    missCount++;\n\n    // cache miss\n    docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      cache.put(coreKey, delCoreKey, docIdSet);\n    }\n    \n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    lock.lock();\n    try {\n      if (cache == null) {\n        cache = new WeakHashMap<IndexReader,DocIdSet>();\n      }\n\n      final DocIdSet cached = cache.get(reader);\n      if (cached != null) return cached;\n    } finally {\n      lock.unlock();\n    }\n\n    final DocIdSet docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n    if (docIdSet != null) {\n      lock.lock();\n      try {\n        cache.put(reader, docIdSet);\n      } finally {\n        lock.unlock();\n      }\n    }\n    \n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df3efec034da1483899681baabb1df029e8628c4","date":1294243646,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    DocIdSet docIdSet = cache.get(reader, coreKey, delCoreKey);\n    if (docIdSet != null) {\n      hitCount++;\n      return docIdSet;\n    }\n\n    missCount++;\n\n    // cache miss\n    docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      cache.put(coreKey, delCoreKey, docIdSet);\n    }\n    \n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? MultiFields.getDeletedDocs(reader) : coreKey;\n\n    DocIdSet docIdSet = cache.get(reader, coreKey, delCoreKey);\n    if (docIdSet != null) {\n      hitCount++;\n      return docIdSet;\n    }\n\n    missCount++;\n\n    // cache miss\n    docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      cache.put(coreKey, delCoreKey, docIdSet);\n    }\n    \n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    DocIdSet docIdSet = cache.get(reader, coreKey, delCoreKey);\n    if (docIdSet != null) {\n      hitCount++;\n      return docIdSet;\n    }\n\n    missCount++;\n\n    // cache miss\n    docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      cache.put(coreKey, delCoreKey, docIdSet);\n    }\n    \n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? MultiFields.getDeletedDocs(reader) : coreKey;\n\n    DocIdSet docIdSet = cache.get(reader, coreKey, delCoreKey);\n    if (docIdSet != null) {\n      hitCount++;\n      return docIdSet;\n    }\n\n    missCount++;\n\n    // cache miss\n    docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      cache.put(coreKey, delCoreKey, docIdSet);\n    }\n    \n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    DocIdSet docIdSet = cache.get(reader, coreKey, delCoreKey);\n    if (docIdSet != null) {\n      hitCount++;\n      return docIdSet;\n    }\n\n    missCount++;\n\n    // cache miss\n    docIdSet = docIdSetToCache(filter.getDocIdSet(context), reader);\n\n    if (docIdSet != null) {\n      cache.put(coreKey, delCoreKey, docIdSet);\n    }\n    \n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    DocIdSet docIdSet = cache.get(reader, coreKey, delCoreKey);\n    if (docIdSet != null) {\n      hitCount++;\n      return docIdSet;\n    }\n\n    missCount++;\n\n    // cache miss\n    docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      cache.put(coreKey, delCoreKey, docIdSet);\n    }\n    \n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? MultiFields.getDeletedDocs(reader) : coreKey;\n\n    DocIdSet docIdSet = cache.get(reader, coreKey, delCoreKey);\n    if (docIdSet != null) {\n      hitCount++;\n      return docIdSet;\n    }\n\n    missCount++;\n\n    // cache miss\n    docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      cache.put(coreKey, delCoreKey, docIdSet);\n    }\n    \n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    DocIdSet docIdSet = cache.get(reader, coreKey, delCoreKey);\n    if (docIdSet != null) {\n      hitCount++;\n      return docIdSet;\n    }\n\n    missCount++;\n\n    // cache miss\n    docIdSet = docIdSetToCache(filter.getDocIdSet(reader), reader);\n\n    if (docIdSet != null) {\n      cache.put(coreKey, delCoreKey, docIdSet);\n    }\n    \n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df3efec034da1483899681baabb1df029e8628c4":["cbf497fc92342be81ff184a144dfa7c96264116b"],"70ad682703b8585f5d0a637efec044d57ec05efb":["cbf497fc92342be81ff184a144dfa7c96264116b","df3efec034da1483899681baabb1df029e8628c4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["df3efec034da1483899681baabb1df029e8628c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["cbf497fc92342be81ff184a144dfa7c96264116b","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cbf497fc92342be81ff184a144dfa7c96264116b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"df3efec034da1483899681baabb1df029e8628c4":["70ad682703b8585f5d0a637efec044d57ec05efb","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cbf497fc92342be81ff184a144dfa7c96264116b":["df3efec034da1483899681baabb1df029e8628c4","70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cbf497fc92342be81ff184a144dfa7c96264116b"]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}