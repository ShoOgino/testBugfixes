{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","commits":[{"id":"ac14bdd59867c398bdb1a9cc50583bd3c93593e5","date":1382646404,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    Throwable t = null;\n    for (Long gen : dvProducersGens) {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      try {\n        dvp.decRef();\n      } catch (Throwable th) {\n        if (t != null) {\n          t = th;\n        }\n      }\n    }\n    if (t != null) {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd","date":1491865645,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","sourceNew":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    Throwable t = null;\n    for (Long gen : dvProducersGens) {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      try {\n        dvp.decRef();\n      } catch (Throwable th) {\n        if (t == null) {\n          t = th;\n        }\n      }\n    }\n    if (t != null) {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","sourceOld":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    Throwable t = null;\n    for (Long gen : dvProducersGens) {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      try {\n        dvp.decRef();\n      } catch (Throwable th) {\n        if (t != null) {\n          t = th;\n        }\n      }\n    }\n    if (t != null) {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","bugFix":["ac14bdd59867c398bdb1a9cc50583bd3c93593e5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","sourceNew":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    Throwable t = null;\n    for (Long gen : dvProducersGens) {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      try {\n        dvp.decRef();\n      } catch (Throwable th) {\n        if (t == null) {\n          t = th;\n        }\n      }\n    }\n    if (t != null) {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","sourceOld":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    Throwable t = null;\n    for (Long gen : dvProducersGens) {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      try {\n        dvp.decRef();\n      } catch (Throwable th) {\n        if (t != null) {\n          t = th;\n        }\n      }\n    }\n    if (t != null) {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","sourceNew":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    Throwable t = null;\n    for (Long gen : dvProducersGens) {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      try {\n        dvp.decRef();\n      } catch (Throwable th) {\n        if (t == null) {\n          t = th;\n        }\n      }\n    }\n\n    if (t != null) {\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","sourceOld":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    Throwable t = null;\n    for (Long gen : dvProducersGens) {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      try {\n        dvp.decRef();\n      } catch (Throwable th) {\n        if (t == null) {\n          t = th;\n        }\n      }\n    }\n    if (t != null) {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","sourceNew":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    Throwable t = null;\n    for (Long gen : dvProducersGens) {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      try {\n        dvp.decRef();\n      } catch (Throwable th) {\n        if (t == null) {\n          t = th;\n        }\n      }\n    }\n\n    if (t != null) {\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","sourceOld":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    Throwable t = null;\n    for (Long gen : dvProducersGens) {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      try {\n        dvp.decRef();\n      } catch (Throwable th) {\n        if (t == null) {\n          t = th;\n        }\n      }\n    }\n    if (t != null) {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d66d86a8b184a86bcaebcf6e15fcef486e0876","date":1521539412,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","sourceNew":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    IOUtils.applyToAll(dvProducersGens, gen -> {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      dvp.decRef();\n    });\n  }\n\n","sourceOld":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    Throwable t = null;\n    for (Long gen : dvProducersGens) {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      try {\n        dvp.decRef();\n      } catch (Throwable th) {\n        if (t == null) {\n          t = th;\n        }\n      }\n    }\n\n    if (t != null) {\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentDocValues#decRef(List[Long]).mjava","sourceNew":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    IOUtils.applyToAll(dvProducersGens, gen -> {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      dvp.decRef();\n    });\n  }\n\n","sourceOld":"  /**\n   * Decrement the reference count of the given {@link DocValuesProducer}\n   * generations. \n   */\n  synchronized void decRef(List<Long> dvProducersGens) throws IOException {\n    Throwable t = null;\n    for (Long gen : dvProducersGens) {\n      RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);\n      assert dvp != null : \"gen=\" + gen;\n      try {\n        dvp.decRef();\n      } catch (Throwable th) {\n        if (t == null) {\n          t = th;\n        }\n      }\n    }\n\n    if (t != null) {\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ac14bdd59867c398bdb1a9cc50583bd3c93593e5"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac14bdd59867c398bdb1a9cc50583bd3c93593e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd":["ac14bdd59867c398bdb1a9cc50583bd3c93593e5"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","e9017cf144952056066919f1ebc7897ff9bd71b1","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac14bdd59867c398bdb1a9cc50583bd3c93593e5"],"ac14bdd59867c398bdb1a9cc50583bd3c93593e5":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}