{"path":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","commits":[{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","sourceNew":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        long asLong = bytesRef.asLong();\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(int docCount) throws IOException {\n      initDataOut(PACKED);\n      datOut.writeLong(minValue);\n      assert array.type() == ValueType.FIXED_INTS_64;\n      final long[] docToValue = (long[])array.getArray();\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      final int limit = docToValue.length > docCount ? docCount\n          : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","sourceNew":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        long asLong = bytesRef.asLong();\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        long asLong = bytesRef.asLong();\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a65994c1e63cc607f3176b95dba35bb4e58b69f","date":1322143796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","sourceNew":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        byte[] bytes = bytesRef.bytes;\n        int offset = bytesRef.offset;\n        long asLong =  \n           (((long)(bytes[offset+0] & 0xff) << 56) |\n            ((long)(bytes[offset+1] & 0xff) << 48) |\n            ((long)(bytes[offset+2] & 0xff) << 40) |\n            ((long)(bytes[offset+3] & 0xff) << 32) |\n            ((long)(bytes[offset+4] & 0xff) << 24) |\n            ((long)(bytes[offset+5] & 0xff) << 16) |\n            ((long)(bytes[offset+6] & 0xff) <<  8) |\n            ((long)(bytes[offset+7] & 0xff)));\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        long asLong = bytesRef.asLong();\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n    }\n\n","bugFix":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","sourceNew":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        byte[] bytes = bytesRef.bytes;\n        int offset = bytesRef.offset;\n        long asLong =  \n           (((long)(bytes[offset+0] & 0xff) << 56) |\n            ((long)(bytes[offset+1] & 0xff) << 48) |\n            ((long)(bytes[offset+2] & 0xff) << 40) |\n            ((long)(bytes[offset+3] & 0xff) << 32) |\n            ((long)(bytes[offset+4] & 0xff) << 24) |\n            ((long)(bytes[offset+5] & 0xff) << 16) |\n            ((long)(bytes[offset+6] & 0xff) <<  8) |\n            ((long)(bytes[offset+7] & 0xff)));\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        byte[] bytes = bytesRef.bytes;\n        int offset = bytesRef.offset;\n        long asLong =  \n           (((long)(bytes[offset+0] & 0xff) << 56) |\n            ((long)(bytes[offset+1] & 0xff) << 48) |\n            ((long)(bytes[offset+2] & 0xff) << 40) |\n            ((long)(bytes[offset+3] & 0xff) << 32) |\n            ((long)(bytes[offset+4] & 0xff) << 24) |\n            ((long)(bytes[offset+5] & 0xff) << 16) |\n            ((long)(bytes[offset+6] & 0xff) <<  8) |\n            ((long)(bytes[offset+7] & 0xff)));\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","sourceNew":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        byte[] bytes = bytesRef.bytes;\n        int offset = bytesRef.offset;\n        long asLong =  \n           (((long)(bytes[offset+0] & 0xff) << 56) |\n            ((long)(bytes[offset+1] & 0xff) << 48) |\n            ((long)(bytes[offset+2] & 0xff) << 40) |\n            ((long)(bytes[offset+3] & 0xff) << 32) |\n            ((long)(bytes[offset+4] & 0xff) << 24) |\n            ((long)(bytes[offset+5] & 0xff) << 16) |\n            ((long)(bytes[offset+6] & 0xff) <<  8) |\n            ((long)(bytes[offset+7] & 0xff)));\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        byte[] bytes = bytesRef.bytes;\n        int offset = bytesRef.offset;\n        long asLong =  \n           (((long)(bytes[offset+0] & 0xff) << 56) |\n            ((long)(bytes[offset+1] & 0xff) << 48) |\n            ((long)(bytes[offset+2] & 0xff) << 40) |\n            ((long)(bytes[offset+3] & 0xff) << 32) |\n            ((long)(bytes[offset+4] & 0xff) << 24) |\n            ((long)(bytes[offset+5] & 0xff) << 16) |\n            ((long)(bytes[offset+6] & 0xff) <<  8) |\n            ((long)(bytes[offset+7] & 0xff)));\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a65994c1e63cc607f3176b95dba35bb4e58b69f":["e128967bca58657bc0039d4bfe631e63e81f1977"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["1a65994c1e63cc607f3176b95dba35bb4e58b69f"],"e128967bca58657bc0039d4bfe631e63e81f1977":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["1a65994c1e63cc607f3176b95dba35bb4e58b69f","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"1a65994c1e63cc607f3176b95dba35bb4e58b69f":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["e128967bca58657bc0039d4bfe631e63e81f1977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e128967bca58657bc0039d4bfe631e63e81f1977":["1a65994c1e63cc607f3176b95dba35bb4e58b69f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}