{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#commit(boolean).mjava","commits":[{"id":"0427ffac82e34aebbe2de62ab1192d8a60155b99","date":1552644016,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#commit(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public long commit(boolean flushConcurrently) throws IOException {\n    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    if (flushConcurrently) {\n      List<Throwable> throwableList = new CopyOnWriteArrayList<>();\n      Thread thread = new Thread(() -> {\n        try {\n          flushAllBuffersSequentially();\n        } catch (Throwable e) {\n          throwableList.add(e);\n        }\n      });\n      thread.start();\n      try {\n        return w.commit();\n      } catch (Throwable t) {\n        throwableList.add(t);\n      } finally {\n        try {\n          // make sure we wait for the thread to join otherwise it might still be processing events\n          // and the IW won't be fully closed in the case of a fatal exception\n          thread.join();\n        } catch (InterruptedException e) {\n          throwableList.add(e);\n        }\n      }\n      if (throwableList.size() != 0) {\n        Throwable primary = throwableList.get(0);\n        for (int i = 1; i < throwableList.size(); i++) {\n          primary.addSuppressed(throwableList.get(i));\n        }\n        if (primary instanceof IOException) {\n          throw (IOException)primary;\n        } else if (primary instanceof RuntimeException) {\n          throw (RuntimeException)primary;\n        } else {\n          throw new AssertionError(primary);\n        }\n      }\n\n    }\n    return w.commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e84628e1e00d06556b67af150a13dbfb1849a818","date":1588191102,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#commit(boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#commit(boolean).mjava","sourceNew":"  public long commit(boolean flushConcurrently) throws IOException {\n    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, config);\n    if (flushConcurrently) {\n      List<Throwable> throwableList = new CopyOnWriteArrayList<>();\n      Thread thread = new Thread(() -> {\n        try {\n          flushAllBuffersSequentially();\n        } catch (Throwable e) {\n          throwableList.add(e);\n        }\n      });\n      thread.start();\n      try {\n        return w.commit();\n      } catch (Throwable t) {\n        throwableList.add(t);\n      } finally {\n        try {\n          // make sure we wait for the thread to join otherwise it might still be processing events\n          // and the IW won't be fully closed in the case of a fatal exception\n          thread.join();\n        } catch (InterruptedException e) {\n          throwableList.add(e);\n        }\n      }\n      if (throwableList.size() != 0) {\n        Throwable primary = throwableList.get(0);\n        for (int i = 1; i < throwableList.size(); i++) {\n          primary.addSuppressed(throwableList.get(i));\n        }\n        if (primary instanceof IOException) {\n          throw (IOException)primary;\n        } else if (primary instanceof RuntimeException) {\n          throw (RuntimeException)primary;\n        } else {\n          throw new AssertionError(primary);\n        }\n      }\n\n    }\n    return w.commit();\n  }\n\n","sourceOld":"  public long commit(boolean flushConcurrently) throws IOException {\n    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    if (flushConcurrently) {\n      List<Throwable> throwableList = new CopyOnWriteArrayList<>();\n      Thread thread = new Thread(() -> {\n        try {\n          flushAllBuffersSequentially();\n        } catch (Throwable e) {\n          throwableList.add(e);\n        }\n      });\n      thread.start();\n      try {\n        return w.commit();\n      } catch (Throwable t) {\n        throwableList.add(t);\n      } finally {\n        try {\n          // make sure we wait for the thread to join otherwise it might still be processing events\n          // and the IW won't be fully closed in the case of a fatal exception\n          thread.join();\n        } catch (InterruptedException e) {\n          throwableList.add(e);\n        }\n      }\n      if (throwableList.size() != 0) {\n        Throwable primary = throwableList.get(0);\n        for (int i = 1; i < throwableList.size(); i++) {\n          primary.addSuppressed(throwableList.get(i));\n        }\n        if (primary instanceof IOException) {\n          throw (IOException)primary;\n        } else if (primary instanceof RuntimeException) {\n          throw (RuntimeException)primary;\n        } else {\n          throw new AssertionError(primary);\n        }\n      }\n\n    }\n    return w.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e84628e1e00d06556b67af150a13dbfb1849a818":["0427ffac82e34aebbe2de62ab1192d8a60155b99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0427ffac82e34aebbe2de62ab1192d8a60155b99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e84628e1e00d06556b67af150a13dbfb1849a818"]},"commit2Childs":{"e84628e1e00d06556b67af150a13dbfb1849a818":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0427ffac82e34aebbe2de62ab1192d8a60155b99"],"0427ffac82e34aebbe2de62ab1192d8a60155b99":["e84628e1e00d06556b67af150a13dbfb1849a818"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}