{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortedNumericDocValuesField().mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortedNumericDocValuesField().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedNumericDocValuesField() throws Exception {\n    for(LeafReaderContext ctx : sortedReader.leaves()) {\n      LeafReader reader = ctx.reader();\n      SortedNumericDocValues dv = reader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n      int maxDoc = reader.maxDoc();\n      for (int doc = 0; doc < maxDoc; doc++) {\n        dv.setDocument(doc);\n        assertEquals(2, dv.count());\n        int id = Integer.parseInt(reader.document(doc).get(ID_FIELD));\n        assertEquals(\"incorrect sorted-numeric DocValues for doc \" + doc, id, dv.valueAt(0));\n        assertEquals(\"incorrect sorted-numeric DocValues for doc \" + doc, id + 1, dv.valueAt(1));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ff25cb7bb787cbe9d05740c89a527ddd2617c16","date":1462702859,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortedNumericDocValuesField().mjava","sourceNew":null,"sourceOld":"  public void testSortedNumericDocValuesField() throws Exception {\n    for(LeafReaderContext ctx : sortedReader.leaves()) {\n      LeafReader reader = ctx.reader();\n      SortedNumericDocValues dv = reader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n      int maxDoc = reader.maxDoc();\n      for (int doc = 0; doc < maxDoc; doc++) {\n        dv.setDocument(doc);\n        assertEquals(2, dv.count());\n        int id = Integer.parseInt(reader.document(doc).get(ID_FIELD));\n        assertEquals(\"incorrect sorted-numeric DocValues for doc \" + doc, id, dv.valueAt(0));\n        assertEquals(\"incorrect sorted-numeric DocValues for doc \" + doc, id + 1, dv.valueAt(1));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ff25cb7bb787cbe9d05740c89a527ddd2617c16":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["4ff25cb7bb787cbe9d05740c89a527ddd2617c16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ff25cb7bb787cbe9d05740c89a527ddd2617c16":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ff25cb7bb787cbe9d05740c89a527ddd2617c16","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}