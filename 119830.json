{"path":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","sourceNew":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random, 101, 10000);\n    byte data[] = new byte[datalen];\n    random.nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread((IndexInput) input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","sourceOld":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random, 101, 10000);\n    byte data[] = new byte[datalen];\n    random.nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread((IndexInput) input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","sourceNew":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread((IndexInput) input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","sourceOld":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random, 101, 10000);\n    byte data[] = new byte[datalen];\n    random.nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread((IndexInput) input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","sourceNew":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread(input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","sourceOld":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread((IndexInput) input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","sourceNew":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread(input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","sourceOld":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread((IndexInput) input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66ad5d52334c6be735b490059924589a69b97bd6","date":1347452151,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","sourceNew":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    outputHeader.copyBytes(input, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread(input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","sourceOld":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    input.copyBytes(outputHeader, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread(input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","bugFix":["d99afa1c46b08bf4cb2d9a791ea5f5e0391d6cac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","sourceNew":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    outputHeader.copyBytes(input, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread(input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","sourceOld":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = _TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    outputHeader.copyBytes(input, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread(input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytesWithThreads(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytesWithThreads().mjava","sourceNew":"  public static void testCopyBytesWithThreads(Directory d) throws Exception {\n    int datalen = TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    outputHeader.copyBytes(input, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread(input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","sourceOld":"  // LUCENE-3541\n  public void testCopyBytesWithThreads() throws Exception {\n    int datalen = TestUtil.nextInt(random(), 101, 10000);\n    byte data[] = new byte[datalen];\n    random().nextBytes(data);\n    \n    Directory d = newDirectory();\n    IndexOutput output = d.createOutput(\"data\", IOContext.DEFAULT);\n    output.writeBytes(data, 0, datalen);\n    output.close();\n    \n    IndexInput input = d.openInput(\"data\", IOContext.DEFAULT);\n    IndexOutput outputHeader = d.createOutput(\"header\", IOContext.DEFAULT);\n    // copy our 100-byte header\n    outputHeader.copyBytes(input, 100);\n    outputHeader.close();\n    \n    // now make N copies of the remaining bytes\n    CopyThread copies[] = new CopyThread[10];\n    for (int i = 0; i < copies.length; i++) {\n      copies[i] = new CopyThread(input.clone(), d.createOutput(\"copy\" + i, IOContext.DEFAULT));\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].start();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      copies[i].join();\n    }\n    \n    for (int i = 0; i < copies.length; i++) {\n      IndexInput copiedData = d.openInput(\"copy\" + i, IOContext.DEFAULT);\n      byte[] dataCopy = new byte[datalen];\n      System.arraycopy(data, 0, dataCopy, 0, 100); // copy the header for easy testing\n      copiedData.readBytes(dataCopy, 100, datalen-100);\n      assertArrayEquals(data, dataCopy);\n      copiedData.close();\n    }\n    input.close();\n    d.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","7460755aa94143153400f49c8ac2746f5d092e1a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["66ad5d52334c6be735b490059924589a69b97bd6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c15a75016387504d70a40cba6e9314b8885307f0":["6613659748fe4411a7dcf85266e55db1f95f7315"],"66ad5d52334c6be735b490059924589a69b97bd6":["7460755aa94143153400f49c8ac2746f5d092e1a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7460755aa94143153400f49c8ac2746f5d092e1a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c15a75016387504d70a40cba6e9314b8885307f0"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["c15a75016387504d70a40cba6e9314b8885307f0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"66ad5d52334c6be735b490059924589a69b97bd6":["6613659748fe4411a7dcf85266e55db1f95f7315"],"c15a75016387504d70a40cba6e9314b8885307f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["001b25b42373b22a52f399dbf072f1224632e8e6","7460755aa94143153400f49c8ac2746f5d092e1a"],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","66ad5d52334c6be735b490059924589a69b97bd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}