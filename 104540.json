{"path":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","sourceNew":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","sourceOld":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","sourceNew":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","sourceOld":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","sourceNew":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","sourceOld":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3859e567816d5987602f2a7ae2469fcdf17f745e","date":1329895924,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","sourceNew":"    double dist(double lat, double lon) {\n      double latRad = Math.toRadians(lat);\n      double lonRad = Math.toRadians(lon);\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","sourceOld":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","sourceNew":"    double dist(double lat, double lon) {\n      double latRad = Math.toRadians(lat);\n      double lonRad = Math.toRadians(lon);\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","sourceOld":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8726333bca804ff1ebd79d1310561641b5dfcb9e","date":1331697951,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","sourceNew":"    double dist(double lat, double lon) {\n      double latRad = lat * HaversineConstFunction.DEGREES_TO_RADIANS;\n      double lonRad = lon * HaversineConstFunction.DEGREES_TO_RADIANS;\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","sourceOld":"    double dist(double lat, double lon) {\n      double latRad = Math.toRadians(lat);\n      double lonRad = Math.toRadians(lon);\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SpatialDistanceQuery[LatLonType].SpatialScorer#dist(double,double).mjava","sourceNew":"    double dist(double lat, double lon) {\n      double latRad = lat * DistanceUtils.DEGREES_TO_RADIANS;\n      double lonRad = lon * DistanceUtils.DEGREES_TO_RADIANS;\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","sourceOld":"    double dist(double lat, double lon) {\n      double latRad = lat * HaversineConstFunction.DEGREES_TO_RADIANS;\n      double lonRad = lon * HaversineConstFunction.DEGREES_TO_RADIANS;\n      \n      // haversine, specialized to avoid a cos() call on latCenterRad\n      double diffX = latCenterRad - latRad;\n      double diffY = lonCenterRad - lonRad;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n      double result = (planetRadius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n\n      // save the results of this calculation\n      lastDistDoc = doc;\n      lastDist = result;\n      \n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"da956410d7a790f567af4e7e94584fb0930212f2":["8726333bca804ff1ebd79d1310561641b5dfcb9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8726333bca804ff1ebd79d1310561641b5dfcb9e":["e47768b261c28e7e6032060e8331475c81057953"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e47768b261c28e7e6032060e8331475c81057953":["c26f00b574427b55127e869b935845554afde1fa","3859e567816d5987602f2a7ae2469fcdf17f745e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da956410d7a790f567af4e7e94584fb0930212f2"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e47768b261c28e7e6032060e8331475c81057953","3859e567816d5987602f2a7ae2469fcdf17f745e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"da956410d7a790f567af4e7e94584fb0930212f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8726333bca804ff1ebd79d1310561641b5dfcb9e":["da956410d7a790f567af4e7e94584fb0930212f2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e47768b261c28e7e6032060e8331475c81057953":["8726333bca804ff1ebd79d1310561641b5dfcb9e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}