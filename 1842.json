{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertSame(Collection[BytesRef],Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertSame(Collection[BytesRef],Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#assertSame(Collection[BytesRef],LightAutomaton).mjava","sourceNew":"  private void assertSame(Collection<BytesRef> terms, Automaton a) {\n\n    try {\n      assertTrue(Operations.isFinite(a));\n      assertFalse(Operations.isTotal(a));\n\n      Automaton detA = Operations.determinize(a);\n\n      // Make sure all terms are accepted:\n      IntsRef scratch = new IntsRef();\n      for(BytesRef term : terms) {\n        Util.toIntsRef(term, scratch);\n        assertTrue(\"failed to accept term=\" + term.utf8ToString(), Operations.run(detA, term.utf8ToString()));\n      }\n\n      // Use getFiniteStrings:\n      Set<IntsRef> expected = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRef intsRef = new IntsRef();\n        Util.toUTF32(term.utf8ToString(), intsRef);\n        expected.add(intsRef);\n      }\n      Set<IntsRef> actual = Operations.getFiniteStrings(a, -1);\n\n      if (expected.equals(actual) == false) {\n        System.out.println(\"FAILED:\");\n        for(IntsRef term : expected) {\n          if (actual.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" should be accepted but isn't\");\n          }\n        }\n        for(IntsRef term : actual) {\n          if (expected.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" is accepted but should not be\");\n          }\n        }\n        throw new AssertionError(\"mismatch\");\n      }\n\n      // Use sameLanguage:\n      Automaton a2 = Operations.removeDeadStates(Operations.determinize(unionTerms(terms)));\n      assertTrue(Operations.sameLanguage(a2, Operations.removeDeadStates(Operations.determinize(a))));\n\n      // Do same check, in UTF8 space\n      Automaton utf8 = randomNoOp(new UTF32ToUTF8().convert(a));\n    \n      Set<IntsRef> expected2 = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRef intsRef = new IntsRef();\n        Util.toIntsRef(term, intsRef);\n        expected2.add(intsRef);\n      }\n      assertEquals(expected2, Operations.getFiniteStrings(utf8, -1));\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST: FAILED: not same\");\n      System.out.println(\"  terms (count=\" + terms.size() + \"):\");\n      for(BytesRef term : terms) {\n        System.out.println(\"    \" + term);\n      }\n      System.out.println(\"  automaton:\");\n      System.out.println(a.toDot());\n      //a.writeDot(\"fail\");\n      throw ae;\n    }\n  }\n\n","sourceOld":"  private void assertSame(Collection<BytesRef> terms, LightAutomaton a) {\n\n    try {\n      assertTrue(SpecialOperations.isFinite(a));\n      assertFalse(BasicOperations.isTotal(a));\n\n      LightAutomaton detA = BasicOperations.determinize(a);\n\n      // Make sure all terms are accepted:\n      IntsRef scratch = new IntsRef();\n      for(BytesRef term : terms) {\n        Util.toIntsRef(term, scratch);\n        assertTrue(\"failed to accept term=\" + term.utf8ToString(), BasicOperations.run(detA, term.utf8ToString()));\n      }\n\n      // Use getFiniteStrings:\n      Set<IntsRef> expected = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRef intsRef = new IntsRef();\n        Util.toUTF32(term.utf8ToString(), intsRef);\n        expected.add(intsRef);\n      }\n      Set<IntsRef> actual = SpecialOperations.getFiniteStrings(a, -1);\n\n      if (expected.equals(actual) == false) {\n        System.out.println(\"FAILED:\");\n        for(IntsRef term : expected) {\n          if (actual.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" should be accepted but isn't\");\n          }\n        }\n        for(IntsRef term : actual) {\n          if (expected.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" is accepted but should not be\");\n          }\n        }\n        throw new AssertionError(\"mismatch\");\n      }\n\n      // Use sameLanguage:\n      LightAutomaton a2 = BasicOperations.removeDeadStates(BasicOperations.determinize(unionTerms(terms)));\n      assertTrue(BasicOperations.sameLanguage(a2, BasicOperations.removeDeadStates(BasicOperations.determinize(a))));\n\n      // Do same check, in UTF8 space\n      LightAutomaton utf8 = randomNoOp(new UTF32ToUTF8Light().convert(a));\n    \n      Set<IntsRef> expected2 = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRef intsRef = new IntsRef();\n        Util.toIntsRef(term, intsRef);\n        expected2.add(intsRef);\n      }\n      assertEquals(expected2, SpecialOperations.getFiniteStrings(utf8, -1));\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST: FAILED: not same\");\n      System.out.println(\"  terms (count=\" + terms.size() + \"):\");\n      for(BytesRef term : terms) {\n        System.out.println(\"    \" + term);\n      }\n      System.out.println(\"  automaton:\");\n      System.out.println(a.toDot());\n      //a.writeDot(\"fail\");\n      throw ae;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertSame(Collection[BytesRef],Automaton).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSame(Collection<BytesRef> terms, Automaton a) {\n\n    try {\n      assertTrue(Operations.isFinite(a));\n      assertFalse(Operations.isTotal(a));\n\n      Automaton detA = Operations.determinize(a);\n\n      // Make sure all terms are accepted:\n      IntsRef scratch = new IntsRef();\n      for(BytesRef term : terms) {\n        Util.toIntsRef(term, scratch);\n        assertTrue(\"failed to accept term=\" + term.utf8ToString(), Operations.run(detA, term.utf8ToString()));\n      }\n\n      // Use getFiniteStrings:\n      Set<IntsRef> expected = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRef intsRef = new IntsRef();\n        Util.toUTF32(term.utf8ToString(), intsRef);\n        expected.add(intsRef);\n      }\n      Set<IntsRef> actual = Operations.getFiniteStrings(a, -1);\n\n      if (expected.equals(actual) == false) {\n        System.out.println(\"FAILED:\");\n        for(IntsRef term : expected) {\n          if (actual.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" should be accepted but isn't\");\n          }\n        }\n        for(IntsRef term : actual) {\n          if (expected.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" is accepted but should not be\");\n          }\n        }\n        throw new AssertionError(\"mismatch\");\n      }\n\n      // Use sameLanguage:\n      Automaton a2 = Operations.removeDeadStates(Operations.determinize(unionTerms(terms)));\n      assertTrue(Operations.sameLanguage(a2, Operations.removeDeadStates(Operations.determinize(a))));\n\n      // Do same check, in UTF8 space\n      Automaton utf8 = randomNoOp(new UTF32ToUTF8().convert(a));\n    \n      Set<IntsRef> expected2 = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRef intsRef = new IntsRef();\n        Util.toIntsRef(term, intsRef);\n        expected2.add(intsRef);\n      }\n      assertEquals(expected2, Operations.getFiniteStrings(utf8, -1));\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST: FAILED: not same\");\n      System.out.println(\"  terms (count=\" + terms.size() + \"):\");\n      for(BytesRef term : terms) {\n        System.out.println(\"    \" + term);\n      }\n      System.out.println(\"  automaton:\");\n      System.out.println(a.toDot());\n      //a.writeDot(\"fail\");\n      throw ae;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertSame(Collection[BytesRef],Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertSame(Collection[BytesRef],Automaton).mjava","sourceNew":"  private void assertSame(Collection<BytesRef> terms, Automaton a) {\n\n    try {\n      assertTrue(Operations.isFinite(a));\n      assertFalse(Operations.isTotal(a));\n\n      Automaton detA = Operations.determinize(a);\n\n      // Make sure all terms are accepted:\n      IntsRefBuilder scratch = new IntsRefBuilder();\n      for(BytesRef term : terms) {\n        Util.toIntsRef(term, scratch);\n        assertTrue(\"failed to accept term=\" + term.utf8ToString(), Operations.run(detA, term.utf8ToString()));\n      }\n\n      // Use getFiniteStrings:\n      Set<IntsRef> expected = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toUTF32(term.utf8ToString(), intsRef);\n        expected.add(intsRef.toIntsRef());\n      }\n      Set<IntsRef> actual = Operations.getFiniteStrings(a, -1);\n\n      if (expected.equals(actual) == false) {\n        System.out.println(\"FAILED:\");\n        for(IntsRef term : expected) {\n          if (actual.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" should be accepted but isn't\");\n          }\n        }\n        for(IntsRef term : actual) {\n          if (expected.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" is accepted but should not be\");\n          }\n        }\n        throw new AssertionError(\"mismatch\");\n      }\n\n      // Use sameLanguage:\n      Automaton a2 = Operations.removeDeadStates(Operations.determinize(unionTerms(terms)));\n      assertTrue(Operations.sameLanguage(a2, Operations.removeDeadStates(Operations.determinize(a))));\n\n      // Do same check, in UTF8 space\n      Automaton utf8 = randomNoOp(new UTF32ToUTF8().convert(a));\n    \n      Set<IntsRef> expected2 = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toIntsRef(term, intsRef);\n        expected2.add(intsRef.toIntsRef());\n      }\n      assertEquals(expected2, Operations.getFiniteStrings(utf8, -1));\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST: FAILED: not same\");\n      System.out.println(\"  terms (count=\" + terms.size() + \"):\");\n      for(BytesRef term : terms) {\n        System.out.println(\"    \" + term);\n      }\n      System.out.println(\"  automaton:\");\n      System.out.println(a.toDot());\n      //a.writeDot(\"fail\");\n      throw ae;\n    }\n  }\n\n","sourceOld":"  private void assertSame(Collection<BytesRef> terms, Automaton a) {\n\n    try {\n      assertTrue(Operations.isFinite(a));\n      assertFalse(Operations.isTotal(a));\n\n      Automaton detA = Operations.determinize(a);\n\n      // Make sure all terms are accepted:\n      IntsRef scratch = new IntsRef();\n      for(BytesRef term : terms) {\n        Util.toIntsRef(term, scratch);\n        assertTrue(\"failed to accept term=\" + term.utf8ToString(), Operations.run(detA, term.utf8ToString()));\n      }\n\n      // Use getFiniteStrings:\n      Set<IntsRef> expected = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRef intsRef = new IntsRef();\n        Util.toUTF32(term.utf8ToString(), intsRef);\n        expected.add(intsRef);\n      }\n      Set<IntsRef> actual = Operations.getFiniteStrings(a, -1);\n\n      if (expected.equals(actual) == false) {\n        System.out.println(\"FAILED:\");\n        for(IntsRef term : expected) {\n          if (actual.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" should be accepted but isn't\");\n          }\n        }\n        for(IntsRef term : actual) {\n          if (expected.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" is accepted but should not be\");\n          }\n        }\n        throw new AssertionError(\"mismatch\");\n      }\n\n      // Use sameLanguage:\n      Automaton a2 = Operations.removeDeadStates(Operations.determinize(unionTerms(terms)));\n      assertTrue(Operations.sameLanguage(a2, Operations.removeDeadStates(Operations.determinize(a))));\n\n      // Do same check, in UTF8 space\n      Automaton utf8 = randomNoOp(new UTF32ToUTF8().convert(a));\n    \n      Set<IntsRef> expected2 = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRef intsRef = new IntsRef();\n        Util.toIntsRef(term, intsRef);\n        expected2.add(intsRef);\n      }\n      assertEquals(expected2, Operations.getFiniteStrings(utf8, -1));\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST: FAILED: not same\");\n      System.out.println(\"  terms (count=\" + terms.size() + \"):\");\n      for(BytesRef term : terms) {\n        System.out.println(\"    \" + term);\n      }\n      System.out.println(\"  automaton:\");\n      System.out.println(a.toDot());\n      //a.writeDot(\"fail\");\n      throw ae;\n    }\n  }\n\n","bugFix":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertSame(Collection[BytesRef],Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertSame(Collection[BytesRef],Automaton).mjava","sourceNew":"  private void assertSame(Collection<BytesRef> terms, Automaton a) {\n\n    try {\n      assertTrue(Operations.isFinite(a));\n      assertFalse(Operations.isTotal(a));\n\n      Automaton detA = Operations.determinize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n\n      // Make sure all terms are accepted:\n      IntsRefBuilder scratch = new IntsRefBuilder();\n      for(BytesRef term : terms) {\n        Util.toIntsRef(term, scratch);\n        assertTrue(\"failed to accept term=\" + term.utf8ToString(), Operations.run(detA, term.utf8ToString()));\n      }\n\n      // Use getFiniteStrings:\n      Set<IntsRef> expected = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toUTF32(term.utf8ToString(), intsRef);\n        expected.add(intsRef.toIntsRef());\n      }\n      Set<IntsRef> actual = Operations.getFiniteStrings(a, -1);\n\n      if (expected.equals(actual) == false) {\n        System.out.println(\"FAILED:\");\n        for(IntsRef term : expected) {\n          if (actual.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" should be accepted but isn't\");\n          }\n        }\n        for(IntsRef term : actual) {\n          if (expected.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" is accepted but should not be\");\n          }\n        }\n        throw new AssertionError(\"mismatch\");\n      }\n\n      // Use sameLanguage:\n      Automaton a2 = Operations.removeDeadStates(Operations.determinize(unionTerms(terms),\n        DEFAULT_MAX_DETERMINIZED_STATES));\n      assertTrue(Operations.sameLanguage(a2, Operations.removeDeadStates(Operations.determinize(a,\n        DEFAULT_MAX_DETERMINIZED_STATES))));\n\n      // Do same check, in UTF8 space\n      Automaton utf8 = randomNoOp(new UTF32ToUTF8().convert(a));\n    \n      Set<IntsRef> expected2 = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toIntsRef(term, intsRef);\n        expected2.add(intsRef.toIntsRef());\n      }\n      assertEquals(expected2, Operations.getFiniteStrings(utf8, -1));\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST: FAILED: not same\");\n      System.out.println(\"  terms (count=\" + terms.size() + \"):\");\n      for(BytesRef term : terms) {\n        System.out.println(\"    \" + term);\n      }\n      System.out.println(\"  automaton:\");\n      System.out.println(a.toDot());\n      //a.writeDot(\"fail\");\n      throw ae;\n    }\n  }\n\n","sourceOld":"  private void assertSame(Collection<BytesRef> terms, Automaton a) {\n\n    try {\n      assertTrue(Operations.isFinite(a));\n      assertFalse(Operations.isTotal(a));\n\n      Automaton detA = Operations.determinize(a);\n\n      // Make sure all terms are accepted:\n      IntsRefBuilder scratch = new IntsRefBuilder();\n      for(BytesRef term : terms) {\n        Util.toIntsRef(term, scratch);\n        assertTrue(\"failed to accept term=\" + term.utf8ToString(), Operations.run(detA, term.utf8ToString()));\n      }\n\n      // Use getFiniteStrings:\n      Set<IntsRef> expected = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toUTF32(term.utf8ToString(), intsRef);\n        expected.add(intsRef.toIntsRef());\n      }\n      Set<IntsRef> actual = Operations.getFiniteStrings(a, -1);\n\n      if (expected.equals(actual) == false) {\n        System.out.println(\"FAILED:\");\n        for(IntsRef term : expected) {\n          if (actual.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" should be accepted but isn't\");\n          }\n        }\n        for(IntsRef term : actual) {\n          if (expected.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" is accepted but should not be\");\n          }\n        }\n        throw new AssertionError(\"mismatch\");\n      }\n\n      // Use sameLanguage:\n      Automaton a2 = Operations.removeDeadStates(Operations.determinize(unionTerms(terms)));\n      assertTrue(Operations.sameLanguage(a2, Operations.removeDeadStates(Operations.determinize(a))));\n\n      // Do same check, in UTF8 space\n      Automaton utf8 = randomNoOp(new UTF32ToUTF8().convert(a));\n    \n      Set<IntsRef> expected2 = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toIntsRef(term, intsRef);\n        expected2.add(intsRef.toIntsRef());\n      }\n      assertEquals(expected2, Operations.getFiniteStrings(utf8, -1));\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST: FAILED: not same\");\n      System.out.println(\"  terms (count=\" + terms.size() + \"):\");\n      for(BytesRef term : terms) {\n        System.out.println(\"    \" + term);\n      }\n      System.out.println(\"  automaton:\");\n      System.out.println(a.toDot());\n      //a.writeDot(\"fail\");\n      throw ae;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b2842292fa10ba000930b4d38a7f9abf20b589","date":1415179076,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertSame(Collection[BytesRef],Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertSame(Collection[BytesRef],Automaton).mjava","sourceNew":"  private void assertSame(Collection<BytesRef> terms, Automaton a) {\n\n    try {\n      assertTrue(Operations.isFinite(a));\n      assertFalse(Operations.isTotal(a));\n\n      Automaton detA = Operations.determinize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n\n      // Make sure all terms are accepted:\n      IntsRefBuilder scratch = new IntsRefBuilder();\n      for(BytesRef term : terms) {\n        Util.toIntsRef(term, scratch);\n        assertTrue(\"failed to accept term=\" + term.utf8ToString(), Operations.run(detA, term.utf8ToString()));\n      }\n\n      // Use getFiniteStrings:\n      Set<IntsRef> expected = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toUTF32(term.utf8ToString(), intsRef);\n        expected.add(intsRef.toIntsRef());\n      }\n      Set<IntsRef> actual = Operations.getFiniteStrings(a, -1);\n\n      if (expected.equals(actual) == false) {\n        System.out.println(\"FAILED:\");\n        for(IntsRef term : expected) {\n          if (actual.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" should be accepted but isn't\");\n          }\n        }\n        for(IntsRef term : actual) {\n          if (expected.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" is accepted but should not be\");\n          }\n        }\n        throw new AssertionError(\"mismatch\");\n      }\n\n      // Use sameLanguage:\n      Automaton a2 = Operations.removeDeadStates(Operations.determinize(unionTerms(terms),\n        Integer.MAX_VALUE));\n      assertTrue(Operations.sameLanguage(a2, Operations.removeDeadStates(Operations.determinize(a,\n        Integer.MAX_VALUE))));\n\n      // Do same check, in UTF8 space\n      Automaton utf8 = randomNoOp(new UTF32ToUTF8().convert(a));\n    \n      Set<IntsRef> expected2 = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toIntsRef(term, intsRef);\n        expected2.add(intsRef.toIntsRef());\n      }\n      assertEquals(expected2, Operations.getFiniteStrings(utf8, -1));\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST: FAILED: not same\");\n      System.out.println(\"  terms (count=\" + terms.size() + \"):\");\n      for(BytesRef term : terms) {\n        System.out.println(\"    \" + term);\n      }\n      System.out.println(\"  automaton:\");\n      System.out.println(a.toDot());\n      //a.writeDot(\"fail\");\n      throw ae;\n    }\n  }\n\n","sourceOld":"  private void assertSame(Collection<BytesRef> terms, Automaton a) {\n\n    try {\n      assertTrue(Operations.isFinite(a));\n      assertFalse(Operations.isTotal(a));\n\n      Automaton detA = Operations.determinize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n\n      // Make sure all terms are accepted:\n      IntsRefBuilder scratch = new IntsRefBuilder();\n      for(BytesRef term : terms) {\n        Util.toIntsRef(term, scratch);\n        assertTrue(\"failed to accept term=\" + term.utf8ToString(), Operations.run(detA, term.utf8ToString()));\n      }\n\n      // Use getFiniteStrings:\n      Set<IntsRef> expected = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toUTF32(term.utf8ToString(), intsRef);\n        expected.add(intsRef.toIntsRef());\n      }\n      Set<IntsRef> actual = Operations.getFiniteStrings(a, -1);\n\n      if (expected.equals(actual) == false) {\n        System.out.println(\"FAILED:\");\n        for(IntsRef term : expected) {\n          if (actual.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" should be accepted but isn't\");\n          }\n        }\n        for(IntsRef term : actual) {\n          if (expected.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" is accepted but should not be\");\n          }\n        }\n        throw new AssertionError(\"mismatch\");\n      }\n\n      // Use sameLanguage:\n      Automaton a2 = Operations.removeDeadStates(Operations.determinize(unionTerms(terms),\n        DEFAULT_MAX_DETERMINIZED_STATES));\n      assertTrue(Operations.sameLanguage(a2, Operations.removeDeadStates(Operations.determinize(a,\n        DEFAULT_MAX_DETERMINIZED_STATES))));\n\n      // Do same check, in UTF8 space\n      Automaton utf8 = randomNoOp(new UTF32ToUTF8().convert(a));\n    \n      Set<IntsRef> expected2 = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toIntsRef(term, intsRef);\n        expected2.add(intsRef.toIntsRef());\n      }\n      assertEquals(expected2, Operations.getFiniteStrings(utf8, -1));\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST: FAILED: not same\");\n      System.out.println(\"  terms (count=\" + terms.size() + \"):\");\n      for(BytesRef term : terms) {\n        System.out.println(\"    \" + term);\n      }\n      System.out.println(\"  automaton:\");\n      System.out.println(a.toDot());\n      //a.writeDot(\"fail\");\n      throw ae;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertSame(Collection[BytesRef],Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#assertSame(Collection[BytesRef],Automaton).mjava","sourceNew":"  private void assertSame(Collection<BytesRef> terms, Automaton a) {\n\n    try {\n      assertTrue(Operations.isFinite(a));\n      assertFalse(Operations.isTotal(a));\n\n      Automaton detA = Operations.determinize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n\n      // Make sure all terms are accepted:\n      IntsRefBuilder scratch = new IntsRefBuilder();\n      for(BytesRef term : terms) {\n        Util.toIntsRef(term, scratch);\n        assertTrue(\"failed to accept term=\" + term.utf8ToString(), Operations.run(detA, term.utf8ToString()));\n      }\n\n      // Use getFiniteStrings:\n      Set<IntsRef> expected = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toUTF32(term.utf8ToString(), intsRef);\n        expected.add(intsRef.toIntsRef());\n      }\n      Set<IntsRef> actual = TestOperations.getFiniteStrings(a);\n\n      if (expected.equals(actual) == false) {\n        System.out.println(\"FAILED:\");\n        for(IntsRef term : expected) {\n          if (actual.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" should be accepted but isn't\");\n          }\n        }\n        for(IntsRef term : actual) {\n          if (expected.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" is accepted but should not be\");\n          }\n        }\n        throw new AssertionError(\"mismatch\");\n      }\n\n      // Use sameLanguage:\n      Automaton a2 = Operations.removeDeadStates(Operations.determinize(unionTerms(terms),\n        Integer.MAX_VALUE));\n      assertTrue(Operations.sameLanguage(a2, Operations.removeDeadStates(Operations.determinize(a,\n        Integer.MAX_VALUE))));\n\n      // Do same check, in UTF8 space\n      Automaton utf8 = randomNoOp(new UTF32ToUTF8().convert(a));\n    \n      Set<IntsRef> expected2 = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toIntsRef(term, intsRef);\n        expected2.add(intsRef.toIntsRef());\n      }\n      assertEquals(expected2, TestOperations.getFiniteStrings(utf8));\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST: FAILED: not same\");\n      System.out.println(\"  terms (count=\" + terms.size() + \"):\");\n      for(BytesRef term : terms) {\n        System.out.println(\"    \" + term);\n      }\n      System.out.println(\"  automaton:\");\n      System.out.println(a.toDot());\n      //a.writeDot(\"fail\");\n      throw ae;\n    }\n  }\n\n","sourceOld":"  private void assertSame(Collection<BytesRef> terms, Automaton a) {\n\n    try {\n      assertTrue(Operations.isFinite(a));\n      assertFalse(Operations.isTotal(a));\n\n      Automaton detA = Operations.determinize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n\n      // Make sure all terms are accepted:\n      IntsRefBuilder scratch = new IntsRefBuilder();\n      for(BytesRef term : terms) {\n        Util.toIntsRef(term, scratch);\n        assertTrue(\"failed to accept term=\" + term.utf8ToString(), Operations.run(detA, term.utf8ToString()));\n      }\n\n      // Use getFiniteStrings:\n      Set<IntsRef> expected = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toUTF32(term.utf8ToString(), intsRef);\n        expected.add(intsRef.toIntsRef());\n      }\n      Set<IntsRef> actual = Operations.getFiniteStrings(a, -1);\n\n      if (expected.equals(actual) == false) {\n        System.out.println(\"FAILED:\");\n        for(IntsRef term : expected) {\n          if (actual.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" should be accepted but isn't\");\n          }\n        }\n        for(IntsRef term : actual) {\n          if (expected.contains(term) == false) {\n            System.out.println(\"  term=\" + term + \" is accepted but should not be\");\n          }\n        }\n        throw new AssertionError(\"mismatch\");\n      }\n\n      // Use sameLanguage:\n      Automaton a2 = Operations.removeDeadStates(Operations.determinize(unionTerms(terms),\n        Integer.MAX_VALUE));\n      assertTrue(Operations.sameLanguage(a2, Operations.removeDeadStates(Operations.determinize(a,\n        Integer.MAX_VALUE))));\n\n      // Do same check, in UTF8 space\n      Automaton utf8 = randomNoOp(new UTF32ToUTF8().convert(a));\n    \n      Set<IntsRef> expected2 = new HashSet<>();\n      for(BytesRef term : terms) {\n        IntsRefBuilder intsRef = new IntsRefBuilder();\n        Util.toIntsRef(term, intsRef);\n        expected2.add(intsRef.toIntsRef());\n      }\n      assertEquals(expected2, Operations.getFiniteStrings(utf8, -1));\n    } catch (AssertionError ae) {\n      System.out.println(\"TEST: FAILED: not same\");\n      System.out.println(\"  terms (count=\" + terms.size() + \"):\");\n      for(BytesRef term : terms) {\n        System.out.println(\"    \" + term);\n      }\n      System.out.println(\"  automaton:\");\n      System.out.println(a.toDot());\n      //a.writeDot(\"fail\");\n      throw ae;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["55b2842292fa10ba000930b4d38a7f9abf20b589"],"55b2842292fa10ba000930b4d38a7f9abf20b589":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55b2842292fa10ba000930b4d38a7f9abf20b589":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["55b2842292fa10ba000930b4d38a7f9abf20b589"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"5c84485629d80d203608e8975a1139de9933cc38":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}