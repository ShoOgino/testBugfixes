{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","commits":[{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    return LuceneTestCaseJ4.newIndexWriterConfig(r, v, a);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    return LuceneTestCaseJ4.newIndexWriterConfig(r, v, a);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    return LuceneTestCaseJ4.newIndexWriterConfig(r, v, a);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults */\n  public IndexWriterConfig newIndexWriterConfig(Version v, Analyzer a) {\n    return LuceneTestCaseJ4.newIndexWriterConfig(random, v, a);\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    return LuceneTestCaseJ4.newIndexWriterConfig(r, v, a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults */\n  public IndexWriterConfig newIndexWriterConfig(Version v, Analyzer a) {\n    return newIndexWriterConfig(random, v, a);\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    return LuceneTestCaseJ4.newIndexWriterConfig(r, v, a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13452165d8bf3d45a72f572aaed3c679735d3af2","date":1290101307,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    final IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    if (TEST_RANDOM_CODEC_PER_FIELD) {\n      c.setCodecProvider(randomCodecProvider);\n    }\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bce89597a7c3a4535b5b7f8100c2078e520f6e57","date":1290106041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    final IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    if (TEST_RANDOM_CODEC_PER_FIELD) {\n      c.setCodecProvider(randomCodecProvider);\n    }\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac","date":1290886721,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      if (r.nextInt(3) == 2) {\n        logmp.setMergeFactor(2);\n      } else {\n        logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n      }\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":["15bbd254c1506df5299c4df8c148262c7bd6301e","82d5bc05ad1c4710c0c32090d485203fa3ee8cc4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    c.setMergePolicy(newLogMergePolicy(r));\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      if (r.nextInt(3) == 2) {\n        logmp.setMergeFactor(2);\n      } else {\n        logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n      }\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    c.setMergePolicy(newLogMergePolicy(r));\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new LogDocMergePolicy());\n    }\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n    \n    if (c.getMergePolicy() instanceof LogMergePolicy) {\n      LogMergePolicy logmp = (LogMergePolicy) c.getMergePolicy();\n      logmp.setUseCompoundDocStore(r.nextBoolean());\n      logmp.setUseCompoundFile(r.nextBoolean());\n      logmp.setCalibrateSizeByDeletes(r.nextBoolean());\n      logmp.setMergeFactor(_TestUtil.nextInt(r, 2, 20));\n    }\n    \n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    c.setMergePolicy(newLogMergePolicy(r));\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    return LuceneTestCaseJ4.newIndexWriterConfig(r, v, a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    c.setMergePolicy(newLogMergePolicy(r));\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":null,"sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    c.setMergePolicy(newLogMergePolicy(r));\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    c.setMergePolicy(newLogMergePolicy(r));\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","15bbd254c1506df5299c4df8c148262c7bd6301e"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"c19f985e36a65cc969e8e564fe337a0d41512075":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"43b04c27924fe393e38e9f0986e32c634f261859":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["c19f985e36a65cc969e8e564fe337a0d41512075"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["13452165d8bf3d45a72f572aaed3c679735d3af2"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["43b04c27924fe393e38e9f0986e32c634f261859"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["43b04c27924fe393e38e9f0986e32c634f261859","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"43b04c27924fe393e38e9f0986e32c634f261859":["13452165d8bf3d45a72f572aaed3c679735d3af2","3bb13258feba31ab676502787ab2e1779f129b7a"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["43b04c27924fe393e38e9f0986e32c634f261859"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d4ce75c5c8181cb19bc310a09f2dc44481cfa1ac":["4e8cc373c801e54cec75daf9f52792cb4b17f536"]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}