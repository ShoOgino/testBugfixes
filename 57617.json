{"path":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.Reader.Source#binarySearch(BytesRef,int,int).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.Reader.Source#binarySearch(BytesRef,int,int).mjava","pathOld":"/dev/null","sourceNew":"      // TODO: share w/ FixedSortedBytesValues?\n      private LookupResult binarySearch(BytesRef b, int low, int high) {\n\n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          deref(mid);\n          final int cmp = comp.compare(bytesRef, b);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            lookupResult.ord = mid + 1;\n            lookupResult.found = true;\n            return lookupResult;\n          }\n        }\n        assert comp.compare(bytesRef, b) != 0;\n        lookupResult.ord = low;\n        lookupResult.found = false;\n        return lookupResult;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca","date":1289932456,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.Reader.Source#binarySearch(BytesRef,int,int).mjava","sourceNew":null,"sourceOld":"      // TODO: share w/ FixedSortedBytesValues?\n      private LookupResult binarySearch(BytesRef b, int low, int high) {\n\n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          deref(mid);\n          final int cmp = comp.compare(bytesRef, b);\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            lookupResult.ord = mid + 1;\n            lookupResult.found = true;\n            return lookupResult;\n          }\n        }\n        assert comp.compare(bytesRef, b) != 0;\n        lookupResult.ord = low;\n        lookupResult.found = false;\n        return lookupResult;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f60198ece724a6e96cd0b45f289cf42ff83d4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}