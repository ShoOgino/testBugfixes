{"path":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doPrevSetBit(BitSet,FixedBitSet).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doPrevSetBit(BitSet,FixedBitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#doPrevSetBit(BitSet,FixedBitSet).mjava","sourceNew":"  void doPrevSetBit(BitSet a, FixedBitSet b) {\n    int aa = a.size() + random.nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      if (b.length() == 0) {\n        bb = -1;\n      } else if (bb > b.length()-1) {\n        bb = b.prevSetBit(b.length()-1);\n      } else if (bb < 1) {\n        bb = -1;\n      } else {\n        bb = bb >= 1 ? b.prevSetBit(bb-1) : -1;\n      }\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doPrevSetBit(BitSet a, FixedBitSet b) {\n    int aa = a.size() + random.nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      if (b.length() == 0) {\n        bb = -1;\n      } else if (bb > b.length()-1) {\n        bb = b.prevSetBit(b.length()-1);\n      } else if (bb < 1) {\n        bb = -1;\n      } else {\n        bb = bb >= 1 ? b.prevSetBit(bb-1) : -1;\n      }\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doPrevSetBit(BitSet,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doPrevSetBit(BitSet,FixedBitSet).mjava","sourceNew":"  void doPrevSetBit(BitSet a, FixedBitSet b) {\n    int aa = a.size() + random().nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      if (b.length() == 0) {\n        bb = -1;\n      } else if (bb > b.length()-1) {\n        bb = b.prevSetBit(b.length()-1);\n      } else if (bb < 1) {\n        bb = -1;\n      } else {\n        bb = bb >= 1 ? b.prevSetBit(bb-1) : -1;\n      }\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doPrevSetBit(BitSet a, FixedBitSet b) {\n    int aa = a.size() + random.nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      if (b.length() == 0) {\n        bb = -1;\n      } else if (bb > b.length()-1) {\n        bb = b.prevSetBit(b.length()-1);\n      } else if (bb < 1) {\n        bb = -1;\n      } else {\n        bb = bb >= 1 ? b.prevSetBit(bb-1) : -1;\n      }\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doPrevSetBit(BitSet,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doPrevSetBit(BitSet,FixedBitSet).mjava","sourceNew":"  void doPrevSetBit(BitSet a, FixedBitSet b) {\n    int aa = a.size() + random().nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n        aa--;\n      }\n      if (b.length() == 0) {\n        bb = -1;\n      } else if (bb > b.length()-1) {\n        bb = b.prevSetBit(b.length()-1);\n      } else if (bb < 1) {\n        bb = -1;\n      } else {\n        bb = bb >= 1 ? b.prevSetBit(bb-1) : -1;\n      }\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doPrevSetBit(BitSet a, FixedBitSet b) {\n    int aa = a.size() + random().nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      if (b.length() == 0) {\n        bb = -1;\n      } else if (bb > b.length()-1) {\n        bb = b.prevSetBit(b.length()-1);\n      } else if (bb < 1) {\n        bb = -1;\n      } else {\n        bb = bb >= 1 ? b.prevSetBit(bb-1) : -1;\n      }\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doPrevSetBit(java.util.BitSet,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#doPrevSetBit(BitSet,FixedBitSet).mjava","sourceNew":"  void doPrevSetBit(java.util.BitSet a, FixedBitSet b) {\n    int aa = a.size() + random().nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n        aa--;\n      }\n      if (b.length() == 0) {\n        bb = -1;\n      } else if (bb > b.length()-1) {\n        bb = b.prevSetBit(b.length()-1);\n      } else if (bb < 1) {\n        bb = -1;\n      } else {\n        bb = bb >= 1 ? b.prevSetBit(bb-1) : -1;\n      }\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doPrevSetBit(BitSet a, FixedBitSet b) {\n    int aa = a.size() + random().nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n        aa--;\n      }\n      if (b.length() == 0) {\n        bb = -1;\n      } else if (bb > b.length()-1) {\n        bb = b.prevSetBit(b.length()-1);\n      } else if (bb < 1) {\n        bb = -1;\n      } else {\n        bb = bb >= 1 ? b.prevSetBit(bb-1) : -1;\n      }\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}