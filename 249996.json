{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    assert leftTerms.getComparator() == rightTerms.getComparator();\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsStatistics(Terms,Terms).mjava","sourceNew":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","sourceOld":"  /** \n   * checks collection-level statistics on Terms \n   */\n  public void assertTermsStatistics(Terms leftTerms, Terms rightTerms) throws Exception {\n    if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {\n      assertEquals(leftTerms.getDocCount(), rightTerms.getDocCount());\n    }\n    if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {\n      assertEquals(leftTerms.getSumDocFreq(), rightTerms.getSumDocFreq());\n    }\n    if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {\n      assertEquals(leftTerms.getSumTotalTermFreq(), rightTerms.getSumTotalTermFreq());\n    }\n    if (leftTerms.size() != -1 && rightTerms.size() != -1) {\n      assertEquals(leftTerms.size(), rightTerms.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}