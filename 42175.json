{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","sourceNew":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(Version.LUCENE_30);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(Version.LUCENE_30);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","sourceNew":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getJava4Instance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(Version.LUCENE_30);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getJava4Instance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getJava4Instance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava14().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testFillJava14() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getJava4Instance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"1234\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\udc1c7891\", new String(buffer.getBuffer()));\n    buffer = CharacterUtils.newCharacterBuffer(6);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(6, buffer.getLength());\n    assertEquals(\"23\\ud801\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}