{"path":"solr/core/src/test/org/apache/solr/handler/loader/JavabinLoaderTest#doTestLastDocInBatchFlag(int).mjava","commits":[{"id":"7749d6fa52f4781f8f7488f2bd18b0fbb5959d0b","date":1432083803,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/loader/JavabinLoaderTest#doTestLastDocInBatchFlag(int).mjava","pathOld":"/dev/null","sourceNew":"  protected void doTestLastDocInBatchFlag(int numDocsInBatch) throws Exception {\n    List<SolrInputDocument> batch = new ArrayList<>(numDocsInBatch);\n    for (int d=0; d < numDocsInBatch; d++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\", String.valueOf(d));\n      batch.add(doc);\n    }\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    if (batch.size() > 1) {\n      updateRequest.add(batch);\n    } else {\n      updateRequest.add(batch.get(0));\n    }\n\n    // client-side SolrJ would do this ...\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    (new JavaBinUpdateRequestCodec()).marshal(updateRequest, os);\n\n    // need to override the processAdd method b/c JavabinLoader calls\n    // clear on the addCmd after it is passed on to the handler ... a simple clone will suffice for this test\n    BufferingRequestProcessor mockUpdateProcessor = new BufferingRequestProcessor(null) {\n      @Override\n      public void processAdd(AddUpdateCommand cmd) throws IOException {\n        addCommands.add((AddUpdateCommand)cmd.clone());\n      }\n    };\n\n    SolrQueryRequest req = req();\n    (new JavabinLoader()).load(req,\n        new SolrQueryResponse(),\n        new ContentStreamBase.ByteArrayStream(os.toByteArray(), \"test\"),\n        mockUpdateProcessor);\n    req.close();\n\n    assertTrue(mockUpdateProcessor.addCommands.size() == numDocsInBatch);\n    for (int i=0; i < numDocsInBatch-1; i++)\n      assertFalse(mockUpdateProcessor.addCommands.get(i).isLastDocInBatch); // not last doc in batch\n\n    // last doc should have the flag set\n    assertTrue(mockUpdateProcessor.addCommands.get(batch.size()-1).isLastDocInBatch);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7749d6fa52f4781f8f7488f2bd18b0fbb5959d0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7749d6fa52f4781f8f7488f2bd18b0fbb5959d0b"]},"commit2Childs":{"7749d6fa52f4781f8f7488f2bd18b0fbb5959d0b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7749d6fa52f4781f8f7488f2bd18b0fbb5959d0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}