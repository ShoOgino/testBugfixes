{"path":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testMultiwordOffsetsOld().mjava","commits":[{"id":"865b7d0f8430a08d385370b6b87a89a737aa6145","date":1325953575,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testMultiwordOffsetsOld().mjava","pathOld":"/dev/null","sourceNew":"  /** test multiword offsets with the old impl\n   * @deprecated Remove this test in Lucene 5.0 */\n  @Deprecated\n  public void testMultiwordOffsetsOld() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"luceneMatchVersion\", Version.LUCENE_33.toString());\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"national hockey league, nhl\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"national hockey league\"), MockTokenizer.WHITESPACE, false));\n    // WTF?\n    assertTokenStreamContents(ts, \n        new String[] { \"national\", \"nhl\", \"hockey\", \"league\" },\n        new int[] { 0, 0, 0, 0 },\n        new int[] { 22, 22, 22, 22 },\n        new int[] { 1, 0, 1, 1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testMultiwordOffsetsOld().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testMultiwordOffsetsOld().mjava","sourceNew":"  /** test multiword offsets with the old impl\n   * @deprecated Remove this test in Lucene 5.0 */\n  @Deprecated\n  public void testMultiwordOffsetsOld() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(Version.LUCENE_33);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"national hockey league, nhl\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"national hockey league\"), MockTokenizer.WHITESPACE, false));\n    // WTF?\n    assertTokenStreamContents(ts, \n        new String[] { \"national\", \"nhl\", \"hockey\", \"league\" },\n        new int[] { 0, 0, 0, 0 },\n        new int[] { 22, 22, 22, 22 },\n        new int[] { 1, 0, 1, 1 });\n  }\n\n","sourceOld":"  /** test multiword offsets with the old impl\n   * @deprecated Remove this test in Lucene 5.0 */\n  @Deprecated\n  public void testMultiwordOffsetsOld() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"luceneMatchVersion\", Version.LUCENE_33.toString());\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"national hockey league, nhl\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"national hockey league\"), MockTokenizer.WHITESPACE, false));\n    // WTF?\n    assertTokenStreamContents(ts, \n        new String[] { \"national\", \"nhl\", \"hockey\", \"league\" },\n        new int[] { 0, 0, 0, 0 },\n        new int[] { 22, 22, 22, 22 },\n        new int[] { 1, 0, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testMultiwordOffsetsOld().mjava","sourceNew":null,"sourceOld":"  /** test multiword offsets with the old impl\n   * @deprecated Remove this test in Lucene 5.0 */\n  @Deprecated\n  public void testMultiwordOffsetsOld() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(Version.LUCENE_33);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"national hockey league, nhl\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"national hockey league\"), MockTokenizer.WHITESPACE, false));\n    // WTF?\n    assertTokenStreamContents(ts, \n        new String[] { \"national\", \"nhl\", \"hockey\", \"league\" },\n        new int[] { 0, 0, 0, 0 },\n        new int[] { 22, 22, 22, 22 },\n        new int[] { 1, 0, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"865b7d0f8430a08d385370b6b87a89a737aa6145":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["865b7d0f8430a08d385370b6b87a89a737aa6145"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"865b7d0f8430a08d385370b6b87a89a737aa6145":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["865b7d0f8430a08d385370b6b87a89a737aa6145"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}