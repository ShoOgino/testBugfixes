{"path":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#updateDocInSif(SolrInputField,SolrInputDocument,SolrInputDocument).mjava","commits":[{"id":"07749612bed4eb54dd05255c1434c301133310c1","date":1554879779,"type":0,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#updateDocInSif(SolrInputField,SolrInputDocument,SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * @param updateSif the SolrInputField to update its values\n   * @param cmdDocWChildren the doc to insert/set inside updateSif\n   * @param updateDoc the document that was sent as part of the Add Update Command\n   * @return updated SolrInputDocument\n   */\n  public SolrInputDocument updateDocInSif(SolrInputField updateSif, SolrInputDocument cmdDocWChildren, SolrInputDocument updateDoc) {\n    List sifToReplaceValues = (List) updateSif.getValues();\n    final boolean wasList = updateSif.getRawValue() instanceof Collection;\n    int index = getDocIndexFromCollection(cmdDocWChildren, sifToReplaceValues);\n    SolrInputDocument updatedDoc = merge(updateDoc, cmdDocWChildren);\n    if(index == -1) {\n      sifToReplaceValues.add(updatedDoc);\n    } else {\n      sifToReplaceValues.set(index, updatedDoc);\n    }\n    // in the case where value was a List prior to the update and post update there is no more then one value\n    // it should be kept as a List.\n    final boolean singleVal = !wasList && sifToReplaceValues.size() <= 1;\n    updateSif.setValue(singleVal? sifToReplaceValues.get(0): sifToReplaceValues);\n    return cmdDocWChildren;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3665b66adafb1514bba04cd1d5c477fcaa93d592","date":1576153597,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#updateDocInSif(SolrInputField,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#updateDocInSif(SolrInputField,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  /**\n   *\n   * @param updateSif the SolrInputField to update its values\n   * @param cmdDocWChildren the doc to insert/set inside updateSif\n   * @param updateDoc the document that was sent as part of the Add Update Command\n   * @return updated SolrInputDocument\n   */\n  public SolrInputDocument updateDocInSif(SolrInputField updateSif, SolrInputDocument cmdDocWChildren, SolrInputDocument updateDoc) {\n    List sifToReplaceValues = (List) updateSif.getValues();\n    final boolean wasList = updateSif.getValue() instanceof Collection;\n    int index = getDocIndexFromCollection(cmdDocWChildren, sifToReplaceValues);\n    SolrInputDocument updatedDoc = merge(updateDoc, cmdDocWChildren);\n    if(index == -1) {\n      sifToReplaceValues.add(updatedDoc);\n    } else {\n      sifToReplaceValues.set(index, updatedDoc);\n    }\n    // in the case where value was a List prior to the update and post update there is no more then one value\n    // it should be kept as a List.\n    final boolean singleVal = !wasList && sifToReplaceValues.size() <= 1;\n    updateSif.setValue(singleVal? sifToReplaceValues.get(0): sifToReplaceValues);\n    return cmdDocWChildren;\n  }\n\n","sourceOld":"  /**\n   *\n   * @param updateSif the SolrInputField to update its values\n   * @param cmdDocWChildren the doc to insert/set inside updateSif\n   * @param updateDoc the document that was sent as part of the Add Update Command\n   * @return updated SolrInputDocument\n   */\n  public SolrInputDocument updateDocInSif(SolrInputField updateSif, SolrInputDocument cmdDocWChildren, SolrInputDocument updateDoc) {\n    List sifToReplaceValues = (List) updateSif.getValues();\n    final boolean wasList = updateSif.getRawValue() instanceof Collection;\n    int index = getDocIndexFromCollection(cmdDocWChildren, sifToReplaceValues);\n    SolrInputDocument updatedDoc = merge(updateDoc, cmdDocWChildren);\n    if(index == -1) {\n      sifToReplaceValues.add(updatedDoc);\n    } else {\n      sifToReplaceValues.set(index, updatedDoc);\n    }\n    // in the case where value was a List prior to the update and post update there is no more then one value\n    // it should be kept as a List.\n    final boolean singleVal = !wasList && sifToReplaceValues.size() <= 1;\n    updateSif.setValue(singleVal? sifToReplaceValues.get(0): sifToReplaceValues);\n    return cmdDocWChildren;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#updateDocInSif(SolrInputField,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#updateDocInSif(SolrInputField,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  /**\n   *\n   * @param updateSif the SolrInputField to update its values\n   * @param cmdDocWChildren the doc to insert/set inside updateSif\n   * @param updateDoc the document that was sent as part of the Add Update Command\n   * @return updated SolrInputDocument\n   */\n  public SolrInputDocument updateDocInSif(SolrInputField updateSif, SolrInputDocument cmdDocWChildren, SolrInputDocument updateDoc) {\n    List sifToReplaceValues = (List) updateSif.getValues();\n    final boolean wasList = updateSif.getValue() instanceof Collection;\n    int index = getDocIndexFromCollection(cmdDocWChildren, sifToReplaceValues);\n    SolrInputDocument updatedDoc = merge(updateDoc, cmdDocWChildren);\n    if(index == -1) {\n      sifToReplaceValues.add(updatedDoc);\n    } else {\n      sifToReplaceValues.set(index, updatedDoc);\n    }\n    // in the case where value was a List prior to the update and post update there is no more then one value\n    // it should be kept as a List.\n    final boolean singleVal = !wasList && sifToReplaceValues.size() <= 1;\n    updateSif.setValue(singleVal? sifToReplaceValues.get(0): sifToReplaceValues);\n    return cmdDocWChildren;\n  }\n\n","sourceOld":"  /**\n   *\n   * @param updateSif the SolrInputField to update its values\n   * @param cmdDocWChildren the doc to insert/set inside updateSif\n   * @param updateDoc the document that was sent as part of the Add Update Command\n   * @return updated SolrInputDocument\n   */\n  public SolrInputDocument updateDocInSif(SolrInputField updateSif, SolrInputDocument cmdDocWChildren, SolrInputDocument updateDoc) {\n    List sifToReplaceValues = (List) updateSif.getValues();\n    final boolean wasList = updateSif.getRawValue() instanceof Collection;\n    int index = getDocIndexFromCollection(cmdDocWChildren, sifToReplaceValues);\n    SolrInputDocument updatedDoc = merge(updateDoc, cmdDocWChildren);\n    if(index == -1) {\n      sifToReplaceValues.add(updatedDoc);\n    } else {\n      sifToReplaceValues.set(index, updatedDoc);\n    }\n    // in the case where value was a List prior to the update and post update there is no more then one value\n    // it should be kept as a List.\n    final boolean singleVal = !wasList && sifToReplaceValues.size() <= 1;\n    updateSif.setValue(singleVal? sifToReplaceValues.get(0): sifToReplaceValues);\n    return cmdDocWChildren;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#updateDocInSif(SolrInputField,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#updateDocInSif(SolrInputField,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  /**\n   *\n   * @param updateSif the SolrInputField to update its values\n   * @param cmdDocWChildren the doc to insert/set inside updateSif\n   * @param updateDoc the document that was sent as part of the Add Update Command\n   * @return updated SolrInputDocument\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public SolrInputDocument updateDocInSif(SolrInputField updateSif, SolrInputDocument cmdDocWChildren, SolrInputDocument updateDoc) {\n    @SuppressWarnings({\"rawtypes\"})\n    List sifToReplaceValues = (List) updateSif.getValues();\n    final boolean wasList = updateSif.getValue() instanceof Collection;\n    int index = getDocIndexFromCollection(cmdDocWChildren, sifToReplaceValues);\n    SolrInputDocument updatedDoc = merge(updateDoc, cmdDocWChildren);\n    if(index == -1) {\n      sifToReplaceValues.add(updatedDoc);\n    } else {\n      sifToReplaceValues.set(index, updatedDoc);\n    }\n    // in the case where value was a List prior to the update and post update there is no more then one value\n    // it should be kept as a List.\n    final boolean singleVal = !wasList && sifToReplaceValues.size() <= 1;\n    updateSif.setValue(singleVal? sifToReplaceValues.get(0): sifToReplaceValues);\n    return cmdDocWChildren;\n  }\n\n","sourceOld":"  /**\n   *\n   * @param updateSif the SolrInputField to update its values\n   * @param cmdDocWChildren the doc to insert/set inside updateSif\n   * @param updateDoc the document that was sent as part of the Add Update Command\n   * @return updated SolrInputDocument\n   */\n  public SolrInputDocument updateDocInSif(SolrInputField updateSif, SolrInputDocument cmdDocWChildren, SolrInputDocument updateDoc) {\n    List sifToReplaceValues = (List) updateSif.getValues();\n    final boolean wasList = updateSif.getValue() instanceof Collection;\n    int index = getDocIndexFromCollection(cmdDocWChildren, sifToReplaceValues);\n    SolrInputDocument updatedDoc = merge(updateDoc, cmdDocWChildren);\n    if(index == -1) {\n      sifToReplaceValues.add(updatedDoc);\n    } else {\n      sifToReplaceValues.set(index, updatedDoc);\n    }\n    // in the case where value was a List prior to the update and post update there is no more then one value\n    // it should be kept as a List.\n    final boolean singleVal = !wasList && sifToReplaceValues.size() <= 1;\n    updateSif.setValue(singleVal? sifToReplaceValues.get(0): sifToReplaceValues);\n    return cmdDocWChildren;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["07749612bed4eb54dd05255c1434c301133310c1","3665b66adafb1514bba04cd1d5c477fcaa93d592"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["3665b66adafb1514bba04cd1d5c477fcaa93d592"],"3665b66adafb1514bba04cd1d5c477fcaa93d592":["07749612bed4eb54dd05255c1434c301133310c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07749612bed4eb54dd05255c1434c301133310c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3665b66adafb1514bba04cd1d5c477fcaa93d592":["df724d84dab24a0cc54bec95a8680867adc7f171","018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07749612bed4eb54dd05255c1434c301133310c1"],"07749612bed4eb54dd05255c1434c301133310c1":["df724d84dab24a0cc54bec95a8680867adc7f171","3665b66adafb1514bba04cd1d5c477fcaa93d592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}