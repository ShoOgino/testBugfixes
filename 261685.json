{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n      httpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(1));\n      SolrServer client = new CommonsHttpSolrServer(\"http://localhost:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n      httpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(1));\n      SolrServer client = new CommonsHttpSolrServer(\"http://localhost:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n      httpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(1));\n      SolrServer client = new CommonsHttpSolrServer(\"http://localhost:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n      httpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(1));\n      SolrServer client = new CommonsHttpSolrServer(\"http://localhost:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n      httpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(1));\n      SolrServer client = new CommonsHttpSolrServer(\"http://localhost:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n      httpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(1));\n      SolrServer client = new CommonsHttpSolrServer(\"http://localhost:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc3709ce92ee28ae8309513f7061cbe962afc194","date":1312826291,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n      httpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(1));\n      SolrServer client = new CommonsHttpSolrServer(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n      httpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(1));\n      SolrServer client = new CommonsHttpSolrServer(\"http://localhost:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      DefaultHttpClient httpClient = new DefaultHttpClient(new ThreadSafeClientConnManager());\n      httpClient.getParams().setIntParameter(\"http.connection.timeout\", 1);\n      SolrServer client = new HttpSolrServer(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());\n      httpClient.getParams().setParameter(\"http.connection.timeout\", new Integer(1));\n      SolrServer client = new CommonsHttpSolrServer(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = HttpClientUtil.createClient(null);\n      HttpClientUtil.setConnectionTimeout(httpClient,  1);\n      SolrServer client = new HttpSolrServer(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      DefaultHttpClient httpClient = new DefaultHttpClient(new ThreadSafeClientConnManager());\n      httpClient.getParams().setIntParameter(\"http.connection.timeout\", 1);\n      SolrServer client = new HttpSolrServer(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = HttpClientUtil.createClient(null);\n      HttpClientUtil.setConnectionTimeout(httpClient,  1);\n      SolrServer client = new HttpSolrServer(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n      client.shutdown();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = HttpClientUtil.createClient(null);\n      HttpClientUtil.setConnectionTimeout(httpClient,  1);\n      SolrServer client = new HttpSolrServer(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = HttpClientUtil.createClient(null);\n      HttpClientUtil.setConnectionTimeout(httpClient,  1);\n      SolrClient client = new HttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n      client.shutdown();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = HttpClientUtil.createClient(null);\n      HttpClientUtil.setConnectionTimeout(httpClient,  1);\n      SolrServer client = new HttpSolrServer(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n      client.shutdown();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      HttpClientUtil.setConnectionTimeout(httpClient,  1);\n      SolrClient client = new HttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      HttpClient httpClient = HttpClientUtil.createClient(null);\n      HttpClientUtil.setConnectionTimeout(httpClient,  1);\n      SolrClient client = new HttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n      client.shutdown();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":["2d750082a4223c20902ef11ff6a9831d55738ea4","eb99886ff640d94edb43e0d36112a2b7023379ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = new HttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient)) {\n        client.setConnectionTimeout(1);\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      HttpClientUtil.setConnectionTimeout(httpClient,  1);\n      SolrClient client = new HttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient);\n      SolrQuery query = new SolrQuery(\"test123\");\n      client.query(query);\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient)) {\n        client.setConnectionTimeout(1);\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = new HttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient)) {\n        client.setConnectionTimeout(1);\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient)) {\n        client.setConnectionTimeout(1);\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = new HttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient)) {\n        client.setConnectionTimeout(1);\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient, 1)) {\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient)) {\n        client.setConnectionTimeout(1);\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient, 1)) {\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient)) {\n        client.setConnectionTimeout(1);\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient, 1)) {\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient, 1)) {\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient, 1)) {\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient, 1)) {\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc78b7d15e7b8627fa6d1b946da3a39f0225508d","date":1576086705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://\" + SolrTestCaseJ4.DEAD_HOST_1 + \"/solr/\", httpClient, 1)) {\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient, 1)) {\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest#testSolrException().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://\" + SolrTestCaseJ4.DEAD_HOST_1 + \"/solr/\", httpClient, 1)) {\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testSolrException() throws Throwable {\n    // test a connection to a solr server that probably doesn't exist\n    // this is a very simple test and most of the test should be considered verified \n    // if the compiler won't let you by without the try/catch\n    boolean gotExpectedError = false;\n    CloseableHttpClient httpClient = null;\n    try {\n      // switched to a local address to avoid going out on the net, ns lookup issues, etc.\n      // set a 1ms timeout to let the connection fail faster.\n      httpClient = HttpClientUtil.createClient(null);\n      try (HttpSolrClient client = getHttpSolrClient(\"http://[ff01::114]:11235/solr/\", httpClient, 1)) {\n        SolrQuery query = new SolrQuery(\"test123\");\n        client.query(query);\n      }\n      httpClient.close();\n    } catch (SolrServerException sse) {\n      gotExpectedError = true;\n      /***\n      assertTrue(UnknownHostException.class == sse.getRootCause().getClass()\n              //If one is using OpenDNS, then you don't get UnknownHostException, instead you get back that the query couldn't execute\n              || (sse.getRootCause().getClass() == SolrException.class && ((SolrException) sse.getRootCause()).code() == 302 && sse.getMessage().equals(\"Error executing query\")));\n      ***/\n    } finally {\n      if (httpClient != null) HttpClientUtil.close(httpClient);\n    }\n    assertTrue(gotExpectedError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["bc3709ce92ee28ae8309513f7061cbe962afc194"],"bafca15d8e408346a67f4282ad1143b88023893b":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"bc3709ce92ee28ae8309513f7061cbe962afc194":["c26f00b574427b55127e869b935845554afde1fa"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"],"df724d84dab24a0cc54bec95a8680867adc7f171":["8d35c84fdef07284c122012ca4000d3b7285a66e","bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"43d1e498704edd2bba13548a189eed4dfccff11b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"859081acf00749f5dd462772c571d611d4a4d2db":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","43d1e498704edd2bba13548a189eed4dfccff11b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["43d1e498704edd2bba13548a189eed4dfccff11b"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"bc78b7d15e7b8627fa6d1b946da3a39f0225508d":["8d35c84fdef07284c122012ca4000d3b7285a66e"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["bc3709ce92ee28ae8309513f7061cbe962afc194"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"bc3709ce92ee28ae8309513f7061cbe962afc194":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["df724d84dab24a0cc54bec95a8680867adc7f171","bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","4cba13865da71de3b9b0937fcbc66d726089356d"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["bafca15d8e408346a67f4282ad1143b88023893b"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["859081acf00749f5dd462772c571d611d4a4d2db"],"bc78b7d15e7b8627fa6d1b946da3a39f0225508d":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}