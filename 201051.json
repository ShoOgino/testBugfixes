{"path":"src/java/org/apache/solr/core/SolrCore#getNewestSearcher(boolean).mjava","commits":[{"id":"b9ee90cb9c9196a70b1d7cc96cca56fdabaad263","date":1216648894,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#getNewestSearcher(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  * Return the newest {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * If no searcher is currently open, then if openNew==true a new searcher will be opened,\n  * or null is returned if openNew==false.\n  */\n  public RefCounted<SolrIndexSearcher> getNewestSearcher(boolean openNew) {\n    synchronized (searcherLock) {\n      if (_searchers.isEmpty()) {\n        if (!openNew) return null;\n        // Not currently implemented since simply calling getSearcher during inform()\n        // can result in a deadlock.  Right now, solr always opens a searcher first\n        // before calling inform() anyway, so this should never happen.\n        throw new UnsupportedOperationException();\n      }\n      RefCounted<SolrIndexSearcher> newest = _searchers.getLast();\n      newest.incref();\n      return newest;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8563a28e2d7edf4dd73a4148584ac67f2e84cf7a","8563a28e2d7edf4dd73a4148584ac67f2e84cf7a","8563a28e2d7edf4dd73a4148584ac67f2e84cf7a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#getNewestSearcher(boolean).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#getNewestSearcher(boolean).mjava","sourceNew":"  /**\n  * Return the newest {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * If no searcher is currently open, then if openNew==true a new searcher will be opened,\n  * or null is returned if openNew==false.\n  */\n  public RefCounted<SolrIndexSearcher> getNewestSearcher(boolean openNew) {\n    synchronized (searcherLock) {\n      if (_searchers.isEmpty()) {\n        if (!openNew) return null;\n        // Not currently implemented since simply calling getSearcher during inform()\n        // can result in a deadlock.  Right now, solr always opens a searcher first\n        // before calling inform() anyway, so this should never happen.\n        throw new UnsupportedOperationException();\n      }\n      RefCounted<SolrIndexSearcher> newest = _searchers.getLast();\n      newest.incref();\n      return newest;\n    }\n  }\n\n","sourceOld":"  /**\n  * Return the newest {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with\n  * the reference count incremented.  It <b>must</b> be decremented when no longer needed.\n  * If no searcher is currently open, then if openNew==true a new searcher will be opened,\n  * or null is returned if openNew==false.\n  */\n  public RefCounted<SolrIndexSearcher> getNewestSearcher(boolean openNew) {\n    synchronized (searcherLock) {\n      if (_searchers.isEmpty()) {\n        if (!openNew) return null;\n        // Not currently implemented since simply calling getSearcher during inform()\n        // can result in a deadlock.  Right now, solr always opens a searcher first\n        // before calling inform() anyway, so this should never happen.\n        throw new UnsupportedOperationException();\n      }\n      RefCounted<SolrIndexSearcher> newest = _searchers.getLast();\n      newest.incref();\n      return newest;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b9ee90cb9c9196a70b1d7cc96cca56fdabaad263"],"b9ee90cb9c9196a70b1d7cc96cca56fdabaad263":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b9ee90cb9c9196a70b1d7cc96cca56fdabaad263"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b9ee90cb9c9196a70b1d7cc96cca56fdabaad263":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}