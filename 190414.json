{"path":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"/dev/null","sourceNew":"  public void testDelete() {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    DocHelper.writeDoc(dir, \"seg-to-delete\", docToDelete);\n    try {\n      SegmentReader deleteReader = new SegmentReader(new SegmentInfo(\"seg-to-delete\", 1, dir));\n      assertTrue(deleteReader != null);\n      assertTrue(deleteReader.numDocs() == 1);\n      deleteReader.delete(0);\n      assertTrue(deleteReader.isDeleted(0) == true);\n      assertTrue(deleteReader.hasDeletions() == true);\n      assertTrue(deleteReader.numDocs() == 0);\n      try {\n        Document test = deleteReader.document(0);\n        assertTrue(false);\n      } catch (IllegalArgumentException e) {\n        assertTrue(true);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5d88b55f1b57feab6da94a5c635a224539bd2a","date":1095877947,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    DocHelper.writeDoc(dir, \"seg-to-delete\", docToDelete);\n    try {\n      SegmentReader deleteReader = SegmentReader.get(new SegmentInfo(\"seg-to-delete\", 1, dir));\n      assertTrue(deleteReader != null);\n      assertTrue(deleteReader.numDocs() == 1);\n      deleteReader.delete(0);\n      assertTrue(deleteReader.isDeleted(0) == true);\n      assertTrue(deleteReader.hasDeletions() == true);\n      assertTrue(deleteReader.numDocs() == 0);\n      try {\n        Document test = deleteReader.document(0);\n        assertTrue(false);\n      } catch (IllegalArgumentException e) {\n        assertTrue(true);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }    \n\n","sourceOld":"  public void testDelete() {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    DocHelper.writeDoc(dir, \"seg-to-delete\", docToDelete);\n    try {\n      SegmentReader deleteReader = new SegmentReader(new SegmentInfo(\"seg-to-delete\", 1, dir));\n      assertTrue(deleteReader != null);\n      assertTrue(deleteReader.numDocs() == 1);\n      deleteReader.delete(0);\n      assertTrue(deleteReader.isDeleted(0) == true);\n      assertTrue(deleteReader.hasDeletions() == true);\n      assertTrue(deleteReader.numDocs() == 0);\n      try {\n        Document test = deleteReader.document(0);\n        assertTrue(false);\n      } catch (IllegalArgumentException e) {\n        assertTrue(true);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    DocHelper.writeDoc(dir, \"seg-to-delete\", docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(new SegmentInfo(\"seg-to-delete\", 1, dir));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.delete(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    try {\n      Document test = deleteReader.document(0);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expcected exception\n    }\n  }    \n\n","sourceOld":"  public void testDelete() {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    DocHelper.writeDoc(dir, \"seg-to-delete\", docToDelete);\n    try {\n      SegmentReader deleteReader = SegmentReader.get(new SegmentInfo(\"seg-to-delete\", 1, dir));\n      assertTrue(deleteReader != null);\n      assertTrue(deleteReader.numDocs() == 1);\n      deleteReader.delete(0);\n      assertTrue(deleteReader.isDeleted(0) == true);\n      assertTrue(deleteReader.hasDeletions() == true);\n      assertTrue(deleteReader.numDocs() == 0);\n      try {\n        Document test = deleteReader.document(0);\n        assertTrue(false);\n      } catch (IllegalArgumentException e) {\n        assertTrue(true);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }    \n\n","bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2a72fab41674e7a39632b4d8fd74974835b8dde","date":1133544383,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    DocHelper.writeDoc(dir, \"seg-to-delete\", docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(new SegmentInfo(\"seg-to-delete\", 1, dir));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.delete(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    try {\n      deleteReader.document(0);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expcected exception\n    }\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    DocHelper.writeDoc(dir, \"seg-to-delete\", docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(new SegmentInfo(\"seg-to-delete\", 1, dir));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.delete(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    try {\n      Document test = deleteReader.document(0);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expcected exception\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    DocHelper.writeDoc(dir, \"seg-to-delete\", docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(new SegmentInfo(\"seg-to-delete\", 1, dir));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    try {\n      deleteReader.document(0);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expcected exception\n    }\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    DocHelper.writeDoc(dir, \"seg-to-delete\", docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(new SegmentInfo(\"seg-to-delete\", 1, dir));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.delete(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    try {\n      deleteReader.document(0);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expcected exception\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(info);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    try {\n      deleteReader.document(0);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expcected exception\n    }\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    DocHelper.writeDoc(dir, \"seg-to-delete\", docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(new SegmentInfo(\"seg-to-delete\", 1, dir));\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    try {\n      deleteReader.document(0);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expcected exception\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d736930237c54e1516a9e3bae803c92ff19ec4e5","date":1245789156,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(info);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(info);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n    try {\n      deleteReader.document(0);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expcected exception\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(info);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDelete().mjava","sourceNew":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n  }    \n\n","sourceOld":"  public void testDelete() throws IOException {\n    Document docToDelete = new Document();\n    DocHelper.setupDoc(docToDelete);\n    SegmentInfo info = DocHelper.writeDoc(dir, docToDelete);\n    SegmentReader deleteReader = SegmentReader.get(false, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(deleteReader != null);\n    assertTrue(deleteReader.numDocs() == 1);\n    deleteReader.deleteDocument(0);\n    assertTrue(deleteReader.isDeleted(0) == true);\n    assertTrue(deleteReader.hasDeletions() == true);\n    assertTrue(deleteReader.numDocs() == 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["b2a72fab41674e7a39632b4d8fd74974835b8dde"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["d736930237c54e1516a9e3bae803c92ff19ec4e5"],"d736930237c54e1516a9e3bae803c92ff19ec4e5":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"b2a72fab41674e7a39632b4d8fd74974835b8dde":["1229e4509cad6bf268c0fe18199b63a72216c66b"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["d736930237c54e1516a9e3bae803c92ff19ec4e5"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d736930237c54e1516a9e3bae803c92ff19ec4e5":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["b2a72fab41674e7a39632b4d8fd74974835b8dde"],"b2a72fab41674e7a39632b4d8fd74974835b8dde":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}