{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldExactQuery(String,boolean).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldExactQuery(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestIntPointFieldExactQuery(String field, boolean testLong) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\" + (i+1) + \" OR \" + field + \":\" + ((i+1)%10 + 1)), \"//*[@numFound='2']\");\n    }\n    \n    assertU(adoc(\"id\", String.valueOf(Integer.MAX_VALUE), field, String.valueOf(Integer.MAX_VALUE)));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":\"+Integer.MAX_VALUE, \"fl\", \"id, \" + field), \n        \"//*[@numFound='1']\");\n    \n    if (testLong) {\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n      }\n      assertU(commit());\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n            \"//*[@numFound='1']\");\n      }\n      assertU(adoc(\"id\", String.valueOf(Long.MAX_VALUE), field, String.valueOf(Long.MAX_VALUE)));\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\"+Long.MAX_VALUE, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldExactQuery(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestIntPointFieldExactQuery(String field, boolean testLong) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\" + (i+1) + \" OR \" + field + \":\" + ((i+1)%10 + 1)), \"//*[@numFound='2']\");\n    }\n    \n    assertU(adoc(\"id\", String.valueOf(Integer.MAX_VALUE), field, String.valueOf(Integer.MAX_VALUE)));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":\"+Integer.MAX_VALUE, \"fl\", \"id, \" + field), \n        \"//*[@numFound='1']\");\n    \n    if (testLong) {\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n      }\n      assertU(commit());\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n            \"//*[@numFound='1']\");\n      }\n      assertU(adoc(\"id\", String.valueOf(Long.MAX_VALUE), field, String.valueOf(Long.MAX_VALUE)));\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\"+Long.MAX_VALUE, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldExactQuery(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldExactQuery(String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldExactQuery(final String field, final boolean testLong) throws Exception {\n    doTestIntPointFieldExactQuery(field, testLong, true);\n  }\n\n","sourceOld":"  private void doTestIntPointFieldExactQuery(String field, boolean testLong) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\" + (i+1) + \" OR \" + field + \":\" + ((i+1)%10 + 1)), \"//*[@numFound='2']\");\n    }\n    \n    assertU(adoc(\"id\", String.valueOf(Integer.MAX_VALUE), field, String.valueOf(Integer.MAX_VALUE)));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":\"+Integer.MAX_VALUE, \"fl\", \"id, \" + field), \n        \"//*[@numFound='1']\");\n    \n    if (testLong) {\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n      }\n      assertU(commit());\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n            \"//*[@numFound='1']\");\n      }\n      assertU(adoc(\"id\", String.valueOf(Long.MAX_VALUE), field, String.valueOf(Long.MAX_VALUE)));\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\"+Long.MAX_VALUE, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldExactQuery(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestIntPointFieldExactQuery(String,boolean).mjava","sourceNew":"  private void doTestIntPointFieldExactQuery(final String field, final boolean testLong) throws Exception {\n    doTestIntPointFieldExactQuery(field, testLong, true);\n  }\n\n","sourceOld":"  private void doTestIntPointFieldExactQuery(String field, boolean testLong) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\" + (i+1) + \" OR \" + field + \":\" + ((i+1)%10 + 1)), \"//*[@numFound='2']\");\n    }\n    \n    assertU(adoc(\"id\", String.valueOf(Integer.MAX_VALUE), field, String.valueOf(Integer.MAX_VALUE)));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":\"+Integer.MAX_VALUE, \"fl\", \"id, \" + field), \n        \"//*[@numFound='1']\");\n    \n    if (testLong) {\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n      }\n      assertU(commit());\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n            \"//*[@numFound='1']\");\n      }\n      assertU(adoc(\"id\", String.valueOf(Long.MAX_VALUE), field, String.valueOf(Long.MAX_VALUE)));\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\"+Long.MAX_VALUE, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["46dc9ac8b3e748407baaef82453138ff3974480c"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["46dc9ac8b3e748407baaef82453138ff3974480c"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"46dc9ac8b3e748407baaef82453138ff3974480c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}