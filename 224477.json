{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","commits":[{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String).mjava","sourceNew":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getSlices(collectionName);\n    boolean byCoreName = false;\n    if (slices == null) {\n      // look by core name\n      byCoreName = true;\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n          String coreUrl;\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getSlices(collectionName);\n    boolean byCoreName = false;\n    if (slices == null) {\n      // look by core name\n      byCoreName = true;\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n          String coreUrl = coreNodeProps.getCoreUrl();\n          if (coreUrl.endsWith(\"/\")) {\n            coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","sourceNew":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    if (slices == null) {\n      // look by core name\n      byCoreName = true;\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getActiveSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n          String coreUrl;\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getSlices(collectionName);\n    boolean byCoreName = false;\n    if (slices == null) {\n      // look by core name\n      byCoreName = true;\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n          String coreUrl;\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76f6eb76f18994b4beb89d861529e23baff6cae9","date":1385318717,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","sourceNew":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    if (slices == null) {\n      // look by core name\n      byCoreName = true;\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n          String coreUrl;\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    if (slices == null) {\n      // look by core name\n      byCoreName = true;\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getActiveSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n          String coreUrl;\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac","date":1385324383,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","sourceNew":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    \n    if (slices == null) {\n      slices = new ArrayList<Slice>();\n      // look by core name\n      byCoreName = true;\n      slices = getSlicesForCollections(clusterState, slices, true);\n      if (slices == null || slices.size() == 0) {\n        slices = getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    String coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n    \n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n    \n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    if (slices == null) {\n      // look by core name\n      byCoreName = true;\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n          String coreUrl;\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":["0713b289be914e52cc2ec942aeb7306f0593a787","db889c531bc88c5c68d4254982851bd2d4e2a6a3","1cfa38e36fa296bb93d77df7d5556257dffa4535","76f6eb76f18994b4beb89d861529e23baff6cae9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","sourceNew":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    \n    if (slices == null) {\n      slices = new ArrayList<Slice>();\n      // look by core name\n      byCoreName = true;\n      slices = getSlicesForCollections(clusterState, slices, true);\n      if (slices == null || slices.size() == 0) {\n        slices = getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    String coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n    \n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n    \n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    if (slices == null) {\n      // look by core name\n      byCoreName = true;\n      Set<String> collections = clusterState.getCollections();\n      for (String collection : collections) {\n        slices = new ArrayList<Slice>();\n        slices.addAll(clusterState.getActiveSlices(collection));\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Iterator<Slice> it = slices.iterator();\n    while (it.hasNext()) {\n      Slice slice = it.next();\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (ZkNodeProps nodeProps : sliceShards.values()) {\n        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);\n        if (liveNodes.contains(coreNodeProps.getNodeName())\n            && coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) {\n          if (byCoreName && !collectionName.equals(coreNodeProps.getCoreName())) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (coreNodeProps.getBaseUrl().equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n          String coreUrl;\n          if (origCorename != null) {\n            coreUrl = coreNodeProps.getBaseUrl() + \"/\" + origCorename;\n          } else {\n            coreUrl = coreNodeProps.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","sourceNew":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    \n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      slices = getSlicesForCollections(clusterState, slices, true);\n      if (slices == null || slices.size() == 0) {\n        slices = getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    String coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n    \n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n    \n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    \n    if (slices == null) {\n      slices = new ArrayList<Slice>();\n      // look by core name\n      byCoreName = true;\n      slices = getSlicesForCollections(clusterState, slices, true);\n      if (slices == null || slices.size() == 0) {\n        slices = getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    String coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n    \n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n    \n    return coreUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ba07da07950fc728766b05e28f9b21754a4acce","date":1429110306,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","sourceNew":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    \n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n    \n    if (slices.isEmpty()) {\n      return null;\n    }\n    \n    String coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n    \n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n    \n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    \n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      slices = getSlicesForCollections(clusterState, slices, true);\n      if (slices == null || slices.size() == 0) {\n        slices = getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n    \n    if (slices == null || slices.size() == 0) {\n      return null;\n    }\n    \n    String coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n    \n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n    \n    return coreUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","sourceNew":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n\n    if (slices.isEmpty()) {\n      return null;\n    }\n\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    \n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n    \n    if (slices.isEmpty()) {\n      return null;\n    }\n    \n    String coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n    \n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n    \n    return coreUrl;\n  }\n\n","bugFix":null,"bugIntro":["79411f20952f22cd9b944ff6f25f051554ff8e53"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac"],"b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac":["76f6eb76f18994b4beb89d861529e23baff6cae9"],"9ba07da07950fc728766b05e28f9b21754a4acce":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"76f6eb76f18994b4beb89d861529e23baff6cae9":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["9ba07da07950fc728766b05e28f9b21754a4acce"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3","b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a760e2135dfe20a04dea360873d4de1c6a0280bb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9ba07da07950fc728766b05e28f9b21754a4acce"],"b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"9ba07da07950fc728766b05e28f9b21754a4acce":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"76f6eb76f18994b4beb89d861529e23baff6cae9":["b4047c1dd7f4eddab92dd1de63093ce5ec64a7ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["76f6eb76f18994b4beb89d861529e23baff6cae9","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}