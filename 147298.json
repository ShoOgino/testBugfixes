{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ee056ec8e953928ee49a691090634eed1fa4d6b","date":1274852580,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e4a95ed08968b85d84e9fba82424f1fd945fbb","date":1274878310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f0d8e9a3f2e45eeea14a4803eaac02a0865097","date":1279565910,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText, true);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"5f4e87790277826a2aea119328600dfb07761f32":["33e4a95ed08968b85d84e9fba82424f1fd945fbb","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"8017ab6544f30f93b106e419e7298173bad77f69":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"]},"commit2Childs":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["5f4e87790277826a2aea119328600dfb07761f32","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","5f4e87790277826a2aea119328600dfb07761f32","8017ab6544f30f93b106e419e7298173bad77f69"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}