{"path":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/shape/simple/RectangleImpl#relate_xRange(double,double,SpatialContext).mjava","commits":[{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/shape/simple/RectangleImpl#relate_xRange(double,double,SpatialContext).mjava","pathOld":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/base/shape/simple/RectangleImpl#relate_xRange(double,double,SpatialContext).mjava","sourceNew":"  @Override\n  public SpatialRelation relate_xRange(double ext_minX, double ext_maxX, SpatialContext ctx) {\n    //For ext & this we have local minX and maxX variable pairs. We rotate them so that minX <= maxX\n    double minX = this.minX;\n    double maxX = this.maxX;\n    if (ctx.isGeo()) {\n      //the 360 check is an edge-case for complete world-wrap\n      double ext_width = ext_maxX - ext_minX;\n      if (ext_width < 0)//this logic unfortunately duplicates getWidth()\n        ext_width += 360;\n\n      if (ext_width < 360) {\n        ext_maxX = ext_minX + ext_width;\n      } else {\n        ext_maxX = 180+360;\n      }\n\n      if (getWidth() < 360) {\n        maxX = minX + getWidth();\n      } else {\n        maxX = 180+360;\n      }\n\n      if (maxX < ext_minX) {\n        minX += 360;\n        maxX += 360;\n      } else if (ext_maxX < minX) {\n        ext_minX += 360;\n        ext_maxX += 360;\n      }\n    }\n\n    if (ext_minX > maxX || ext_maxX < minX ) {\n      return SpatialRelation.DISJOINT;\n    }\n\n    if (ext_minX >= minX && ext_maxX <= maxX ) {\n      return SpatialRelation.CONTAINS;\n    }\n\n    if (ext_minX <= minX && ext_maxX >= maxX ) {\n      return SpatialRelation.WITHIN;\n    }\n    return SpatialRelation.INTERSECTS;\n  }\n\n","sourceOld":"  @Override\n  public SpatialRelation relate_xRange(double ext_minX, double ext_maxX, SpatialContext ctx) {\n    //For ext & this we have local minX and maxX variable pairs. We rotate them so that minX <= maxX\n    double minX = this.minX;\n    double maxX = this.maxX;\n    if (ctx.isGeo()) {\n      //the 360 check is an edge-case for complete world-wrap\n      double ext_width = ext_maxX - ext_minX;\n      if (ext_width < 0)//this logic unfortunately duplicates getWidth()\n        ext_width += 360;\n\n      if (ext_width < 360) {\n        ext_maxX = ext_minX + ext_width;\n      } else {\n        ext_maxX = 180+360;\n      }\n\n      if (getWidth() < 360) {\n        maxX = minX + getWidth();\n      } else {\n        maxX = 180+360;\n      }\n\n      if (maxX < ext_minX) {\n        minX += 360;\n        maxX += 360;\n      } else if (ext_maxX < minX) {\n        ext_minX += 360;\n        ext_maxX += 360;\n      }\n    }\n\n    if (ext_minX > maxX || ext_maxX < minX ) {\n      return SpatialRelation.DISJOINT;\n    }\n\n    if (ext_minX >= minX && ext_maxX <= maxX ) {\n      return SpatialRelation.CONTAINS;\n    }\n\n    if (ext_minX <= minX && ext_maxX >= maxX ) {\n      return SpatialRelation.WITHIN;\n    }\n    return SpatialRelation.INTERSECTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a","date":1329809096,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/shape/simple/RectangleImpl#relate_xRange(double,double,SpatialContext).mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/shape/simple/RectangleImpl#relate_xRange(double,double,SpatialContext).mjava","sourceNew":"  @Override\n  public SpatialRelation relate_xRange(double ext_minX, double ext_maxX, SpatialContext ctx) {\n    //For ext & this we have local minX and maxX variable pairs. We rotate them so that minX <= maxX\n    double minX = this.minX;\n    double maxX = this.maxX;\n    if (ctx.isGeo()) {\n      //the 360 check is an edge-case for complete world-wrap\n      double ext_width = ext_maxX - ext_minX;\n      if (ext_width < 0)//this logic unfortunately duplicates getWidth()\n        ext_width += 360;\n\n      if (ext_width < 360) {\n        ext_maxX = ext_minX + ext_width;\n      } else {\n        ext_maxX = 180+360;\n      }\n\n      if (getWidth() < 360) {\n        maxX = minX + getWidth();\n      } else {\n        maxX = 180+360;\n      }\n\n      if (maxX < ext_minX) {\n        minX += 360;\n        maxX += 360;\n      } else if (ext_maxX < minX) {\n        ext_minX += 360;\n        ext_maxX += 360;\n      }\n    }\n\n    if (ext_minX > maxX || ext_maxX < minX ) {\n      return SpatialRelation.DISJOINT;\n    }\n\n    if (ext_minX >= minX && ext_maxX <= maxX ) {\n      return SpatialRelation.CONTAINS;\n    }\n\n    if (ext_minX <= minX && ext_maxX >= maxX ) {\n      return SpatialRelation.WITHIN;\n    }\n    return SpatialRelation.INTERSECTS;\n  }\n\n","sourceOld":"  @Override\n  public SpatialRelation relate_xRange(double ext_minX, double ext_maxX, SpatialContext ctx) {\n    //For ext & this we have local minX and maxX variable pairs. We rotate them so that minX <= maxX\n    double minX = this.minX;\n    double maxX = this.maxX;\n    if (ctx.isGeo()) {\n      //the 360 check is an edge-case for complete world-wrap\n      double ext_width = ext_maxX - ext_minX;\n      if (ext_width < 0)//this logic unfortunately duplicates getWidth()\n        ext_width += 360;\n\n      if (ext_width < 360) {\n        ext_maxX = ext_minX + ext_width;\n      } else {\n        ext_maxX = 180+360;\n      }\n\n      if (getWidth() < 360) {\n        maxX = minX + getWidth();\n      } else {\n        maxX = 180+360;\n      }\n\n      if (maxX < ext_minX) {\n        minX += 360;\n        maxX += 360;\n      } else if (ext_maxX < minX) {\n        ext_minX += 360;\n        ext_maxX += 360;\n      }\n    }\n\n    if (ext_minX > maxX || ext_maxX < minX ) {\n      return SpatialRelation.DISJOINT;\n    }\n\n    if (ext_minX >= minX && ext_maxX <= maxX ) {\n      return SpatialRelation.CONTAINS;\n    }\n\n    if (ext_minX <= minX && ext_maxX >= maxX ) {\n      return SpatialRelation.WITHIN;\n    }\n    return SpatialRelation.INTERSECTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}