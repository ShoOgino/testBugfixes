{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","commits":[{"id":"fb396392c6df2adeadb2289f6085319d14321f4b","date":1153002029,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverlapAnalyzer2() throws Exception\n  {\n\n    String s = \"Hi-Speed10 foo\";\n\n    Query query; Highlighter highlighter; String result;\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"foo\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"Hi-Speed10 <B>foo</B>\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"10\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"Hi-Speed<B>10</B> foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hi\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"<B>Hi</B>-Speed10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"speed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"Hi-<B>Speed</B>10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hispeed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"<B>Hi-Speed</B>10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hi speed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"<B>Hi-Speed</B>10 foo\",result);\n\n    /////////////////// same tests, just put the bigger overlapping token first\n        query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"foo\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"Hi-Speed10 <B>foo</B>\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"10\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"Hi-Speed<B>10</B> foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hi\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"<B>Hi</B>-Speed10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"speed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"Hi-<B>Speed</B>10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hispeed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"<B>Hi-Speed</B>10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hi speed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"<B>Hi-Speed</B>10 foo\",result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception\n  {\n\n    String s = \"Hi-Speed10 foo\";\n\n    Query query; Highlighter highlighter; String result;\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"foo\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"Hi-Speed10 <B>foo</B>\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"10\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"Hi-Speed<B>10</B> foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hi\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"<B>Hi</B>-Speed10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"speed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"Hi-<B>Speed</B>10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hispeed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"<B>Hi-Speed</B>10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hi speed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n    assertEquals(\"<B>Hi-Speed</B>10 foo\",result);\n\n    /////////////////// same tests, just put the bigger overlapping token first\n        query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"foo\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"Hi-Speed10 <B>foo</B>\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"10\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"Hi-Speed<B>10</B> foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hi\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"<B>Hi</B>-Speed10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"speed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"Hi-<B>Speed</B>10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hispeed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"<B>Hi-Speed</B>10 foo\",result);\n\n    query = new QueryParser(\"text\",new WhitespaceAnalyzer()).parse(\"hi speed\");\n    highlighter = new Highlighter(new QueryScorer(query));\n    result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n    assertEquals(\"<B>Hi-Speed</B>10 foo\",result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(\"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464a71190fd7694704427cd763d7c957c10e935b","date":1256329736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(Version.LUCENE_CURRENT, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer()).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer2().mjava","sourceNew":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testOverlapAnalyzer2() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String s = \"Hi-Speed10 foo\";\n\n        Query query;\n        Highlighter highlighter;\n        String result;\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        // ///////////////// same tests, just put the bigger overlapping token\n        // first\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"foo\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed10 <B>foo</B>\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"10\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-Speed<B>10</B> foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi</B>-Speed10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"Hi-<B>Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hispeed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n\n        query = new QueryParser(TEST_VERSION_CURRENT, \"text\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).parse(\"hi speed\");\n        highlighter = getHighlighter(query, \"text\", getTS2a(), HighlighterTest.this);\n        result = highlighter.getBestFragments(getTS2a(), s, 3, \"...\");\n        assertEquals(\"<B>Hi-Speed</B>10 foo\", result);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["464a71190fd7694704427cd763d7c957c10e935b"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"464a71190fd7694704427cd763d7c957c10e935b":["ba1116b3450a9c1642c89445d131b37344055245"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"ba1116b3450a9c1642c89445d131b37344055245":["296b8b38a87feb478921f77834a2302dfe77641c"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fb396392c6df2adeadb2289f6085319d14321f4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"296b8b38a87feb478921f77834a2302dfe77641c":["fb396392c6df2adeadb2289f6085319d14321f4b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"464a71190fd7694704427cd763d7c957c10e935b":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"ba1116b3450a9c1642c89445d131b37344055245":["464a71190fd7694704427cd763d7c957c10e935b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fb396392c6df2adeadb2289f6085319d14321f4b":["296b8b38a87feb478921f77834a2302dfe77641c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb396392c6df2adeadb2289f6085319d14321f4b"],"296b8b38a87feb478921f77834a2302dfe77641c":["ba1116b3450a9c1642c89445d131b37344055245"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}