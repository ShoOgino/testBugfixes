{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream#getShardUrls().mjava","commits":[{"id":"f67c3a1123a063e580a2e6ec51b9eb7c273666ce","date":1487877483,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream#getShardUrls().mjava","pathOld":"/dev/null","sourceNew":"  private List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e5922fb6b9f0e49b31ce0436420a7f4392031c4","date":1489025486,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupleStream#getShards(String,String,StreamContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream#getShardUrls().mjava","sourceNew":"  public static List<String> getShards(String zkHost,\n                                       String collection,\n                                       StreamContext streamContext)\n      throws IOException {\n    Map<String, List<String>> shardsMap = null;\n    List<String> shards = new ArrayList();\n\n    if(streamContext != null) {\n      shardsMap = (Map<String, List<String>>)streamContext.get(\"shards\");\n    }\n\n    if(shardsMap != null) {\n      //Manual Sharding\n      shards = shardsMap.get(collection);\n    } else {\n      //SolrCloud Sharding\n      CloudSolrClient cloudSolrClient = streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Collection<Slice> slices = getSlices(collection, zkStateReader, true);\n      Set<String> liveNodes = clusterState.getLiveNodes();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))\n            shuffler.add(replica);\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        shards.add(url);\n      }\n    }\n\n    return shards;\n  }\n\n","sourceOld":"  private List<String> getShardUrls() throws IOException {\n    try {\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n      Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Set<String> liveNodes = clusterState.getLiveNodes();\n\n      List<String> baseUrls = new ArrayList<>();\n      for(Slice slice : slices) {\n        Collection<Replica> replicas = slice.getReplicas();\n        List<Replica> shuffler = new ArrayList<>();\n        for(Replica replica : replicas) {\n          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {\n            shuffler.add(replica);\n          }\n        }\n\n        Collections.shuffle(shuffler, new Random());\n        Replica rep = shuffler.get(0);\n        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);\n        String url = zkProps.getCoreUrl();\n        baseUrls.add(url);\n      }\n\n      return baseUrls;\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4"]},"commit2Childs":{"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}