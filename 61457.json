{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","sourceNew":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<File>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","sourceOld":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<File>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","pathOld":"/dev/null","sourceNew":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<File>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","sourceNew":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","sourceOld":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<File>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","sourceNew":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(StandardCharsets.UTF_8));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","sourceOld":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","sourceNew":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(StandardCharsets.UTF_8));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","sourceOld":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","sourceNew":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    Files.deleteIfExists(out.toPath());\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(StandardCharsets.UTF_8));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","sourceOld":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    out.delete();\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(StandardCharsets.UTF_8));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","bugFix":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19fd94680387e8cc4f7f4c2c41e216582493d2c8","date":1424319108,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","sourceNew":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    Files.deleteIfExists(out.toPath());\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","sourceOld":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    Files.deleteIfExists(out.toPath());\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<cores><core name=\\\"collection1\\\" instanceDir=\\\".\\\"/></cores>\".getBytes(StandardCharsets.UTF_8));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da59c6d3748d1a2a9d1a58a69f70383622d68379","date":1433873890,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","sourceNew":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    Files.deleteIfExists(out.toPath());\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<solr></solr>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","sourceOld":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    Files.deleteIfExists(out.toPath());\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","sourceNew":null,"sourceOld":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    Files.deleteIfExists(out.toPath());\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<solr></solr>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat#createZip(File,File).mjava","sourceNew":null,"sourceOld":"  private static void createZip(File dir, File out) throws IOException {\n    HashSet<File> files = new HashSet<>();\n    // take only conf/ and lib/\n    for (String allowedDirectory : SolrRecordWriter\n        .getAllowedConfigDirectories()) {\n      File configDir = new File(dir, allowedDirectory);\n      boolean configDirExists;\n      /** If the directory does not exist, and is required, bail out */\n      if (!(configDirExists = configDir.exists())\n          && SolrRecordWriter.isRequiredConfigDirectory(allowedDirectory)) {\n        throw new IOException(String.format(Locale.ENGLISH,\n            \"required configuration directory %s is not present in %s\",\n            allowedDirectory, dir));\n      }\n      if (!configDirExists) {\n        continue;\n      }\n      listFiles(configDir, files); // Store the files in the existing, allowed\n                                   // directory configDir, in the list of files\n                                   // to store in the zip file\n    }\n\n    Files.deleteIfExists(out.toPath());\n    int subst = dir.toString().length();\n    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(out));\n    byte[] buf = new byte[1024];\n    for (File f : files) {\n      ZipEntry ze = new ZipEntry(f.toString().substring(subst));\n      zos.putNextEntry(ze);\n      InputStream is = new FileInputStream(f);\n      int cnt;\n      while ((cnt = is.read(buf)) >= 0) {\n        zos.write(buf, 0, cnt);\n      }\n      is.close();\n      zos.flush();\n      zos.closeEntry();\n    }\n    \n    ZipEntry ze = new ZipEntry(\"solr.xml\");\n    zos.putNextEntry(ze);\n    zos.write(\"<solr></solr>\".getBytes(\"UTF-8\"));\n    zos.flush();\n    zos.closeEntry();\n    zos.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9d3d365762604952e436b51980101dfc84cc1b3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"19fd94680387e8cc4f7f4c2c41e216582493d2c8":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["da59c6d3748d1a2a9d1a58a69f70383622d68379"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["9d3d365762604952e436b51980101dfc84cc1b3e"],"da59c6d3748d1a2a9d1a58a69f70383622d68379":["19fd94680387e8cc4f7f4c2c41e216582493d2c8"],"9d3d365762604952e436b51980101dfc84cc1b3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["da59c6d3748d1a2a9d1a58a69f70383622d68379"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"19fd94680387e8cc4f7f4c2c41e216582493d2c8":["da59c6d3748d1a2a9d1a58a69f70383622d68379"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["19fd94680387e8cc4f7f4c2c41e216582493d2c8"],"da59c6d3748d1a2a9d1a58a69f70383622d68379":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","cbc3688252d4a8045d69a164236b2cf87b721f17"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}