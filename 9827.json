{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testSimple().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrClient client = new LBHttpSolrClient(httpClient, s);\n    client.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrClient client = getLBHttpSolrClient(httpClient, s);\n    client.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrClient client = new LBHttpSolrClient(httpClient, s);\n    client.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrClient client = getLBHttpSolrClient(httpClient, s);\n    client.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrClient client = new LBHttpSolrClient(httpClient, s);\n    client.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    try (LBHttpSolrClient client = getLBHttpSolrClient(httpClient, s)) {\n      client.setAliveCheckInterval(500);\n      SolrQuery solrQuery = new SolrQuery(\"*:*\");\n      Set<String> names = new HashSet<>();\n      QueryResponse resp = null;\n      for (String value : s) {\n        resp = client.query(solrQuery);\n        assertEquals(10, resp.getResults().getNumFound());\n        names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n      }\n      assertEquals(3, names.size());\n\n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n      names.clear();\n      for (String value : s) {\n        resp = client.query(solrQuery);\n        assertEquals(10, resp.getResults().getNumFound());\n        names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n      }\n      assertEquals(2, names.size());\n      assertFalse(names.contains(\"solr1\"));\n\n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      Thread.sleep(1200);\n      names.clear();\n      for (String value : s) {\n        resp = client.query(solrQuery);\n        assertEquals(10, resp.getResults().getNumFound());\n        names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n      }\n      assertEquals(3, names.size());\n    }\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrClient client = getLBHttpSolrClient(httpClient, s);\n    client.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["bafca15d8e408346a67f4282ad1143b88023893b","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bafca15d8e408346a67f4282ad1143b88023893b":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}