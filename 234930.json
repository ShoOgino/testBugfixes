{"path":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","commits":[{"id":"8868b7c4fbf215c41e7b4ea2cfc40d1970672910","date":1480034167,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"/dev/null","sourceNew":"        @Override\n        protected BreakIterator getBreakIterator(String field) {\n            String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n            String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n            String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n            Locale locale = parseLocale(language, country, variant);\n            String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n            return parseBreakIterator(type, locale);\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"/dev/null","sourceNew":"        @Override\n        protected BreakIterator getBreakIterator(String field) {\n            String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n            String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n            String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n            Locale locale = parseLocale(language, country, variant);\n            String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n            return parseBreakIterator(type, locale);\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"/dev/null","sourceNew":"        @Override\n        protected BreakIterator getBreakIterator(String field) {\n            String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n            String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n            String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n            Locale locale = parseLocale(language, country, variant);\n            String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n            return parseBreakIterator(type, locale);\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fee424905e7d55c01f551853e7da496662f8722f","date":1482870873,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      return parseBreakIterator(type, locale);\n    }\n\n","sourceOld":"        @Override\n        protected BreakIterator getBreakIterator(String field) {\n            String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n            String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n            String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n            Locale locale = parseLocale(language, country, variant);\n            String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n            return parseBreakIterator(type, locale);\n        }\n\n","bugFix":null,"bugIntro":["722b26faad817b96f481562bf5754c39525bab1c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      return parseBreakIterator(type, locale);\n    }\n\n","sourceOld":"        @Override\n        protected BreakIterator getBreakIterator(String field) {\n            String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n            String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n            String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n            Locale locale = parseLocale(language, country, variant);\n            String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n            return parseBreakIterator(type, locale);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b477a26b744a7d5f4b94bdb5886d59cc82e3c24","date":1483849957,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      BreakIterator baseBI = parseBreakIterator(type, locale);\n\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      if (fragsize <= 1 || baseBI instanceof WholeBreakIterator) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","sourceOld":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      return parseBreakIterator(type, locale);\n    }\n\n","bugFix":null,"bugIntro":["722b26faad817b96f481562bf5754c39525bab1c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      BreakIterator baseBI = parseBreakIterator(type, locale);\n\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      if (fragsize <= 1 || baseBI instanceof WholeBreakIterator) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","sourceOld":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      return parseBreakIterator(type, locale);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4876c675e62c804368ecef725b3a4041b3accbe","date":1484658471,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      if (fragsize == 0) { // special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      BreakIterator baseBI = parseBreakIterator(type, locale);\n\n      if (fragsize <= 1 || baseBI instanceof WholeBreakIterator) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","sourceOld":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      BreakIterator baseBI = parseBreakIterator(type, locale);\n\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      if (fragsize <= 1 || baseBI instanceof WholeBreakIterator) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      if (fragsize == 0) { // special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      BreakIterator baseBI = parseBreakIterator(type, locale);\n\n      if (fragsize <= 1 || baseBI instanceof WholeBreakIterator) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","sourceOld":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      BreakIterator baseBI = parseBreakIterator(type, locale);\n\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      if (fragsize <= 1 || baseBI instanceof WholeBreakIterator) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79b3c136afb2422d938f87bce41900b92d0b27c1","date":1488420247,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      } else if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        return new CustomSeparatorBreakIterator(customSep);\n      }\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      BreakIterator baseBI = parseBreakIterator(type, locale);\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","sourceOld":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      if (fragsize == 0) { // special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      BreakIterator baseBI = parseBreakIterator(type, locale);\n\n      if (fragsize <= 1 || baseBI instanceof WholeBreakIterator) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","bugFix":null,"bugIntro":["722b26faad817b96f481562bf5754c39525bab1c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"722b26faad817b96f481562bf5754c39525bab1c","date":1506436320,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      BreakIterator baseBI;\n      if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        baseBI = new CustomSeparatorBreakIterator(customSep);\n      } else {\n        String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n        String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n        String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n        Locale locale = parseLocale(language, country, variant);\n        baseBI = parseBreakIterator(type, locale);\n      }\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","sourceOld":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      } else if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        return new CustomSeparatorBreakIterator(customSep);\n      }\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      BreakIterator baseBI = parseBreakIterator(type, locale);\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","bugFix":["9b477a26b744a7d5f4b94bdb5886d59cc82e3c24","fee424905e7d55c01f551853e7da496662f8722f","79b3c136afb2422d938f87bce41900b92d0b27c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64c2a46b477cb149a2ef770913d276e9da2f756a","date":1506501094,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      BreakIterator baseBI;\n      if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        baseBI = new CustomSeparatorBreakIterator(customSep);\n      } else {\n        String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n        String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n        String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n        Locale locale = parseLocale(language, country, variant);\n        baseBI = parseBreakIterator(type, locale);\n      }\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","sourceOld":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      } else if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        return new CustomSeparatorBreakIterator(customSep);\n      }\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      BreakIterator baseBI = parseBreakIterator(type, locale);\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      BreakIterator baseBI;\n      if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        baseBI = new CustomSeparatorBreakIterator(customSep);\n      } else {\n        String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n        String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n        String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n        Locale locale = parseLocale(language, country, variant);\n        baseBI = parseBreakIterator(type, locale);\n      }\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","sourceOld":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      } else if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        return new CustomSeparatorBreakIterator(customSep);\n      }\n      String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n      String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n      String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n      Locale locale = parseLocale(language, country, variant);\n      BreakIterator baseBI = parseBreakIterator(type, locale);\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab9796b8ce55058e483d2f195ac9b1942fcf478","date":1577858220,"type":3,"author":"Nándor Mátravölgyi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      BreakIterator baseBI;\n      if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        baseBI = new CustomSeparatorBreakIterator(customSep);\n      } else {\n        String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n        String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n        String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n        Locale locale = parseLocale(language, country, variant);\n        baseBI = parseBreakIterator(type, locale);\n      }\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      float fragalign = params.getFieldFloat(field, HighlightParams.FRAGALIGNRATIO, 0.5f);\n      if (params.getFieldBool(field, HighlightParams.FRAGSIZEISMINIMUM, false)) {\n        return LengthGoalBreakIterator.createMinLength(baseBI, fragsize, fragalign);\n      }\n      return LengthGoalBreakIterator.createClosestToLength(baseBI, fragsize, fragalign);\n    }\n\n","sourceOld":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      BreakIterator baseBI;\n      if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        baseBI = new CustomSeparatorBreakIterator(customSep);\n      } else {\n        String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n        String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n        String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n        Locale locale = parseLocale(language, country, variant);\n        baseBI = parseBreakIterator(type, locale);\n      }\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","bugFix":null,"bugIntro":["a2736176c89a0cd1b5cf70785dcbaa365a67282b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      BreakIterator baseBI;\n      if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        baseBI = new CustomSeparatorBreakIterator(customSep);\n      } else {\n        String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n        String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n        String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n        Locale locale = parseLocale(language, country, variant);\n        baseBI = parseBreakIterator(type, locale);\n      }\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      float fragalign = params.getFieldFloat(field, HighlightParams.FRAGALIGNRATIO, 0.5f);\n      if (params.getFieldBool(field, HighlightParams.FRAGSIZEISMINIMUM, false)) {\n        return LengthGoalBreakIterator.createMinLength(baseBI, fragsize, fragalign);\n      }\n      return LengthGoalBreakIterator.createClosestToLength(baseBI, fragsize, fragalign);\n    }\n\n","sourceOld":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      BreakIterator baseBI;\n      if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        baseBI = new CustomSeparatorBreakIterator(customSep);\n      } else {\n        String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n        String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n        String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n        Locale locale = parseLocale(language, country, variant);\n        baseBI = parseBreakIterator(type, locale);\n      }\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      return LengthGoalBreakIterator.createMinLength(baseBI, fragsize);\n      // TODO option for using createClosestToLength()\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2736176c89a0cd1b5cf70785dcbaa365a67282b","date":1594042297,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#getBreakIterator(String).mjava","sourceNew":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      BreakIterator baseBI;\n      if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        baseBI = new CustomSeparatorBreakIterator(customSep);\n      } else {\n        String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n        String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n        String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n        Locale locale = parseLocale(language, country, variant);\n        baseBI = parseBreakIterator(type, locale);\n      }\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n\n      float fragalign = params.getFieldFloat(field, HighlightParams.FRAGALIGNRATIO, 0.5f);\n      if (params.getFieldBool(field, HighlightParams.FRAGSIZEISMINIMUM, true)) {\n        return LengthGoalBreakIterator.createMinLength(baseBI, fragsize, fragalign);\n      }\n      return LengthGoalBreakIterator.createClosestToLength(baseBI, fragsize, fragalign);\n    }\n\n","sourceOld":"    @Override\n    protected BreakIterator getBreakIterator(String field) {\n      // Use a default fragsize the same as the regex Fragmenter (original Highlighter) since we're\n      //  both likely shooting for sentence-like patterns.\n      int fragsize = params.getFieldInt(field, HighlightParams.FRAGSIZE, LuceneRegexFragmenter.DEFAULT_FRAGMENT_SIZE);\n      String type = params.getFieldParam(field, HighlightParams.BS_TYPE);\n      if (fragsize == 0 || \"WHOLE\".equals(type)) { // 0 is special value; no fragmenting\n        return new WholeBreakIterator();\n      }\n\n      BreakIterator baseBI;\n      if (\"SEPARATOR\".equals(type)) {\n        char customSep = parseBiSepChar(params.getFieldParam(field, HighlightParams.BS_SEP));\n        baseBI = new CustomSeparatorBreakIterator(customSep);\n      } else {\n        String language = params.getFieldParam(field, HighlightParams.BS_LANGUAGE);\n        String country = params.getFieldParam(field, HighlightParams.BS_COUNTRY);\n        String variant = params.getFieldParam(field, HighlightParams.BS_VARIANT);\n        Locale locale = parseLocale(language, country, variant);\n        baseBI = parseBreakIterator(type, locale);\n      }\n\n      if (fragsize <= 1) { // no real minimum size\n        return baseBI;\n      }\n      float fragalign = params.getFieldFloat(field, HighlightParams.FRAGALIGNRATIO, 0.5f);\n      if (params.getFieldBool(field, HighlightParams.FRAGSIZEISMINIMUM, false)) {\n        return LengthGoalBreakIterator.createMinLength(baseBI, fragsize, fragalign);\n      }\n      return LengthGoalBreakIterator.createClosestToLength(baseBI, fragsize, fragalign);\n    }\n\n","bugFix":["9ab9796b8ce55058e483d2f195ac9b1942fcf478"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"722b26faad817b96f481562bf5754c39525bab1c":["79b3c136afb2422d938f87bce41900b92d0b27c1"],"fee424905e7d55c01f551853e7da496662f8722f":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["64c2a46b477cb149a2ef770913d276e9da2f756a"],"9b477a26b744a7d5f4b94bdb5886d59cc82e3c24":["fee424905e7d55c01f551853e7da496662f8722f"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":["64c2a46b477cb149a2ef770913d276e9da2f756a","9ab9796b8ce55058e483d2f195ac9b1942fcf478"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8868b7c4fbf215c41e7b4ea2cfc40d1970672910"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["f03e4bed5023ec3ef93a771b8888cae991cf448d","9b477a26b744a7d5f4b94bdb5886d59cc82e3c24"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["727bb765ff2542275f6d31f67be18d7104bae148","fee424905e7d55c01f551853e7da496662f8722f"],"302d34f2c66e8d489ee13078305c330cbf67b226":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","e4876c675e62c804368ecef725b3a4041b3accbe"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","75babd1dfc2521603bfeb0968042e921d8c6c652"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["79b3c136afb2422d938f87bce41900b92d0b27c1","64c2a46b477cb149a2ef770913d276e9da2f756a"],"e4876c675e62c804368ecef725b3a4041b3accbe":["9b477a26b744a7d5f4b94bdb5886d59cc82e3c24"],"79b3c136afb2422d938f87bce41900b92d0b27c1":["e4876c675e62c804368ecef725b3a4041b3accbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"64c2a46b477cb149a2ef770913d276e9da2f756a":["79b3c136afb2422d938f87bce41900b92d0b27c1","722b26faad817b96f481562bf5754c39525bab1c"],"a2736176c89a0cd1b5cf70785dcbaa365a67282b":["9ab9796b8ce55058e483d2f195ac9b1942fcf478"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a2736176c89a0cd1b5cf70785dcbaa365a67282b"]},"commit2Childs":{"722b26faad817b96f481562bf5754c39525bab1c":["64c2a46b477cb149a2ef770913d276e9da2f756a"],"fee424905e7d55c01f551853e7da496662f8722f":["9b477a26b744a7d5f4b94bdb5886d59cc82e3c24","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["c606b777c4250f3f3f6f66d659c7c4c403679b71","a2736176c89a0cd1b5cf70785dcbaa365a67282b"],"9b477a26b744a7d5f4b94bdb5886d59cc82e3c24":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","e4876c675e62c804368ecef725b3a4041b3accbe"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["fee424905e7d55c01f551853e7da496662f8722f","727bb765ff2542275f6d31f67be18d7104bae148"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["302d34f2c66e8d489ee13078305c330cbf67b226"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"302d34f2c66e8d489ee13078305c330cbf67b226":[],"727bb765ff2542275f6d31f67be18d7104bae148":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"e4876c675e62c804368ecef725b3a4041b3accbe":["302d34f2c66e8d489ee13078305c330cbf67b226","79b3c136afb2422d938f87bce41900b92d0b27c1"],"79b3c136afb2422d938f87bce41900b92d0b27c1":["722b26faad817b96f481562bf5754c39525bab1c","6240b74b884c5587f2a4062dd27d6c32bf228889","64c2a46b477cb149a2ef770913d276e9da2f756a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8868b7c4fbf215c41e7b4ea2cfc40d1970672910","75babd1dfc2521603bfeb0968042e921d8c6c652","727bb765ff2542275f6d31f67be18d7104bae148"],"64c2a46b477cb149a2ef770913d276e9da2f756a":["9ab9796b8ce55058e483d2f195ac9b1942fcf478","c606b777c4250f3f3f6f66d659c7c4c403679b71","6240b74b884c5587f2a4062dd27d6c32bf228889"],"a2736176c89a0cd1b5cf70785dcbaa365a67282b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","302d34f2c66e8d489ee13078305c330cbf67b226","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}