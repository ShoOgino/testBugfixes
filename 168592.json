{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#close().mjava","commits":[{"id":"6256acedd658c13275a01e4ba106a621956a22f6","date":1400192928,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.output1.length);\n        out.writeBytes(field.rootCode.output1.bytes, field.rootCode.output1.offset, field.rootCode.output1.length);\n        out.writeVLong(field.rootCode.output2);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2a0b58a171748f1022e63a0483908e6f50b0abf","date":1400686165,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.output1.length);\n        out.writeBytes(field.rootCode.output1.bytes, field.rootCode.output1.offset, field.rootCode.output1.length);\n        out.writeVLong(field.rootCode.output2);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.output1.length);\n        out.writeBytes(field.rootCode.output1.bytes, field.rootCode.output1.offset, field.rootCode.output1.length);\n        out.writeVLong(field.rootCode.output2);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.output1.length);\n        out.writeBytes(field.rootCode.output1.bytes, field.rootCode.output1.offset, field.rootCode.output1.length);\n        out.writeVLong(field.rootCode.output2);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.output1.length);\n        out.writeBytes(field.rootCode.output1.bytes, field.rootCode.output1.offset, field.rootCode.output1.length);\n        out.writeVLong(field.rootCode.output2);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a2a0b58a171748f1022e63a0483908e6f50b0abf"],"6256acedd658c13275a01e4ba106a621956a22f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2a0b58a171748f1022e63a0483908e6f50b0abf":["6256acedd658c13275a01e4ba106a621956a22f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":[],"6256acedd658c13275a01e4ba106a621956a22f6":["a2a0b58a171748f1022e63a0483908e6f50b0abf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6256acedd658c13275a01e4ba106a621956a22f6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a2a0b58a171748f1022e63a0483908e6f50b0abf":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}