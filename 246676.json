{"path":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","commits":[{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\").setIntValue(i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\").setIntValue(i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\").setIntValue(i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":["382fe3a6ca9745891afebda9b9a57cc158305545"],"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dd6ecb8250c497ed227653279d6a4f470bfbb31","date":1326814483,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = new SlowMultiReaderWrapper(r);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = new SlowMultiReaderWrapper(r);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = new SlowMultiReaderWrapper(r);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["fa0f44f887719e97183771e977cfc4bfb485b766"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["2dd6ecb8250c497ed227653279d6a4f470bfbb31","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"fa0f44f887719e97183771e977cfc4bfb485b766":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["fa0f44f887719e97183771e977cfc4bfb485b766"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["386d1b0dcb065f1bfc494b1407cb41c536b95485","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}