{"path":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#testSharedCores().mjava","commits":[{"id":"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","date":1378833548,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#testSharedCores().mjava","pathOld":"/dev/null","sourceNew":"  public void testSharedCores() {\n    // clear out any junk\n    assertU(optimize());\n    \n    Set<Object> s1 = getCoreCacheKeys();\n    assertEquals(1, s1.size());\n    \n    // add a doc, will go in a new segment\n    assertU(adoc(\"baz\", \"doc\"));\n    assertU(commit(\"softCommit\", \"true\"));\n    \n    Set<Object> s2 = getCoreCacheKeys();\n    assertEquals(2, s2.size());\n    assertTrue(s2.containsAll(s1));\n    \n    // add two docs, will go in a new segment\n    assertU(adoc(\"foo\", \"doc\"));\n    assertU(adoc(\"foo2\", \"doc\"));\n    assertU(commit());\n    \n    Set<Object> s3 = getCoreCacheKeys();\n    assertEquals(3, s3.size());\n    assertTrue(s3.containsAll(s2));\n    \n    // delete a doc\n    assertU(delQ(\"foo2:doc\"));\n    assertU(commit());\n    \n    // same cores\n    assertEquals(s3, getCoreCacheKeys());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#testSharedCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#testSharedCores().mjava","sourceNew":"  public void testSharedCores() {\n    // clear out any junk\n    assertU(optimize());\n\n    Set<Object> s1 = getCoreCacheKeys();\n    assertEquals(1, s1.size());\n\n    // add a doc, will go in a new segment\n    assertU(adoc(\"baz\", \"doc\"));\n    assertU(commit(\"softCommit\", \"true\"));\n\n    Set<Object> s2 = getCoreCacheKeys();\n    assertEquals(2, s2.size());\n    assertTrue(s2.containsAll(s1));\n\n    // add two docs, will go in a new segment\n    assertU(adoc(\"foo\", \"doc\"));\n    assertU(adoc(\"foo2\", \"doc\"));\n    assertU(commit());\n\n    Set<Object> s3 = getCoreCacheKeys();\n    assertEquals(3, s3.size());\n    assertTrue(s3.containsAll(s2));\n\n    // delete a doc\n    assertU(delQ(\"foo2:doc\"));\n    assertU(commit());\n\n    // same cores\n    assertEquals(s3, getCoreCacheKeys());\n  }\n\n","sourceOld":"  public void testSharedCores() {\n    // clear out any junk\n    assertU(optimize());\n    \n    Set<Object> s1 = getCoreCacheKeys();\n    assertEquals(1, s1.size());\n    \n    // add a doc, will go in a new segment\n    assertU(adoc(\"baz\", \"doc\"));\n    assertU(commit(\"softCommit\", \"true\"));\n    \n    Set<Object> s2 = getCoreCacheKeys();\n    assertEquals(2, s2.size());\n    assertTrue(s2.containsAll(s1));\n    \n    // add two docs, will go in a new segment\n    assertU(adoc(\"foo\", \"doc\"));\n    assertU(adoc(\"foo2\", \"doc\"));\n    assertU(commit());\n    \n    Set<Object> s3 = getCoreCacheKeys();\n    assertEquals(3, s3.size());\n    assertTrue(s3.containsAll(s2));\n    \n    // delete a doc\n    assertU(delQ(\"foo2:doc\"));\n    assertU(commit());\n    \n    // same cores\n    assertEquals(s3, getCoreCacheKeys());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#testSharedCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#testSharedCores().mjava","sourceNew":"  public void testSharedCores() {\n    // clear out any junk\n    assertU(optimize());\n\n    Set<Object> s1 = getCoreCacheKeys();\n    assertEquals(1, s1.size());\n\n    // add a doc, will go in a new segment\n    assertU(adoc(\"baz\", \"doc\"));\n    assertU(commit(\"softCommit\", \"true\"));\n\n    Set<Object> s2 = getCoreCacheKeys();\n    assertEquals(2, s2.size());\n    assertTrue(s2.containsAll(s1));\n\n    // add two docs, will go in a new segment\n    assertU(adoc(\"foo\", \"doc\"));\n    assertU(adoc(\"foo2\", \"doc\"));\n    assertU(commit());\n\n    Set<Object> s3 = getCoreCacheKeys();\n    assertEquals(3, s3.size());\n    assertTrue(s3.containsAll(s2));\n\n    // delete a doc\n    assertU(delQ(\"foo2:doc\"));\n    assertU(commit());\n\n    // same cores\n    assertEquals(s3, getCoreCacheKeys());\n  }\n\n","sourceOld":"  public void testSharedCores() {\n    // clear out any junk\n    assertU(optimize());\n    \n    Set<Object> s1 = getCoreCacheKeys();\n    assertEquals(1, s1.size());\n    \n    // add a doc, will go in a new segment\n    assertU(adoc(\"baz\", \"doc\"));\n    assertU(commit(\"softCommit\", \"true\"));\n    \n    Set<Object> s2 = getCoreCacheKeys();\n    assertEquals(2, s2.size());\n    assertTrue(s2.containsAll(s1));\n    \n    // add two docs, will go in a new segment\n    assertU(adoc(\"foo\", \"doc\"));\n    assertU(adoc(\"foo2\", \"doc\"));\n    assertU(commit());\n    \n    Set<Object> s3 = getCoreCacheKeys();\n    assertEquals(3, s3.size());\n    assertTrue(s3.containsAll(s2));\n    \n    // delete a doc\n    assertU(delQ(\"foo2:doc\"));\n    assertU(commit());\n    \n    // same cores\n    assertEquals(s3, getCoreCacheKeys());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ab833f2b623042c834458d4cbcad05073a93793":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360"],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}