{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#setupCluster().mjava","commits":[{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(3)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 3, 1)\n        .setMaxShardsPerNode(1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, sliceCount, 1));\n\n    new UpdateRequest()\n        .add(sdoc(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15})))\n        .add(sdoc(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16})))                  //  5\n        .add(sdoc(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58})))                  //  8\n        .add(sdoc(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15})))                    //  4\n        .add(sdoc(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00})))              //  9\n        .add(sdoc(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03})))  //  3\n        .add(sdoc(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73})))                    //  1\n        .add(sdoc(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d})))                    // 11\n        .add(sdoc(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a})))                    // 10\n        .add(sdoc(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c})))                   //  6\n        .add(sdoc(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c}))) // 13\n        .add(sdoc(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d})))             //  7\n        .add(sdoc(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33})))             // 12\n        // SOLR-6545, wild card field list\n        .add(sdoc(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic_s\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34})))\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(3)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 3, 1)\n        .setMaxShardsPerNode(1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, sliceCount, 1));\n\n    new UpdateRequest()\n        .add(sdoc(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15})))\n        .add(sdoc(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16})))                  //  5\n        .add(sdoc(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58})))                  //  8\n        .add(sdoc(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15})))                    //  4\n        .add(sdoc(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00})))              //  9\n        .add(sdoc(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03})))  //  3\n        .add(sdoc(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73})))                    //  1\n        .add(sdoc(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d})))                    // 11\n        .add(sdoc(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a})))                    // 10\n        .add(sdoc(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c})))                   //  6\n        .add(sdoc(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c}))) // 13\n        .add(sdoc(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d})))             //  7\n        .add(sdoc(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33})))             // 12\n        // SOLR-6545, wild card field list\n        .add(sdoc(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic_s\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34})))\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(3)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 3, 1)\n        .setMaxShardsPerNode(1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, sliceCount, 1));\n\n    new UpdateRequest()\n        .add(sdoc(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15})))\n        .add(sdoc(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16})))                  //  5\n        .add(sdoc(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58})))                  //  8\n        .add(sdoc(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15})))                    //  4\n        .add(sdoc(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00})))              //  9\n        .add(sdoc(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03})))  //  3\n        .add(sdoc(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73})))                    //  1\n        .add(sdoc(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d})))                    // 11\n        .add(sdoc(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a})))                    // 10\n        .add(sdoc(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c})))                   //  6\n        .add(sdoc(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c}))) // 13\n        .add(sdoc(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d})))             //  7\n        .add(sdoc(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33})))             // 12\n        // SOLR-6545, wild card field list\n        .add(sdoc(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic_s\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34})))\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(3)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 3, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, sliceCount, 1));\n\n    new UpdateRequest()\n        .add(sdoc(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15})))\n        .add(sdoc(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16})))                  //  5\n        .add(sdoc(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58})))                  //  8\n        .add(sdoc(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15})))                    //  4\n        .add(sdoc(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00})))              //  9\n        .add(sdoc(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03})))  //  3\n        .add(sdoc(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73})))                    //  1\n        .add(sdoc(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d})))                    // 11\n        .add(sdoc(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a})))                    // 10\n        .add(sdoc(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c})))                   //  6\n        .add(sdoc(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c}))) // 13\n        .add(sdoc(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d})))             //  7\n        .add(sdoc(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33})))             // 12\n        // SOLR-6545, wild card field list\n        .add(sdoc(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic_s\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34})))\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(3)\n        .withSolrXml(TEST_PATH().resolve(\"solr-trackingshardhandler.xml\"))\n        .addConfig(\"conf\", configset(\"cloud-dynamic\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 3, 1)\n        .setMaxShardsPerNode(1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, sliceCount, 1));\n\n    new UpdateRequest()\n        .add(sdoc(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15})))\n        .add(sdoc(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16})))                  //  5\n        .add(sdoc(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58})))                  //  8\n        .add(sdoc(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15})))                    //  4\n        .add(sdoc(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00})))              //  9\n        .add(sdoc(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03})))  //  3\n        .add(sdoc(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73})))                    //  1\n        .add(sdoc(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d})))                    // 11\n        .add(sdoc(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a})))                    // 10\n        .add(sdoc(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c})))                   //  6\n        .add(sdoc(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c}))) // 13\n        .add(sdoc(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d})))             //  7\n        .add(sdoc(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33})))             // 12\n        // SOLR-6545, wild card field list\n        .add(sdoc(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic_s\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34})))\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}