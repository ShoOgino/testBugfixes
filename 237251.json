{"path":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataInput#testSlicingLargeBuffers().mjava","commits":[{"id":"04ba6c272391bbabfb2e302e10e51bc9c3c4963b","date":1545995448,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataInput#testSlicingLargeBuffers().mjava","pathOld":"/dev/null","sourceNew":"  // https://issues.apache.org/jira/browse/LUCENE-8625\n  @Test\n  public void testSlicingLargeBuffers() throws IOException {\n    // Simulate a \"large\" (> 4GB) input by duplicating\n    // buffers with the same content.\n    int MB = 1024 * 1024;\n    byte [] pageBytes = randomBytesOfLength(4 * MB);\n    ByteBuffer page = ByteBuffer.wrap(pageBytes);\n\n    // Add some head shift on the first buffer.\n    final int shift = randomIntBetween(0, pageBytes.length / 2);\n\n    final long simulatedLength =\n        randomLongBetween(0, 2018) + 4L * Integer.MAX_VALUE;\n\n    List<ByteBuffer> buffers = new ArrayList<>();\n    long remaining = simulatedLength + shift;\n    while (remaining > 0) {\n      ByteBuffer bb = page.duplicate();\n      if (bb.remaining() > remaining) {\n        bb.limit(Math.toIntExact(bb.position() + remaining));\n      }\n      buffers.add(bb);\n      remaining -= bb.remaining();\n    }\n    buffers.get(0).position(shift);\n\n    ByteBuffersDataInput dst = new ByteBuffersDataInput(buffers);\n    assertEquals(simulatedLength, dst.size());\n\n    final long max = dst.size();\n    long offset = 0;\n    for (; offset < max; offset += randomIntBetween(MB, 4 * MB)) {\n      assertEquals(0, dst.slice(offset, 0).size());\n      assertEquals(1, dst.slice(offset, 1).size());\n\n      long window = Math.min(max - offset, 1024);\n      ByteBuffersDataInput slice = dst.slice(offset, window);\n      assertEquals(window, slice.size());\n\n      // Sanity check of the content against original pages.\n      for (int i = 0; i < window; i++) {\n        byte expected = pageBytes[(int) ((shift + offset + i) % pageBytes.length)];\n        assertEquals(expected, slice.readByte(i));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04ba6c272391bbabfb2e302e10e51bc9c3c4963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04ba6c272391bbabfb2e302e10e51bc9c3c4963b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04ba6c272391bbabfb2e302e10e51bc9c3c4963b"],"04ba6c272391bbabfb2e302e10e51bc9c3c4963b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}