{"path":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","sourceNew":"  public static void checkUnequal(Query q1, Query q2) {\n    Assert.assertTrue(!q1.equals(q2));\n    Assert.assertTrue(!q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    Assert.assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","sourceOld":"  public static void checkUnequal(Query q1, Query q2) {\n    Assert.assertTrue(!q1.equals(q2));\n    Assert.assertTrue(!q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    Assert.assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"586cf43028f4cae848088bc127a6e4d6773ce9aa","date":1323793944,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","sourceNew":"  public static void checkUnequal(Query q1, Query q2) {\n    Assert.assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    Assert.assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    Assert.assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","sourceOld":"  public static void checkUnequal(Query q1, Query q2) {\n    Assert.assertTrue(!q1.equals(q2));\n    Assert.assertTrue(!q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    Assert.assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":["45fa1757f5581a10e9c63294cf292a14c92d23b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","sourceNew":"  public static void checkUnequal(Query q1, Query q2) {\n    Assert.assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    Assert.assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    Assert.assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","sourceOld":"  public static void checkUnequal(Query q1, Query q2) {\n    Assert.assertTrue(!q1.equals(q2));\n    Assert.assertTrue(!q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    Assert.assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","sourceNew":"  public static void checkUnequal(Query q1, Query q2) {\n    Assert.assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    Assert.assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    Assert.assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","sourceOld":"  public static void checkUnequal(Query q1, Query q2) {\n    Assert.assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    Assert.assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    Assert.assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["7b91922b55d15444d554721b352861d028eb8278","586cf43028f4cae848088bc127a6e4d6773ce9aa"],"586cf43028f4cae848088bc127a6e4d6773ce9aa":["7b91922b55d15444d554721b352861d028eb8278"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["586cf43028f4cae848088bc127a6e4d6773ce9aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["4ceb6a6c707ada1df8bde804e25c98668e699a18","586cf43028f4cae848088bc127a6e4d6773ce9aa"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"586cf43028f4cae848088bc127a6e4d6773ce9aa":["4ceb6a6c707ada1df8bde804e25c98668e699a18","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}