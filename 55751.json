{"path":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","commits":[{"id":"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa","date":1195161267,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"/dev/null","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    reader.setTermInfosIndexDivisor(indexDivisor);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    reader.setTermInfosIndexDivisor(indexDivisor);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    reader.setTermInfosIndexDivisor(indexDivisor);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir);\n    reader.setTermInfosIndexDivisor(indexDivisor);\n    assertEquals(indexDivisor, reader.getTermInfosIndexDivisor());\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testSkipTo(int).mjava","sourceNew":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSkipTo(int indexDivisor) throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    Term ta = new Term(\"content\",\"aaa\");\n    for(int i = 0; i < 10; i++)\n      addDoc(writer, \"aaa aaa aaa aaa\");\n      \n    Term tb = new Term(\"content\",\"bbb\");\n    for(int i = 0; i < 16; i++)\n      addDoc(writer, \"bbb bbb bbb bbb\");\n      \n    Term tc = new Term(\"content\",\"ccc\");\n    for(int i = 0; i < 50; i++)\n      addDoc(writer, \"ccc ccc ccc ccc\");\n      \n    // assure that we deal with a single segment  \n    writer.optimize();\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, indexDivisor);\n\n    TermDocs tdocs = reader.termDocs();\n    \n    // without optimization (assumption skipInterval == 16)\n    \n    // with next\n    tdocs.seek(ta);\n    assertTrue(tdocs.next());\n    assertEquals(0, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(1, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(2, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // without next\n    tdocs.seek(ta);\n    assertTrue(tdocs.skipTo(0));\n    assertEquals(0, tdocs.doc());\n    assertTrue(tdocs.skipTo(4));\n    assertEquals(4, tdocs.doc());\n    assertTrue(tdocs.skipTo(9));\n    assertEquals(9, tdocs.doc());\n    assertFalse(tdocs.skipTo(10));\n    \n    // exactly skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tb);\n    assertTrue(tdocs.next());\n    assertEquals(10, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(11, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(12, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // without next\n    tdocs.seek(tb);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(10, tdocs.doc());\n    assertTrue(tdocs.skipTo(15));\n    assertEquals(15, tdocs.doc());\n    assertTrue(tdocs.skipTo(24));\n    assertEquals(24, tdocs.doc());\n    assertTrue(tdocs.skipTo(25));\n    assertEquals(25, tdocs.doc());\n    assertFalse(tdocs.skipTo(26));\n    \n    // much more than skipInterval documents and therefore with optimization\n    \n    // with next\n    tdocs.seek(tc);\n    assertTrue(tdocs.next());\n    assertEquals(26, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.next());\n    assertEquals(27, tdocs.doc());\n    assertEquals(4, tdocs.freq());\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(28, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    //without next\n    tdocs.seek(tc);\n    assertTrue(tdocs.skipTo(5));\n    assertEquals(26, tdocs.doc());\n    assertTrue(tdocs.skipTo(40));\n    assertEquals(40, tdocs.doc());\n    assertTrue(tdocs.skipTo(57));\n    assertEquals(57, tdocs.doc());\n    assertTrue(tdocs.skipTo(74));\n    assertEquals(74, tdocs.doc());\n    assertTrue(tdocs.skipTo(75));\n    assertEquals(75, tdocs.doc());\n    assertFalse(tdocs.skipTo(76));\n    \n    tdocs.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["961159f13aece73fbb30aea720e77a2237e8bafd"],"961159f13aece73fbb30aea720e77a2237e8bafd":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["961159f13aece73fbb30aea720e77a2237e8bafd"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"961159f13aece73fbb30aea720e77a2237e8bafd":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}