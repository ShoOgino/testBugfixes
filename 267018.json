{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/MultiContentWriterRequest#getContentWriter(String).mjava","commits":[{"id":"7b6c193737882b94fcb01749c75371bf7d7d4c93","date":1539067480,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/MultiContentWriterRequest#getContentWriter(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        new JavaBinCodec().marshal((IteratorWriter) iw -> {\n          while (payload.hasNext()) {\n            Pair<NamedList, Object> next = payload.next();\n\n            if (next.second() instanceof ByteBuffer || next.second() instanceof byte[]) {\n              NamedList params = next.first();\n              if(params.get(ASSUME_CONTENT_TYPE) == null){\n                String detectedType = detect(next.second());\n                if(detectedType==null){\n                  throw new RuntimeException(\"Unknown content type\");\n                }\n                params.add(ASSUME_CONTENT_TYPE, detectedType);\n              }\n              iw.add(params);\n              iw.add(next.second());\n            }  else {\n              throw new RuntimeException(\"payload value must be byte[] or ByteBuffer\");\n            }\n          }\n        }, os);\n      }\n\n      @Override\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/MultiContentWriterRequest#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/MultiContentWriterRequest#getContentWriter(String).mjava","sourceNew":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n    return new RequestWriter.ContentWriter() {\n      @Override\n      @SuppressWarnings({\"unchecked\"})\n      public void write(OutputStream os) throws IOException {\n        new JavaBinCodec().marshal((IteratorWriter) iw -> {\n          while (payload.hasNext()) {\n            @SuppressWarnings({\"rawtypes\"})\n            Pair<NamedList, Object> next = payload.next();\n\n            if (next.second() instanceof ByteBuffer || next.second() instanceof byte[]) {\n              @SuppressWarnings({\"rawtypes\"})\n              NamedList params = next.first();\n              if(params.get(ASSUME_CONTENT_TYPE) == null){\n                String detectedType = detect(next.second());\n                if(detectedType==null){\n                  throw new RuntimeException(\"Unknown content type\");\n                }\n                params.add(ASSUME_CONTENT_TYPE, detectedType);\n              }\n              iw.add(params);\n              iw.add(next.second());\n            }  else {\n              throw new RuntimeException(\"payload value must be byte[] or ByteBuffer\");\n            }\n          }\n        }, os);\n      }\n\n      @Override\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n    return new RequestWriter.ContentWriter() {\n      @Override\n      public void write(OutputStream os) throws IOException {\n        new JavaBinCodec().marshal((IteratorWriter) iw -> {\n          while (payload.hasNext()) {\n            Pair<NamedList, Object> next = payload.next();\n\n            if (next.second() instanceof ByteBuffer || next.second() instanceof byte[]) {\n              NamedList params = next.first();\n              if(params.get(ASSUME_CONTENT_TYPE) == null){\n                String detectedType = detect(next.second());\n                if(detectedType==null){\n                  throw new RuntimeException(\"Unknown content type\");\n                }\n                params.add(ASSUME_CONTENT_TYPE, detectedType);\n              }\n              iw.add(params);\n              iw.add(next.second());\n            }  else {\n              throw new RuntimeException(\"payload value must be byte[] or ByteBuffer\");\n            }\n          }\n        }, os);\n      }\n\n      @Override\n      public String getContentType() {\n        return \"application/javabin\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b6c193737882b94fcb01749c75371bf7d7d4c93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["7b6c193737882b94fcb01749c75371bf7d7d4c93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"7b6c193737882b94fcb01749c75371bf7d7d4c93":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b6c193737882b94fcb01749c75371bf7d7d4c93"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}