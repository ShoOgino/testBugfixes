{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int,int,boolean).mjava","commits":[{"id":"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca","date":1457777566,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int,int).mjava","sourceNew":"  public HeapPointWriter(int initSize, int maxSize, int packedBytesLength, boolean longOrds) {\n    docIDs = new int[initSize];\n    this.maxSize = maxSize;\n    this.packedBytesLength = packedBytesLength;\n    if (longOrds) {\n      this.ordsLong = new long[initSize];\n    } else {\n      this.ords = new int[initSize];\n    }\n    // 4K per page, unless each value is > 4K:\n    valuesPerBlock = Math.max(1, 4096/packedBytesLength);\n  }\n\n","sourceOld":"  public HeapPointWriter(int initSize, int maxSize, int packedBytesLength) {\n    docIDs = new int[initSize];\n    ords = new long[initSize];\n    this.maxSize = maxSize;\n    this.packedBytesLength = packedBytesLength;\n    // 4K per page, unless each value is > 4K:\n    valuesPerBlock = Math.max(1, 4096/packedBytesLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int,int,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#HeapPointWriter(int,int,int,boolean).mjava","sourceNew":"  public HeapPointWriter(int initSize, int maxSize, int packedBytesLength, boolean longOrds, boolean singleValuePerDoc) {\n    docIDs = new int[initSize];\n    this.maxSize = maxSize;\n    this.packedBytesLength = packedBytesLength;\n    this.singleValuePerDoc = singleValuePerDoc;\n    if (singleValuePerDoc) {\n      this.ordsLong = null;\n      this.ords = null;\n    } else {\n      if (longOrds) {\n        this.ordsLong = new long[initSize];\n      } else {\n        this.ords = new int[initSize];\n      }\n    }\n    // 4K per page, unless each value is > 4K:\n    valuesPerBlock = Math.max(1, 4096/packedBytesLength);\n  }\n\n","sourceOld":"  public HeapPointWriter(int initSize, int maxSize, int packedBytesLength, boolean longOrds) {\n    docIDs = new int[initSize];\n    this.maxSize = maxSize;\n    this.packedBytesLength = packedBytesLength;\n    if (longOrds) {\n      this.ordsLong = new long[initSize];\n    } else {\n      this.ords = new int[initSize];\n    }\n    // 4K per page, unless each value is > 4K:\n    valuesPerBlock = Math.max(1, 4096/packedBytesLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["416f9e28900210be57b69bc12e2954fb98ed7ebe"]},"commit2Childs":{"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}