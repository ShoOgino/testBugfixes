{"path":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#applyUpdates(DocIdSetIterator).mjava","commits":[{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#applyUpdates(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  private void applyUpdates(DocIdSetIterator iterator) throws IOException {\n    final MutableBits mutableBits = getMutableBits();\n    int newDeletes = 0;\n    int docID;\n    while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (mutableBits.get(docID)) { // doc is live - clear it\n        mutableBits.clear(docID);\n        newDeletes++;\n        // now that we know we deleted it and we fully control the hard deletes we can do correct accounting\n        // below.\n      }\n    }\n    pendingDeleteCount += newDeletes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb0130363fa13c53e4e78317c35b3b45a3089276","date":1523267438,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#applySoftDeletes(DocIdSetIterator,MutableBits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#applyUpdates(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Clears all bits in the given bitset that are set and are also in the given DocIdSetIterator.\n   *\n   * @param iterator the doc ID set iterator for apply\n   * @param bits the bit set to apply the deletes to\n   * @return the number of bits changed by this function\n   */\n  static int applySoftDeletes(DocIdSetIterator iterator, MutableBits bits) throws IOException {\n    assert iterator != null;\n    int newDeletes = 0;\n    int docID;\n    while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits.get(docID)) { // doc is live - clear it\n        bits.clear(docID);\n        newDeletes++;\n        // now that we know we deleted it and we fully control the hard deletes we can do correct accounting\n        // below.\n      }\n    }\n    return newDeletes;\n  }\n\n","sourceOld":"  private void applyUpdates(DocIdSetIterator iterator) throws IOException {\n    final MutableBits mutableBits = getMutableBits();\n    int newDeletes = 0;\n    int docID;\n    while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (mutableBits.get(docID)) { // doc is live - clear it\n        mutableBits.clear(docID);\n        newDeletes++;\n        // now that we know we deleted it and we fully control the hard deletes we can do correct accounting\n        // below.\n      }\n    }\n    pendingDeleteCount += newDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#applySoftDeletes(DocIdSetIterator,MutableBits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PendingSoftDeletes#applyUpdates(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Clears all bits in the given bitset that are set and are also in the given DocIdSetIterator.\n   *\n   * @param iterator the doc ID set iterator for apply\n   * @param bits the bit set to apply the deletes to\n   * @return the number of bits changed by this function\n   */\n  static int applySoftDeletes(DocIdSetIterator iterator, MutableBits bits) throws IOException {\n    assert iterator != null;\n    int newDeletes = 0;\n    int docID;\n    while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits.get(docID)) { // doc is live - clear it\n        bits.clear(docID);\n        newDeletes++;\n        // now that we know we deleted it and we fully control the hard deletes we can do correct accounting\n        // below.\n      }\n    }\n    return newDeletes;\n  }\n\n","sourceOld":"  private void applyUpdates(DocIdSetIterator iterator) throws IOException {\n    final MutableBits mutableBits = getMutableBits();\n    int newDeletes = 0;\n    int docID;\n    while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (mutableBits.get(docID)) { // doc is live - clear it\n        mutableBits.clear(docID);\n        newDeletes++;\n        // now that we know we deleted it and we fully control the hard deletes we can do correct accounting\n        // below.\n      }\n    }\n    pendingDeleteCount += newDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["5ee0394b8176abd7c90a4be8c05465be1879db79","cb0130363fa13c53e4e78317c35b3b45a3089276"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb0130363fa13c53e4e78317c35b3b45a3089276":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["d58e44159788900f4a2113b84463dc3fbbf80f20","cb0130363fa13c53e4e78317c35b3b45a3089276"],"cb0130363fa13c53e4e78317c35b3b45a3089276":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}