{"path":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#qtest(Query,int[]).mjava","commits":[{"id":"40ed2b673f6264a3f84e2f3925b529283f2eb096","date":1415102987,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#qtest(Query,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestExplanations#qtest(Query,int[]).mjava","sourceNew":"  /** check the expDocNrs first, then check the query (and the explanations) */\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);\n  }\n\n","sourceOld":"  /** check the expDocNrs first, then check the query (and the explanations) */\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c82b0d4b7bf499a159eeff92add20bac6599cc1","date":1465223716,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#qtest(Query,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#qtest(Query,int[]).mjava","sourceNew":"  /** \n   * check the expDocNrs match and have scores that match the explanations.\n   * Query may be randomly wrapped in a BooleanQuery with a term that matches no documents in \n   * order to trigger coord logic.\n   */\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n    if (random().nextBoolean()) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(random().nextBoolean());\n      bq.add(q, BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"NEVER\",\"MATCH\")), BooleanClause.Occur.SHOULD);\n      q = bq.build();\n    }\n    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);\n  }\n\n","sourceOld":"  /** check the expDocNrs first, then check the query (and the explanations) */\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);\n  }\n\n","bugFix":["0e60b4907a1867e066f425a450d96e4297dfa973"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#qtest(Query,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#qtest(Query,int[]).mjava","sourceNew":"  /** \n   * check the expDocNrs match and have scores that match the explanations.\n   * Query may be randomly wrapped in a BooleanQuery with a term that matches no documents in \n   * order to trigger coord logic.\n   */\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n    if (random().nextBoolean()) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(random().nextBoolean());\n      bq.add(q, BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"NEVER\",\"MATCH\")), BooleanClause.Occur.SHOULD);\n      q = bq.build();\n    }\n    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);\n  }\n\n","sourceOld":"  /** check the expDocNrs first, then check the query (and the explanations) */\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#qtest(Query,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#qtest(Query,int[]).mjava","sourceNew":"  /** \n   * check the expDocNrs match and have scores that match the explanations.\n   * Query may be randomly wrapped in a BooleanQuery with a term that matches no documents.\n   */\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n    if (random().nextBoolean()) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(q, BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"NEVER\",\"MATCH\")), BooleanClause.Occur.SHOULD);\n      q = bq.build();\n    }\n    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);\n  }\n\n","sourceOld":"  /** \n   * check the expDocNrs match and have scores that match the explanations.\n   * Query may be randomly wrapped in a BooleanQuery with a term that matches no documents in \n   * order to trigger coord logic.\n   */\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n    if (random().nextBoolean()) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.setDisableCoord(random().nextBoolean());\n      bq.add(q, BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"NEVER\",\"MATCH\")), BooleanClause.Occur.SHOULD);\n      q = bq.build();\n    }\n    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#qtest(Query,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#qtest(Query,int[]).mjava","sourceNew":"  /** \n   * check the expDocNrs match and have scores that match the explanations.\n   * Query may be randomly wrapped in a BooleanQuery with a term that matches no documents.\n   */\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n    if (random().nextBoolean()) {\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(q, BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"NEVER\",\"MATCH\")), BooleanClause.Occur.SHOULD);\n      q = bq.build();\n    }\n    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);\n  }\n\n","sourceOld":"  /** check the expDocNrs first, then check the query (and the explanations) */\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n    CheckHits.checkHitCollector(random(), q, FIELD, searcher, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["40ed2b673f6264a3f84e2f3925b529283f2eb096"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["191128ac5b85671b1671e2c857437694283b6ebf"],"40ed2b673f6264a3f84e2f3925b529283f2eb096":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"191128ac5b85671b1671e2c857437694283b6ebf":["40ed2b673f6264a3f84e2f3925b529283f2eb096","7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["40ed2b673f6264a3f84e2f3925b529283f2eb096","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40ed2b673f6264a3f84e2f3925b529283f2eb096"],"40ed2b673f6264a3f84e2f3925b529283f2eb096":["7c82b0d4b7bf499a159eeff92add20bac6599cc1","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"191128ac5b85671b1671e2c857437694283b6ebf":["c8a0e442f7b61f811680273b25da95994a724466"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}