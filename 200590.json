{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, point);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = new Membership[0];\n      this.notablePoints = new GeoPoint[0];\n    }\n\n","sourceOld":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, point);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = new Membership[0];\n      this.notablePoints = new GeoPoint[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71849bd31d150133a9a1027bf1607967b406c57","date":1436811056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     *@param point is the center point.\n     *@param upperPoint is a point that must be on the circle plane.\n     *@param lowerPoint is another point that must be on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, point);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = new Membership[0];\n      this.notablePoints = new GeoPoint[0];\n    }\n\n","sourceOld":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, point);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = new Membership[0];\n      this.notablePoints = new GeoPoint[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,Plane,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     *@param point is the center point.\n     *@param upperPoint is a point that must be on the circle plane.\n     *@param lowerPoint is another point that must be on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final Plane normalPlane, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = NO_MEMBERSHIP;\n      this.notablePoints = circlePoints;\n    }\n\n","sourceOld":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     *@param point is the center point.\n     *@param upperPoint is a point that must be on the circle plane.\n     *@param lowerPoint is another point that must be on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, point);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = new Membership[0];\n      this.notablePoints = new GeoPoint[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a71849bd31d150133a9a1027bf1607967b406c57":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"f64b7098768253180859cd8faeae6b1a185b06ed":["a71849bd31d150133a9a1027bf1607967b406c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f64b7098768253180859cd8faeae6b1a185b06ed"]},"commit2Childs":{"a71849bd31d150133a9a1027bf1607967b406c57":["f64b7098768253180859cd8faeae6b1a185b06ed"],"f64b7098768253180859cd8faeae6b1a185b06ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a71849bd31d150133a9a1027bf1607967b406c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}