{"path":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}