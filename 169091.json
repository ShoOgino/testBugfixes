{"path":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector).mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector).mjava","pathOld":"/dev/null","sourceNew":"  /** Scores and collects all matching documents.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(HitCollector hc) throws IOException {\n    if (countingSumScorer == null) {\n      initCountingSumScorer();\n    }\n    while (countingSumScorer.next()) {\n      hc.collect(countingSumScorer.doc(), score());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76349ae49451ab1e1e63e8eeb254f82684b1da25","date":1176847207,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector).mjava","sourceNew":"  /** Scores and collects all matching documents.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(HitCollector hc) throws IOException {\n    if ((requiredScorers.size() == 0) &&\n        prohibitedScorers.size() < 32) {\n      // fall back to BooleanScorer, scores documents somewhat out of order\n      BooleanScorer bs = new BooleanScorer(getSimilarity(), minNrShouldMatch);\n      Iterator si = optionalScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, false /* prohibited */);\n      }\n      si = prohibitedScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, true /* prohibited */);\n      }\n      bs.score(hc);\n    } else {\n      if (countingSumScorer == null) {\n        initCountingSumScorer();\n      }\n      while (countingSumScorer.next()) {\n        hc.collect(countingSumScorer.doc(), score());\n      }\n    }\n  }\n\n","sourceOld":"  /** Scores and collects all matching documents.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(HitCollector hc) throws IOException {\n    if (countingSumScorer == null) {\n      initCountingSumScorer();\n    }\n    while (countingSumScorer.next()) {\n      hc.collect(countingSumScorer.doc(), score());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6212677fdd165340d4284ad2530970c664042d6e","date":1180380790,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector).mjava","sourceNew":"  /** Scores and collects all matching documents.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(HitCollector hc) throws IOException {\n    if (allowDocsOutOfOrder && requiredScorers.size() == 0\n            && prohibitedScorers.size() < 32) {\n      // fall back to BooleanScorer, scores documents somewhat out of order\n      BooleanScorer bs = new BooleanScorer(getSimilarity(), minNrShouldMatch);\n      Iterator si = optionalScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, false /* prohibited */);\n      }\n      si = prohibitedScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, true /* prohibited */);\n      }\n      bs.score(hc);\n    } else {\n      if (countingSumScorer == null) {\n        initCountingSumScorer();\n      }\n      while (countingSumScorer.next()) {\n        hc.collect(countingSumScorer.doc(), score());\n      }\n    }\n  }\n\n","sourceOld":"  /** Scores and collects all matching documents.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(HitCollector hc) throws IOException {\n    if ((requiredScorers.size() == 0) &&\n        prohibitedScorers.size() < 32) {\n      // fall back to BooleanScorer, scores documents somewhat out of order\n      BooleanScorer bs = new BooleanScorer(getSimilarity(), minNrShouldMatch);\n      Iterator si = optionalScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, false /* prohibited */);\n      }\n      si = prohibitedScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, true /* prohibited */);\n      }\n      bs.score(hc);\n    } else {\n      if (countingSumScorer == null) {\n        initCountingSumScorer();\n      }\n      while (countingSumScorer.next()) {\n        hc.collect(countingSumScorer.doc(), score());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector).mjava","sourceNew":"  /** Scores and collects all matching documents.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   * @deprecated use {@link #score(Collector)} instead.\n   */\n  public void score(HitCollector hc) throws IOException {\n    score(new HitCollectorWrapper(hc));\n  }\n\n","sourceOld":"  /** Scores and collects all matching documents.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(HitCollector hc) throws IOException {\n    if (allowDocsOutOfOrder && requiredScorers.size() == 0\n            && prohibitedScorers.size() < 32) {\n      // fall back to BooleanScorer, scores documents somewhat out of order\n      BooleanScorer bs = new BooleanScorer(getSimilarity(), minNrShouldMatch);\n      Iterator si = optionalScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, false /* prohibited */);\n      }\n      si = prohibitedScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, true /* prohibited */);\n      }\n      bs.score(hc);\n    } else {\n      if (countingSumScorer == null) {\n        initCountingSumScorer();\n      }\n      while (countingSumScorer.next()) {\n        hc.collect(countingSumScorer.doc(), score());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61cbcf396559d597a914594d7e2830c142ecfd91","date":1255444081,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(HitCollector).mjava","sourceNew":null,"sourceOld":"  /** Scores and collects all matching documents.\n   * @param hc The collector to which all matching documents are passed through\n   * {@link HitCollector#collect(int, float)}.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   * @deprecated use {@link #score(Collector)} instead.\n   */\n  public void score(HitCollector hc) throws IOException {\n    score(new HitCollectorWrapper(hc));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["6212677fdd165340d4284ad2530970c664042d6e"],"76349ae49451ab1e1e63e8eeb254f82684b1da25":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61cbcf396559d597a914594d7e2830c142ecfd91":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"6212677fdd165340d4284ad2530970c664042d6e":["76349ae49451ab1e1e63e8eeb254f82684b1da25"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61cbcf396559d597a914594d7e2830c142ecfd91"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["61cbcf396559d597a914594d7e2830c142ecfd91"],"76349ae49451ab1e1e63e8eeb254f82684b1da25":["6212677fdd165340d4284ad2530970c664042d6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"61cbcf396559d597a914594d7e2830c142ecfd91":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6212677fdd165340d4284ad2530970c664042d6e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["76349ae49451ab1e1e63e8eeb254f82684b1da25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}