{"path":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","commits":[{"id":"34960be55e437a6c96fe66046bf22d33346059f6","date":1363980156,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<ChildScorer>(numScorers);\n    for (int i = 0; i < numScorers; i++) {\n      children.add(new ChildScorer(subScorers[i], \"SHOULD\"));\n    }\n    return children;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1edabd582609f54032bad1c31dc5efe38070127e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","sourceNew":"  @Override\n  public final Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<>(numScorers);\n    for (int i = 0; i < numScorers; i++) {\n      children.add(new ChildScorer(subScorers[i], \"SHOULD\"));\n    }\n    return children;\n  }\n\n","sourceOld":"  @Override\n  public final Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<ChildScorer>(numScorers);\n    for (int i = 0; i < numScorers; i++) {\n      children.add(new ChildScorer(subScorers[i], \"SHOULD\"));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":["1edabd582609f54032bad1c31dc5efe38070127e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1edabd582609f54032bad1c31dc5efe38070127e","date":1404739071,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","sourceNew":"  @Override\n  public final Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<>(sortedSubScorers.length);\n    for (int i = 0; i < sortedSubScorers.length; i++) {\n      children.add(new ChildScorer(sortedSubScorers[i], \"SHOULD\"));\n    }\n    return children;\n  }\n\n","sourceOld":"  @Override\n  public final Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<>(numScorers);\n    for (int i = 0; i < numScorers; i++) {\n      children.add(new ChildScorer(subScorers[i], \"SHOULD\"));\n    }\n    return children;\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","34960be55e437a6c96fe66046bf22d33346059f6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","sourceNew":"  @Override\n  public final Collection<ChildScorer> getChildren() {\n    return childScorers;\n  }\n\n","sourceOld":"  @Override\n  public final Collection<ChildScorer> getChildren() {\n    ArrayList<ChildScorer> children = new ArrayList<>(sortedSubScorers.length);\n    for (int i = 0; i < sortedSubScorers.length; i++) {\n      children.add(new ChildScorer(sortedSubScorers[i], \"SHOULD\"));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26ae065817023d886f3de2bc162e9e1ad71c7a02","date":1485164116,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","sourceNew":"  @Override\n  public final Collection<ChildScorer> getChildren() throws IOException {\n    List<ChildScorer> matchingScorers = new ArrayList<>();\n    updateFreq();\n    for (DisiWrapper s = lead; s != null; s = s.next) {\n      matchingScorers.add(new ChildScorer(s.scorer, \"SHOULD\"));\n    }\n    return matchingScorers;\n  }\n\n","sourceOld":"  @Override\n  public final Collection<ChildScorer> getChildren() {\n    return childScorers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d88f2d3d3107907144cec6455db31ccebd65475a","date":1485171003,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","sourceNew":"  @Override\n  public final Collection<ChildScorer> getChildren() {\n    return childScorers;\n  }\n\n","sourceOld":"  @Override\n  public final Collection<ChildScorer> getChildren() throws IOException {\n    List<ChildScorer> matchingScorers = new ArrayList<>();\n    updateFreq();\n    for (DisiWrapper s = lead; s != null; s = s.next) {\n      matchingScorers.add(new ChildScorer(s.scorer, \"SHOULD\"));\n    }\n    return matchingScorers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c9e07c6618087aa30ff83c3a54818165e76c3a8","date":1487684665,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","sourceNew":"  @Override\n  public final Collection<ChildScorer> getChildren() throws IOException {\n    List<ChildScorer> matchingChildren = new ArrayList<>();\n    updateFreq();\n    for (DisiWrapper s = lead; s != null; s = s.next) {\n      matchingChildren.add(new ChildScorer(s.scorer, \"SHOULD\"));\n    }\n    return matchingChildren;\n  }\n\n","sourceOld":"  @Override\n  public final Collection<ChildScorer> getChildren() {\n    return childScorers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#getChildren().mjava","sourceNew":"  @Override\n  public final Collection<ChildScorable> getChildren() throws IOException {\n    List<ChildScorable> matchingChildren = new ArrayList<>();\n    updateFreq();\n    for (DisiWrapper s = lead; s != null; s = s.next) {\n      matchingChildren.add(new ChildScorable(s.scorer, \"SHOULD\"));\n    }\n    return matchingChildren;\n  }\n\n","sourceOld":"  @Override\n  public final Collection<ChildScorer> getChildren() throws IOException {\n    List<ChildScorer> matchingChildren = new ArrayList<>();\n    updateFreq();\n    for (DisiWrapper s = lead; s != null; s = s.next) {\n      matchingChildren.add(new ChildScorer(s.scorer, \"SHOULD\"));\n    }\n    return matchingChildren;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["1edabd582609f54032bad1c31dc5efe38070127e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["34960be55e437a6c96fe66046bf22d33346059f6"],"1edabd582609f54032bad1c31dc5efe38070127e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"34960be55e437a6c96fe66046bf22d33346059f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["d88f2d3d3107907144cec6455db31ccebd65475a"],"d88f2d3d3107907144cec6455db31ccebd65475a":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1edabd582609f54032bad1c31dc5efe38070127e"],"1edabd582609f54032bad1c31dc5efe38070127e":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"34960be55e437a6c96fe66046bf22d33346059f6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34960be55e437a6c96fe66046bf22d33346059f6"],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"d88f2d3d3107907144cec6455db31ccebd65475a":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["d88f2d3d3107907144cec6455db31ccebd65475a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}