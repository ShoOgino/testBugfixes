{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1eb6b3ce884c0b9e064e112da158013ec33cd91","date":1402692077,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected BitsEntry createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new BitsEntry(new Bits.MatchNoBits(maxDoc));\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      return new BitsEntry(res);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected BitsEntry createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new BitsEntry(new Bits.MatchNoBits(maxDoc));\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      return new BitsEntry(res);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected BitsEntry createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new BitsEntry(new Bits.MatchNoBits(maxDoc));\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new BitsEntry(new Bits.MatchAllBits(maxDoc));\n      }\n      return new BitsEntry(res);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["93dd449115a9247533e44bab47e8429e5dccbc6d","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","56572ec06f1407c066d6b7399413178b33176cd8","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}