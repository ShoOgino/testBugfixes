{"path":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = newRandom();\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockRAMDirectory();\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = newRandom();\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockRAMDirectory();\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = newRandom();\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = newRandom();\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockRAMDirectory();\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = newRandom();\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = newFSDirectory(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = newFSDirectory(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = newFSDirectory(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = newRandom();\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockRAMDirectory();\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = FSDirectory.open(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#testAtomicUpdates().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = newFSDirectory(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testAtomicUpdates() throws Exception {\n    MockIndexWriter.RANDOM = random;\n    Directory directory;\n\n    // First in a RAM directory:\n    directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    runTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.atomic\");\n    directory = newFSDirectory(dirPath);\n    runTest(directory);\n    directory.close();\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["53a31399f2471493d67b19a95c028a74e0113b6a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["1f653cfcf159baeaafe5d01682a911e95bba4012","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a05409176bd65129d67a785ee70e881e238a9aef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}