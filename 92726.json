{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPointsFormat.CrankyPointsReader#getValues(String).mjava","commits":[{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPointsFormat.CrankyPointsReader#getValues(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PointValues getValues(String fieldName) throws IOException {\n      final PointValues delegate = this.delegate.getValues(fieldName);\n      if (delegate == null) {\n        return null;\n      }\n      return new PointValues() {\n\n        @Override\n        public void intersect(IntersectVisitor visitor) throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          delegate.intersect(visitor);\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }  \n        }\n\n        @Override\n        public byte[] getMinPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMinPackedValue();\n        }\n\n        @Override\n        public byte[] getMaxPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMaxPackedValue();\n        }\n\n        @Override\n        public int getNumDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumDimensions();\n        }\n\n        @Override\n        public int getBytesPerDimension() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getBytesPerDimension();\n        }\n\n        @Override\n        public long size() {\n          return delegate.size();\n        }\n\n        @Override\n        public int getDocCount() {\n          return delegate.getDocCount();\n        }\n\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPointsFormat.CrankyPointsReader#getValues(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PointValues getValues(String fieldName) throws IOException {\n      final PointValues delegate = this.delegate.getValues(fieldName);\n      if (delegate == null) {\n        return null;\n      }\n      return new PointValues() {\n\n        @Override\n        public void intersect(IntersectVisitor visitor) throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          delegate.intersect(visitor);\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }  \n        }\n\n        @Override\n        public byte[] getMinPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMinPackedValue();\n        }\n\n        @Override\n        public byte[] getMaxPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMaxPackedValue();\n        }\n\n        @Override\n        public int getNumDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumDimensions();\n        }\n\n        @Override\n        public int getBytesPerDimension() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getBytesPerDimension();\n        }\n\n        @Override\n        public long size() {\n          return delegate.size();\n        }\n\n        @Override\n        public int getDocCount() {\n          return delegate.getDocCount();\n        }\n\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPointsFormat.CrankyPointsReader#getValues(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPointsFormat.CrankyPointsReader#getValues(String).mjava","sourceNew":"    @Override\n    public PointValues getValues(String fieldName) throws IOException {\n      final PointValues delegate = this.delegate.getValues(fieldName);\n      if (delegate == null) {\n        return null;\n      }\n      return new PointValues() {\n\n        @Override\n        public void intersect(IntersectVisitor visitor) throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          delegate.intersect(visitor);\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }  \n        }\n\n        @Override\n        public long estimatePointCount(IntersectVisitor visitor) {\n          return delegate.estimatePointCount(visitor);\n        }\n\n        @Override\n        public byte[] getMinPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMinPackedValue();\n        }\n\n        @Override\n        public byte[] getMaxPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMaxPackedValue();\n        }\n\n        @Override\n        public int getNumDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumDimensions();\n        }\n\n        @Override\n        public int getBytesPerDimension() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getBytesPerDimension();\n        }\n\n        @Override\n        public long size() {\n          return delegate.size();\n        }\n\n        @Override\n        public int getDocCount() {\n          return delegate.getDocCount();\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public PointValues getValues(String fieldName) throws IOException {\n      final PointValues delegate = this.delegate.getValues(fieldName);\n      if (delegate == null) {\n        return null;\n      }\n      return new PointValues() {\n\n        @Override\n        public void intersect(IntersectVisitor visitor) throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          delegate.intersect(visitor);\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }  \n        }\n\n        @Override\n        public byte[] getMinPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMinPackedValue();\n        }\n\n        @Override\n        public byte[] getMaxPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMaxPackedValue();\n        }\n\n        @Override\n        public int getNumDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumDimensions();\n        }\n\n        @Override\n        public int getBytesPerDimension() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getBytesPerDimension();\n        }\n\n        @Override\n        public long size() {\n          return delegate.size();\n        }\n\n        @Override\n        public int getDocCount() {\n          return delegate.getDocCount();\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPointsFormat.CrankyPointsReader#getValues(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPointsFormat.CrankyPointsReader#getValues(String).mjava","sourceNew":"    @Override\n    public PointValues getValues(String fieldName) throws IOException {\n      final PointValues delegate = this.delegate.getValues(fieldName);\n      if (delegate == null) {\n        return null;\n      }\n      return new PointValues() {\n\n        @Override\n        public void intersect(IntersectVisitor visitor) throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          delegate.intersect(visitor);\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }  \n        }\n\n        @Override\n        public long estimatePointCount(IntersectVisitor visitor) {\n          return delegate.estimatePointCount(visitor);\n        }\n\n        @Override\n        public byte[] getMinPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMinPackedValue();\n        }\n\n        @Override\n        public byte[] getMaxPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMaxPackedValue();\n        }\n\n        @Override\n        public int getNumDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumDimensions();\n        }\n\n        @Override\n        public int getBytesPerDimension() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getBytesPerDimension();\n        }\n\n        @Override\n        public long size() {\n          return delegate.size();\n        }\n\n        @Override\n        public int getDocCount() {\n          return delegate.getDocCount();\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public PointValues getValues(String fieldName) throws IOException {\n      final PointValues delegate = this.delegate.getValues(fieldName);\n      if (delegate == null) {\n        return null;\n      }\n      return new PointValues() {\n\n        @Override\n        public void intersect(IntersectVisitor visitor) throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          delegate.intersect(visitor);\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }  \n        }\n\n        @Override\n        public byte[] getMinPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMinPackedValue();\n        }\n\n        @Override\n        public byte[] getMaxPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMaxPackedValue();\n        }\n\n        @Override\n        public int getNumDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumDimensions();\n        }\n\n        @Override\n        public int getBytesPerDimension() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getBytesPerDimension();\n        }\n\n        @Override\n        public long size() {\n          return delegate.size();\n        }\n\n        @Override\n        public int getDocCount() {\n          return delegate.getDocCount();\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPointsFormat.CrankyPointsReader#getValues(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPointsFormat.CrankyPointsReader#getValues(String).mjava","sourceNew":"    @Override\n    public PointValues getValues(String fieldName) throws IOException {\n      final PointValues delegate = this.delegate.getValues(fieldName);\n      if (delegate == null) {\n        return null;\n      }\n      return new PointValues() {\n\n        @Override\n        public void intersect(IntersectVisitor visitor) throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          delegate.intersect(visitor);\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }  \n        }\n\n        @Override\n        public long estimatePointCount(IntersectVisitor visitor) {\n          return delegate.estimatePointCount(visitor);\n        }\n\n        @Override\n        public byte[] getMinPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMinPackedValue();\n        }\n\n        @Override\n        public byte[] getMaxPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMaxPackedValue();\n        }\n\n        @Override\n        public int getNumDataDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumDataDimensions();\n        }\n\n        @Override\n        public int getNumIndexDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumIndexDimensions();\n        }\n\n        @Override\n        public int getBytesPerDimension() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getBytesPerDimension();\n        }\n\n        @Override\n        public long size() {\n          return delegate.size();\n        }\n\n        @Override\n        public int getDocCount() {\n          return delegate.getDocCount();\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public PointValues getValues(String fieldName) throws IOException {\n      final PointValues delegate = this.delegate.getValues(fieldName);\n      if (delegate == null) {\n        return null;\n      }\n      return new PointValues() {\n\n        @Override\n        public void intersect(IntersectVisitor visitor) throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          delegate.intersect(visitor);\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }  \n        }\n\n        @Override\n        public long estimatePointCount(IntersectVisitor visitor) {\n          return delegate.estimatePointCount(visitor);\n        }\n\n        @Override\n        public byte[] getMinPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMinPackedValue();\n        }\n\n        @Override\n        public byte[] getMaxPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMaxPackedValue();\n        }\n\n        @Override\n        public int getNumDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumDimensions();\n        }\n\n        @Override\n        public int getBytesPerDimension() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getBytesPerDimension();\n        }\n\n        @Override\n        public long size() {\n          return delegate.size();\n        }\n\n        @Override\n        public int getDocCount() {\n          return delegate.getDocCount();\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPointsFormat.CrankyPointsReader#getValues(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cranky/CrankyPointsFormat.CrankyPointsReader#getValues(String).mjava","sourceNew":"    @Override\n    public PointValues getValues(String fieldName) throws IOException {\n      final PointValues delegate = this.delegate.getValues(fieldName);\n      if (delegate == null) {\n        return null;\n      }\n      return new PointValues() {\n\n        @Override\n        public void intersect(IntersectVisitor visitor) throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          delegate.intersect(visitor);\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }  \n        }\n\n        @Override\n        public long estimatePointCount(IntersectVisitor visitor) {\n          return delegate.estimatePointCount(visitor);\n        }\n\n        @Override\n        public byte[] getMinPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMinPackedValue();\n        }\n\n        @Override\n        public byte[] getMaxPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMaxPackedValue();\n        }\n\n        @Override\n        public int getNumDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumDimensions();\n        }\n\n        @Override\n        public int getNumIndexDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumIndexDimensions();\n        }\n\n        @Override\n        public int getBytesPerDimension() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getBytesPerDimension();\n        }\n\n        @Override\n        public long size() {\n          return delegate.size();\n        }\n\n        @Override\n        public int getDocCount() {\n          return delegate.getDocCount();\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public PointValues getValues(String fieldName) throws IOException {\n      final PointValues delegate = this.delegate.getValues(fieldName);\n      if (delegate == null) {\n        return null;\n      }\n      return new PointValues() {\n\n        @Override\n        public void intersect(IntersectVisitor visitor) throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          delegate.intersect(visitor);\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }  \n        }\n\n        @Override\n        public long estimatePointCount(IntersectVisitor visitor) {\n          return delegate.estimatePointCount(visitor);\n        }\n\n        @Override\n        public byte[] getMinPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMinPackedValue();\n        }\n\n        @Override\n        public byte[] getMaxPackedValue() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getMaxPackedValue();\n        }\n\n        @Override\n        public int getNumDataDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumDataDimensions();\n        }\n\n        @Override\n        public int getNumIndexDimensions() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getNumIndexDimensions();\n        }\n\n        @Override\n        public int getBytesPerDimension() throws IOException {\n          if (random.nextInt(100) == 0) {\n            throw new IOException(\"Fake IOException\");\n          }\n          return delegate.getBytesPerDimension();\n        }\n\n        @Override\n        public long size() {\n          return delegate.size();\n        }\n\n        @Override\n        public int getDocCount() {\n          return delegate.getDocCount();\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"302d34f2c66e8d489ee13078305c330cbf67b226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["f6652c943595e92c187ee904c382863013eae28f","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["dca67e06c96e95a8d9ef07418b6299bfd981523b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}