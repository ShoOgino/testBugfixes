{"path":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        h += filters.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) h ^= filters.hashCode();\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":null,"bugIntro":["810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        h += filters.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        h += filters.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        h += filters.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) throws IOException {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        h += filters.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4","date":1364235374,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        h += filt.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        h += filters.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f","date":1389311746,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        // NOTE: simple summation used here so keys with the same filters but in\n        // different orders get the same hashCode\n        h += filt.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        h += filt.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71ca10e7131e1f01868c80d228f26a855e79dd0","date":1562166223,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        // NOTE: simple summation used here so keys with the same filters but in\n        // different orders get the same hashCode\n        h += filt.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    long ramSfields = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n      ramSfields += BASE_SF_RAM_BYTES_USED + RamUsageEstimator.sizeOfObject(sf.getField());\n    }\n\n    hc = h;\n\n    ramBytesUsed =\n        BASE_RAM_BYTES_USED +\n        ramSfields +\n        RamUsageEstimator.sizeOfObject(query, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n        RamUsageEstimator.sizeOfObject(filters, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED);\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        // NOTE: simple summation used here so keys with the same filters but in\n        // different orders get the same hashCode\n        h += filt.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n    }\n\n    hc = h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#QueryResultKey(Query,List[Query],Sort,int).mjava","sourceNew":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this(query, filters, sort, nc_flags, Integer.MAX_VALUE);\n  }\n\n","sourceOld":"  public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags) {\n    this.query = query;\n    this.sort = sort;\n    this.filters = filters;\n    this.nc_flags = nc_flags;\n\n    int h = query.hashCode();\n\n    if (filters != null) {\n      for (Query filt : filters)\n        // NOTE: simple summation used here so keys with the same filters but in\n        // different orders get the same hashCode\n        h += filt.hashCode();\n    }\n\n    sfields = (this.sort !=null) ? this.sort.getSort() : defaultSort;\n    long ramSfields = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n    for (SortField sf : sfields) {\n      h = h*29 + sf.hashCode();\n      ramSfields += BASE_SF_RAM_BYTES_USED + RamUsageEstimator.sizeOfObject(sf.getField());\n    }\n\n    hc = h;\n\n    ramBytesUsed =\n        BASE_RAM_BYTES_USED +\n        ramSfields +\n        RamUsageEstimator.sizeOfObject(query, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n        RamUsageEstimator.sizeOfObject(filters, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["bd0ef6574805f3cb9880e0983b7548a6aa933508","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["810c3cf162ba4aa65ed0ad2468679b91bfaeb5c4","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}