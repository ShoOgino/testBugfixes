{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesConnectionWhenExceptionThrownOnSetAutocommit().mjava","commits":[{"id":"61edce935cac7901da5d9d90cdd7103cea022781","date":1371106067,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesConnectionWhenExceptionThrownOnSetAutocommit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testClosesConnectionWhenExceptionThrownOnSetAutocommit() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    SQLException sqlException = new SQLException(\"fake\");\n    EasyMock.expect(dataSource.getConnection()).andReturn(connection);\n    connection.setAutoCommit(false);\n    EasyMock.expectLastCall().andThrow(sqlException);\n    connection.close();\n    mockControl.replay();\n    \n    try {\n      jdbcDataSource.createConnectionFactory(context, props).call();\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n    \n    mockControl.verify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesConnectionWhenExceptionThrownOnSetAutocommit().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesConnectionWhenExceptionThrownOnSetAutocommit().mjava","sourceNew":"  @Test\n  public void testClosesConnectionWhenExceptionThrownOnSetAutocommit() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    SQLException sqlException = new SQLException(\"fake\");\n    when(dataSource.getConnection()).thenReturn(connection);\n    doThrow(sqlException).when(connection).setAutoCommit(false);\n\n    try {\n      jdbcDataSource.createConnectionFactory(context, props).call();\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).close();\n  }\n\n","sourceOld":"  @Test\n  public void testClosesConnectionWhenExceptionThrownOnSetAutocommit() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    SQLException sqlException = new SQLException(\"fake\");\n    EasyMock.expect(dataSource.getConnection()).andReturn(connection);\n    connection.setAutoCommit(false);\n    EasyMock.expectLastCall().andThrow(sqlException);\n    connection.close();\n    mockControl.replay();\n    \n    try {\n      jdbcDataSource.createConnectionFactory(context, props).call();\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n    \n    mockControl.verify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesConnectionWhenExceptionThrownOnSetAutocommit().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesConnectionWhenExceptionThrownOnSetAutocommit().mjava","sourceNew":"  @Test\n  public void testClosesConnectionWhenExceptionThrownOnSetAutocommit() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    SQLException sqlException = new SQLException(\"fake\");\n    when(dataSource.getConnection()).thenReturn(connection);\n    doThrow(sqlException).when(connection).setAutoCommit(false);\n\n    DataImportHandlerException ex = expectThrows(DataImportHandlerException.class,\n        () -> jdbcDataSource.createConnectionFactory(context, props).call());\n    assertSame(sqlException, ex.getCause());\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).close();\n  }\n\n","sourceOld":"  @Test\n  public void testClosesConnectionWhenExceptionThrownOnSetAutocommit() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    SQLException sqlException = new SQLException(\"fake\");\n    when(dataSource.getConnection()).thenReturn(connection);\n    doThrow(sqlException).when(connection).setAutoCommit(false);\n\n    try {\n      jdbcDataSource.createConnectionFactory(context, props).call();\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesConnectionWhenExceptionThrownOnSetAutocommit().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesConnectionWhenExceptionThrownOnSetAutocommit().mjava","sourceNew":"  @Test\n  public void testClosesConnectionWhenExceptionThrownOnSetAutocommit() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    SQLException sqlException = new SQLException(\"fake\");\n    when(dataSource.getConnection()).thenReturn(connection);\n    doThrow(sqlException).when(connection).setAutoCommit(false);\n\n    DataImportHandlerException ex = expectThrows(DataImportHandlerException.class,\n        () -> jdbcDataSource.createConnectionFactory(context, props).call());\n    assertSame(sqlException, ex.getCause());\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).close();\n  }\n\n","sourceOld":"  @Test\n  public void testClosesConnectionWhenExceptionThrownOnSetAutocommit() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    SQLException sqlException = new SQLException(\"fake\");\n    when(dataSource.getConnection()).thenReturn(connection);\n    doThrow(sqlException).when(connection).setAutoCommit(false);\n\n    try {\n      jdbcDataSource.createConnectionFactory(context, props).call();\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesConnectionWhenExceptionThrownOnSetAutocommit().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesConnectionWhenExceptionThrownOnSetAutocommit().mjava","sourceNew":"  @Test\n  public void testClosesConnectionWhenExceptionThrownOnSetAutocommit() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    SQLException sqlException = new SQLException(\"fake\");\n    when(dataSource.getConnection()).thenReturn(connection);\n    doThrow(sqlException).when(connection).setAutoCommit(false);\n\n    DataImportHandlerException ex = expectThrows(DataImportHandlerException.class,\n        () -> jdbcDataSource.createConnectionFactory(context, props).call());\n    assertSame(sqlException, ex.getCause());\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).close();\n  }\n\n","sourceOld":"  @Test\n  public void testClosesConnectionWhenExceptionThrownOnSetAutocommit() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    SQLException sqlException = new SQLException(\"fake\");\n    when(dataSource.getConnection()).thenReturn(connection);\n    doThrow(sqlException).when(connection).setAutoCommit(false);\n\n    try {\n      jdbcDataSource.createConnectionFactory(context, props).call();\n    } catch (DataImportHandlerException ex) {\n      assertSame(sqlException, ex.getCause());\n    }\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testClosesConnectionWhenExceptionThrownOnSetAutocommit().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testClosesConnectionWhenExceptionThrownOnSetAutocommit() throws Exception {\n    MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n    props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n\n    SQLException sqlException = new SQLException(\"fake\");\n    when(dataSource.getConnection()).thenReturn(connection);\n    doThrow(sqlException).when(connection).setAutoCommit(false);\n\n    DataImportHandlerException ex = expectThrows(DataImportHandlerException.class,\n        () -> jdbcDataSource.createConnectionFactory(context, props).call());\n    assertSame(sqlException, ex.getCause());\n\n    verify(dataSource).getConnection();\n    verify(connection).setAutoCommit(false);\n    verify(connection).close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["61edce935cac7901da5d9d90cdd7103cea022781"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"61edce935cac7901da5d9d90cdd7103cea022781":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61edce935cac7901da5d9d90cdd7103cea022781"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"61edce935cac7901da5d9d90cdd7103cea022781":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}