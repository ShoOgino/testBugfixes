{"path":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","commits":[{"id":"92a4da96826f502cf1a56a096929b37ce73e523a","date":1374584011,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled())\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled())\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e732472e86aa53222c571de21dcb7d6a75c1c87","date":1377608255,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.info(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled())\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.info(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled())\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.debug(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.debug(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.info(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.debug(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.debug(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.info(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.debug(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.debug(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.info(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.debug(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.debug(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.info(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.debug(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Registering Log Listener [{}]\", logWatcher.getName());\n        }\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.debug(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.debug(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.debug(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Registering Log Listener [{}]\", logWatcher.getName());\n        }\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled()) {\n      log.debug(\"A LogWatcher is not enabled\");\n      return null;\n    }\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Registering Log Listener [{}]\", logWatcher.getName());\n        }\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["5e732472e86aa53222c571de21dcb7d6a75c1c87","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92a4da96826f502cf1a56a096929b37ce73e523a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5e732472e86aa53222c571de21dcb7d6a75c1c87"],"92a4da96826f502cf1a56a096929b37ce73e523a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5e732472e86aa53222c571de21dcb7d6a75c1c87","126d6ad24eed13163ba0959435d5a80e5672837c"],"5e732472e86aa53222c571de21dcb7d6a75c1c87":["92a4da96826f502cf1a56a096929b37ce73e523a"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["5e732472e86aa53222c571de21dcb7d6a75c1c87"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5e732472e86aa53222c571de21dcb7d6a75c1c87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54faedfb0e03479a38f5ee82f2dfaeea536e9404","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","92a4da96826f502cf1a56a096929b37ce73e523a"],"92a4da96826f502cf1a56a096929b37ce73e523a":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5e732472e86aa53222c571de21dcb7d6a75c1c87"],"5e732472e86aa53222c571de21dcb7d6a75c1c87":["126d6ad24eed13163ba0959435d5a80e5672837c","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}