{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor).mjava","commits":[{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegisterSetup(SolrCore,CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","sourceOld":"  public void preRegisterSetup(SolrCore core, CoreDescriptor cd, boolean waitForNotLive) {\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    publish(cd, ZkStateReader.DOWN);\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    try {\n      joinElection(collection, coreZkNodeName, shardId, ourProps, core);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (IOException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n      \n    waitForLeaderToSeeDownState(cd, coreZkNodeName, waitForNotLive);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private void joinElection(CoreDescriptor cd) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc, afterExpiration);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor).mjava","sourceNew":null,"sourceOld":"  private void joinElection(CoreDescriptor cd) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["9813dd0748537c429b7c0a9b4723ea1ba496c047","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["9813dd0748537c429b7c0a9b4723ea1ba496c047"]},"commit2Childs":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","05a14b2611ead08655a2b2bdc61632eb31316e57","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9813dd0748537c429b7c0a9b4723ea1ba496c047","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}