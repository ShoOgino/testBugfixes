{"path":"contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram#find_among_b(Among[],int).mjava","commits":[{"id":"a5aa159e1ac4009d23cea92797d3804da4f5e7ad","date":1264041909,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram#find_among_b(Among[],int).mjava","pathOld":"contrib/snowball/src/java/org/tartarus/snowball/SnowballProgram#find_among_b(Among[],int).mjava","sourceNew":"    // find_among_b is for backwards processing. Same comments apply\n    protected int find_among_b(Among v[], int v_size)\n    {\n\tint i = 0;\n\tint j = v_size;\n\n\tint c = cursor;\n\tint lb = limit_backward;\n\n\tint common_i = 0;\n\tint common_j = 0;\n\n\tboolean first_key_inspected = false;\n\n\twhile(true) {\n\t    int k = i + ((j - i) >> 1);\n\t    int diff = 0;\n\t    int common = common_i < common_j ? common_i : common_j;\n\t    Among w = v[k];\n\t    int i2;\n\t    for (i2 = w.s_size - 1 - common; i2 >= 0; i2--) {\n\t\tif (c - common == lb) {\n\t\t    diff = -1;\n\t\t    break;\n\t\t}\n\t\tdiff = current[c - 1 - common] - w.s[i2];\n\t\tif (diff != 0) break;\n\t\tcommon++;\n\t    }\n\t    if (diff < 0) {\n\t\tj = k;\n\t\tcommon_j = common;\n\t    } else {\n\t\ti = k;\n\t\tcommon_i = common;\n\t    }\n\t    if (j - i <= 1) {\n\t\tif (i > 0) break;\n\t\tif (j == i) break;\n\t\tif (first_key_inspected) break;\n\t\tfirst_key_inspected = true;\n\t    }\n\t}\n\twhile(true) {\n\t    Among w = v[i];\n\t    if (common_i >= w.s_size) {\n\t\tcursor = c - w.s_size;\n\t\tif (w.method == null) return w.result;\n\n\t\tboolean res;\n\t\ttry {\n\t\t    Object resobj = w.method.invoke(w.methodobject,\n\t\t\t\t\t\t    new Object[0]);\n\t\t    res = resobj.toString().equals(\"true\");\n\t\t} catch (InvocationTargetException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t} catch (IllegalAccessException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t}\n\t\tcursor = c - w.s_size;\n\t\tif (res) return w.result;\n\t    }\n\t    i = w.substring_i;\n\t    if (i < 0) return 0;\n\t}\n    }\n\n","sourceOld":"    // find_among_b is for backwards processing. Same comments apply\n    protected int find_among_b(Among v[], int v_size)\n    {\n\tint i = 0;\n\tint j = v_size;\n\n\tint c = cursor;\n\tint lb = limit_backward;\n\n\tint common_i = 0;\n\tint common_j = 0;\n\n\tboolean first_key_inspected = false;\n\n\twhile(true) {\n\t    int k = i + ((j - i) >> 1);\n\t    int diff = 0;\n\t    int common = common_i < common_j ? common_i : common_j;\n\t    Among w = v[k];\n\t    int i2;\n\t    for (i2 = w.s_size - 1 - common; i2 >= 0; i2--) {\n\t\tif (c - common == lb) {\n\t\t    diff = -1;\n\t\t    break;\n\t\t}\n\t\tdiff = current[c - 1 - common] - w.s[i2];\n\t\tif (diff != 0) break;\n\t\tcommon++;\n\t    }\n\t    if (diff < 0) {\n\t\tj = k;\n\t\tcommon_j = common;\n\t    } else {\n\t\ti = k;\n\t\tcommon_i = common;\n\t    }\n\t    if (j - i <= 1) {\n\t\tif (i > 0) break;\n\t\tif (j == i) break;\n\t\tif (first_key_inspected) break;\n\t\tfirst_key_inspected = true;\n\t    }\n\t}\n\twhile(true) {\n\t    Among w = v[i];\n\t    if (common_i >= w.s_size) {\n\t\tcursor = c - w.s_size;\n\t\tif (w.method == null) return w.result;\n\n\t\tboolean res;\n\t\ttry {\n\t\t    Object resobj = w.method.invoke(w.methodobject,\n\t\t\t\t\t\t    new Object[0]);\n\t\t    res = resobj.toString().equals(\"true\");\n\t\t} catch (InvocationTargetException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t} catch (IllegalAccessException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t}\n\t\tcursor = c - w.s_size;\n\t\tif (res) return w.result;\n\t    }\n\t    i = w.substring_i;\n\t    if (i < 0) return 0;\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23126a10d1d9f3cd19a0b0432566b3090d828c10","date":1267353688,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram#find_among_b(Among[],int).mjava","pathOld":"contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram#find_among_b(Among[],int).mjava","sourceNew":"    // find_among_b is for backwards processing. Same comments apply\n    protected int find_among_b(Among v[], int v_size)\n    {\n\tint i = 0;\n\tint j = v_size;\n\n\tint c = cursor;\n\tint lb = limit_backward;\n\n\tint common_i = 0;\n\tint common_j = 0;\n\n\tboolean first_key_inspected = false;\n\n\twhile(true) {\n\t    int k = i + ((j - i) >> 1);\n\t    int diff = 0;\n\t    int common = common_i < common_j ? common_i : common_j;\n\t    Among w = v[k];\n\t    int i2;\n\t    for (i2 = w.s_size - 1 - common; i2 >= 0; i2--) {\n\t\tif (c - common == lb) {\n\t\t    diff = -1;\n\t\t    break;\n\t\t}\n\t\tdiff = current[c - 1 - common] - w.s[i2];\n\t\tif (diff != 0) break;\n\t\tcommon++;\n\t    }\n\t    if (diff < 0) {\n\t\tj = k;\n\t\tcommon_j = common;\n\t    } else {\n\t\ti = k;\n\t\tcommon_i = common;\n\t    }\n\t    if (j - i <= 1) {\n\t\tif (i > 0) break;\n\t\tif (j == i) break;\n\t\tif (first_key_inspected) break;\n\t\tfirst_key_inspected = true;\n\t    }\n\t}\n\twhile(true) {\n\t    Among w = v[i];\n\t    if (common_i >= w.s_size) {\n\t\tcursor = c - w.s_size;\n\t\tif (w.method == null) return w.result;\n\n\t\tboolean res;\n\t\ttry {\n\t\t    Object resobj = w.method.invoke(w.methodobject, EMPTY_ARGS);\n\t\t    res = resobj.toString().equals(\"true\");\n\t\t} catch (InvocationTargetException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t} catch (IllegalAccessException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t}\n\t\tcursor = c - w.s_size;\n\t\tif (res) return w.result;\n\t    }\n\t    i = w.substring_i;\n\t    if (i < 0) return 0;\n\t}\n    }\n\n","sourceOld":"    // find_among_b is for backwards processing. Same comments apply\n    protected int find_among_b(Among v[], int v_size)\n    {\n\tint i = 0;\n\tint j = v_size;\n\n\tint c = cursor;\n\tint lb = limit_backward;\n\n\tint common_i = 0;\n\tint common_j = 0;\n\n\tboolean first_key_inspected = false;\n\n\twhile(true) {\n\t    int k = i + ((j - i) >> 1);\n\t    int diff = 0;\n\t    int common = common_i < common_j ? common_i : common_j;\n\t    Among w = v[k];\n\t    int i2;\n\t    for (i2 = w.s_size - 1 - common; i2 >= 0; i2--) {\n\t\tif (c - common == lb) {\n\t\t    diff = -1;\n\t\t    break;\n\t\t}\n\t\tdiff = current[c - 1 - common] - w.s[i2];\n\t\tif (diff != 0) break;\n\t\tcommon++;\n\t    }\n\t    if (diff < 0) {\n\t\tj = k;\n\t\tcommon_j = common;\n\t    } else {\n\t\ti = k;\n\t\tcommon_i = common;\n\t    }\n\t    if (j - i <= 1) {\n\t\tif (i > 0) break;\n\t\tif (j == i) break;\n\t\tif (first_key_inspected) break;\n\t\tfirst_key_inspected = true;\n\t    }\n\t}\n\twhile(true) {\n\t    Among w = v[i];\n\t    if (common_i >= w.s_size) {\n\t\tcursor = c - w.s_size;\n\t\tif (w.method == null) return w.result;\n\n\t\tboolean res;\n\t\ttry {\n\t\t    Object resobj = w.method.invoke(w.methodobject,\n\t\t\t\t\t\t    new Object[0]);\n\t\t    res = resobj.toString().equals(\"true\");\n\t\t} catch (InvocationTargetException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t} catch (IllegalAccessException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t}\n\t\tcursor = c - w.s_size;\n\t\tif (res) return w.result;\n\t    }\n\t    i = w.substring_i;\n\t    if (i < 0) return 0;\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram#find_among_b(Among[],int).mjava","pathOld":"contrib/analyzers/common/src/java/org/tartarus/snowball/SnowballProgram#find_among_b(Among[],int).mjava","sourceNew":"    // find_among_b is for backwards processing. Same comments apply\n    protected int find_among_b(Among v[], int v_size)\n    {\n\tint i = 0;\n\tint j = v_size;\n\n\tint c = cursor;\n\tint lb = limit_backward;\n\n\tint common_i = 0;\n\tint common_j = 0;\n\n\tboolean first_key_inspected = false;\n\n\twhile(true) {\n\t    int k = i + ((j - i) >> 1);\n\t    int diff = 0;\n\t    int common = common_i < common_j ? common_i : common_j;\n\t    Among w = v[k];\n\t    int i2;\n\t    for (i2 = w.s_size - 1 - common; i2 >= 0; i2--) {\n\t\tif (c - common == lb) {\n\t\t    diff = -1;\n\t\t    break;\n\t\t}\n\t\tdiff = current[c - 1 - common] - w.s[i2];\n\t\tif (diff != 0) break;\n\t\tcommon++;\n\t    }\n\t    if (diff < 0) {\n\t\tj = k;\n\t\tcommon_j = common;\n\t    } else {\n\t\ti = k;\n\t\tcommon_i = common;\n\t    }\n\t    if (j - i <= 1) {\n\t\tif (i > 0) break;\n\t\tif (j == i) break;\n\t\tif (first_key_inspected) break;\n\t\tfirst_key_inspected = true;\n\t    }\n\t}\n\twhile(true) {\n\t    Among w = v[i];\n\t    if (common_i >= w.s_size) {\n\t\tcursor = c - w.s_size;\n\t\tif (w.method == null) return w.result;\n\n\t\tboolean res;\n\t\ttry {\n\t\t    Object resobj = w.method.invoke(w.methodobject, EMPTY_ARGS);\n\t\t    res = resobj.toString().equals(\"true\");\n\t\t} catch (InvocationTargetException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t} catch (IllegalAccessException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t}\n\t\tcursor = c - w.s_size;\n\t\tif (res) return w.result;\n\t    }\n\t    i = w.substring_i;\n\t    if (i < 0) return 0;\n\t}\n    }\n\n","sourceOld":"    // find_among_b is for backwards processing. Same comments apply\n    protected int find_among_b(Among v[], int v_size)\n    {\n\tint i = 0;\n\tint j = v_size;\n\n\tint c = cursor;\n\tint lb = limit_backward;\n\n\tint common_i = 0;\n\tint common_j = 0;\n\n\tboolean first_key_inspected = false;\n\n\twhile(true) {\n\t    int k = i + ((j - i) >> 1);\n\t    int diff = 0;\n\t    int common = common_i < common_j ? common_i : common_j;\n\t    Among w = v[k];\n\t    int i2;\n\t    for (i2 = w.s_size - 1 - common; i2 >= 0; i2--) {\n\t\tif (c - common == lb) {\n\t\t    diff = -1;\n\t\t    break;\n\t\t}\n\t\tdiff = current[c - 1 - common] - w.s[i2];\n\t\tif (diff != 0) break;\n\t\tcommon++;\n\t    }\n\t    if (diff < 0) {\n\t\tj = k;\n\t\tcommon_j = common;\n\t    } else {\n\t\ti = k;\n\t\tcommon_i = common;\n\t    }\n\t    if (j - i <= 1) {\n\t\tif (i > 0) break;\n\t\tif (j == i) break;\n\t\tif (first_key_inspected) break;\n\t\tfirst_key_inspected = true;\n\t    }\n\t}\n\twhile(true) {\n\t    Among w = v[i];\n\t    if (common_i >= w.s_size) {\n\t\tcursor = c - w.s_size;\n\t\tif (w.method == null) return w.result;\n\n\t\tboolean res;\n\t\ttry {\n\t\t    Object resobj = w.method.invoke(w.methodobject, EMPTY_ARGS);\n\t\t    res = resobj.toString().equals(\"true\");\n\t\t} catch (InvocationTargetException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t} catch (IllegalAccessException e) {\n\t\t    res = false;\n\t\t    // FIXME - debug message\n\t\t}\n\t\tcursor = c - w.s_size;\n\t\tif (res) return w.result;\n\t    }\n\t    i = w.substring_i;\n\t    if (i < 0) return 0;\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23126a10d1d9f3cd19a0b0432566b3090d828c10":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["23126a10d1d9f3cd19a0b0432566b3090d828c10"]},"commit2Childs":{"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["23126a10d1d9f3cd19a0b0432566b3090d828c10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"23126a10d1d9f3cd19a0b0432566b3090d828c10":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}