{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getDocCollection(ClusterState,String).mjava","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f949258e810a0d90760b2a5da9d28819fa0101a3","date":1421928717,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    if(collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if(col != null) return col;\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if(ref == null){\n      //no such collection exists\n      return null;\n    }\n    if(!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(collection.hashCode() % locks.size());\n    synchronized (lock){\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if(col !=null) return col;\n      col = ref.get();\n    }\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    ExpiringCachedDocCollection cachedState = collectionStateCache != null ? collectionStateCache.get(collection) : null;\n    if (cachedState != null && cachedState.cached != null) {\n      return cachedState.cached;\n    }\n\n    DocCollection col = clusterState.getCollectionOrNull(collection);\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00441b3f700d17a330d7eaba86e41cb09a937298","date":1421935240,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    if(collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if(col != null) return col;\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if(ref == null){\n      //no such collection exists\n      return null;\n    }\n    if(!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size());\n    synchronized (lock){\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if(col !=null) return col;\n      col = ref.get();\n    }\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    if(collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if(col != null) return col;\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if(ref == null){\n      //no such collection exists\n      return null;\n    }\n    if(!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(collection.hashCode() % locks.size());\n    synchronized (lock){\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if(col !=null) return col;\n      col = ref.get();\n    }\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e43739a7f6d272c4b638e2bdbdc10057a41d5df3","date":1421942121,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    if(collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if(col != null) return col;\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if(ref == null){\n      //no such collection exists\n      return null;\n    }\n    if(!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Math.abs(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size()));\n    synchronized (lock){\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if(col !=null) return col;\n      col = ref.get();\n    }\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    if(collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if(col != null) return col;\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if(ref == null){\n      //no such collection exists\n      return null;\n    }\n    if(!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size());\n    synchronized (lock){\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if(col !=null) return col;\n      col = ref.get();\n    }\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a20a867de92263c94258f9778db64a5efc7956d","date":1424955868,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String,Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","sourceNew":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection, Integer expectedVersion) throws SolrException {\n    if(collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if(col != null) {\n      if(expectedVersion == null) return col;\n      if(expectedVersion.intValue() == col.getZNodeVersion()) return col;\n    }\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if(ref == null){\n      //no such collection exists\n      return null;\n    }\n    if(!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Math.abs(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size()));\n    synchronized (lock){\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if(col !=null) {\n        if(expectedVersion == null) return col;\n        if(expectedVersion.intValue() == col.getZNodeVersion()) {\n          return col;\n        } else {\n          collectionStateCache.remove(collection);\n        }\n      }\n      col = ref.get();//this is a call to ZK\n    }\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    if(collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if(col != null) return col;\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if(ref == null){\n      //no such collection exists\n      return null;\n    }\n    if(!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Math.abs(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size()));\n    synchronized (lock){\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if(col !=null) return col;\n      col = ref.get();\n    }\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getDocCollection(ClusterState,String).mjava","sourceNew":null,"sourceOld":"  protected DocCollection getDocCollection(ClusterState clusterState, String collection) throws SolrException {\n    if(collection == null) return null;\n    DocCollection col = getFromCache(collection);\n    if(col != null) return col;\n\n    ClusterState.CollectionRef ref = clusterState.getCollectionRef(collection);\n    if(ref == null){\n      //no such collection exists\n      return null;\n    }\n    if(!ref.isLazilyLoaded()) {\n      //it is readily available just return it\n      return ref.get();\n    }\n    List locks = this.locks;\n    final Object lock = locks.get(Math.abs(Hash.murmurhash3_x86_32(collection, 0, collection.length(), 0) % locks.size()));\n    synchronized (lock){\n      //we have waited for sometime just check once again\n      col = getFromCache(collection);\n      if(col !=null) return col;\n      col = ref.get();\n    }\n    if(col == null ) return  null;\n    if(col.getStateFormat() >1) collectionStateCache.put(collection, new ExpiringCachedDocCollection(col));\n    return col;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f949258e810a0d90760b2a5da9d28819fa0101a3":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e43739a7f6d272c4b638e2bdbdc10057a41d5df3","0a20a867de92263c94258f9778db64a5efc7956d"],"0a20a867de92263c94258f9778db64a5efc7956d":["e43739a7f6d272c4b638e2bdbdc10057a41d5df3"],"e43739a7f6d272c4b638e2bdbdc10057a41d5df3":["00441b3f700d17a330d7eaba86e41cb09a937298"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"00441b3f700d17a330d7eaba86e41cb09a937298":["f949258e810a0d90760b2a5da9d28819fa0101a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a20a867de92263c94258f9778db64a5efc7956d"]},"commit2Childs":{"f949258e810a0d90760b2a5da9d28819fa0101a3":["00441b3f700d17a330d7eaba86e41cb09a937298"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e43739a7f6d272c4b638e2bdbdc10057a41d5df3":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a20a867de92263c94258f9778db64a5efc7956d"],"0a20a867de92263c94258f9778db64a5efc7956d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["f949258e810a0d90760b2a5da9d28819fa0101a3"],"00441b3f700d17a330d7eaba86e41cb09a937298":["e43739a7f6d272c4b638e2bdbdc10057a41d5df3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}