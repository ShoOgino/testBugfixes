{"path":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      Directory d = new  RAMDirectory();\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      Directory d = new  RAMDirectory();\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockRAMDirectory d = new  MockRAMDirectory();\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      Directory d = new  RAMDirectory();\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockRAMDirectory d = new  MockRAMDirectory();\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      Directory d = new  RAMDirectory();\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\", IOContext.DEFAULT);\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", IOContext.DEFAULT);\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\", IOContext.DEFAULT);\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", IOContext.DEFAULT);\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\", IOContext.DEFAULT);\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\", IOContext.DEFAULT);\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", IOContext.DEFAULT);\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\", IOContext.DEFAULT);\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", IOContext.DEFAULT);\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\", IOContext.DEFAULT);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0f277693790b6ff2e44509d1b5a1ca5a18f16de","date":1310325911,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1, size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","bugFix":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3a73b15d807e41306466aec106b4cb85b8d5335","date":1326993385,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1, size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1, size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1, size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1, size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1, size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n      d.setPreventDoubleWrite(false);\n      BitVector bv = new BitVector(size);\n      bv.invertAll();\n      for (int i=0; i<count1; i++) {\n        bv.clear(i);\n        assertEquals(i+1,size-bv.count());\n      }\n      bv.write(d, \"TESTBV\", newIOContext(random));\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i+1, size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\", newIOContext(random));\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i,size-bv.count());\n        bv.write(d, \"TESTBV\", newIOContext(random));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a05409176bd65129d67a785ee70e881e238a9aef","53a31399f2471493d67b19a95c028a74e0113b6a"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["53a31399f2471493d67b19a95c028a74e0113b6a"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["53a31399f2471493d67b19a95c028a74e0113b6a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["53a31399f2471493d67b19a95c028a74e0113b6a","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a05409176bd65129d67a785ee70e881e238a9aef"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"a05409176bd65129d67a785ee70e881e238a9aef":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","e3a73b15d807e41306466aec106b4cb85b8d5335"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["fd92b8bcc88e969302510acf77bd6970da3994c4","e3a73b15d807e41306466aec106b4cb85b8d5335","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","817d8435e9135b756f08ce6710ab0baac51bdf88"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","fd92b8bcc88e969302510acf77bd6970da3994c4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}