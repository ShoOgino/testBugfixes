{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,FieldDoc,int,Sort,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort, boolean, boolean)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, FieldDoc after, int nDocs,\n                                Sort sort, boolean fillFields, boolean doDocScores, boolean doMaxScore) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs, after,\n                                                           fillFields, doDocScores,\n                                                           doMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,FieldDoc,int,Sort,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort, boolean, boolean)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, FieldDoc after, int nDocs,\n                                Sort sort, boolean fillFields, boolean doDocScores, boolean doMaxScore) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs, after,\n                                                           fillFields, doDocScores,\n                                                           doMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef0d8a69209261514c5739c770bba706c2308450":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"]},"commit2Childs":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}