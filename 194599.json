{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getStemDict(Reader,CharArrayMap[String]).mjava","commits":[{"id":"a24f16e684000b5854634d7139339a792cc97927","date":1320888085,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getStemDict(Reader,CharArrayMap[String]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getStemDict(File).mjava","sourceNew":"  /**\n   * Reads a stem dictionary. Each line contains:\n   * <pre>word<b>\\t</b>stem</pre>\n   * (i.e. two tab separated words)\n   *\n   * @return stem dictionary that overrules the stemming algorithm\n   * @throws IOException \n   */\n  public static CharArrayMap<String> getStemDict(Reader reader, CharArrayMap<String> result) throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line;\n      while ((line = br.readLine()) != null) {\n        String[] wordstem = line.split(\"\\t\", 2);\n        result.put(wordstem[0], wordstem[1]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads a stem dictionary. Each line contains:\n   * <pre>word<b>\\t</b>stem</pre>\n   * (i.e. two tab separated words)\n   *\n   * @return stem dictionary that overrules the stemming algorithm\n   * @throws IOException \n   */\n  public static HashMap<String, String> getStemDict(File wordstemfile) throws IOException {\n    if (wordstemfile == null)\n      throw new NullPointerException(\"wordstemfile may not be null\");\n    final HashMap<String, String> result = new HashMap<String,String>();\n    BufferedReader br = null;\n    \n    try {\n      br = new BufferedReader(new FileReader(wordstemfile));\n      String line;\n      while ((line = br.readLine()) != null) {\n        String[] wordstem = line.split(\"\\t\", 2);\n        result.put(wordstem[0], wordstem[1]);\n      }\n    } finally {\n      if(br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getStemDict(Reader,CharArrayMap[String]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getStemDict(Reader,CharArrayMap[String]).mjava","sourceNew":"  /**\n   * Reads a stem dictionary. Each line contains:\n   * <pre>word<b>\\t</b>stem</pre>\n   * (i.e. two tab separated words)\n   *\n   * @return stem dictionary that overrules the stemming algorithm\n   * @throws IOException \n   */\n  public static CharArrayMap<String> getStemDict(Reader reader, CharArrayMap<String> result) throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line;\n      while ((line = br.readLine()) != null) {\n        String[] wordstem = line.split(\"\\t\", 2);\n        result.put(wordstem[0], wordstem[1]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads a stem dictionary. Each line contains:\n   * <pre>word<b>\\t</b>stem</pre>\n   * (i.e. two tab separated words)\n   *\n   * @return stem dictionary that overrules the stemming algorithm\n   * @throws IOException \n   */\n  public static CharArrayMap<String> getStemDict(Reader reader, CharArrayMap<String> result) throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line;\n      while ((line = br.readLine()) != null) {\n        String[] wordstem = line.split(\"\\t\", 2);\n        result.put(wordstem[0], wordstem[1]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a24f16e684000b5854634d7139339a792cc97927":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a24f16e684000b5854634d7139339a792cc97927"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"a24f16e684000b5854634d7139339a792cc97927":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a24f16e684000b5854634d7139339a792cc97927"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}