{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param destField\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if (dynamicCopy.getDestFieldName().equals(destField)) {\n        sf.add(getField(dynamicCopy.getRegex()));\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","bugFix":null,"bugIntro":["cbf48bc10d8aa7b417d61814c87fee4f942cdeca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db06e0cd3d23936f96db2498594992ba9f28bf49","date":1366696565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public List<String> getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return Collections.emptyList();\n    }\n    List<String> fieldNames = new ArrayList<String>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          fieldNames.add(copyField.getSource().getName());\n        }\n      }\n    }\n    for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if (dynamicCopy.getDestFieldName().equals(destField)) {\n        fieldNames.add(dynamicCopy.getRegex());\n      }\n    }\n    return fieldNames;\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public SchemaField[] getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return new SchemaField[0];\n    }\n    List<SchemaField> sf = new ArrayList<SchemaField>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          sf.add(copyField.getSource());\n        }\n      }\n    }\n    for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if (dynamicCopy.getDestFieldName().equals(destField)) {\n        sf.add(getField(dynamicCopy.getRegex()));\n      }\n    }\n    return sf.toArray(new SchemaField[sf.size()]);\n  }\n\n","bugFix":null,"bugIntro":["cbf48bc10d8aa7b417d61814c87fee4f942cdeca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public List<String> getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return Collections.emptyList();\n    }\n    List<String> fieldNames = new ArrayList<>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          fieldNames.add(copyField.getSource().getName());\n        }\n      }\n    }\n    for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if (dynamicCopy.getDestFieldName().equals(destField)) {\n        fieldNames.add(dynamicCopy.getRegex());\n      }\n    }\n    return fieldNames;\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public List<String> getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return Collections.emptyList();\n    }\n    List<String> fieldNames = new ArrayList<String>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          fieldNames.add(copyField.getSource().getName());\n        }\n      }\n    }\n    for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if (dynamicCopy.getDestFieldName().equals(destField)) {\n        fieldNames.add(dynamicCopy.getRegex());\n      }\n    }\n    return fieldNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbf48bc10d8aa7b417d61814c87fee4f942cdeca","date":1431530397,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public List<String> getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return Collections.emptyList();\n    }\n    List<String> fieldNames = new ArrayList<>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          fieldNames.add(copyField.getSource().getName());\n        }\n      }\n    }\n    if (null != dynamicCopyFields) {\n      for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n        if (dynamicCopy.getDestFieldName().equals(destField)) {\n          fieldNames.add(dynamicCopy.getRegex());\n        }\n      }\n    }\n    return fieldNames;\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public List<String> getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return Collections.emptyList();\n    }\n    List<String> fieldNames = new ArrayList<>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          fieldNames.add(copyField.getSource().getName());\n        }\n      }\n    }\n    for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if (dynamicCopy.getDestFieldName().equals(destField)) {\n        fieldNames.add(dynamicCopy.getRegex());\n      }\n    }\n    return fieldNames;\n  }\n\n","bugFix":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","db06e0cd3d23936f96db2498594992ba9f28bf49"],"bugIntro":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3","date":1570208701,"type":3,"author":"Thomas Wöckinger","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public List<String> getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return Collections.emptyList();\n    }\n    List<String> fieldNames = new ArrayList<>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          fieldNames.add(copyField.getSource().getName());\n        }\n      }\n    }\n    for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if (dynamicCopy.getDestFieldName().equals(destField)) {\n        fieldNames.add(dynamicCopy.getRegex());\n      }\n    }\n    return fieldNames;\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public List<String> getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return Collections.emptyList();\n    }\n    List<String> fieldNames = new ArrayList<>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          fieldNames.add(copyField.getSource().getName());\n        }\n      }\n    }\n    if (null != dynamicCopyFields) {\n      for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n        if (dynamicCopy.getDestFieldName().equals(destField)) {\n          fieldNames.add(dynamicCopy.getRegex());\n        }\n      }\n    }\n    return fieldNames;\n  }\n\n","bugFix":["cbf48bc10d8aa7b417d61814c87fee4f942cdeca"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getCopySources(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public List<String> getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return Collections.emptyList();\n    }\n    List<String> fieldNames = new ArrayList<>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          fieldNames.add(copyField.getSource().getName());\n        }\n      }\n    }\n    for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if (dynamicCopy.getDestFieldName().equals(destField)) {\n        fieldNames.add(dynamicCopy.getRegex());\n      }\n    }\n    return fieldNames;\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @return Array of fields copied into this field\n   */\n\n  public List<String> getCopySources(String destField) {\n    SchemaField f = getField(destField);\n    if (!isCopyFieldTarget(f)) {\n      return Collections.emptyList();\n    }\n    List<String> fieldNames = new ArrayList<>();\n    for (Map.Entry<String, List<CopyField>> cfs : copyFieldsMap.entrySet()) {\n      for (CopyField copyField : cfs.getValue()) {\n        if (copyField.getDestination().getName().equals(destField)) {\n          fieldNames.add(copyField.getSource().getName());\n        }\n      }\n    }\n    if (null != dynamicCopyFields) {\n      for (DynamicCopy dynamicCopy : dynamicCopyFields) {\n        if (dynamicCopy.getDestFieldName().equals(destField)) {\n          fieldNames.add(dynamicCopy.getRegex());\n        }\n      }\n    }\n    return fieldNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c26f00b574427b55127e869b935845554afde1fa"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["db06e0cd3d23936f96db2498594992ba9f28bf49"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db06e0cd3d23936f96db2498594992ba9f28bf49":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"cbf48bc10d8aa7b417d61814c87fee4f942cdeca":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3":["cbf48bc10d8aa7b417d61814c87fee4f942cdeca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"b0b597c65628ca9e73913a07e81691f8229bae35":["cbf48bc10d8aa7b417d61814c87fee4f942cdeca","43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cbf48bc10d8aa7b417d61814c87fee4f942cdeca"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"db06e0cd3d23936f96db2498594992ba9f28bf49":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cbf48bc10d8aa7b417d61814c87fee4f942cdeca":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3","b0b597c65628ca9e73913a07e81691f8229bae35"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["db06e0cd3d23936f96db2498594992ba9f28bf49"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}