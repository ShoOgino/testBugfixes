{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      if (!row.isLive) {\n        continue;\n      }\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      if (!row.isLive) {\n        continue;\n      }\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      if (!row.isLive) {\n        continue;\n      }\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      if (!row.isLive) {\n        continue;\n      }\n      if (prevVal == null) {//this is the first\n        prevVal = row.cells[idx].approxVal = row.cells[idx].val;\n      } else {\n        double prevD = ((Number) prevVal).doubleValue();\n        double currD = ((Number) row.cells[idx].val).doubleValue();\n        if (Math.abs(prevD - currD) >= precision) {\n          prevVal = row.cells[idx].approxVal = row.cells[idx].val;\n        } else {\n          prevVal = row.cells[idx].approxVal = prevVal;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      if (!row.isLive) {\n        continue;\n      }\n      prevVal = row.cells[idx].approxVal =\n          (prevVal == null || Double.compare(Math.abs(((Number) prevVal).doubleValue() - ((Number) row.cells[idx].val).doubleValue()), precision) > 0) ?\n              row.cells[idx].val :\n              prevVal;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#setApproxVal(List[Row]).mjava","sourceNew":null,"sourceOld":"  //sets the new value according to precision in val_\n  void setApproxVal(List<Row> tmpMatrix) {\n    Object prevVal = null;\n    for (Row row : tmpMatrix) {\n      if (!row.isLive) {\n        continue;\n      }\n      if (prevVal == null) {//this is the first\n        prevVal = row.cells[idx].approxVal = row.cells[idx].val;\n      } else {\n        double prevD = ((Number) prevVal).doubleValue();\n        double currD = ((Number) row.cells[idx].val).doubleValue();\n        if (Math.abs(prevD - currD) >= precision) {\n          prevVal = row.cells[idx].approxVal = row.cells[idx].val;\n        } else {\n          prevVal = row.cells[idx].approxVal = prevVal;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["98f11c416d30e556e0004a9a84960702d12d35b1"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}