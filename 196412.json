{"path":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#nodesToTokenStrings(Collection[Node]).mjava","commits":[{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#nodesToTokenStrings(Collection[Node]).mjava","pathOld":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#nodesToTokenStrings(Collection[Node]).mjava","sourceNew":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> nodesToTokenStrings(Collection<Node> nodes) {\n    List<String> tokens = new ArrayList<String>((nodes.size()));\n    for (Node node : nodes) {\n      final String token = node.getTokenString();\n      if (node.isLeaf()) {\n        tokens.add(token + (char) Node.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> nodesToTokenStrings(Collection<Node> nodes) {\n    List<String> tokens = new ArrayList<String>((nodes.size()));\n    for (Node node : nodes) {\n      final String token = node.getTokenString();\n      if (node.isLeaf()) {\n        tokens.add(token + (char) Node.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a","date":1329809096,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#nodesToTokenStrings(Collection[Node]).mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#nodesToTokenStrings(Collection[Node]).mjava","sourceNew":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> nodesToTokenStrings(Collection<Node> nodes) {\n    List<String> tokens = new ArrayList<String>((nodes.size()));\n    for (Node node : nodes) {\n      final String token = node.getTokenString();\n      if (node.isLeaf()) {\n        tokens.add(token + (char) Node.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> nodesToTokenStrings(Collection<Node> nodes) {\n    List<String> tokens = new ArrayList<String>((nodes.size()));\n    for (Node node : nodes) {\n      final String token = node.getTokenString();\n      if (node.isLeaf()) {\n        tokens.add(token + (char) Node.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}