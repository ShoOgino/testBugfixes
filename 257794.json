{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"/dev/null","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer(Version.LUCENE_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer(Version.LUCENE_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464a71190fd7694704427cd763d7c957c10e935b","date":1256329736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["296b8b38a87feb478921f77834a2302dfe77641c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["464a71190fd7694704427cd763d7c957c10e935b"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"464a71190fd7694704427cd763d7c957c10e935b":["ba1116b3450a9c1642c89445d131b37344055245"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"464a71190fd7694704427cd763d7c957c10e935b":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"296b8b38a87feb478921f77834a2302dfe77641c":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"ba1116b3450a9c1642c89445d131b37344055245":["464a71190fd7694704427cd763d7c957c10e935b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}