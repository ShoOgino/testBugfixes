{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRunLeaderElection(Collection[String],boolean).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRunLeaderElection(Collection[String],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRunLeaderElection(Collection[String],boolean).mjava","sourceNew":"  /**\n   * Simulate running a shard leader election. This operation is a no-op if a leader already exists.\n   * If a new leader is elected the cluster state is saved.\n   * @param collections list of affected collections\n   * @param saveClusterState if true then save cluster state regardless of changes.\n   */\n  private void simRunLeaderElection(Collection<String> collections, boolean saveClusterState) throws Exception {\n    ensureNotClosed();\n    if (saveClusterState) {\n      lock.lockInterruptibly();\n      try {\n        collectionsStatesRef.set(null);\n      } finally {\n        lock.unlock();\n      }\n    }\n    ClusterState state = getClusterState();\n    state.forEachCollection(dc -> {\n        if (!collections.contains(dc.getName())) {\n          return;\n        }\n        dc.getSlices().forEach(s -> {\n            log.trace(\"-- submit leader election for {} / {}\", dc.getName(), s.getName());\n            cloudManager.submit(() -> {\n                simRunLeaderElection(dc.getName(), s.getName(), saveClusterState);\n                return true;\n              });\n          });\n      });\n  }\n\n","sourceOld":"  /**\n   * Simulate running a shard leader election. This operation is a no-op if a leader already exists.\n   * If a new leader is elected the cluster state is saved.\n   * @param collections list of affected collections\n   * @param saveClusterState if true then save cluster state regardless of changes.\n   */\n  private void simRunLeaderElection(Collection<String> collections, boolean saveClusterState) throws Exception {\n    ensureNotClosed();\n    if (saveClusterState) {\n      lock.lockInterruptibly();\n      try {\n        collectionsStatesRef.set(null);\n      } finally {\n        lock.unlock();\n      }\n    }\n    ClusterState state = getClusterState();\n    state.forEachCollection(dc -> {\n        if (!collections.contains(dc.getName())) {\n          return;\n        }\n        dc.getSlices().forEach(s -> {\n            log.trace(\"-- submit leader election for {} / {}\", dc.getName(), s.getName());\n            cloudManager.submit(() -> {\n                simRunLeaderElection(dc.getName(), s.getName(), saveClusterState);\n                return true;\n              });\n          });\n      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRunLeaderElection(Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRunLeaderElection(Collection[String],boolean).mjava","sourceNew":"  /**\n   * Simulate running a shard leader election. This operation is a no-op if a leader already exists.\n   * If a new leader is elected the cluster state is saved.\n   * @param collections list of affected collections\n   * @param saveClusterState if true then save cluster state regardless of changes.\n   */\n  private void simRunLeaderElection(Collection<String> collections, boolean saveClusterState) throws Exception {\n    ensureNotClosed();\n    if (saveClusterState) {\n      lock.lockInterruptibly();\n      try {\n        collectionsStatesRef.set(null);\n      } finally {\n        lock.unlock();\n      }\n    }\n    ClusterState state = getClusterState();\n    state.forEachCollection(dc -> {\n        if (!collections.contains(dc.getName())) {\n          return;\n        }\n        dc.getSlices().forEach(s -> {\n          if (log.isTraceEnabled()) {\n            log.trace(\"-- submit leader election for {} / {}\", dc.getName(), s.getName());\n          }\n            cloudManager.submit(() -> {\n                simRunLeaderElection(dc.getName(), s.getName(), saveClusterState);\n                return true;\n              });\n          });\n      });\n  }\n\n","sourceOld":"  /**\n   * Simulate running a shard leader election. This operation is a no-op if a leader already exists.\n   * If a new leader is elected the cluster state is saved.\n   * @param collections list of affected collections\n   * @param saveClusterState if true then save cluster state regardless of changes.\n   */\n  private void simRunLeaderElection(Collection<String> collections, boolean saveClusterState) throws Exception {\n    ensureNotClosed();\n    if (saveClusterState) {\n      lock.lockInterruptibly();\n      try {\n        collectionsStatesRef.set(null);\n      } finally {\n        lock.unlock();\n      }\n    }\n    ClusterState state = getClusterState();\n    state.forEachCollection(dc -> {\n        if (!collections.contains(dc.getName())) {\n          return;\n        }\n        dc.getSlices().forEach(s -> {\n            log.trace(\"-- submit leader election for {} / {}\", dc.getName(), s.getName());\n            cloudManager.submit(() -> {\n                simRunLeaderElection(dc.getName(), s.getName(), saveClusterState);\n                return true;\n              });\n          });\n      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a","date":1589907167,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRunLeaderElection(Collection[String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRunLeaderElection(Collection[String],boolean).mjava","sourceNew":"  /**\n   * Simulate running a shard leader election. This operation is a no-op if a leader already exists.\n   * If a new leader is elected the cluster state is saved.\n   * @param collections list of affected collections\n   * @param saveClusterState if true then save cluster state regardless of changes.\n   */\n  private void simRunLeaderElection(Collection<String> collections, boolean saveClusterState) throws Exception {\n    ensureNotClosed();\n    if (saveClusterState) {\n      lock.lockInterruptibly();\n      try {\n        collections.forEach(c -> collectionsStatesRef.get(c).invalidate());\n      } finally {\n        lock.unlock();\n      }\n    }\n    ClusterState state = getClusterState();\n    state.forEachCollection(dc -> {\n        if (!collections.contains(dc.getName())) {\n          return;\n        }\n        dc.getSlices().forEach(s -> {\n          if (log.isTraceEnabled()) {\n            log.trace(\"-- submit leader election for {} / {}\", dc.getName(), s.getName());\n          }\n            cloudManager.submit(() -> {\n                simRunLeaderElection(dc.getName(), s.getName(), saveClusterState);\n                return true;\n              });\n          });\n      });\n  }\n\n","sourceOld":"  /**\n   * Simulate running a shard leader election. This operation is a no-op if a leader already exists.\n   * If a new leader is elected the cluster state is saved.\n   * @param collections list of affected collections\n   * @param saveClusterState if true then save cluster state regardless of changes.\n   */\n  private void simRunLeaderElection(Collection<String> collections, boolean saveClusterState) throws Exception {\n    ensureNotClosed();\n    if (saveClusterState) {\n      lock.lockInterruptibly();\n      try {\n        collectionsStatesRef.set(null);\n      } finally {\n        lock.unlock();\n      }\n    }\n    ClusterState state = getClusterState();\n    state.forEachCollection(dc -> {\n        if (!collections.contains(dc.getName())) {\n          return;\n        }\n        dc.getSlices().forEach(s -> {\n          if (log.isTraceEnabled()) {\n            log.trace(\"-- submit leader election for {} / {}\", dc.getName(), s.getName());\n          }\n            cloudManager.submit(() -> {\n                simRunLeaderElection(dc.getName(), s.getName(), saveClusterState);\n                return true;\n              });\n          });\n      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRunLeaderElection(Collection[String],boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Simulate running a shard leader election. This operation is a no-op if a leader already exists.\n   * If a new leader is elected the cluster state is saved.\n   * @param collections list of affected collections\n   * @param saveClusterState if true then save cluster state regardless of changes.\n   */\n  private void simRunLeaderElection(Collection<String> collections, boolean saveClusterState) throws Exception {\n    ensureNotClosed();\n    if (saveClusterState) {\n      lock.lockInterruptibly();\n      try {\n        collections.forEach(c -> collectionsStatesRef.get(c).invalidate());\n      } finally {\n        lock.unlock();\n      }\n    }\n    ClusterState state = getClusterState();\n    state.forEachCollection(dc -> {\n        if (!collections.contains(dc.getName())) {\n          return;\n        }\n        dc.getSlices().forEach(s -> {\n          if (log.isTraceEnabled()) {\n            log.trace(\"-- submit leader election for {} / {}\", dc.getName(), s.getName());\n          }\n            cloudManager.submit(() -> {\n                simRunLeaderElection(dc.getName(), s.getName(), saveClusterState);\n                return true;\n              });\n          });\n      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["e35f2dde06b35aa9904949a3a93fabd090371077"],"e35f2dde06b35aa9904949a3a93fabd090371077":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["3f504512a03d978990cbff30db0522b354e846db"],"e35f2dde06b35aa9904949a3a93fabd090371077":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}