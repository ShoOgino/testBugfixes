{"path":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,Map[String,String]).mjava","commits":[{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit, Map<String, String> readerAttributes) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), false, IOContext.READ, readerAttributes);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false, readerAttributes);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), false, IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,Map[String,String]).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), false, IOContext.READ);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit, Map<String, String> readerAttributes) throws IOException {\n    return new SegmentInfos.FindSegmentsFile<DirectoryReader>(directory) {\n      @Override\n      protected DirectoryReader doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = SegmentInfos.readCommit(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        boolean success = false;\n        try {\n          for (int i = sis.size()-1; i >= 0; i--) {\n            readers[i] = new SegmentReader(sis.info(i), sis.getIndexCreatedVersionMajor(), false, IOContext.READ, readerAttributes);\n          }\n\n          // This may throw CorruptIndexException if there are too many docs, so\n          // it must be inside try clause so we close readers in that case:\n          DirectoryReader reader = new StandardDirectoryReader(directory, readers, null, sis, false, false, readerAttributes);\n          success = true;\n\n          return reader;\n        } finally {\n          if (success == false) {\n            IOUtils.closeWhileHandlingException(readers);\n          }\n        }\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"763da4a9605e47013078edc323b9d4b608f0f9e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"]},"commit2Childs":{"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}