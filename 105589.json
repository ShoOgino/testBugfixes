{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_createInstance(String,Class[T],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#[T-extends-Object]_createInstance(String,Class[T],String).mjava","sourceNew":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T> T createInstance(String className, Class<T> cast, String msg) {\n    Class<? extends T> clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className, cast);\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return getResourceLoader().newInstance(className, cast);//use the empty constructor\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","sourceOld":"  /** Creates an instance by trying a constructor that accepts a SolrCore before\n   *  trying the default (no arg) constructor.\n   *@param className the instance class to create\n   *@param cast the class or interface that the instance should extend or implement\n   *@param msg a message helping compose the exception error if any occurs.\n   *@return the desired instance\n   *@throws SolrException if the object could not be instantiated\n   */\n  private <T extends Object> T createInstance(String className, Class<T> cast, String msg) {\n    Class clazz = null;\n    if (msg == null) msg = \"SolrCore Object\";\n    try {\n        clazz = getResourceLoader().findClass(className);\n        if (cast != null && !cast.isAssignableFrom(clazz)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" is not a \" +cast.getName());\n        }\n      //most of the classes do not have constructors which takes SolrCore argument. It is recommended to obtain SolrCore by implementing SolrCoreAware.\n      // So invariably always it will cause a  NoSuchMethodException. So iterate though the list of available constructors\n        Constructor[] cons =  clazz.getConstructors();\n        for (Constructor con : cons) {\n          Class[] types = con.getParameterTypes();\n          if(types.length == 1 && types[0] == SolrCore.class){\n            return (T)con.newInstance(this);\n          }\n        }\n        return (T) getResourceLoader().newInstance(className);//use the empty constructor      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Error Instantiating \"+msg+\", \"+className+ \" failed to instantiate \" +cast.getName(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}