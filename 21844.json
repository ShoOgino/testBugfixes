{"path":"solr/core/src/test/org/apache/solr/update/processor/AbstractAtomicUpdatesMultivalueTestBase#runTestForField(String,Object[],String[],Optional[Function[Object,Object]]).mjava","commits":[{"id":"216b828f4f2341ae2e70eb7585059e3576e4cb99","date":1570451249,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AbstractAtomicUpdatesMultivalueTestBase#runTestForField(String,Object[],String[],Optional[Function[Object,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  private void runTestForField(final String fieldName, final Object[] values, final String[] queries,\n      final Optional<Function<Object,Object>> valueConverter)\n      throws SolrServerException, IOException {\n\n    final Function<Object,Object> vc = valueConverter.orElse(o -> o);\n\n    getSolrClient().add(Arrays.asList(\n        sdoc(\"id\", \"20000\", fieldName, Arrays.asList(values[0], values[1], values[2])),\n        sdoc(\"id\", \"20001\", fieldName, Arrays.asList(values[1], values[2], values[3]))));\n    getSolrClient().commit(true, true);\n\n    if (queries != null) {\n      assertQR(fieldName, queries[0], 1);\n      assertQR(fieldName, queries[1], 2);\n      assertQR(fieldName, queries[2], 2);\n      assertQR(fieldName, queries[3], 1);\n    }\n\n    Collection<Object> fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(3, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[0]), vc.apply(values[1]), vc.apply(values[2])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[3]))));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(3, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[0]))));\n\n    getSolrClient().add(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"remove\",\n        Lists.newArrayList(values[0]))));\n    getSolrClient().commit(true, true);\n\n    if (queries != null) {\n      assertQR(fieldName, queries[0], 0);\n      assertQR(fieldName, queries[1], 2);\n      assertQR(fieldName, queries[2], 2);\n      assertQR(fieldName, queries[3], 1);\n    }\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[1]), vc.apply(values[2])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[0]), vc.apply(values[3]))));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(3, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[0]))));\n\n    getSolrClient().add(sdoc(\"id\", \"20001\", fieldName, ImmutableMap.of(\"remove\",\n        Lists.newArrayList(values[0], values[1], values[2]))));\n    getSolrClient().commit(true, true);\n\n    if (queries != null) {\n      assertQR(fieldName, queries[0], 0);\n      assertQR(fieldName, queries[1], 1);\n      assertQR(fieldName, queries[2], 1);\n      assertQR(fieldName, queries[3], 1);\n    }\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[1]), vc.apply(values[2])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[0]), vc.apply(values[3]))));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(1, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[3])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[0]), vc.apply(values[1]), vc.apply(values[2]))));\n\n    getSolrClient().add(Arrays.asList(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"add\",\n        Lists.newArrayList(values[0]), \"remove\", Lists.newArrayList(values[1], values[2]))),\n        sdoc(\"id\", \"20001\", fieldName,\n            ImmutableMap.of(\"add\", Lists.newArrayList(values[0]), \"remove\", Lists.newArrayList(values[3])))));\n    getSolrClient().commit(true, true);\n\n    if (queries != null) {\n      assertQR(fieldName, queries[0], 2);\n      assertQR(fieldName, queries[1], 0);\n      assertQR(fieldName, queries[2], 0);\n      assertQR(fieldName, queries[3], 0);\n    }\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(1, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[0])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3]))));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(1, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[0])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3]))));\n\n    getSolrClient().add(Arrays.asList(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"set\",\n        Lists.newArrayList(values[0], values[1], values[2], values[3]))), sdoc(\"id\", \"20001\", fieldName,\n            ImmutableMap.of(\"set\",\n                Lists.newArrayList(values[0], values[1], values[2], values[3])))));\n    getSolrClient().commit(true, true);\n\n    if (queries != null) {\n      assertQR(fieldName, queries[0], 2);\n      assertQR(fieldName, queries[1], 2);\n      assertQR(fieldName, queries[2], 2);\n      assertQR(fieldName, queries[3], 2);\n    }\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(4, fieldValues.size());\n    assertThat(fieldValues,\n        hasItems(vc.apply(values[0]), vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3])));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(4, fieldValues.size());\n    assertThat(fieldValues,\n        hasItems(vc.apply(values[0]), vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3])));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AbstractAtomicUpdatesMultivalueTestBase#runTestForField(String,Object[],String[],Optional[Function[Object,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  private void runTestForField(final String fieldName, final Object[] values, final String[] queries,\n      final Optional<Function<Object,Object>> valueConverter)\n      throws SolrServerException, IOException {\n\n    final Function<Object,Object> vc = valueConverter.orElse(o -> o);\n\n    getSolrClient().add(Arrays.asList(\n        sdoc(\"id\", \"20000\", fieldName, Arrays.asList(values[0], values[1], values[2])),\n        sdoc(\"id\", \"20001\", fieldName, Arrays.asList(values[1], values[2], values[3]))));\n    getSolrClient().commit(true, true);\n\n    if (queries != null) {\n      assertQR(fieldName, queries[0], 1);\n      assertQR(fieldName, queries[1], 2);\n      assertQR(fieldName, queries[2], 2);\n      assertQR(fieldName, queries[3], 1);\n    }\n\n    Collection<Object> fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(3, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[0]), vc.apply(values[1]), vc.apply(values[2])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[3]))));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(3, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[0]))));\n\n    getSolrClient().add(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"remove\",\n        Lists.newArrayList(values[0]))));\n    getSolrClient().commit(true, true);\n\n    if (queries != null) {\n      assertQR(fieldName, queries[0], 0);\n      assertQR(fieldName, queries[1], 2);\n      assertQR(fieldName, queries[2], 2);\n      assertQR(fieldName, queries[3], 1);\n    }\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[1]), vc.apply(values[2])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[0]), vc.apply(values[3]))));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(3, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[0]))));\n\n    getSolrClient().add(sdoc(\"id\", \"20001\", fieldName, ImmutableMap.of(\"remove\",\n        Lists.newArrayList(values[0], values[1], values[2]))));\n    getSolrClient().commit(true, true);\n\n    if (queries != null) {\n      assertQR(fieldName, queries[0], 0);\n      assertQR(fieldName, queries[1], 1);\n      assertQR(fieldName, queries[2], 1);\n      assertQR(fieldName, queries[3], 1);\n    }\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[1]), vc.apply(values[2])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[0]), vc.apply(values[3]))));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(1, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[3])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[0]), vc.apply(values[1]), vc.apply(values[2]))));\n\n    getSolrClient().add(Arrays.asList(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"add\",\n        Lists.newArrayList(values[0]), \"remove\", Lists.newArrayList(values[1], values[2]))),\n        sdoc(\"id\", \"20001\", fieldName,\n            ImmutableMap.of(\"add\", Lists.newArrayList(values[0]), \"remove\", Lists.newArrayList(values[3])))));\n    getSolrClient().commit(true, true);\n\n    if (queries != null) {\n      assertQR(fieldName, queries[0], 2);\n      assertQR(fieldName, queries[1], 0);\n      assertQR(fieldName, queries[2], 0);\n      assertQR(fieldName, queries[3], 0);\n    }\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(1, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[0])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3]))));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(1, fieldValues.size());\n    assertThat(fieldValues, hasItems(vc.apply(values[0])));\n    assertThat(fieldValues, not(hasItems(vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3]))));\n\n    getSolrClient().add(Arrays.asList(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"set\",\n        Lists.newArrayList(values[0], values[1], values[2], values[3]))), sdoc(\"id\", \"20001\", fieldName,\n            ImmutableMap.of(\"set\",\n                Lists.newArrayList(values[0], values[1], values[2], values[3])))));\n    getSolrClient().commit(true, true);\n\n    if (queries != null) {\n      assertQR(fieldName, queries[0], 2);\n      assertQR(fieldName, queries[1], 2);\n      assertQR(fieldName, queries[2], 2);\n      assertQR(fieldName, queries[3], 2);\n    }\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(4, fieldValues.size());\n    assertThat(fieldValues,\n        hasItems(vc.apply(values[0]), vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3])));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(4, fieldValues.size());\n    assertThat(fieldValues,\n        hasItems(vc.apply(values[0]), vc.apply(values[1]), vc.apply(values[2]), vc.apply(values[3])));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"216b828f4f2341ae2e70eb7585059e3576e4cb99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["216b828f4f2341ae2e70eb7585059e3576e4cb99"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","216b828f4f2341ae2e70eb7585059e3576e4cb99"]},"commit2Childs":{"216b828f4f2341ae2e70eb7585059e3576e4cb99":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["216b828f4f2341ae2e70eb7585059e3576e4cb99","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}