{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","sourceNew":"  // writes term dictionary \"block\"\n  // first term is absolute encoded as vint length + bytes.\n  // lengths of subsequent N terms are encoded as either N bytes or N shorts.\n  // in the double-byte case, the first byte is indicated with -1.\n  // subsequent terms are encoded as byte suffixLength + bytes.\n  private void flushTermsDictBlock(RAMOutputStream headerBuffer, RAMOutputStream bytesBuffer, int suffixDeltas[]) throws IOException {\n    boolean twoByte = false;\n    for (int i = 1; i < suffixDeltas.length; i++) {\n      if (suffixDeltas[i] > 254) {\n        twoByte = true;\n      }\n    }\n    if (twoByte) {\n      headerBuffer.writeByte((byte)255);\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeShort((short) suffixDeltas[i]);\n      }\n    } else {\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeByte((byte) suffixDeltas[i]);\n      }\n    }\n    headerBuffer.writeTo(data);\n    headerBuffer.reset();\n    bytesBuffer.writeTo(data);\n    bytesBuffer.reset();\n  }\n\n","sourceOld":"  // writes term dictionary \"block\"\n  // first term is absolute encoded as vint length + bytes.\n  // lengths of subsequent N terms are encoded as either N bytes or N shorts.\n  // in the double-byte case, the first byte is indicated with -1.\n  // subsequent terms are encoded as byte suffixLength + bytes.\n  private void flushTermsDictBlock(RAMOutputStream headerBuffer, RAMOutputStream bytesBuffer, int suffixDeltas[]) throws IOException {\n    boolean twoByte = false;\n    for (int i = 1; i < suffixDeltas.length; i++) {\n      if (suffixDeltas[i] > 254) {\n        twoByte = true;\n      }\n    }\n    if (twoByte) {\n      headerBuffer.writeByte((byte)255);\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeShort((short) suffixDeltas[i]);\n      }\n    } else {\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeByte((byte) suffixDeltas[i]);\n      }\n    }\n    headerBuffer.writeTo(data);\n    headerBuffer.reset();\n    bytesBuffer.writeTo(data);\n    bytesBuffer.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","sourceNew":"  // writes term dictionary \"block\"\n  // first term is absolute encoded as vint length + bytes.\n  // lengths of subsequent N terms are encoded as either N bytes or N shorts.\n  // in the double-byte case, the first byte is indicated with -1.\n  // subsequent terms are encoded as byte suffixLength + bytes.\n  private void flushTermsDictBlock(RAMOutputStream headerBuffer, RAMOutputStream bytesBuffer, int suffixDeltas[]) throws IOException {\n    boolean twoByte = false;\n    for (int i = 1; i < suffixDeltas.length; i++) {\n      if (suffixDeltas[i] > 254) {\n        twoByte = true;\n      }\n    }\n    if (twoByte) {\n      headerBuffer.writeByte((byte)255);\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeShort((short) suffixDeltas[i]);\n      }\n    } else {\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeByte((byte) suffixDeltas[i]);\n      }\n    }\n    headerBuffer.writeTo(data);\n    headerBuffer.reset();\n    bytesBuffer.writeTo(data);\n    bytesBuffer.reset();\n  }\n\n","sourceOld":"  // writes term dictionary \"block\"\n  // first term is absolute encoded as vint length + bytes.\n  // lengths of subsequent N terms are encoded as either N bytes or N shorts.\n  // in the double-byte case, the first byte is indicated with -1.\n  // subsequent terms are encoded as byte suffixLength + bytes.\n  private void flushTermsDictBlock(RAMOutputStream headerBuffer, RAMOutputStream bytesBuffer, int suffixDeltas[]) throws IOException {\n    boolean twoByte = false;\n    for (int i = 1; i < suffixDeltas.length; i++) {\n      if (suffixDeltas[i] > 254) {\n        twoByte = true;\n      }\n    }\n    if (twoByte) {\n      headerBuffer.writeByte((byte)255);\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeShort((short) suffixDeltas[i]);\n      }\n    } else {\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeByte((byte) suffixDeltas[i]);\n      }\n    }\n    headerBuffer.writeTo(data);\n    headerBuffer.reset();\n    bytesBuffer.writeTo(data);\n    bytesBuffer.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","sourceNew":"  // writes term dictionary \"block\"\n  // first term is absolute encoded as vint length + bytes.\n  // lengths of subsequent N terms are encoded as either N bytes or N shorts.\n  // in the double-byte case, the first byte is indicated with -1.\n  // subsequent terms are encoded as byte suffixLength + bytes.\n  private void flushTermsDictBlock(RAMOutputStream headerBuffer, RAMOutputStream bytesBuffer, int suffixDeltas[]) throws IOException {\n    boolean twoByte = false;\n    for (int i = 1; i < suffixDeltas.length; i++) {\n      if (suffixDeltas[i] > 254) {\n        twoByte = true;\n      }\n    }\n    if (twoByte) {\n      headerBuffer.writeByte((byte)255);\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeShort((short) suffixDeltas[i]);\n      }\n    } else {\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeByte((byte) suffixDeltas[i]);\n      }\n    }\n    headerBuffer.writeTo(data);\n    headerBuffer.reset();\n    bytesBuffer.writeTo(data);\n    bytesBuffer.reset();\n  }\n\n","sourceOld":"  // writes term dictionary \"block\"\n  // first term is absolute encoded as vint length + bytes.\n  // lengths of subsequent N terms are encoded as either N bytes or N shorts.\n  // in the double-byte case, the first byte is indicated with -1.\n  // subsequent terms are encoded as byte suffixLength + bytes.\n  private void flushTermsDictBlock(RAMOutputStream headerBuffer, RAMOutputStream bytesBuffer, int suffixDeltas[]) throws IOException {\n    boolean twoByte = false;\n    for (int i = 1; i < suffixDeltas.length; i++) {\n      if (suffixDeltas[i] > 254) {\n        twoByte = true;\n      }\n    }\n    if (twoByte) {\n      headerBuffer.writeByte((byte)255);\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeShort((short) suffixDeltas[i]);\n      }\n    } else {\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeByte((byte) suffixDeltas[i]);\n      }\n    }\n    headerBuffer.writeTo(data);\n    headerBuffer.reset();\n    bytesBuffer.writeTo(data);\n    bytesBuffer.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","sourceNew":"  // writes term dictionary \"block\"\n  // first term is absolute encoded as vint length + bytes.\n  // lengths of subsequent N terms are encoded as either N bytes or N shorts.\n  // in the double-byte case, the first byte is indicated with -1.\n  // subsequent terms are encoded as byte suffixLength + bytes.\n  private void flushTermsDictBlock(RAMOutputStream headerBuffer, RAMOutputStream bytesBuffer, int suffixDeltas[]) throws IOException {\n    boolean twoByte = false;\n    for (int i = 1; i < suffixDeltas.length; i++) {\n      if (suffixDeltas[i] > 254) {\n        twoByte = true;\n      }\n    }\n    if (twoByte) {\n      headerBuffer.writeByte((byte)255);\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeShort((short) suffixDeltas[i]);\n      }\n    } else {\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeByte((byte) suffixDeltas[i]);\n      }\n    }\n    headerBuffer.writeTo(data);\n    headerBuffer.reset();\n    bytesBuffer.writeTo(data);\n    bytesBuffer.reset();\n  }\n\n","sourceOld":"  // writes term dictionary \"block\"\n  // first term is absolute encoded as vint length + bytes.\n  // lengths of subsequent N terms are encoded as either N bytes or N shorts.\n  // in the double-byte case, the first byte is indicated with -1.\n  // subsequent terms are encoded as byte suffixLength + bytes.\n  private void flushTermsDictBlock(RAMOutputStream headerBuffer, RAMOutputStream bytesBuffer, int suffixDeltas[]) throws IOException {\n    boolean twoByte = false;\n    for (int i = 1; i < suffixDeltas.length; i++) {\n      if (suffixDeltas[i] > 254) {\n        twoByte = true;\n      }\n    }\n    if (twoByte) {\n      headerBuffer.writeByte((byte)255);\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeShort((short) suffixDeltas[i]);\n      }\n    } else {\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeByte((byte) suffixDeltas[i]);\n      }\n    }\n    headerBuffer.writeTo(data);\n    headerBuffer.reset();\n    bytesBuffer.writeTo(data);\n    bytesBuffer.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"a870f9917149dc600c4ad4417d615c1795de5864":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a870f9917149dc600c4ad4417d615c1795de5864"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}