{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    if (absolute) {\n      termState.freqOffset = 0;\n      termState.proxOffset = 0;\n    }\n\n    termState.freqOffset += in.readVLong();\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = in.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      termState.proxOffset += in.readVLong();\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = termState.bytesReader.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    if (absolute) {\n      termState.freqOffset = 0;\n      termState.proxOffset = 0;\n    }\n\n    termState.freqOffset += in.readVLong();\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = in.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      termState.proxOffset += in.readVLong();\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n\n    if (isFirstTerm) {\n      termState.freqOffset = termState.bytesReader.readVLong();\n    } else {\n      termState.freqOffset += termState.bytesReader.readVLong();\n    }\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = termState.bytesReader.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      if (isFirstTerm) {\n        termState.proxOffset = termState.bytesReader.readVLong();\n      } else {\n        termState.proxOffset += termState.bytesReader.readVLong();\n      }\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    if (absolute) {\n      termState.freqOffset = 0;\n      termState.proxOffset = 0;\n    }\n\n    termState.freqOffset += in.readVLong();\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = in.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      termState.proxOffset += in.readVLong();\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    if (absolute) {\n      termState.freqOffset = 0;\n      termState.proxOffset = 0;\n    }\n\n    termState.freqOffset += in.readVLong();\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = in.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      termState.proxOffset += in.readVLong();\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    if (absolute) {\n      termState.freqOffset = 0;\n      termState.proxOffset = 0;\n    }\n\n    termState.freqOffset += in.readVLong();\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = in.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      termState.proxOffset += in.readVLong();\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n    // if (DEBUG) System.out.println(\"SPR: nextTerm seg=\" + segment + \" tbOrd=\" + termState.termBlockOrd + \" bytesReader.fp=\" + termState.bytesReader.getPosition());\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    if (absolute) {\n      termState.freqOffset = 0;\n      termState.proxOffset = 0;\n    }\n\n    termState.freqOffset += in.readVLong();\n    /*\n    if (DEBUG) {\n      System.out.println(\"  dF=\" + termState.docFreq);\n      System.out.println(\"  freqFP=\" + termState.freqOffset);\n    }\n    */\n    assert termState.freqOffset < freqIn.length();\n\n    if (termState.docFreq >= skipMinimum) {\n      termState.skipOffset = in.readVLong();\n      // if (DEBUG) System.out.println(\"  skipOffset=\" + termState.skipOffset + \" vs freqIn.length=\" + freqIn.length());\n      assert termState.freqOffset + termState.skipOffset < freqIn.length();\n    } else {\n      // undefined\n    }\n\n    if (fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n      termState.proxOffset += in.readVLong();\n      // if (DEBUG) System.out.println(\"  proxFP=\" + termState.proxOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["2f948dd442d23baa6cbb28daf77c8db78b351329","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}