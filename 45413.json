{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrClient(long).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrClient(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrServer(long).mjava","sourceNew":"  private long testIndexingBatchPerRequestWithHttpSolrClient(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingBatchPerRequestWithHttpSolrServer(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrClient(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrClient(long).mjava","sourceNew":"  private long testIndexingBatchPerRequestWithHttpSolrClient(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n\n\n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingBatchPerRequestWithHttpSolrClient(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n\n          \n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef448fe8afd8a896f75ddf51566f972a8c88e61f","date":1555710517,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrClient(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrClient(long).mjava","sourceNew":"  private long testIndexingBatchPerRequestWithHttpSolrClient(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 10 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 2000 : 200) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n\n\n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingBatchPerRequestWithHttpSolrClient(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n\n\n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05ee5a568699844dfe9d3e684e4380cb9d57066","date":1555711818,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrClient(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrClient(long).mjava","sourceNew":"  private long testIndexingBatchPerRequestWithHttpSolrClient(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 10 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 2000 : 200) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n\n\n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingBatchPerRequestWithHttpSolrClient(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 25 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 3313 : 350) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n\n\n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrClient(long).mjava","sourceNew":null,"sourceOld":"  private long testIndexingBatchPerRequestWithHttpSolrClient(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 10 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 2000 : 200) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n\n\n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingBatchPerRequestWithHttpSolrClient(long).mjava","sourceNew":null,"sourceOld":"  private long testIndexingBatchPerRequestWithHttpSolrClient(long docId) throws Exception {\n    \n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"collection1\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n  \n    cloudClient.request(request);\n    \n    controlClient.deleteByQuery(\"*:*\");\n    controlClient.commit();\n    \n    // somtimes we use an oversharded collection\n    createCollection(null, \"collection2\", 7, 3, 100000, cloudClient, null, \"conf1\");\n    cloudClient.setDefaultCollection(\"collection2\");\n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    class IndexThread extends Thread {\n      Integer name;\n      \n      public IndexThread(Integer name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        int rnds = random().nextInt(TEST_NIGHTLY ? 10 : 3) + 1;\n        for (int i = 0; i < rnds; i++) {\n          UpdateRequest uReq;\n          uReq = new UpdateRequest();\n          int cnt = random().nextInt(TEST_NIGHTLY ? 2000 : 200) + 1;\n          for (int j = 0; j <cnt; j++) {\n            addDoc(\"thread\" + name + \"_\" + i + \"_\" + j, uReq);\n          }\n          \n          try {\n            uReq.process(cloudClient);\n            uReq.process(controlClient);\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n\n\n        }\n      }\n    };\n    List<Thread> threads = new ArrayList<>();\n\n    int nthreads = random().nextInt(TEST_NIGHTLY ? 4 : 2) + 1;\n    for (int i = 0; i < nthreads; i++) {\n      IndexThread thread = new IndexThread(i);\n      threads.add(thread);\n      thread.start();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    commit();\n    \n    waitForRecoveriesToFinish(\"collection2\", false);\n    \n    printLayout();\n    \n    SolrQuery query = new SolrQuery(\"*:*\");\n    long controlCount = controlClient.query(query).getResults()\n        .getNumFound();\n    long cloudCount = cloudClient.query(query).getResults().getNumFound();\n\n    \n    CloudInspectUtil.compareResults(controlClient, cloudClient);\n    \n    assertEquals(\"Control does not match cloud\", controlCount, cloudCount);\n    System.out.println(\"DOCS:\" + controlCount);\n\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a05ee5a568699844dfe9d3e684e4380cb9d57066":["c6e1dc1bb4254226c8d7151b596cc1be40671751","ef448fe8afd8a896f75ddf51566f972a8c88e61f"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["bafca15d8e408346a67f4282ad1143b88023893b"],"ef448fe8afd8a896f75ddf51566f972a8c88e61f":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b945b8f5bba0303382bc69d60c0c287714f23328":["a05ee5a568699844dfe9d3e684e4380cb9d57066","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["a05ee5a568699844dfe9d3e684e4380cb9d57066"]},"commit2Childs":{"a05ee5a568699844dfe9d3e684e4380cb9d57066":["b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["a05ee5a568699844dfe9d3e684e4380cb9d57066","ef448fe8afd8a896f75ddf51566f972a8c88e61f"],"ef448fe8afd8a896f75ddf51566f972a8c88e61f":["a05ee5a568699844dfe9d3e684e4380cb9d57066"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}