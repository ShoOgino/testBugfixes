{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#refillPositions().mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"/dev/null","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        int offsetLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            int deltaCode = posIn.readVInt();\n            if ((deltaCode & 1) != 0) {\n              offsetLength = posIn.readVInt();\n            }\n            offsetStartDeltaBuffer[i] = deltaCode >>> 1;\n            offsetLengthBuffer[i] = offsetLength;\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (needsPayloads) {\n            forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n            int numBytes = payIn.readVInt();\n            // if (DEBUG) {\n            //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n            // }\n            if (numBytes > payloadBytes.length) {\n              payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n            }\n            payIn.readBytes(payloadBytes, 0, numBytes);\n          } else {\n            // this works, because when writing a vint block we always force the first length to be written\n            forUtil.skipBlock(payIn); // skip over lengths\n            int numBytes = payIn.readVInt(); // read length of payloadBytes\n            payIn.seek(payIn.getFilePointer() + numBytes); // skip over payloadBytes\n          }\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (needsOffsets) {\n            forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n            forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n          } else {\n            // this works, because when writing a vint block we always force the first length to be written\n            forUtil.skipBlock(payIn); // skip over starts\n            forUtil.skipBlock(payIn); // skip over lengths\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader.EverythingEnum#refillPositions().mjava","sourceNew":null,"sourceOld":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = (int) (totalTermFreq % BLOCK_SIZE);\n        int payloadLength = 0;\n        int offsetLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            int deltaCode = posIn.readVInt();\n            if ((deltaCode & 1) != 0) {\n              offsetLength = posIn.readVInt();\n            }\n            offsetStartDeltaBuffer[i] = deltaCode >>> 1;\n            offsetLengthBuffer[i] = offsetLength;\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (needsPayloads) {\n            forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n            int numBytes = payIn.readVInt();\n            // if (DEBUG) {\n            //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n            // }\n            if (numBytes > payloadBytes.length) {\n              payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n            }\n            payIn.readBytes(payloadBytes, 0, numBytes);\n          } else {\n            // this works, because when writing a vint block we always force the first length to be written\n            forUtil.skipBlock(payIn); // skip over lengths\n            int numBytes = payIn.readVInt(); // read length of payloadBytes\n            payIn.seek(payIn.getFilePointer() + numBytes); // skip over payloadBytes\n          }\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (needsOffsets) {\n            forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n            forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n          } else {\n            // this works, because when writing a vint block we always force the first length to be written\n            forUtil.skipBlock(payIn); // skip over starts\n            forUtil.skipBlock(payIn); // skip over lengths\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}