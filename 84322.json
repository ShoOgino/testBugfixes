{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getSingleton(Automaton).mjava","commits":[{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getSingleton(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /** If this automaton accepts a single input, return it.  Else, return null.\n   *  The automaton must be deterministic. */\n  public static IntsRef getSingleton(Automaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    IntsRefBuilder builder = new IntsRefBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    while (true) {\n      visited.add(s);\n      if (a.isAccept(s) == false) {\n        if (a.getNumTransitions(s) == 1) {\n          a.getTransition(s, 0, t);\n          if (t.min == t.max && !visited.contains(t.dest)) {\n            builder.append(t.min);\n            s = t.dest;\n            continue;\n          }\n        }\n      } else if (a.getNumTransitions(s) == 0) {\n        return builder.get();\n      }\n\n      // Automaton accepts more than one string:\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getSingleton(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /** If this automaton accepts a single input, return it.  Else, return null.\n   *  The automaton must be deterministic. */\n  public static IntsRef getSingleton(Automaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    IntsRefBuilder builder = new IntsRefBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    while (true) {\n      visited.add(s);\n      if (a.isAccept(s) == false) {\n        if (a.getNumTransitions(s) == 1) {\n          a.getTransition(s, 0, t);\n          if (t.min == t.max && !visited.contains(t.dest)) {\n            builder.append(t.min);\n            s = t.dest;\n            continue;\n          }\n        }\n      } else if (a.getNumTransitions(s) == 0) {\n        return builder.get();\n      }\n\n      // Automaton accepts more than one string:\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13b60e3f947fc4f9e2fd81e1929a6809327ff537","date":1435953804,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getSingleton(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getSingleton(Automaton).mjava","sourceNew":"  /** If this automaton accepts a single input, return it.  Else, return null.\n   *  The automaton must be deterministic. */\n  public static IntsRef getSingleton(Automaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    IntsRefBuilder builder = new IntsRefBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    Transition t = new Transition();\n    while (true) {\n      visited.add(s);\n      if (a.isAccept(s) == false) {\n        if (a.getNumTransitions(s) == 1) {\n          a.getTransition(s, 0, t);\n          if (t.min == t.max && !visited.contains(t.dest)) {\n            builder.append(t.min);\n            s = t.dest;\n            continue;\n          }\n        }\n      } else if (a.getNumTransitions(s) == 0) {\n        return builder.get();\n      }\n\n      // Automaton accepts more than one string:\n      return null;\n    }\n  }\n\n","sourceOld":"  /** If this automaton accepts a single input, return it.  Else, return null.\n   *  The automaton must be deterministic. */\n  public static IntsRef getSingleton(Automaton a) {\n    if (a.isDeterministic() == false) {\n      throw new IllegalArgumentException(\"input automaton must be deterministic\");\n    }\n    IntsRefBuilder builder = new IntsRefBuilder();\n    HashSet<Integer> visited = new HashSet<>();\n    int s = 0;\n    boolean done;\n    Transition t = new Transition();\n    while (true) {\n      visited.add(s);\n      if (a.isAccept(s) == false) {\n        if (a.getNumTransitions(s) == 1) {\n          a.getTransition(s, 0, t);\n          if (t.min == t.max && !visited.contains(t.dest)) {\n            builder.append(t.min);\n            s = t.dest;\n            continue;\n          }\n        }\n      } else if (a.getNumTransitions(s) == 0) {\n        return builder.get();\n      }\n\n      // Automaton accepts more than one string:\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13b60e3f947fc4f9e2fd81e1929a6809327ff537":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["13b60e3f947fc4f9e2fd81e1929a6809327ff537"]},"commit2Childs":{"13b60e3f947fc4f9e2fd81e1929a6809327ff537":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["13b60e3f947fc4f9e2fd81e1929a6809327ff537","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}