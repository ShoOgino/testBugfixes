{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    LegacyNumericRangeQueryBuilder filterBuilder = new LegacyNumericRangeQueryBuilder();\n\n    String xml = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter = (LegacyNumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter2 = (LegacyNumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b8410419cbbe9d8e1a96c918a951976bffe680","date":1471869553,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLegacyNumericRangeQueryBuilder#testGetFilterInt().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    LegacyNumericRangeQueryBuilder filterBuilder = new LegacyNumericRangeQueryBuilder();\n\n    String xml = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter = (LegacyNumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter2 = (LegacyNumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    LegacyNumericRangeQueryBuilder filterBuilder = new LegacyNumericRangeQueryBuilder();\n\n    String xml = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter = (LegacyNumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter2 = (LegacyNumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLegacyNumericRangeQueryBuilder#testGetFilterInt().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    LegacyNumericRangeQueryBuilder filterBuilder = new LegacyNumericRangeQueryBuilder();\n\n    String xml = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter = (LegacyNumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter2 = (LegacyNumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    LegacyNumericRangeQueryBuilder filterBuilder = new LegacyNumericRangeQueryBuilder();\n\n    String xml = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter = (LegacyNumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter2 = (LegacyNumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLegacyNumericRangeQueryBuilder#testGetFilterInt().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    LegacyNumericRangeQueryBuilder filterBuilder = new LegacyNumericRangeQueryBuilder();\n\n    String xml = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter = (LegacyNumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter2 = (LegacyNumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    LegacyNumericRangeQueryBuilder filterBuilder = new LegacyNumericRangeQueryBuilder();\n\n    String xml = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter = (LegacyNumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter2 = (LegacyNumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLegacyNumericRangeQueryBuilder#testGetFilterInt().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    LegacyNumericRangeQueryBuilder filterBuilder = new LegacyNumericRangeQueryBuilder();\n\n    String xml = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter = (LegacyNumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter2 = (LegacyNumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  public void testGetFilterInt() throws Exception {\n    LegacyNumericRangeQueryBuilder filterBuilder = new LegacyNumericRangeQueryBuilder();\n\n    String xml = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter = (LegacyNumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<LegacyNumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof LegacyNumericRangeQuery<?>);\n\n    LegacyNumericRangeQuery<Integer> numRangeFilter2 = (LegacyNumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["770342641f7b505eaa8dccdc666158bff2419109","50b8410419cbbe9d8e1a96c918a951976bffe680"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["770342641f7b505eaa8dccdc666158bff2419109","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["770342641f7b505eaa8dccdc666158bff2419109"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"770342641f7b505eaa8dccdc666158bff2419109":["0c82557b0a8c9d4012f208e5de912ae7500ea351","50b8410419cbbe9d8e1a96c918a951976bffe680","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}