{"path":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SampleFixer#fixResult(ScoredDocIDs,FacetResult,double).mjava","commits":[{"id":"4b31c82c6df2339d0c31b592f919be77383dac10","date":1369815843,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SampleFixer#fixResult(ScoredDocIDs,FacetResult,double).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SampleFixer#fixResult(ScoredDocIDs,FacetResult).mjava","sourceNew":"  /**\n   * Alter the input result, fixing it to account for the sampling. This\n   * implementation can compute accurate or estimated counts for the sampled\n   * facets. For example, a faster correction could just multiply by a\n   * compensating factor.\n   * \n   * @param origDocIds\n   *          full set of matching documents.\n   * @param fres\n   *          sample result to be fixed.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public void fixResult(ScoredDocIDs origDocIds, FacetResult fres, double samplingRatio) throws IOException {\n    FacetResultNode topRes = fres.getFacetResultNode();\n    fixResultNode(topRes, origDocIds, samplingRatio);\n  }\n\n","sourceOld":"  /**\n   * Alter the input result, fixing it to account for the sampling. This\n   * implementation can compute accurate or estimated counts for the sampled facets. \n   * For example, a faster correction could just multiply by a compensating factor.\n   * \n   * @param origDocIds\n   *          full set of matching documents.\n   * @param fres\n   *          sample result to be fixed.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void fixResult(ScoredDocIDs origDocIds, FacetResult fres) throws IOException; \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SampleFixer#fixResult(ScoredDocIDs,FacetResult,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Alter the input result, fixing it to account for the sampling. This\n   * implementation can compute accurate or estimated counts for the sampled\n   * facets. For example, a faster correction could just multiply by a\n   * compensating factor.\n   * \n   * @param origDocIds\n   *          full set of matching documents.\n   * @param fres\n   *          sample result to be fixed.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public void fixResult(ScoredDocIDs origDocIds, FacetResult fres, double samplingRatio) throws IOException {\n    FacetResultNode topRes = fres.getFacetResultNode();\n    fixResultNode(topRes, origDocIds, samplingRatio);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SampleFixer#fixResult(ScoredDocIDs,FacetResult,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Alter the input result, fixing it to account for the sampling. This\n   * implementation can compute accurate or estimated counts for the sampled\n   * facets. For example, a faster correction could just multiply by a\n   * compensating factor.\n   * \n   * @param origDocIds\n   *          full set of matching documents.\n   * @param fres\n   *          sample result to be fixed.\n   * @throws IOException\n   *           If there is a low-level I/O error.\n   */\n  public void fixResult(ScoredDocIDs origDocIds, FacetResult fres, double samplingRatio) throws IOException {\n    FacetResultNode topRes = fres.getFacetResultNode();\n    fixResultNode(topRes, origDocIds, samplingRatio);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["4b31c82c6df2339d0c31b592f919be77383dac10"],"4b31c82c6df2339d0c31b592f919be77383dac10":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["4b31c82c6df2339d0c31b592f919be77383dac10","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"4b31c82c6df2339d0c31b592f919be77383dac10":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b31c82c6df2339d0c31b592f919be77383dac10"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}