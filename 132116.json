{"path":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#SepPostingsWriterImpl(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriterImpl(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c5b735f3b39a5cdb52150bb4ff36a95e8c9407f","date":1321569152,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b91922b55d15444d554721b352861d028eb8278":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c5b735f3b39a5cdb52150bb4ff36a95e8c9407f":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["9c5b735f3b39a5cdb52150bb4ff36a95e8c9407f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["7b91922b55d15444d554721b352861d028eb8278"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["24230fe54121f9be9d85f2c2067536296785e421"],"7b91922b55d15444d554721b352861d028eb8278":["9c5b735f3b39a5cdb52150bb4ff36a95e8c9407f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"9c5b735f3b39a5cdb52150bb4ff36a95e8c9407f":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}