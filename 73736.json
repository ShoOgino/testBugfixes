{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Overseer.Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler collMessageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    final OverseerConfigSetMessageHandler configMessageHandler = new OverseerConfigSetMessageHandler(\n        zkStateReader);\n    return new OverseerMessageHandlerSelector() {\n      @Override\n      public OverseerMessageHandler selectOverseerMessageHandler(ZkNodeProps message) {\n        String operation = message.getStr(Overseer.QUEUE_OPERATION);\n        if (operation != null && operation.startsWith(CONFIGSETS_ACTION_PREFIX)) {\n          return configMessageHandler;\n        }\n        return collMessageHandler;\n      }\n    };\n  }\n\n","sourceOld":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Overseer.Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler messageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    return new OverseerMessageHandlerSelector() {\n      @Override\n      public OverseerMessageHandler selectOverseerMessageHandler(ZkNodeProps message) {\n        return messageHandler;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781578ca5d3d2194bc55fc3457c62aef623db6f2","date":1464859077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Overseer.Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler collMessageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    final OverseerConfigSetMessageHandler configMessageHandler = new OverseerConfigSetMessageHandler(\n        zkStateReader);\n    return message -> {\n      String operation = message.getStr(Overseer.QUEUE_OPERATION);\n      if (operation != null && operation.startsWith(CONFIGSETS_ACTION_PREFIX)) {\n        return configMessageHandler;\n      }\n      return collMessageHandler;\n    };\n  }\n\n","sourceOld":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Overseer.Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler collMessageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    final OverseerConfigSetMessageHandler configMessageHandler = new OverseerConfigSetMessageHandler(\n        zkStateReader);\n    return new OverseerMessageHandlerSelector() {\n      @Override\n      public OverseerMessageHandler selectOverseerMessageHandler(ZkNodeProps message) {\n        String operation = message.getStr(Overseer.QUEUE_OPERATION);\n        if (operation != null && operation.startsWith(CONFIGSETS_ACTION_PREFIX)) {\n          return configMessageHandler;\n        }\n        return collMessageHandler;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1777912fb613f51063554d81f71c1b70d6bcd77","date":1470897768,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Overseer.Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler collMessageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    final OverseerConfigSetMessageHandler configMessageHandler = new OverseerConfigSetMessageHandler(\n        zkStateReader);\n    return new OverseerMessageHandlerSelector() {\n      @Override\n      public void close() throws IOException {\n        IOUtils.closeQuietly(collMessageHandler);\n      }\n\n      @Override\n      public OverseerMessageHandler selectOverseerMessageHandler(ZkNodeProps message) {\n        String operation = message.getStr(Overseer.QUEUE_OPERATION);\n        if (operation != null && operation.startsWith(CONFIGSETS_ACTION_PREFIX)) {\n          return configMessageHandler;\n        }\n        return collMessageHandler;\n      }\n    };\n  }\n\n","sourceOld":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Overseer.Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler collMessageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    final OverseerConfigSetMessageHandler configMessageHandler = new OverseerConfigSetMessageHandler(\n        zkStateReader);\n    return message -> {\n      String operation = message.getStr(Overseer.QUEUE_OPERATION);\n      if (operation != null && operation.startsWith(CONFIGSETS_ACTION_PREFIX)) {\n        return configMessageHandler;\n      }\n      return collMessageHandler;\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Overseer.Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler collMessageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    final OverseerConfigSetMessageHandler configMessageHandler = new OverseerConfigSetMessageHandler(\n        zkStateReader);\n    return new OverseerMessageHandlerSelector() {\n      @Override\n      public void close() throws IOException {\n        IOUtils.closeQuietly(collMessageHandler);\n      }\n\n      @Override\n      public OverseerMessageHandler selectOverseerMessageHandler(ZkNodeProps message) {\n        String operation = message.getStr(Overseer.QUEUE_OPERATION);\n        if (operation != null && operation.startsWith(CONFIGSETS_ACTION_PREFIX)) {\n          return configMessageHandler;\n        }\n        return collMessageHandler;\n      }\n    };\n  }\n\n","sourceOld":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Overseer.Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler collMessageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    final OverseerConfigSetMessageHandler configMessageHandler = new OverseerConfigSetMessageHandler(\n        zkStateReader);\n    return message -> {\n      String operation = message.getStr(Overseer.QUEUE_OPERATION);\n      if (operation != null && operation.startsWith(CONFIGSETS_ACTION_PREFIX)) {\n        return configMessageHandler;\n      }\n      return collMessageHandler;\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Overseer.Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler collMessageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    final OverseerConfigSetMessageHandler configMessageHandler = new OverseerConfigSetMessageHandler(\n        zkStateReader);\n    return new OverseerMessageHandlerSelector() {\n      @Override\n      public void close() throws IOException {\n        IOUtils.closeQuietly(collMessageHandler);\n      }\n\n      @Override\n      public OverseerMessageHandler selectOverseerMessageHandler(ZkNodeProps message) {\n        String operation = message.getStr(Overseer.QUEUE_OPERATION);\n        if (operation != null && operation.startsWith(CONFIGSETS_ACTION_PREFIX)) {\n          return configMessageHandler;\n        }\n        return collMessageHandler;\n      }\n    };\n  }\n\n","sourceOld":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Overseer.Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler collMessageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    final OverseerConfigSetMessageHandler configMessageHandler = new OverseerConfigSetMessageHandler(\n        zkStateReader);\n    return new OverseerMessageHandlerSelector() {\n      @Override\n      public OverseerMessageHandler selectOverseerMessageHandler(ZkNodeProps message) {\n        String operation = message.getStr(Overseer.QUEUE_OPERATION);\n        if (operation != null && operation.startsWith(CONFIGSETS_ACTION_PREFIX)) {\n          return configMessageHandler;\n        }\n        return collMessageHandler;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionConfigSetProcessor#getOverseerMessageHandlerSelector(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler collMessageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    final OverseerConfigSetMessageHandler configMessageHandler = new OverseerConfigSetMessageHandler(\n        zkStateReader);\n    return new OverseerMessageHandlerSelector() {\n      @Override\n      public void close() throws IOException {\n        IOUtils.closeQuietly(collMessageHandler);\n      }\n\n      @Override\n      public OverseerMessageHandler selectOverseerMessageHandler(ZkNodeProps message) {\n        String operation = message.getStr(Overseer.QUEUE_OPERATION);\n        if (operation != null && operation.startsWith(CONFIGSETS_ACTION_PREFIX)) {\n          return configMessageHandler;\n        }\n        return collMessageHandler;\n      }\n    };\n  }\n\n","sourceOld":"  private static OverseerMessageHandlerSelector getOverseerMessageHandlerSelector(\n      ZkStateReader zkStateReader,\n      String myId,\n      final ShardHandlerFactory shardHandlerFactory,\n      String adminPath,\n      Overseer.Stats stats,\n      Overseer overseer,\n      OverseerNodePrioritizer overseerNodePrioritizer) {\n    final OverseerCollectionMessageHandler collMessageHandler = new OverseerCollectionMessageHandler(\n        zkStateReader, myId, shardHandlerFactory, adminPath, stats, overseer, overseerNodePrioritizer);\n    final OverseerConfigSetMessageHandler configMessageHandler = new OverseerConfigSetMessageHandler(\n        zkStateReader);\n    return new OverseerMessageHandlerSelector() {\n      @Override\n      public void close() throws IOException {\n        IOUtils.closeQuietly(collMessageHandler);\n      }\n\n      @Override\n      public OverseerMessageHandler selectOverseerMessageHandler(ZkNodeProps message) {\n        String operation = message.getStr(Overseer.QUEUE_OPERATION);\n        if (operation != null && operation.startsWith(CONFIGSETS_ACTION_PREFIX)) {\n          return configMessageHandler;\n        }\n        return collMessageHandler;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["781578ca5d3d2194bc55fc3457c62aef623db6f2","b1777912fb613f51063554d81f71c1b70d6bcd77"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["781578ca5d3d2194bc55fc3457c62aef623db6f2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2209af2c265d2258ec4b29c8cc78622d36994a15","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["403d05f7f8d69b65659157eff1bc1d2717f04c66","b1777912fb613f51063554d81f71c1b70d6bcd77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}