{"path":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongMatchs().mjava","commits":[{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongMatchs().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongMatchs().mjava","sourceNew":"  public void testLongMatchs() throws IOException {\n    // match length > 16\n    final byte[] decompressed = new byte[RandomInts.randomIntBetween(random(), 300, 1024)];\n    for (int i = 0; i < decompressed.length; ++i) {\n      decompressed[i] = (byte) i;\n    }\n    test(decompressed);\n  }\n\n","sourceOld":"  public void testLongMatchs() throws IOException {\n    // match length > 16\n    final byte[] decompressed = new byte[RandomInts.randomIntBetween(random(), 300, 1024)];\n    for (int i = 0; i < decompressed.length; ++i) {\n      decompressed[i] = (byte) i;\n    }\n    test(decompressed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c3c76aa202009a206735eb7501d52a87ccaba79","date":1354660681,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestLZ4CompressionMode#testLongMatchs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testLongMatchs().mjava","sourceNew":"  public void testLongMatchs() throws IOException {\n    // match length >= 20\n    final byte[] decompressed = new byte[RandomInts.randomIntBetween(random(), 300, 1024)];\n    for (int i = 0; i < decompressed.length; ++i) {\n      decompressed[i] = (byte) i;\n    }\n    test(decompressed);\n  }\n\n","sourceOld":"  public void testLongMatchs() throws IOException {\n    // match length > 16\n    final byte[] decompressed = new byte[RandomInts.randomIntBetween(random(), 300, 1024)];\n    for (int i = 0; i < decompressed.length; ++i) {\n      decompressed[i] = (byte) i;\n    }\n    test(decompressed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c3c76aa202009a206735eb7501d52a87ccaba79":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0c3c76aa202009a206735eb7501d52a87ccaba79"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"0c3c76aa202009a206735eb7501d52a87ccaba79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["0c3c76aa202009a206735eb7501d52a87ccaba79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}