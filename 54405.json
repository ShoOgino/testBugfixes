{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(\"name\");\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    ArrayList<String> shards = new ArrayList<>();\n\n    if (ImplicitDocRouter.NAME.equals(message.getStr(\"router.name\", DocRouter.DEFAULT_NAME))) {\n      getShardNames(shards, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n    } else {\n      int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n      if (numShards < 1)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n      getShardNames(numShards, shards);\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(\"name\") == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(\"name\");\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>();\n\n    for (int i = 0; i < shards.size(); i++) {\n      String sliceName = shards.get(i);\n\n      Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n      sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n      newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionProcessor.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionProcessor.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        newSlices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    ArrayList<String> shards = new ArrayList<>();\n\n    if (ImplicitDocRouter.NAME.equals(message.getStr(\"router.name\", DocRouter.DEFAULT_NAME))) {\n      getShardNames(shards, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n    } else {\n      int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n      if (numShards < 1)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n      getShardNames(numShards, shards);\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>();\n\n    for (int i = 0; i < shards.size(); i++) {\n      String sliceName = shards.get(i);\n\n      Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n      sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n      newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionProcessor.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionProcessor.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        newSlices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(\"name\");\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    ArrayList<String> shards = new ArrayList<>();\n\n    if (ImplicitDocRouter.NAME.equals(message.getStr(\"router.name\", DocRouter.DEFAULT_NAME))) {\n      getShardNames(shards, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n    } else {\n      int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n      if (numShards < 1)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n      getShardNames(numShards, shards);\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(\"name\") == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(\"name\");\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>();\n\n    for (int i = 0; i < shards.size(); i++) {\n      String sliceName = shards.get(i);\n\n      Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n      sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n      newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionProcessor.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionProcessor.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        newSlices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    ArrayList<String> shards = new ArrayList<>();\n\n    if (ImplicitDocRouter.NAME.equals(message.getStr(\"router.name\", DocRouter.DEFAULT_NAME))) {\n      getShardNames(shards, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n    } else {\n      int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n      if (numShards < 1)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n      getShardNames(numShards, shards);\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>();\n\n    for (int i = 0; i < shards.size(); i++) {\n      String sliceName = shards.get(i);\n\n      Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n      sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n      newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionProcessor.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionProcessor.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        newSlices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(\"name\");\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    ArrayList<String> shards = new ArrayList<>();\n\n    if (ImplicitDocRouter.NAME.equals(message.getStr(\"router.name\", DocRouter.DEFAULT_NAME))) {\n      getShardNames(shards, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n    } else {\n      int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n      if (numShards < 1)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n      getShardNames(numShards, shards);\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(\"name\") == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(\"name\");\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>();\n\n    for (int i = 0; i < shards.size(); i++) {\n      String sliceName = shards.get(i);\n\n      Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n      sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n      newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionProcessor.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionProcessor.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        newSlices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    ArrayList<String> shards = new ArrayList<>();\n\n    if (ImplicitDocRouter.NAME.equals(message.getStr(\"router.name\", DocRouter.DEFAULT_NAME))) {\n      getShardNames(shards, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n    } else {\n      int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n      if (numShards < 1)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n      getShardNames(numShards, shards);\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>();\n\n    for (int i = 0; i < shards.size(); i++) {\n      String sliceName = shards.get(i);\n\n      Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n      sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n      newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        newSlices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    ArrayList<String> shards = new ArrayList<>();\n\n    if (ImplicitDocRouter.NAME.equals(message.getStr(\"router.name\", DocRouter.DEFAULT_NAME))) {\n      getShardNames(shards, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n    } else {\n      int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n      if (numShards < 1)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n      getShardNames(numShards, shards);\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>();\n\n    for (int i = 0; i < shards.size(); i++) {\n      String sliceName = shards.get(i);\n\n      Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n      sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n      newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionProcessor.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionProcessor.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        newSlices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    ArrayList<String> shards = new ArrayList<>();\n\n    if (ImplicitDocRouter.NAME.equals(message.getStr(\"router.name\", DocRouter.DEFAULT_NAME))) {\n      getShardNames(shards, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n    } else {\n      int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n      if (numShards < 1)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n      getShardNames(numShards, shards);\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>();\n\n    for (int i = 0; i < shards.size(); i++) {\n      String sliceName = shards.get(i);\n\n      Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n      sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n      newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        newSlices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    ArrayList<String> shards = new ArrayList<>();\n\n    if (ImplicitDocRouter.NAME.equals(message.getStr(\"router.name\", DocRouter.DEFAULT_NAME))) {\n      getShardNames(shards, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n    } else {\n      int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n      if (numShards < 1)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n      getShardNames(numShards, shards);\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>();\n\n    for (int i = 0; i < shards.size(); i++) {\n      String sliceName = shards.get(i);\n\n      Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n      sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n      newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        newSlices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    ArrayList<String> shards = new ArrayList<>();\n\n    if (ImplicitDocRouter.NAME.equals(message.getStr(\"router.name\", DocRouter.DEFAULT_NAME))) {\n      getShardNames(shards, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n    } else {\n      int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n      if (numShards < 1)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n      getShardNames(numShards, shards);\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    List<DocRouter.Range> ranges = router.partitionRange(shards.size(), router.fullRange());\n\n\n    Map<String, Slice> newSlices = new LinkedHashMap<>();\n\n    for (int i = 0; i < shards.size(); i++) {\n      String sliceName = shards.get(i);\n\n      Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n      sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n      newSlices.put(sliceName, new Slice(sliceName, null, sliceProps));\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        newSlices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.info(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82b686ab2904b3e81184ecea0d238b4ab0885376","date":1529576124,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLL_PROPS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLL_PROPS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap(cName, (Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps,cName));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap(cName, (Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps,cName));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap((Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: {}\", cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap(cName, (Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps,cName));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: \" + cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap(cName, (Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps,cName));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: {}\", cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap(cName, (Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps,cName));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    DocCollection newCollection = new DocCollection(cName, slices, collectionProps, router, -1);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: {}\", cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap(cName, (Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps,cName));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    //TODO default to 2; but need to debug why BasicDistributedZk2Test fails early on\n    String znode = message.getInt(DocCollection.STATE_FORMAT, 1) == 1 ? null\n        : ZkStateReader.getCollectionPath(cName);\n\n    DocCollection newCollection = new DocCollection(cName,\n        slices, collectionProps, router, -1, znode);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":["c5c99ad021f3da085fcb66220598a8f91dc5e453","24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ClusterStateMutator#createCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: {}\", cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap(cName, (Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps,cName));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    DocCollection newCollection = new DocCollection(cName, slices, collectionProps, router, -1);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand createCollection(ClusterState clusterState, ZkNodeProps message) {\n    String cName = message.getStr(NAME);\n    log.debug(\"building a new cName: {}\", cName);\n    if (clusterState.hasCollection(cName)) {\n      log.warn(\"Collection {} already exists. exit\", cName);\n      return ZkStateWriter.NO_OP;\n    }\n\n    Map<String, Object> routerSpec = DocRouter.getRouterSpec(message);\n    String routerName = routerSpec.get(NAME) == null ? DocRouter.DEFAULT_NAME : (String) routerSpec.get(NAME);\n    DocRouter router = DocRouter.getDocRouter(routerName);\n\n    Object messageShardsObj = message.get(\"shards\");\n\n    Map<String, Slice> slices;\n    if (messageShardsObj instanceof Map) { // we are being explicitly told the slice data (e.g. coll restore)\n      slices = Slice.loadAllFromMap(cName, (Map<String, Object>)messageShardsObj);\n    } else {\n      List<String> shardNames = new ArrayList<>();\n\n      if (router instanceof ImplicitDocRouter) {\n        getShardNames(shardNames, message.getStr(\"shards\", DocRouter.DEFAULT_NAME));\n      } else {\n        int numShards = message.getInt(ZkStateReader.NUM_SHARDS_PROP, -1);\n        if (numShards < 1)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"numShards is a required parameter for 'compositeId' router\");\n        getShardNames(numShards, shardNames);\n      }\n      List<DocRouter.Range> ranges = router.partitionRange(shardNames.size(), router.fullRange());//maybe null\n\n      slices = new LinkedHashMap<>();\n      for (int i = 0; i < shardNames.size(); i++) {\n        String sliceName = shardNames.get(i);\n\n        Map<String, Object> sliceProps = new LinkedHashMap<>(1);\n        sliceProps.put(Slice.RANGE, ranges == null ? null : ranges.get(i));\n\n        slices.put(sliceName, new Slice(sliceName, null, sliceProps,cName));\n      }\n    }\n\n    Map<String, Object> collectionProps = new HashMap<>();\n\n    for (Map.Entry<String, Object> e : OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.entrySet()) {\n      Object val = message.get(e.getKey());\n      if (val == null) {\n        val = OverseerCollectionMessageHandler.COLLECTION_PROPS_AND_DEFAULTS.get(e.getKey());\n      }\n      if (val != null) collectionProps.put(e.getKey(), val);\n    }\n    collectionProps.put(DocCollection.DOC_ROUTER, routerSpec);\n\n    if (message.getStr(\"fromApi\") == null) {\n      collectionProps.put(\"autoCreated\", \"true\");\n    }\n\n    DocCollection newCollection = new DocCollection(cName, slices, collectionProps, router, -1);\n\n    return new ZkWriteCommand(cName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"d3aa683bba99315838c968fefedf3d74f44aa993":["82b686ab2904b3e81184ecea0d238b4ab0885376","6681d02f2302c363be938426e68f8dfd090cc1bf"],"962cd4f5e313777f35da8f521265323e84184929":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["4abf821a41a2fdca2a1dea148999931d22e20529"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["82b686ab2904b3e81184ecea0d238b4ab0885376"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"4abf821a41a2fdca2a1dea148999931d22e20529":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","82b686ab2904b3e81184ecea0d238b4ab0885376"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1c7a21395bae9e2f61aeb639f47aaca771c426ed","962cd4f5e313777f35da8f521265323e84184929"],"d2638f781be724518ff6c2263d14a48cf6e68017":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","1390137e395d2f07f9ba5b8c43d293befe84d563"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","82b686ab2904b3e81184ecea0d238b4ab0885376"]},"commit2Childs":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"d3aa683bba99315838c968fefedf3d74f44aa993":[],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","4abf821a41a2fdca2a1dea148999931d22e20529"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["c5c99ad021f3da085fcb66220598a8f91dc5e453","55b50463286869f584cf849d1587a0fcd54d1dfa","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"4abf821a41a2fdca2a1dea148999931d22e20529":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["962cd4f5e313777f35da8f521265323e84184929","55b50463286869f584cf849d1587a0fcd54d1dfa","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","d2638f781be724518ff6c2263d14a48cf6e68017"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["82b686ab2904b3e81184ecea0d238b4ab0885376","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}