{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","pathOld":"/dev/null","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer, \n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer, \n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d3dec2223c4ab37942f127cae43fbf1cd28731","date":1011232809,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer, \n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer, \n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assert(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assert(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer, \n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer, \n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea","date":1012249521,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer, \n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer, \n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer, \n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer, \n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assert(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assert(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5742a13bc31248b37eec58aaf19da9d165a48d82","date":1026669113,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","sourceNew":"    public void testQPA() throws Exception {\n\tassertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n\tassertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n\tassertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\tassertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n\tassertQueryEquals(\"term phrase term\", qpAnalyzer,\n\t    \"term \\\"phrase1 phrase2\\\" term\");\n\tassertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n\t    \"+term -\\\"phrase1 phrase2\\\" term\");\n\tassertQueryEquals(\"stop\", qpAnalyzer, \"\");\n\tassertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n\tassertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n    }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer, \n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer, \n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105b8c63d8ae43de76f14005b62a5657a4b8d9ce","date":1064896862,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"    public void testQPA() throws Exception {\n\tassertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n\tassertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n\tassertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\tassertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n\tassertQueryEquals(\"term phrase term\", qpAnalyzer,\n\t    \"term \\\"phrase1 phrase2\\\" term\");\n\tassertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n\t    \"+term -\\\"phrase1 phrase2\\\" term\");\n\tassertQueryEquals(\"stop\", qpAnalyzer, \"\");\n\tassertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n\tassertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f0c71979827275ab91caba7232e8de375b40dd5","date":1182818420,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f0c71979827275ab91caba7232e8de375b40dd5":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4d3dec2223c4ab37942f127cae43fbf1cd28731":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea":["d4d3dec2223c4ab37942f127cae43fbf1cd28731"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2f0c71979827275ab91caba7232e8de375b40dd5"]},"commit2Childs":{"2f0c71979827275ab91caba7232e8de375b40dd5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["d4d3dec2223c4ab37942f127cae43fbf1cd28731"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"d4d3dec2223c4ab37942f127cae43fbf1cd28731":["6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["2f0c71979827275ab91caba7232e8de375b40dd5"],"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}