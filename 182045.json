{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","commits":[{"id":"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","date":1291778725,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1);\n    IndexReader r_2 = IndexReader.open(w_2);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize();\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n\n    IndexReader merged = IndexReader.open(w);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    if (second == Type.BYTES_VAR_STRAIGHT || second == Type.BYTES_FIXED_STRAIGHT) {\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close();\n    w_2.close();\n    w.close();\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1);\n    IndexReader r_2 = IndexReader.open(w_2);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n\n    IndexReader merged = IndexReader.open(w);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    if (second == Type.BYTES_VAR_STRAIGHT || second == Type.BYTES_FIXED_STRAIGHT) {\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1);\n    IndexReader r_2 = IndexReader.open(w_2);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize();\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n\n    IndexReader merged = IndexReader.open(w);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    if (second == Type.BYTES_VAR_STRAIGHT || second == Type.BYTES_FIXED_STRAIGHT) {\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close();\n    w_2.close();\n    w.close();\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory2();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory2();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory2();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n\n    IndexReader merged = IndexReader.open(w, true);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    if (second == Type.BYTES_VAR_STRAIGHT || second == Type.BYTES_FIXED_STRAIGHT) {\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1);\n    IndexReader r_2 = IndexReader.open(w_2);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n\n    IndexReader merged = IndexReader.open(w);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    if (second == Type.BYTES_VAR_STRAIGHT || second == Type.BYTES_FIXED_STRAIGHT) {\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n\n    IndexReader merged = IndexReader.open(w, true);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    if (second == Type.BYTES_VAR_STRAIGHT || second == Type.BYTES_FIXED_STRAIGHT) {\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory2();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory2();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory2();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n\n    IndexReader merged = IndexReader.open(w, true);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    if (second == Type.BYTES_VAR_STRAIGHT || second == Type.BYTES_FIXED_STRAIGHT) {\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d51e9acac1e629cffe47855e85dc6dedc4754d","date":1305711497,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n\n    IndexReader merged = IndexReader.open(w, true);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    if (second == ValueType.BYTES_VAR_STRAIGHT || second == ValueType.BYTES_FIXED_STRAIGHT) {\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n\n    IndexReader merged = IndexReader.open(w, true);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    if (second == Type.BYTES_VAR_STRAIGHT || second == Type.BYTES_FIXED_STRAIGHT) {\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4034ca0f8f74fdf56e25be73822f2441fc1c1b46","date":1307111599,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n\n    IndexReader merged = IndexReader.open(w, true);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    if (second == ValueType.BYTES_VAR_STRAIGHT || second == ValueType.BYTES_FIXED_STRAIGHT) {\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    DocValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    DocValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    DocValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    DocValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, DocValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9715fed7709e0c0b02163fee6ce9f2a48191eb1","date":1307183419,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n//    switch (first) { // these variants don't advance over missing values\n//  case BYTES_FIXED_STRAIGHT:\n//  case FLOAT_32:\n//  case FLOAT_64:\n//  case INTS:  \n//    assertEquals(msg, valuesPerIndex-1, vE_1_merged.advance(valuesPerIndex-1));\n//  }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a2e8664bf0ffa0a67102ee8671e428d99d07d9b","date":1307183528,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n//    switch (first) { // these variants don't advance over missing values\n//  case BYTES_FIXED_STRAIGHT:\n//  case FLOAT_32:\n//  case FLOAT_64:\n//  case INTS:  \n//    assertEquals(msg, valuesPerIndex-1, vE_1_merged.advance(valuesPerIndex-1));\n//  }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case INTS:  \n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    String msg = \"[first=\" + first.name() + \", second=\" + second.name() + \"]\";\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    ValuesEnum vE_1 = getValuesEnum(getDocValues(r_1, first.name()));\n    ValuesEnum vE_2 = getValuesEnum(getDocValues(r_2, second.name()));\n    ValuesEnum vE_1_merged = getValuesEnum(getDocValues(merged, first.name()));\n    ValuesEnum vE_2_merged = getValuesEnum(getDocValues(merged, second\n        .name()));\n    switch (second) { // these variants don't advance over missing values\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_STRAIGHT:\n    case FLOAT_32:\n    case FLOAT_64:\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      assertEquals(msg, valuesPerIndex-1, vE_2_merged.advance(valuesPerIndex-1));\n    }\n    \n    for (int i = 0; i < valuesPerIndex; i++) {\n      assertEquals(msg, i, vE_1.nextDoc());\n      assertEquals(msg, i, vE_1_merged.nextDoc());\n\n      assertEquals(msg, i, vE_2.nextDoc());\n      assertEquals(msg, i + valuesPerIndex, vE_2_merged.nextDoc());\n    }\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2.nextDoc());\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_1_merged.advance(valuesPerIndex*2));\n    assertEquals(msg, ValuesEnum.NO_MORE_DOCS, vE_2_merged.nextDoc());\n\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1, w_1.getConfig().getCodecProvider());\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2, w_2.getConfig().getCodecProvider());\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target, w.getConfig().getCodecProvider());\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.optimize(true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<ValueType> values = Arrays.asList(ValueType.values());\n    Collections.shuffle(values, random);\n    ValueType first = values.get(0);\n    ValueType second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"7a2e8664bf0ffa0a67102ee8671e428d99d07d9b":["e9715fed7709e0c0b02163fee6ce9f2a48191eb1"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["7b91922b55d15444d554721b352861d028eb8278"],"e9715fed7709e0c0b02163fee6ce9f2a48191eb1":["605b061fadf71aa6458c0005eaae83a98350c403"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"7b91922b55d15444d554721b352861d028eb8278":["e128967bca58657bc0039d4bfe631e63e81f1977"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a2e8664bf0ffa0a67102ee8671e428d99d07d9b"],"605b061fadf71aa6458c0005eaae83a98350c403":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"e128967bca58657bc0039d4bfe631e63e81f1977":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"7a2e8664bf0ffa0a67102ee8671e428d99d07d9b":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"e9715fed7709e0c0b02163fee6ce9f2a48191eb1":["7a2e8664bf0ffa0a67102ee8671e428d99d07d9b"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["d638301ad1cfcae567b681b893bc8781f0ee48a5","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"7b91922b55d15444d554721b352861d028eb8278":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"605b061fadf71aa6458c0005eaae83a98350c403":["e9715fed7709e0c0b02163fee6ce9f2a48191eb1"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","e128967bca58657bc0039d4bfe631e63e81f1977"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["605b061fadf71aa6458c0005eaae83a98350c403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ab5cb6a74aefb78aa0569857970b9151dfe2e787","2e8d7ba2175f47e280231533f7d3016249cea88b","4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","29ef99d61cda9641b6250bf9567329a6e65f901d"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e128967bca58657bc0039d4bfe631e63e81f1977":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}