{"path":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","sourceNew":"  void finishDocument() throws IOException {\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  void finishDocument() throws IOException {\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"127981e5a1e1d1425c5fdc816ceacf753ca70ee4","date":1354205321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","sourceNew":"  abstract void finishDocument() throws IOException;\n\n","sourceOld":"  void finishDocument() throws IOException {\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc7a7bb1aa79cf53564793bb5ffa270250c679da","date":1357817084,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","sourceNew":"  void finishDocument() throws IOException {\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      fieldsWriter.finishDocument();\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  void finishDocument() throws IOException {\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","sourceNew":"  abstract void finishDocument() throws IOException;\n\n","sourceOld":"  void finishDocument() throws IOException {\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument start\");\n\n    initFieldsWriter(IOContext.DEFAULT);\n    fill(docState.docID);\n\n    if (fieldsWriter != null && numStoredFields > 0) {\n      fieldsWriter.startDocument(numStoredFields);\n      for (int i = 0; i < numStoredFields; i++) {\n        fieldsWriter.writeField(fieldInfos[i], storedFields[i]);\n      }\n      fieldsWriter.finishDocument();\n      lastDocID++;\n    }\n\n    reset();\n    assert docWriter.writer.testPoint(\"StoredFieldsWriter.finishDocument end\");\n  }\n\n","bugFix":["5350389bf83287111f7760b9e3db3af8e3648474","b6f9be74ca7baaef11857ad002cad40419979516","833a7987bc1c94455fde83e3311f72bddedcfb93","3cc749c053615f5871f3b95715fe292f34e70a53","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","sourceNew":null,"sourceOld":"  abstract void finishDocument() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","sourceNew":null,"sourceOld":"  abstract void finishDocument() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","sourceNew":null,"sourceOld":"  abstract void finishDocument() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","pathOld":"/dev/null","sourceNew":"  void finishDocument() throws IOException {\n    writer.finishDocument();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#finishDocument().mjava","pathOld":"/dev/null","sourceNew":"  void finishDocument() throws IOException {\n    writer.finishDocument();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["d4d69c535930b5cce125cff868d40f6373dc27d4","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["d4d69c535930b5cce125cff868d40f6373dc27d4","3394716f52b34ab259ad5247e7595d9f9db6e935"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["fc7a7bb1aa79cf53564793bb5ffa270250c679da","127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["3394716f52b34ab259ad5247e7595d9f9db6e935","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"52c7e49be259508735752fba88085255014a6ecf":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fc7a7bb1aa79cf53564793bb5ffa270250c679da","127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}