{"path":"lucene/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","commits":[{"id":"dd86d8c5713fc65e119372f12a3c5fdc47987b56","date":1318525216,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    s.close();\n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    s.close();\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    s.close();\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["dd86d8c5713fc65e119372f12a3c5fdc47987b56"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"dd86d8c5713fc65e119372f12a3c5fdc47987b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["dd86d8c5713fc65e119372f12a3c5fdc47987b56","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"dd86d8c5713fc65e119372f12a3c5fdc47987b56":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd86d8c5713fc65e119372f12a3c5fdc47987b56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}