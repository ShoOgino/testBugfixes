{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutLargestNonPendingWriter().mjava","commits":[{"id":"ad4be95c403f45330d2a078afc9b6fab4515c8ce","date":1512064647,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutLargestNonPendingWriter().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the largest non-pending flushable DWPT or <code>null</code> if there is none.\n   */\n  final DocumentsWriterPerThread checkoutLargestNonPendingWriter() {\n    ThreadState largestNonPendingWriter = findLargestNonPendingWriter();\n    if (largestNonPendingWriter != null) {\n      // we only lock this very briefly to swap it's DWPT out - we don't go through the DWPTPool and it's free queue\n      largestNonPendingWriter.lock();\n      try {\n        synchronized (this) {\n          try {\n            if (largestNonPendingWriter.isInitialized() == false) {\n              return nextPendingFlush();\n            } else {\n              return checkout(largestNonPendingWriter, largestNonPendingWriter.isFlushPending() == false);\n            }\n          } finally {\n            updateStallState();\n          }\n        }\n      } finally {\n        largestNonPendingWriter.unlock();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutLargestNonPendingWriter().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the largest non-pending flushable DWPT or <code>null</code> if there is none.\n   */\n  final DocumentsWriterPerThread checkoutLargestNonPendingWriter() {\n    ThreadState largestNonPendingWriter = findLargestNonPendingWriter();\n    if (largestNonPendingWriter != null) {\n      // we only lock this very briefly to swap it's DWPT out - we don't go through the DWPTPool and it's free queue\n      largestNonPendingWriter.lock();\n      try {\n        synchronized (this) {\n          try {\n            if (largestNonPendingWriter.isInitialized() == false) {\n              return nextPendingFlush();\n            } else {\n              return checkout(largestNonPendingWriter, largestNonPendingWriter.isFlushPending() == false);\n            }\n          } finally {\n            updateStallState();\n          }\n        }\n      } finally {\n        largestNonPendingWriter.unlock();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutLargestNonPendingWriter().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#checkoutLargestNonPendingWriter().mjava","sourceNew":"  /**\n   * Returns the largest non-pending flushable DWPT or <code>null</code> if there is none.\n   */\n  final DocumentsWriterPerThread checkoutLargestNonPendingWriter() {\n    DocumentsWriterPerThread largestNonPendingWriter = findLargestNonPendingWriter();\n    if (largestNonPendingWriter != null) {\n      // we only lock this very briefly to swap it's DWPT out - we don't go through the DWPTPool and it's free queue\n      largestNonPendingWriter.lock();\n      try {\n        if (perThreadPool.isRegistered(largestNonPendingWriter)) {\n          synchronized (this) {\n            try {\n              return checkout(largestNonPendingWriter, largestNonPendingWriter.isFlushPending() == false);\n            } finally {\n              updateStallState();\n            }\n          }\n        }\n      } finally {\n        largestNonPendingWriter.unlock();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the largest non-pending flushable DWPT or <code>null</code> if there is none.\n   */\n  final DocumentsWriterPerThread checkoutLargestNonPendingWriter() {\n    ThreadState largestNonPendingWriter = findLargestNonPendingWriter();\n    if (largestNonPendingWriter != null) {\n      // we only lock this very briefly to swap it's DWPT out - we don't go through the DWPTPool and it's free queue\n      largestNonPendingWriter.lock();\n      try {\n        synchronized (this) {\n          try {\n            if (largestNonPendingWriter.isInitialized() == false) {\n              return nextPendingFlush();\n            } else {\n              return checkout(largestNonPendingWriter, largestNonPendingWriter.isFlushPending() == false);\n            }\n          } finally {\n            updateStallState();\n          }\n        }\n      } finally {\n        largestNonPendingWriter.unlock();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad4be95c403f45330d2a078afc9b6fab4515c8ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4be95c403f45330d2a078afc9b6fab4515c8ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["264935965977b4a9e2f3920420647072c9c49176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aad05eeff7818b0833c02ac6b743aa72054963b","ad4be95c403f45330d2a078afc9b6fab4515c8ce"],"ad4be95c403f45330d2a078afc9b6fab4515c8ce":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}