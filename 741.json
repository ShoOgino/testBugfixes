{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,IndexReader,boolean).mjava","commits":[{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,IndexReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, IndexReader rightReader, boolean deep) throws IOException {\n    Set<String> leftFields = new HashSet<>(MultiFields.getIndexedFields(leftReader));\n    Set<String> rightFields = new HashSet<>(MultiFields.getIndexedFields(rightReader));\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n      assertTermsEquals(info, leftReader, MultiFields.getTerms(leftReader, field), MultiFields.getTerms(rightReader, field), deep);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,IndexReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,IndexReader,boolean).mjava","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, IndexReader rightReader, boolean deep) throws IOException {\n    Set<String> leftFields = new HashSet<>(FieldInfos.getIndexedFields(leftReader));\n    Set<String> rightFields = new HashSet<>(FieldInfos.getIndexedFields(rightReader));\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n      assertTermsEquals(info, leftReader, MultiTerms.getTerms(leftReader, field), MultiTerms.getTerms(rightReader, field), deep);\n    }\n  }\n\n","sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, IndexReader rightReader, boolean deep) throws IOException {\n    Set<String> leftFields = new HashSet<>(MultiFields.getIndexedFields(leftReader));\n    Set<String> rightFields = new HashSet<>(MultiFields.getIndexedFields(rightReader));\n    assertEquals(info, leftFields, rightFields);\n\n    for (String field : leftFields) {\n      assertTermsEquals(info, leftReader, MultiFields.getTerms(leftReader, field), MultiFields.getTerms(rightReader, field), deep);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}