{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","commits":[{"id":"081b68cb9e8f4b5405b40bfb223fd7c587171aa1","date":1360072766,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlattenFilteredQuery() throws Exception {\n    Query query = new FilteredQuery(pqF( \"A\" ), new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n    });\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( \"A\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlattenFilteredQuery() throws Exception {\n    Query query = new FilteredQuery(pqF( \"A\" ), new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n    });\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( \"A\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94221e4190ec47a1ec4f0bd8f99b3648af295a06","date":1389175887,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","sourceNew":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Query query = new FilteredQuery(pqF( \"A\" ), new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n    });\n    query.setBoost(boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","sourceOld":"  public void testFlattenFilteredQuery() throws Exception {\n    Query query = new FilteredQuery(pqF( \"A\" ), new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n    });\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( \"A\" ) );\n  }\n\n","bugFix":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","sourceNew":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Query query = new FilteredQuery(pqF( \"A\" ), new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n    });\n    query.setBoost(boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","sourceOld":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Query query = new FilteredQuery(pqF( \"A\" ), new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n    });\n    query.setBoost(boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","sourceNew":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Query query = new FilteredQuery(pqF( \"A\" ), new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n    });\n    query.setBoost(boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","sourceOld":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Query query = new FilteredQuery(pqF( \"A\" ), new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n    });\n    query.setBoost(boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6","date":1424027250,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","sourceNew":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Query query = new FilteredQuery(pqF( \"A\" ), new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n      @Override\n      public String toString(String field) {\n        return \"filterToBeFlattened\";\n      }\n    });\n    query.setBoost(boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","sourceOld":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Query query = new FilteredQuery(pqF( \"A\" ), new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n    });\n    query.setBoost(boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","sourceNew":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n      @Override\n      public String toString(String field) {\n        return \"filterToBeFlattened\";\n      }\n    };\n    Query query = new BooleanQuery.Builder()\n        .add(pqF( \"A\" ), Occur.MUST)\n        .add(filter, Occur.FILTER)\n        .build();\n    query.setBoost(boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","sourceOld":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Query query = new FilteredQuery(pqF( \"A\" ), new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n      @Override\n      public String toString(String field) {\n        return \"filterToBeFlattened\";\n      }\n    });\n    query.setBoost(boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","sourceNew":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n      @Override\n      public String toString(String field) {\n        return \"filterToBeFlattened\";\n      }\n    };\n    Query query = new BooleanQuery.Builder()\n        .add(pqF( \"A\" ), Occur.MUST)\n        .add(filter, Occur.FILTER)\n        .build();\n    query = new BoostQuery(query, boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries, 1f );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","sourceOld":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n      @Override\n      public String toString(String field) {\n        return \"filterToBeFlattened\";\n      }\n    };\n    Query query = new BooleanQuery.Builder()\n        .add(pqF( \"A\" ), Occur.MUST)\n        .add(filter, Occur.FILTER)\n        .build();\n    query.setBoost(boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenFilteredQuery().mjava","sourceNew":null,"sourceOld":"  public void testFlattenFilteredQuery() throws Exception {\n    initBoost();\n    Filter filter = new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)\n          throws IOException {\n        return null;\n      }\n      @Override\n      public String toString(String field) {\n        return \"filterToBeFlattened\";\n      }\n    };\n    Query query = new BooleanQuery.Builder()\n        .add(pqF( \"A\" ), Occur.MUST)\n        .add(filter, Occur.FILTER)\n        .build();\n    query = new BoostQuery(query, boost);\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries, 1f );\n    assertCollectionQueries( flatQueries, tq( boost, \"A\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"1db68e96dd908fcd79ef809095822736aa601d08":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"081b68cb9e8f4b5405b40bfb223fd7c587171aa1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["1db68e96dd908fcd79ef809095822736aa601d08"],"94221e4190ec47a1ec4f0bd8f99b3648af295a06":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6":["1db68e96dd908fcd79ef809095822736aa601d08"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"1db68e96dd908fcd79ef809095822736aa601d08":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"081b68cb9e8f4b5405b40bfb223fd7c587171aa1":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1","3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"94221e4190ec47a1ec4f0bd8f99b3648af295a06":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["fb58c5f77afb63ba911f6d62f4c1d89f15e56dc6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}