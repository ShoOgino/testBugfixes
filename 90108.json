{"path":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7460755aa94143153400f49c8ac2746f5d092e1a"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["7460755aa94143153400f49c8ac2746f5d092e1a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7460755aa94143153400f49c8ac2746f5d092e1a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","7460755aa94143153400f49c8ac2746f5d092e1a"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}