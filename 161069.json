{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","commits":[{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize < -1 || tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize < -1 || tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740ee098a9980924f1de3e712c61e1bdd3869b9c","date":1481818674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","sourceNew":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    if (tableSize < -1) {\n      entry.blockShift = -2 - tableSize;\n    } else {\n      entry.blockShift = -1;\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n  }\n\n","sourceOld":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize < -1 || tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","sourceNew":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    if (tableSize < -1) {\n      entry.blockShift = -2 - tableSize;\n    } else {\n      entry.blockShift = -1;\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n  }\n\n","sourceOld":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize < -1 || tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","sourceNew":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    if (tableSize < -1) {\n      entry.blockShift = -2 - tableSize;\n    } else {\n      entry.blockShift = -1;\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n  }\n\n","sourceOld":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    if (tableSize < -1) {\n      entry.blockShift = -2 - tableSize;\n    } else {\n      entry.blockShift = -1;\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","sourceNew":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    if (tableSize < -1) {\n      entry.blockShift = -2 - tableSize;\n    } else {\n      entry.blockShift = -1;\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n  }\n\n","sourceOld":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    if (tableSize < -1) {\n      entry.blockShift = -2 - tableSize;\n    } else {\n      entry.blockShift = -1;\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["740ee098a9980924f1de3e712c61e1bdd3869b9c"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["740ee098a9980924f1de3e712c61e1bdd3869b9c","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","740ee098a9980924f1de3e712c61e1bdd3869b9c"],"740ee098a9980924f1de3e712c61e1bdd3869b9c":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23e44daeaa8b89694d10df5999956c8e14a7dd09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["740ee098a9980924f1de3e712c61e1bdd3869b9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23e44daeaa8b89694d10df5999956c8e14a7dd09","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"740ee098a9980924f1de3e712c61e1bdd3869b9c":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836","9856095f7afb5a607bf5e65077615ed91273508c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}