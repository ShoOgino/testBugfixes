{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  merge=\" + merge + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  merge=\" + merge + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  merge=\" + merge + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e277c90a96e81a581f45e4b6aaf384ddc50f79bc","date":1280401404,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2014c2eb4262fc72f4ad7fe6ac6cd8e4f550c4c6","date":1287756834,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89e2abf3e623357f44570e4ad6c56c3f22ac9ade","date":1287770258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["2100714e7e90fc106e6bbbbc39ede8bb8051ce97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2100714e7e90fc106e6bbbbc39ede8bb8051ce97","date":1287828400,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":["89e2abf3e623357f44570e4ad6c56c3f22ac9ade"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59e018adb27395528a3a548ec731ee436c0e9169","date":1304344843,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1f0e2f00b4449f4f1fc7473a8287cb532d631e","date":1304347497,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"850aca8525380ccb7df9626d7caa89678005dd31","date":1307569142,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              infoStream.message(\"IW\", \"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      message(\"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              infoStream.message(\"IW\", \"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.maxNumSegments != -1 || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegments);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              infoStream.message(\"IW\", \"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.optimize || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream.isEnabled(\"IW\"))\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            infoStream.message(\"IW\", \"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.maxNumSegments != -1 || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegments);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (merge.info != null && infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              infoStream.message(\"IW\", \"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.maxNumSegments != -1 || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegments);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (infoStream != null && merge.info != null) {\n      infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n          }\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during merge\");\n            }\n            if (merge.info != null && !segmentInfos.contains(merge.info)) {\n              deleter.refresh(merge.info.name);\n            }\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.maxNumSegments != -1 || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegments);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (merge.info != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream.isEnabled(\"IW\"))\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            infoStream.message(\"IW\", \"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.maxNumSegments != -1 || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegments);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (merge.info != null && infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n          }\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during merge\");\n            }\n            if (merge.info != null && !segmentInfos.contains(merge.info)) {\n              deleter.refresh(merge.info.name);\n            }\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.maxNumSegments != -1 || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegments);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (merge.info != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream.isEnabled(\"IW\"))\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            infoStream.message(\"IW\", \"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.maxNumSegments != -1 || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegments);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (merge.info != null && infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + segString(merge.segments) + \"\\n  index=\" + segString());\n          }\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during merge\");\n            }\n            if (merge.info != null && !segmentInfos.contains(merge.info)) {\n              deleter.refresh(merge.info.name);\n            }\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.maxNumSegments != -1 || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegments);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (merge.info != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n    //System.out.println(Thread.currentThread().getName() + \": merge start: size=\" + (merge.estimatedMergeBytes/1024./1024.) + \" MB\\n  merge=\" + merge.segString(directory) + \"\\n  idx=\" + segString());\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  index=\" + segString());\n          }\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during merge\");\n            }\n            if (merge.info != null && !segmentInfos.contains(merge.info)) {\n              deleter.refresh(merge.info.name);\n            }\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.maxNumSegments != -1 || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegments);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (merge.info != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + segString(merge.segments) + \"\\n  index=\" + segString());\n          }\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during merge\");\n            }\n            if (merge.info != null && !segmentInfos.contains(merge.info)) {\n              deleter.refresh(merge.info.name);\n            }\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.maxNumSegments != -1 || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegments);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (merge.info != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   * \n   * @lucene.experimental\n   */\n  public void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    final long t0 = System.currentTimeMillis();\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"now merge\\n  merge=\" + segString(merge.segments) + \"\\n  index=\" + segString());\n          }\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception during merge\");\n            }\n            if (merge.info != null && !segmentInfos.contains(merge.info)) {\n              deleter.refresh(merge.info.name);\n            }\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && (merge.maxNumSegments != -1 || (!closed && !closing))) {\n            updatePendingMerges(merge.maxNumSegments);\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n    if (merge.info != null) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"merge time \" + (System.currentTimeMillis()-t0) + \" msec for \" + merge.info.docCount + \" docs\");\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": merge end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"2100714e7e90fc106e6bbbbc39ede8bb8051ce97":["89e2abf3e623357f44570e4ad6c56c3f22ac9ade"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","2100714e7e90fc106e6bbbbc39ede8bb8051ce97"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["850aca8525380ccb7df9626d7caa89678005dd31"],"2014c2eb4262fc72f4ad7fe6ac6cd8e4f550c4c6":["e277c90a96e81a581f45e4b6aaf384ddc50f79bc"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"850aca8525380ccb7df9626d7caa89678005dd31":["59e018adb27395528a3a548ec731ee436c0e9169"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","850aca8525380ccb7df9626d7caa89678005dd31"],"59e018adb27395528a3a548ec731ee436c0e9169":["2100714e7e90fc106e6bbbbc39ede8bb8051ce97"],"89e2abf3e623357f44570e4ad6c56c3f22ac9ade":["2014c2eb4262fc72f4ad7fe6ac6cd8e4f550c4c6"],"06584e6e98d592b34e1329b384182f368d2025e8":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["e277c90a96e81a581f45e4b6aaf384ddc50f79bc","2100714e7e90fc106e6bbbbc39ede8bb8051ce97"],"e277c90a96e81a581f45e4b6aaf384ddc50f79bc":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2100714e7e90fc106e6bbbbc39ede8bb8051ce97","59e018adb27395528a3a548ec731ee436c0e9169"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["ba1f0e2f00b4449f4f1fc7473a8287cb532d631e","850aca8525380ccb7df9626d7caa89678005dd31"],"ba1f0e2f00b4449f4f1fc7473a8287cb532d631e":["b12d3e81e0f95a4527b5703953c503f71120ffcc","59e018adb27395528a3a548ec731ee436c0e9169"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","9ce667c6d3400b22523701c549c0d35e26da8b46"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"2100714e7e90fc106e6bbbbc39ede8bb8051ce97":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","59e018adb27395528a3a548ec731ee436c0e9169","b12d3e81e0f95a4527b5703953c503f71120ffcc","a3776dccca01c11e7046323cfad46a3b4a471233"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e277c90a96e81a581f45e4b6aaf384ddc50f79bc"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","06584e6e98d592b34e1329b384182f368d2025e8"],"2014c2eb4262fc72f4ad7fe6ac6cd8e4f550c4c6":["89e2abf3e623357f44570e4ad6c56c3f22ac9ade"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"850aca8525380ccb7df9626d7caa89678005dd31":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"59e018adb27395528a3a548ec731ee436c0e9169":["850aca8525380ccb7df9626d7caa89678005dd31","a3776dccca01c11e7046323cfad46a3b4a471233","ba1f0e2f00b4449f4f1fc7473a8287cb532d631e"],"89e2abf3e623357f44570e4ad6c56c3f22ac9ade":["2100714e7e90fc106e6bbbbc39ede8bb8051ce97"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["ba1f0e2f00b4449f4f1fc7473a8287cb532d631e"],"e277c90a96e81a581f45e4b6aaf384ddc50f79bc":["2014c2eb4262fc72f4ad7fe6ac6cd8e4f550c4c6","b12d3e81e0f95a4527b5703953c503f71120ffcc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"ba1f0e2f00b4449f4f1fc7473a8287cb532d631e":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}