{"path":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","commits":[{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()); // no soft delete field hier\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.liveDocsShared();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b3f926ac330be2198e6be3ace82e76b8c3a3b2c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49575fe0d33c4904ac42b0526411d1dee7549e9b","date":1523529874,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()); // no soft delete field here\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.liveDocsShared();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()); // no soft delete field hier\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.liveDocsShared();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d36ba65c7e095c7938bfc2343a9a6cf689bfb43","date":1523531370,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()); // no soft delete field here\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.liveDocsShared();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()); // no soft delete field hier\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.liveDocsShared();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"_soft_deletes\"));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.liveDocsShared();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()); // no soft delete field here\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.liveDocsShared();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36d84416fc00253f9e834f8dba14fa89b298e64e","date":1525428963,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"_soft_deletes\"));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.liveDocsShared();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"_soft_deletes\"));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.liveDocsShared();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13bce432480722e4f48bce0da3623dab44dd8d9c","date":1525873214,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"_soft_deletes\"));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"_soft_deletes\"));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.liveDocsShared();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81ae7fb03c72515a31956c4851d80056018c735c","date":1526304616,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"_soft_deletes\"));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(2, pendingSoftDeletes.getDelCount());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(2, pendingSoftDeletes.getDelCount());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(2, pendingSoftDeletes.getDelCount());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(1, pendingSoftDeletes.numPendingDeletes());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a90cc8c90aa53ddf51fbd15019989ac269514a3","date":1531845066,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(2, pendingSoftDeletes.getDelCount());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(2, pendingSoftDeletes.getDelCount());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(2, pendingSoftDeletes.getDelCount());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(2, pendingSoftDeletes.getDelCount());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8","date":1535113998,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPendingSoftDeletes#testDeleteSoft().mjava","sourceNew":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(2, pendingSoftDeletes.getDelCount());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testDeleteSoft() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setSoftDeletesField(\"_soft_deletes\")\n        // make sure all docs will end up in the same segment\n        .setMaxBufferedDocs(10)\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", Field.Store.YES));\n    writer.softUpdateDocument(new Term(\"id\", \"2\"), doc,\n        new NumericDocValuesField(\"_soft_deletes\", 1));\n    writer.commit();\n    DirectoryReader reader = writer.getReader();\n    assertEquals(1, reader.leaves().size());\n    SegmentReader segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    SegmentCommitInfo segmentInfo = segmentReader.getSegmentInfo();\n    PendingSoftDeletes pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNull(pendingSoftDeletes.getHardLiveDocs());\n    // pass reader again\n    Bits liveDocs = pendingSoftDeletes.getLiveDocs();\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(1, pendingSoftDeletes.getDelCount());\n    assertSame(liveDocs, pendingSoftDeletes.getLiveDocs());\n\n    // now apply a hard delete\n    writer.deleteDocuments(new Term(\"id\", \"1\"));\n    writer.commit();\n    IOUtils.close(reader);\n    reader = DirectoryReader.open(dir);\n    assertEquals(1, reader.leaves().size());\n    segmentReader = (SegmentReader) reader.leaves().get(0).reader();\n    segmentInfo = segmentReader.getSegmentInfo();\n    pendingSoftDeletes = newPendingDeletes(segmentInfo);\n    pendingSoftDeletes.onNewReader(segmentReader, segmentInfo);\n    assertEquals(0, pendingSoftDeletes.numPendingDeletes());\n    assertEquals(2, pendingSoftDeletes.getDelCount());\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(0));\n    assertFalse(pendingSoftDeletes.getLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getLiveDocs().get(2));\n    assertNotNull(pendingSoftDeletes.getHardLiveDocs());\n    assertFalse(pendingSoftDeletes.getHardLiveDocs().get(0));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(1));\n    assertTrue(pendingSoftDeletes.getHardLiveDocs().get(2));\n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36d84416fc00253f9e834f8dba14fa89b298e64e":["36d13f271b6649357e07f71f7e46559479f69b5b"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"36d13f271b6649357e07f71f7e46559479f69b5b":["5d36ba65c7e095c7938bfc2343a9a6cf689bfb43"],"5d36ba65c7e095c7938bfc2343a9a6cf689bfb43":["5ee0394b8176abd7c90a4be8c05465be1879db79","49575fe0d33c4904ac42b0526411d1dee7549e9b"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b70042a8a492f7054d480ccdd2be9796510d4327","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"13bce432480722e4f48bce0da3623dab44dd8d9c":["36d84416fc00253f9e834f8dba14fa89b298e64e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"49575fe0d33c4904ac42b0526411d1dee7549e9b":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"b70042a8a492f7054d480ccdd2be9796510d4327":["81ae7fb03c72515a31956c4851d80056018c735c","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["81ae7fb03c72515a31956c4851d80056018c735c"],"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8":["4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"81ae7fb03c72515a31956c4851d80056018c735c":["13bce432480722e4f48bce0da3623dab44dd8d9c"],"f592209545c71895260367152601e9200399776d":["81ae7fb03c72515a31956c4851d80056018c735c","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3f926ac330be2198e6be3ace82e76b8c3a3b2c8"]},"commit2Childs":{"36d84416fc00253f9e834f8dba14fa89b298e64e":["13bce432480722e4f48bce0da3623dab44dd8d9c"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["5d36ba65c7e095c7938bfc2343a9a6cf689bfb43","49575fe0d33c4904ac42b0526411d1dee7549e9b"],"36d13f271b6649357e07f71f7e46559479f69b5b":["36d84416fc00253f9e834f8dba14fa89b298e64e"],"5d36ba65c7e095c7938bfc2343a9a6cf689bfb43":["36d13f271b6649357e07f71f7e46559479f69b5b"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b3f926ac330be2198e6be3ace82e76b8c3a3b2c8"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"13bce432480722e4f48bce0da3623dab44dd8d9c":["81ae7fb03c72515a31956c4851d80056018c735c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"49575fe0d33c4904ac42b0526411d1dee7549e9b":["5d36ba65c7e095c7938bfc2343a9a6cf689bfb43"],"b70042a8a492f7054d480ccdd2be9796510d4327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["4a90cc8c90aa53ddf51fbd15019989ac269514a3","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"81ae7fb03c72515a31956c4851d80056018c735c":["b70042a8a492f7054d480ccdd2be9796510d4327","8f2203cb8ae87188877cfbf6ad170c5738a0aad5","f592209545c71895260367152601e9200399776d"],"b3f926ac330be2198e6be3ace82e76b8c3a3b2c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}