{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (r.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else \n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (r.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else \n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else \n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (r.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else \n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (r.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else \n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else \n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else \n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else \n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#fillUnicode(char[],char[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#fillUnicode(char[],char[],int,int).mjava","sourceNew":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","sourceOld":"  private boolean fillUnicode(char[] buffer, char[] expected, int offset, int count) {\n    final int len = offset + count;\n    boolean hasIllegal = false;\n\n    if (offset > 0 && buffer[offset] >= 0xdc00 && buffer[offset] < 0xe000)\n      // Don't start in the middle of a valid surrogate pair\n      offset--;\n\n    for(int i=offset;i<len;i++) {\n      int t = nextInt(6);\n      if (0 == t && i < len-1) {\n        // Make a surrogate pair\n        // High surrogate\n        expected[i] = buffer[i++] = (char) nextInt(0xd800, 0xdc00);\n        // Low surrogate\n        expected[i] = buffer[i] = (char) nextInt(0xdc00, 0xe000);\n      } else if (t <= 1)\n        expected[i] = buffer[i] = (char) nextInt(0x80);\n      else if (2 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x80, 0x800);\n      else if (3 == t)\n        expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      else if (4 == t)\n        expected[i] = buffer[i] = (char) nextInt(0xe000, 0xffff);\n      else if (5 == t && i < len-1) {\n        // Illegal unpaired surrogate\n        if (nextInt(10) == 7) {\n          if (random.nextBoolean())\n            buffer[i] = (char) nextInt(0xd800, 0xdc00);\n          else\n            buffer[i] = (char) nextInt(0xdc00, 0xe000);\n          expected[i++] = 0xfffd;\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n          hasIllegal = true;\n        } else\n          expected[i] = buffer[i] = (char) nextInt(0x800, 0xd800);\n      } else {\n        expected[i] = buffer[i] = ' ';\n      }\n    }\n\n    return hasIllegal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a3776dccca01c11e7046323cfad46a3b4a471233":["b21422ff1d1d56499dec481f193b402e5e8def5b","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["b21422ff1d1d56499dec481f193b402e5e8def5b","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["b21422ff1d1d56499dec481f193b402e5e8def5b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}