{"path":"src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","commits":[{"id":"c0d9871701755df956b8bb5e417776dacc7dc1f2","date":1237846124,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["57cfa96e1cacc0f1f98d8732aa54935875187781","57cfa96e1cacc0f1f98d8732aa54935875187781","57cfa96e1cacc0f1f98d8732aa54935875187781","5cb157886ecc78f33fafd9d403e96a4a495503b3","5cb157886ecc78f33fafd9d403e96a4a495503b3","5cb157886ecc78f33fafd9d403e96a4a495503b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","pathOld":"src/test/org/apache/solr/search/TestRangeQuery#testRandomRangeQueries().mjava","sourceNew":"  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomRangeQueries() throws Exception {\n    String handler=\"\";\n    final String[] fields = {\"foo_s\",\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"  // SortableIntField, etc\n            ,\"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"                      // plain int  IntField, etc\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"                      // trie numer fields\n    };\n    final int l=5;\n    final int u=25;\n\n\n    createIndex(15, new DocProcessor() {\n      public void process(SolrInputDocument doc) {\n        addInt(doc, l,u, fields);\n      }\n    });\n    assertU(commit());\n    \n    // fields that a normal range query will work correctly on\n    String[] norm_fields = {\n            \"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\"\n            ,\"foo_ti\",\"foo_tl\",\"foo_tf\",\"foo_td\"\n\n    };\n    \n    // fields that a value source range query should work on\n    String[] frange_fields = {\"foo_i\",\"foo_l\",\"foo_f\",\"foo_d\",\n            \"foo_pi\",\"foo_pl\",\"foo_pf\",\"foo_pd\"};\n\n    for (int i=0; i<1000; i++) {\n      int lower = l + r.nextInt(u-l+10)-5;\n      int upper = lower + r.nextInt(u+5-lower);\n      boolean lowerMissing = r.nextInt(10)==1;\n      boolean upperMissing = r.nextInt(10)==1;\n      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();\n\n      // lower=2; upper=2; inclusive=true;      \n      // inclusive=true; lowerMissing=true; upperMissing=true;    \n\n      List<String> qs = new ArrayList<String>();\n      for (String field : norm_fields) {\n        String q = field + ':' + (inclusive?'[':'{')\n                + (lowerMissing?\"*\":lower)\n                + \" TO \"\n                + (upperMissing?\"*\":upper)\n                + (inclusive?']':'}');\n        qs.add(q);\n      }\n      for (String field : frange_fields) {\n        String q = \"{!frange v=\"+field\n                + (lowerMissing?\"\":(\" l=\"+lower))\n                + (upperMissing?\"\":(\" u=\"+upper))\n                + (inclusive?\"\":\" incl=false\")\n                + (inclusive?\"\":\" incu=false\")\n                + \"}\";\n        qs.add(q);\n      }\n\n      SolrQueryResponse last=null;\n      for (String q : qs) {\n        // System.out.println(\"QUERY=\"+q);\n        SolrQueryResponse qr = h.queryAndResponse(handler, req(\"q\",q,\"rows\",\"1000\"));\n        if (last != null) {\n          // we only test if the same docs matched since some queries will include factors like idf, etc.\n          sameDocs((DocSet)qr.getValues().get(\"response\"), (DocSet)last.getValues().get(\"response\"));\n        }\n        last = qr;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}