{"path":"lucene/core/src/java/org/apache/lucene/store/Directory#sync(Collection[String]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#sync(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#sync(Collection[String]).mjava","sourceNew":"  /**\n   * Ensure that any writes to these files are moved to\n   * stable storage.  Lucene uses this to properly commit\n   * changes to the index, to prevent a machine/OS crash\n   * from corrupting the index.<br/>\n   * <br/>\n   * NOTE: Clients may call this method for same files over\n   * and over again, so some impls might optimize for that.\n   * For other impls the operation can be a noop, for various\n   * reasons.\n   */\n  public abstract void sync(Collection<String> names) throws IOException;\n\n","sourceOld":"  /**\n   * Ensure that any writes to these files are moved to\n   * stable storage.  Lucene uses this to properly commit\n   * changes to the index, to prevent a machine/OS crash\n   * from corrupting the index.<br/>\n   * <br/>\n   * NOTE: Clients may call this method for same files over\n   * and over again, so some impls might optimize for that.\n   * For other impls the operation can be a noop, for various\n   * reasons.\n   */\n  public abstract void sync(Collection<String> names) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#sync(Collection[String]).mjava","sourceNew":"  /**\n   * Ensure that any writes to these files are moved to\n   * stable storage.  Lucene uses this to properly commit\n   * changes to the index, to prevent a machine/OS crash\n   * from corrupting the index.\n   * <br>\n   * NOTE: Clients may call this method for same files over\n   * and over again, so some impls might optimize for that.\n   * For other impls the operation can be a noop, for various\n   * reasons.\n   */\n  public abstract void sync(Collection<String> names) throws IOException;\n\n","sourceOld":"  /**\n   * Ensure that any writes to these files are moved to\n   * stable storage.  Lucene uses this to properly commit\n   * changes to the index, to prevent a machine/OS crash\n   * from corrupting the index.<br/>\n   * <br/>\n   * NOTE: Clients may call this method for same files over\n   * and over again, so some impls might optimize for that.\n   * For other impls the operation can be a noop, for various\n   * reasons.\n   */\n  public abstract void sync(Collection<String> names) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#sync(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#sync(Collection[String]).mjava","sourceNew":"  /**\n   * Ensures that any writes to these files are moved to\n   * stable storage (made durable).\n   *\n   * Lucene uses this to properly commit changes to the index, to prevent a machine/OS crash\n   * from corrupting the index.\n   *\n   * @see #syncMetaData()\n   */\n  public abstract void sync(Collection<String> names) throws IOException;\n\n","sourceOld":"  /**\n   * Ensure that any writes to these files are moved to\n   * stable storage.  Lucene uses this to properly commit\n   * changes to the index, to prevent a machine/OS crash\n   * from corrupting the index.\n   * <br>\n   * NOTE: Clients may call this method for same files over\n   * and over again, so some impls might optimize for that.\n   * For other impls the operation can be a noop, for various\n   * reasons.\n   */\n  public abstract void sync(Collection<String> names) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}