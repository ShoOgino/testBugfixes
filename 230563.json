{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testFuzzy().mjava","commits":[{"id":"bae2070aa7aaff000145c4978276eb085e2ff279","date":1391309822,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testFuzzy().mjava","pathOld":"/dev/null","sourceNew":"  /** test a fuzzy query */\n  public void testFuzzy() throws Exception {\n    Query regular = new TermQuery(new Term(\"field\", \"foobar\"));\n    Query expected = new FuzzyQuery(new Term(\"field\", \"foobar\"), 2);\n\n    assertEquals(expected, parse(\"foobar~2\"));\n    assertEquals(regular, parse(\"foobar~\"));\n    assertEquals(regular, parse(\"foobar~a\"));\n    assertEquals(regular, parse(\"foobar~1a\"));\n\n    BooleanQuery bool = new BooleanQuery();\n    FuzzyQuery fuzzy = new FuzzyQuery(new Term(\"field\", \"foo\"), LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);\n    bool.add(fuzzy, Occur.MUST);\n    bool.add(new TermQuery(new Term(\"field\", \"bar\")), Occur.MUST);\n\n    assertEquals(bool, parse(\"foo~\" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + 1 + \" bar\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testFuzzy().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testFuzzy().mjava","sourceNew":"  /** test a fuzzy query */\n  public void testFuzzy() throws Exception {\n    Query regular = new TermQuery(new Term(\"field\", \"foobar\"));\n    Query expected = new FuzzyQuery(new Term(\"field\", \"foobar\"), 2);\n\n    assertEquals(expected, parse(\"foobar~2\"));\n    assertEquals(regular, parse(\"foobar~\"));\n    assertEquals(regular, parse(\"foobar~a\"));\n    assertEquals(regular, parse(\"foobar~1a\"));\n\n    BooleanQuery.Builder bool = new BooleanQuery.Builder();\n    FuzzyQuery fuzzy = new FuzzyQuery(new Term(\"field\", \"foo\"), LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);\n    bool.add(fuzzy, Occur.MUST);\n    bool.add(new TermQuery(new Term(\"field\", \"bar\")), Occur.MUST);\n\n    assertEquals(bool.build(), parse(\"foo~\" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + 1 + \" bar\"));\n  }\n\n","sourceOld":"  /** test a fuzzy query */\n  public void testFuzzy() throws Exception {\n    Query regular = new TermQuery(new Term(\"field\", \"foobar\"));\n    Query expected = new FuzzyQuery(new Term(\"field\", \"foobar\"), 2);\n\n    assertEquals(expected, parse(\"foobar~2\"));\n    assertEquals(regular, parse(\"foobar~\"));\n    assertEquals(regular, parse(\"foobar~a\"));\n    assertEquals(regular, parse(\"foobar~1a\"));\n\n    BooleanQuery bool = new BooleanQuery();\n    FuzzyQuery fuzzy = new FuzzyQuery(new Term(\"field\", \"foo\"), LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);\n    bool.add(fuzzy, Occur.MUST);\n    bool.add(new TermQuery(new Term(\"field\", \"bar\")), Occur.MUST);\n\n    assertEquals(bool, parse(\"foo~\" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + 1 + \" bar\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d6abde50ad1f829ba5faf4007a212f715db7277","date":1488887747,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testFuzzy().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testFuzzy().mjava","sourceNew":"  /** test a fuzzy query */\n  public void testFuzzy() throws Exception {\n    Query regular = new TermQuery(new Term(\"field\", \"foobar\"));\n    Query expected = new FuzzyQuery(new Term(\"field\", \"foobar\"), 2);\n\n    assertEquals(expected, parse(\"foobar~2\"));\n    assertEquals(expected, parse(\"foobar~\"));\n    assertEquals(regular, parse(\"foobar~a\"));\n    assertEquals(regular, parse(\"foobar~1a\"));\n\n    BooleanQuery.Builder bool = new BooleanQuery.Builder();\n    FuzzyQuery fuzzy = new FuzzyQuery(new Term(\"field\", \"foo\"), LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);\n    bool.add(fuzzy, Occur.MUST);\n    bool.add(new TermQuery(new Term(\"field\", \"bar\")), Occur.MUST);\n\n    assertEquals(bool.build(), parse(\"foo~\" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + 1 + \" bar\"));\n  }\n\n","sourceOld":"  /** test a fuzzy query */\n  public void testFuzzy() throws Exception {\n    Query regular = new TermQuery(new Term(\"field\", \"foobar\"));\n    Query expected = new FuzzyQuery(new Term(\"field\", \"foobar\"), 2);\n\n    assertEquals(expected, parse(\"foobar~2\"));\n    assertEquals(regular, parse(\"foobar~\"));\n    assertEquals(regular, parse(\"foobar~a\"));\n    assertEquals(regular, parse(\"foobar~1a\"));\n\n    BooleanQuery.Builder bool = new BooleanQuery.Builder();\n    FuzzyQuery fuzzy = new FuzzyQuery(new Term(\"field\", \"foo\"), LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);\n    bool.add(fuzzy, Occur.MUST);\n    bool.add(new TermQuery(new Term(\"field\", \"bar\")), Occur.MUST);\n\n    assertEquals(bool.build(), parse(\"foo~\" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + 1 + \" bar\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d6abde50ad1f829ba5faf4007a212f715db7277":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["bae2070aa7aaff000145c4978276eb085e2ff279"],"bae2070aa7aaff000145c4978276eb085e2ff279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d6abde50ad1f829ba5faf4007a212f715db7277"]},"commit2Childs":{"4d6abde50ad1f829ba5faf4007a212f715db7277":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["4d6abde50ad1f829ba5faf4007a212f715db7277"],"bae2070aa7aaff000145c4978276eb085e2ff279":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bae2070aa7aaff000145c4978276eb085e2ff279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}