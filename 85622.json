{"path":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","commits":[{"id":"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a","date":1148592089,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Implimented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimiation is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ((Number)ln_mins.get(fieldName)).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ((Number)ln_maxs.get(fieldName)).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ((Number)ln_steeps.get(fieldName)).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10c49614cb8b943c412debb24ccb614128394470","date":1178343409,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimiation is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ((Number)ln_mins.get(fieldName)).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ((Number)ln_maxs.get(fieldName)).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ((Number)ln_steeps.get(fieldName)).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implimented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimiation is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ((Number)ln_mins.get(fieldName)).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ((Number)ln_maxs.get(fieldName)).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ((Number)ln_steeps.get(fieldName)).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f257bc624c4953782fdad1ecfb765c97d4a630a6","date":1243743035,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ((Number)ln_mins.get(fieldName)).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ((Number)ln_maxs.get(fieldName)).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ((Number)ln_steeps.get(fieldName)).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimiation is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ((Number)ln_mins.get(fieldName)).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ((Number)ln_maxs.get(fieldName)).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ((Number)ln_steeps.get(fieldName)).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ((Number)ln_mins.get(fieldName)).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ((Number)ln_maxs.get(fieldName)).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ((Number)ln_steeps.get(fieldName)).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ((Number)ln_mins.get(fieldName)).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ((Number)ln_maxs.get(fieldName)).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ((Number)ln_steeps.get(fieldName)).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["f257bc624c4953782fdad1ecfb765c97d4a630a6"],"10c49614cb8b943c412debb24ccb614128394470":["6f9cbf33fc4a562e686c8dc8f92b7856f051b90a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f257bc624c4953782fdad1ecfb765c97d4a630a6":["10c49614cb8b943c412debb24ccb614128394470"],"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10c49614cb8b943c412debb24ccb614128394470":["f257bc624c4953782fdad1ecfb765c97d4a630a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f9cbf33fc4a562e686c8dc8f92b7856f051b90a"],"f257bc624c4953782fdad1ecfb765c97d4a630a6":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a":["10c49614cb8b943c412debb24ccb614128394470"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}