{"path":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testBoundingBoxEdgeCases().mjava","commits":[{"id":"86979a945891cffd49f9634fac5d16ebfe47c541","date":1459704804,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testBoundingBoxEdgeCases().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestPolygon#testBoundingBoxEdgeCases().mjava","sourceNew":"  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double latitude = nextLatitudeAround(polygon.minLat, polygon.maxLat);\n        double longitude = nextLongitudeAround(polygon.minLon, polygon.maxLon);\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double latitude = nextLatitudeAround(polygon.minLat, polygon.maxLat);\n        double longitude = nextLongitudeAround(polygon.minLon, polygon.maxLon);\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testBoundingBoxEdgeCases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testBoundingBoxEdgeCases().mjava","sourceNew":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double latitude = nextLatitudeAround(polygon.minLat, polygon.maxLat);\n        double longitude = nextLongitudeAround(polygon.minLon, polygon.maxLon);\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testBoundingBoxEdgeCases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testBoundingBoxEdgeCases().mjava","sourceNew":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double latitude = nextLatitudeAround(polygon.minLat, polygon.maxLat);\n        double longitude = nextLongitudeAround(polygon.minLon, polygon.maxLon);\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testBoundingBoxEdgeCases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testBoundingBoxEdgeCases().mjava","sourceNew":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (impl.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testBoundingBoxEdgeCases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testBoundingBoxEdgeCases().mjava","sourceNew":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (impl.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86979a945891cffd49f9634fac5d16ebfe47c541":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"713122036535651642e6d4fe57ce12b449e18473":["86979a945891cffd49f9634fac5d16ebfe47c541","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["713122036535651642e6d4fe57ce12b449e18473","925fce43f3bac029d912b9b7de03c789e258a333"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["86979a945891cffd49f9634fac5d16ebfe47c541"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["713122036535651642e6d4fe57ce12b449e18473"]},"commit2Childs":{"86979a945891cffd49f9634fac5d16ebfe47c541":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"713122036535651642e6d4fe57ce12b449e18473":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86979a945891cffd49f9634fac5d16ebfe47c541"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}