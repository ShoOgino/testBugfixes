{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#writeBlock(long[],int,long,GrowableByteArrayDataOutput).mjava","commits":[{"id":"740ee098a9980924f1de3e712c61e1bdd3869b9c","date":1481818674,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#writeBlock(long[],int,long,GrowableByteArrayDataOutput).mjava","pathOld":"/dev/null","sourceNew":"  private void writeBlock(long[] values, int length, long gcd, GrowableByteArrayDataOutput buffer) throws IOException {\n    assert length > 0;\n    long min = values[0];\n    long max = values[0];\n    for (int i = 1; i < length; ++i) {\n      final long v = values[i];\n      assert Math.floorMod(values[i] - min, gcd) == 0;\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    if (min == max) {\n      data.writeByte((byte) 0);\n      data.writeLong(min);\n    } else {\n      final int bitsPerValue = DirectWriter.unsignedBitsRequired(max - min);\n      buffer.reset();\n      assert buffer.getPosition() == 0;\n      final DirectWriter w = DirectWriter.getInstance(buffer, length, bitsPerValue);\n      for (int i = 0; i < length; ++i) {\n        w.add((values[i] - min) / gcd);\n      }\n      w.finish();\n      data.writeByte((byte) bitsPerValue);\n      data.writeLong(min);\n      data.writeInt(buffer.getPosition());\n      data.writeBytes(buffer.getBytes(), buffer.getPosition());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#writeBlock(long[],int,long,GrowableByteArrayDataOutput).mjava","pathOld":"/dev/null","sourceNew":"  private void writeBlock(long[] values, int length, long gcd, GrowableByteArrayDataOutput buffer) throws IOException {\n    assert length > 0;\n    long min = values[0];\n    long max = values[0];\n    for (int i = 1; i < length; ++i) {\n      final long v = values[i];\n      assert Math.floorMod(values[i] - min, gcd) == 0;\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    if (min == max) {\n      data.writeByte((byte) 0);\n      data.writeLong(min);\n    } else {\n      final int bitsPerValue = DirectWriter.unsignedBitsRequired(max - min);\n      buffer.reset();\n      assert buffer.getPosition() == 0;\n      final DirectWriter w = DirectWriter.getInstance(buffer, length, bitsPerValue);\n      for (int i = 0; i < length; ++i) {\n        w.add((values[i] - min) / gcd);\n      }\n      w.finish();\n      data.writeByte((byte) bitsPerValue);\n      data.writeLong(min);\n      data.writeInt(buffer.getPosition());\n      data.writeBytes(buffer.getBytes(), buffer.getPosition());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#writeBlock(long[],int,long,ByteBuffersDataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#writeBlock(long[],int,long,GrowableByteArrayDataOutput).mjava","sourceNew":"  private void writeBlock(long[] values, int length, long gcd, ByteBuffersDataOutput buffer) throws IOException {\n    assert length > 0;\n    long min = values[0];\n    long max = values[0];\n    for (int i = 1; i < length; ++i) {\n      final long v = values[i];\n      assert Math.floorMod(values[i] - min, gcd) == 0;\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    if (min == max) {\n      data.writeByte((byte) 0);\n      data.writeLong(min);\n    } else {\n      final int bitsPerValue = DirectWriter.unsignedBitsRequired(max - min);\n      buffer.reset();\n      assert buffer.size() == 0;\n      final DirectWriter w = DirectWriter.getInstance(buffer, length, bitsPerValue);\n      for (int i = 0; i < length; ++i) {\n        w.add((values[i] - min) / gcd);\n      }\n      w.finish();\n      data.writeByte((byte) bitsPerValue);\n      data.writeLong(min);\n      data.writeInt(Math.toIntExact(buffer.size()));\n      buffer.copyTo(data);\n    }\n  }\n\n","sourceOld":"  private void writeBlock(long[] values, int length, long gcd, GrowableByteArrayDataOutput buffer) throws IOException {\n    assert length > 0;\n    long min = values[0];\n    long max = values[0];\n    for (int i = 1; i < length; ++i) {\n      final long v = values[i];\n      assert Math.floorMod(values[i] - min, gcd) == 0;\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n    }\n    if (min == max) {\n      data.writeByte((byte) 0);\n      data.writeLong(min);\n    } else {\n      final int bitsPerValue = DirectWriter.unsignedBitsRequired(max - min);\n      buffer.reset();\n      assert buffer.getPosition() == 0;\n      final DirectWriter w = DirectWriter.getInstance(buffer, length, bitsPerValue);\n      for (int i = 0; i < length; ++i) {\n        w.add((values[i] - min) / gcd);\n      }\n      w.finish();\n      data.writeByte((byte) bitsPerValue);\n      data.writeLong(min);\n      data.writeInt(buffer.getPosition());\n      data.writeBytes(buffer.getBytes(), buffer.getPosition());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["740ee098a9980924f1de3e712c61e1bdd3869b9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","740ee098a9980924f1de3e712c61e1bdd3869b9c"],"740ee098a9980924f1de3e712c61e1bdd3869b9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9856095f7afb5a607bf5e65077615ed91273508c","740ee098a9980924f1de3e712c61e1bdd3869b9c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"740ee098a9980924f1de3e712c61e1bdd3869b9c":["409da428f28953cf35fddd5c9ff5c7e4f5439863","9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}