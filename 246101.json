{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField#finishSkips().mjava","commits":[{"id":"172cf08877d0e6738a51edd238c4dc5ffc088345","date":1342794823,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField#finishSkips().mjava","pathOld":"/dev/null","sourceNew":"    private void finishSkips() {\n      assert count == terms.length;\n      int lastTermOffset = termOffsets[count-1];\n      int lastTermLength = termOffsets[count] - lastTermOffset;\n\n      for(int i=0;i<lastTermLength;i++) {\n        if (sameCounts[i] >= minSkipCount) {\n          // Go back and add a skip pointer:\n          saveSkip(count, sameCounts[i]);\n        }\n      }\n\n      // Reverse the skip pointers so they are \"nested\":\n      for(int termID=0;termID<terms.length;termID++) {\n        TermAndSkip term = terms[termID];\n        if (term.skips != null && term.skips.length > 1) {\n          for(int pos=0;pos<term.skips.length/2;pos++) {\n            final int otherPos = term.skips.length-pos-1;\n\n            final int temp = term.skips[pos];\n            term.skips[pos] = term.skips[otherPos];\n            term.skips[otherPos] = temp;\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField#finishSkips().mjava","pathOld":"/dev/null","sourceNew":"    private void finishSkips() {\n      assert count == terms.length;\n      int lastTermOffset = termOffsets[count-1];\n      int lastTermLength = termOffsets[count] - lastTermOffset;\n\n      for(int i=0;i<lastTermLength;i++) {\n        if (sameCounts[i] >= minSkipCount) {\n          // Go back and add a skip pointer:\n          saveSkip(count, sameCounts[i]);\n        }\n      }\n\n      // Reverse the skip pointers so they are \"nested\":\n      for(int termID=0;termID<terms.length;termID++) {\n        TermAndSkip term = terms[termID];\n        if (term.skips != null && term.skips.length > 1) {\n          for(int pos=0;pos<term.skips.length/2;pos++) {\n            final int otherPos = term.skips.length-pos-1;\n\n            final int temp = term.skips[pos];\n            term.skips[pos] = term.skips[otherPos];\n            term.skips[otherPos] = temp;\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField#finishSkips().mjava","pathOld":"/dev/null","sourceNew":"    private void finishSkips() {\n      assert count == terms.length;\n      int lastTermOffset = termOffsets[count-1];\n      int lastTermLength = termOffsets[count] - lastTermOffset;\n\n      for(int i=0;i<lastTermLength;i++) {\n        if (sameCounts[i] >= minSkipCount) {\n          // Go back and add a skip pointer:\n          saveSkip(count, sameCounts[i]);\n        }\n      }\n\n      // Reverse the skip pointers so they are \"nested\":\n      for(int termID=0;termID<terms.length;termID++) {\n        TermAndSkip term = terms[termID];\n        if (term.skips != null && term.skips.length > 1) {\n          for(int pos=0;pos<term.skips.length/2;pos++) {\n            final int otherPos = term.skips.length-pos-1;\n\n            final int temp = term.skips[pos];\n            term.skips[pos] = term.skips[otherPos];\n            term.skips[otherPos] = temp;\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField#finishSkips().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField#finishSkips().mjava","sourceNew":"    private void finishSkips() {\n      assert count == terms.length;\n      int lastTermOffset = termOffsets[count-1];\n      int lastTermLength = termOffsets[count] - lastTermOffset;\n\n      for(int i=0;i<lastTermLength;i++) {\n        if (sameCounts[i] >= minSkipCount) {\n          // Go back and add a skip pointer:\n          saveSkip(count, sameCounts[i]);\n        }\n      }\n\n      // Reverse the skip pointers so they are \"nested\":\n      for(int termID=0;termID<terms.length;termID++) {\n        TermAndSkip term = terms[termID];\n        if (term.skips != null && term.skips.length > 1) {\n          for(int pos=0;pos<term.skips.length/2;pos++) {\n            final int otherPos = term.skips.length-pos-1;\n\n            final int temp = term.skips[pos];\n            term.skips[pos] = term.skips[otherPos];\n            term.skips[otherPos] = temp;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void finishSkips() {\n      assert count == terms.length;\n      int lastTermOffset = termOffsets[count-1];\n      int lastTermLength = termOffsets[count] - lastTermOffset;\n\n      for(int i=0;i<lastTermLength;i++) {\n        if (sameCounts[i] >= minSkipCount) {\n          // Go back and add a skip pointer:\n          saveSkip(count, sameCounts[i]);\n        }\n      }\n\n      // Reverse the skip pointers so they are \"nested\":\n      for(int termID=0;termID<terms.length;termID++) {\n        TermAndSkip term = terms[termID];\n        if (term.skips != null && term.skips.length > 1) {\n          for(int pos=0;pos<term.skips.length/2;pos++) {\n            final int otherPos = term.skips.length-pos-1;\n\n            final int temp = term.skips[pos];\n            term.skips[pos] = term.skips[otherPos];\n            term.skips[otherPos] = temp;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","172cf08877d0e6738a51edd238c4dc5ffc088345"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["172cf08877d0e6738a51edd238c4dc5ffc088345"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","172cf08877d0e6738a51edd238c4dc5ffc088345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","172cf08877d0e6738a51edd238c4dc5ffc088345","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"172cf08877d0e6738a51edd238c4dc5ffc088345":["aba371508186796cc6151d8223a5b4e16d02e26e","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}