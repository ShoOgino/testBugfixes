{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#ShardLeaderElectionContext(LeaderElector,String,String,String,ZkNodeProps,ZkController,CoreContainer,boolean).mjava","commits":[{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#ShardLeaderElectionContext(LeaderElector,String,String,String,ZkNodeProps,ZkController,CoreContainer,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#ShardLeaderElectionContext(LeaderElector,String,String,String,ZkNodeProps,ZkController,CoreContainer).mjava","sourceNew":"  public ShardLeaderElectionContext(LeaderElector leaderElector, \n      final String shardId, final String collection,\n      final String shardZkNodeName, ZkNodeProps props, ZkController zkController, CoreContainer cc, boolean afterExpiration) {\n    super(leaderElector, shardId, collection, shardZkNodeName, props,\n        zkController.getZkStateReader());\n    this.zkController = zkController;\n    this.cc = cc;\n    this.afterExpiration = afterExpiration;\n  }\n\n","sourceOld":"  public ShardLeaderElectionContext(LeaderElector leaderElector, \n      final String shardId, final String collection,\n      final String shardZkNodeName, ZkNodeProps props, ZkController zkController, CoreContainer cc) {\n    super(leaderElector, shardId, collection, shardZkNodeName, props,\n        zkController.getZkStateReader());\n    this.zkController = zkController;\n    this.cc = cc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#ShardLeaderElectionContext(LeaderElector,String,String,String,ZkNodeProps,ZkController,CoreContainer,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public ShardLeaderElectionContext(LeaderElector leaderElector, \n      final String shardId, final String collection,\n      final String shardZkNodeName, ZkNodeProps props, ZkController zkController, CoreContainer cc, boolean afterExpiration) {\n    super(leaderElector, shardId, collection, shardZkNodeName, props,\n        zkController.getZkStateReader());\n    this.zkController = zkController;\n    this.cc = cc;\n    this.afterExpiration = afterExpiration;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#ShardLeaderElectionContext(LeaderElector,String,String,String,ZkNodeProps,ZkController,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#ShardLeaderElectionContext(LeaderElector,String,String,String,ZkNodeProps,ZkController,CoreContainer,boolean).mjava","sourceNew":"  public ShardLeaderElectionContext(LeaderElector leaderElector, \n      final String shardId, final String collection,\n      final String shardZkNodeName, ZkNodeProps props, ZkController zkController, CoreContainer cc) {\n    super(leaderElector, shardId, collection, shardZkNodeName, props,\n        zkController.getZkStateReader());\n    this.zkController = zkController;\n    this.cc = cc;\n  }\n\n","sourceOld":"  public ShardLeaderElectionContext(LeaderElector leaderElector, \n      final String shardId, final String collection,\n      final String shardZkNodeName, ZkNodeProps props, ZkController zkController, CoreContainer cc, boolean afterExpiration) {\n    super(leaderElector, shardId, collection, shardZkNodeName, props,\n        zkController.getZkStateReader());\n    this.zkController = zkController;\n    this.cc = cc;\n    this.afterExpiration = afterExpiration;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6378064655e76cd7b908b1cab4ce425b384b508":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6378064655e76cd7b908b1cab4ce425b384b508"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a6378064655e76cd7b908b1cab4ce425b384b508":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05a14b2611ead08655a2b2bdc61632eb31316e57","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["a6378064655e76cd7b908b1cab4ce425b384b508","05a14b2611ead08655a2b2bdc61632eb31316e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}