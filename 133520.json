{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.IntRangeBuilder#addRange(String,String,int).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.IntRangeBuilder#addRange(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Overwrite this method, if you like to receive the already prefix encoded range bounds.\n     * You can directly build classical range queries from them.\n     * The level gives the precision level (0 = highest precision) of the encoded values.\n     * This parameter could be used as an index to an array of fieldnames like the\n     * parameters to {@link #addIndexedFields(Document,String[],String[])} for specifying\n     * the field names for each precision:\n     * <pre>\n     *  String field = fields[Math.min(fields.length-1, level)];\n     * </pre>\n     */\n    public void addRange(String minPrefixCoded, String maxPrefixCoded, int level) {\n      throw new UnsupportedOperationException();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":6,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.IntRangeBuilder#addRange(String,String).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.IntRangeBuilder#addRange(String,String,int).mjava","sourceNew":"    /**\n     * Overwrite this method, if you like to receive the already prefix encoded range bounds.\n     * You can directly build classical range (inclusive) queries from them.\n     */\n    public void addRange(String minPrefixCoded, String maxPrefixCoded) {\n      throw new UnsupportedOperationException();\n    }\n\n","sourceOld":"    /**\n     * Overwrite this method, if you like to receive the already prefix encoded range bounds.\n     * You can directly build classical range queries from them.\n     * The level gives the precision level (0 = highest precision) of the encoded values.\n     * This parameter could be used as an index to an array of fieldnames like the\n     * parameters to {@link #addIndexedFields(Document,String[],String[])} for specifying\n     * the field names for each precision:\n     * <pre>\n     *  String field = fields[Math.min(fields.length-1, level)];\n     * </pre>\n     */\n    public void addRange(String minPrefixCoded, String maxPrefixCoded, int level) {\n      throw new UnsupportedOperationException();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.LongRangeBuilder#addRange(String,String).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils.IntRangeBuilder#addRange(String,String,int).mjava","sourceNew":"    /**\n     * Overwrite this method, if you like to receive the already prefix encoded range bounds.\n     * You can directly build classical (inclusive) range queries from them.\n     */\n    public void addRange(String minPrefixCoded, String maxPrefixCoded) {\n      throw new UnsupportedOperationException();\n    }\n\n","sourceOld":"    /**\n     * Overwrite this method, if you like to receive the already prefix encoded range bounds.\n     * You can directly build classical range queries from them.\n     * The level gives the precision level (0 = highest precision) of the encoded values.\n     * This parameter could be used as an index to an array of fieldnames like the\n     * parameters to {@link #addIndexedFields(Document,String[],String[])} for specifying\n     * the field names for each precision:\n     * <pre>\n     *  String field = fields[Math.min(fields.length-1, level)];\n     * </pre>\n     */\n    public void addRange(String minPrefixCoded, String maxPrefixCoded, int level) {\n      throw new UnsupportedOperationException();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"]},"commit2Childs":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}