{"path":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","commits":[{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"/dev/null","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n\n    BooleanQuery.setAllowDocsOutOfOrder(true);\n\n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      \n      IndexSearcher searcher = new IndexSearcher(dir);\n      for (int i = 0; i < inOrder.length; i++) {\n        TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n        assertEquals(actualTSDCClass[i], tdc.getClass().getSimpleName());\n        \n        searcher.search(new MatchAllDocsQuery(), tdc);\n        \n        ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n        assertEquals(3, sd.length);\n        for (int j = 0; j < sd.length; j++) {\n          assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4edd590f2f8cf66c269ba4ff97900a1206e2523c","date":1243904041,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n\n    BooleanQuery.setAllowDocsOutOfOrder(true);\n\n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      \n      IndexSearcher searcher = new IndexSearcher(dir);\n      for (int i = 0; i < inOrder.length; i++) {\n        TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n        assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n        \n        searcher.search(new MatchAllDocsQuery(), tdc);\n        \n        ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n        assertEquals(3, sd.length);\n        for (int j = 0; j < sd.length; j++) {\n          assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","sourceOld":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n\n    BooleanQuery.setAllowDocsOutOfOrder(true);\n\n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      \n      IndexSearcher searcher = new IndexSearcher(dir);\n      for (int i = 0; i < inOrder.length; i++) {\n        TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n        assertEquals(actualTSDCClass[i], tdc.getClass().getSimpleName());\n        \n        searcher.search(new MatchAllDocsQuery(), tdc);\n        \n        ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n        assertEquals(3, sd.length);\n        for (int j = 0; j < sd.length; j++) {\n          assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n\n    BooleanQuery.setAllowDocsOutOfOrder(true);\n\n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      \n      IndexSearcher searcher = new IndexSearcher(dir, true);\n      for (int i = 0; i < inOrder.length; i++) {\n        TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n        assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n        \n        searcher.search(new MatchAllDocsQuery(), tdc);\n        \n        ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n        assertEquals(3, sd.length);\n        for (int j = 0; j < sd.length; j++) {\n          assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","sourceOld":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n\n    BooleanQuery.setAllowDocsOutOfOrder(true);\n\n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      \n      IndexSearcher searcher = new IndexSearcher(dir);\n      for (int i = 0; i < inOrder.length; i++) {\n        TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n        assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n        \n        searcher.search(new MatchAllDocsQuery(), tdc);\n        \n        ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n        assertEquals(3, sd.length);\n        for (int j = 0; j < sd.length; j++) {\n          assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n\n    BooleanQuery.setAllowDocsOutOfOrder(true);\n\n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      \n      IndexSearcher searcher = new IndexSearcher(dir, true);\n      for (int i = 0; i < inOrder.length; i++) {\n        TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n        assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n        \n        searcher.search(new MatchAllDocsQuery(), tdc);\n        \n        ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n        assertEquals(3, sd.length);\n        for (int j = 0; j < sd.length; j++) {\n          assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","sourceOld":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n\n    BooleanQuery.setAllowDocsOutOfOrder(true);\n\n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      \n      IndexSearcher searcher = new IndexSearcher(dir);\n      for (int i = 0; i < inOrder.length; i++) {\n        TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n        assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n        \n        searcher.search(new MatchAllDocsQuery(), tdc);\n        \n        ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n        assertEquals(3, sd.length);\n        for (int j = 0; j < sd.length; j++) {\n          assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"131a9e895609b4da33662dc087e0bc6303e1e29c","date":1255458397,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","sourceOld":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n\n    BooleanQuery.setAllowDocsOutOfOrder(true);\n\n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      \n      IndexSearcher searcher = new IndexSearcher(dir, true);\n      for (int i = 0; i < inOrder.length; i++) {\n        TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n        assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n        \n        searcher.search(new MatchAllDocsQuery(), tdc);\n        \n        ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n        assertEquals(3, sd.length);\n        for (int j = 0; j < sd.length; j++) {\n          assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","sourceOld":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","sourceOld":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","sourceOld":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","sourceOld":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, null, MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","pathOld":"src/test/org/apache/lucene/search/TestTopScoreDocCollector#testOutOfOrderCollection().mjava","sourceNew":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","sourceOld":"  public void testOutOfOrderCollection() throws Exception {\n\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(new Document());\n    }\n    writer.commit();\n    writer.close();\n    \n    boolean[] inOrder = new boolean[] { false, true };\n    String[] actualTSDCClass = new String[] {\n        \"OutOfOrderTopScoreDocCollector\", \n        \"InOrderTopScoreDocCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    for (int i = 0; i < inOrder.length; i++) {\n      TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(3, inOrder[i]);\n      assertEquals(\"org.apache.lucene.search.TopScoreDocCollector$\" + actualTSDCClass[i], tdc.getClass().getName());\n      \n      searcher.search(new MatchAllDocsQuery(), tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      assertEquals(3, sd.length);\n      for (int j = 0; j < sd.length; j++) {\n        assertEquals(\"expected doc Id \" + j + \" found \" + sd[j].doc, j, sd[j].doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["4edd590f2f8cf66c269ba4ff97900a1206e2523c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["4edd590f2f8cf66c269ba4ff97900a1206e2523c","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"131a9e895609b4da33662dc087e0bc6303e1e29c":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["131a9e895609b4da33662dc087e0bc6303e1e29c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4edd590f2f8cf66c269ba4ff97900a1206e2523c":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["4edd590f2f8cf66c269ba4ff97900a1206e2523c"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"0a046c0c310bc77931fc8441bd920053b607dd14":["131a9e895609b4da33662dc087e0bc6303e1e29c"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"131a9e895609b4da33662dc087e0bc6303e1e29c":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4edd590f2f8cf66c269ba4ff97900a1206e2523c":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}