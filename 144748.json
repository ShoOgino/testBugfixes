{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","commits":[{"id":"519ac3b8f2711b5bfeb1c90c77bb007032270a41","date":1384456090,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns topN labels for any dimension that had hits,\n   *  sorted by the number of hits that dimension matched. */\n  public List<SimpleFacetResult> getAllDims(int topN) throws IOException {\n\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      SimpleFacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<SimpleFacetResult>() {\n                       @Override\n                       public int compare(SimpleFacetResult a, SimpleFacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           // Tie break by dimension\n                           return a.path.components[0].compareTo(b.path.components[0]);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93bee32f95de853915b2f9402e76ed24ef97f43e","date":1384460894,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","sourceNew":"  @Override\n  public List<SimpleFacetResult> getAllDims(int topN) throws IOException {\n\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      SimpleFacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<SimpleFacetResult>() {\n                       @Override\n                       public int compare(SimpleFacetResult a, SimpleFacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           // Tie break by dimension\n                           return a.path.components[0].compareTo(b.path.components[0]);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":"  /** Returns topN labels for any dimension that had hits,\n   *  sorted by the number of hits that dimension matched. */\n  public List<SimpleFacetResult> getAllDims(int topN) throws IOException {\n\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      SimpleFacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<SimpleFacetResult>() {\n                       @Override\n                       public int compare(SimpleFacetResult a, SimpleFacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           // Tie break by dimension\n                           return a.path.components[0].compareTo(b.path.components[0]);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","sourceNew":"  @Override\n  public List<SimpleFacetResult> getAllDims(int topN) throws IOException {\n\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      SimpleFacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<SimpleFacetResult>() {\n                       @Override\n                       public int compare(SimpleFacetResult a, SimpleFacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           return 0;\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<SimpleFacetResult> getAllDims(int topN) throws IOException {\n\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      SimpleFacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<SimpleFacetResult>() {\n                       @Override\n                       public int compare(SimpleFacetResult a, SimpleFacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           // Tie break by dimension\n                           return a.path.components[0].compareTo(b.path.components[0]);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getAllDims(int).mjava","sourceNew":"  @Override\n  public List<FacetResult> getAllDims(int topN) throws IOException {\n\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      FacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<FacetResult>() {\n                       @Override\n                       public int compare(FacetResult a, FacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           return 0;\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<SimpleFacetResult> getAllDims(int topN) throws IOException {\n\n    List<SimpleFacetResult> results = new ArrayList<SimpleFacetResult>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      SimpleFacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<SimpleFacetResult>() {\n                       @Override\n                       public int compare(SimpleFacetResult a, SimpleFacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           return 0;\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["93bee32f95de853915b2f9402e76ed24ef97f43e"],"93bee32f95de853915b2f9402e76ed24ef97f43e":["519ac3b8f2711b5bfeb1c90c77bb007032270a41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519ac3b8f2711b5bfeb1c90c77bb007032270a41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["93bee32f95de853915b2f9402e76ed24ef97f43e"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["21d36d0db865f7b84026b447bec653469a6e66df"],"93bee32f95de853915b2f9402e76ed24ef97f43e":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}