{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDimensionalValues(CodecReader,PrintStream,boolean).mjava","commits":[{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDimensionalValues(CodecReader,PrintStream,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test the dimensional values index.\n   * @lucene.experimental\n   */\n  public static Status.DimensionalValuesStatus testDimensionalValues(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.DimensionalValuesStatus status = new Status.DimensionalValuesStatus();\n    try {\n      if (fieldInfos.hasDimensionalValues()) {\n        DimensionalReader values = reader.getDimensionalReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with dimensional values, but reader.getDimensionalRader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getDimensionCount();\n            int bytesPerDim = fieldInfo.getDimensionNumBytes();\n            byte[] lastMinPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMinPacked = new BytesRef(lastMinPackedValue);\n            byte[] lastMaxPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMaxPacked = new BytesRef(lastMaxPackedValue);\n            BytesRef scratch = new BytesRef();\n            lastMaxPacked.length = bytesPerDim;\n            lastMinPacked.length = bytesPerDim;\n            scratch.length = bytesPerDim;\n            values.intersect(fieldInfo.name,\n                             new DimensionalValues.IntersectVisitor() {\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 scratch.bytes = packedValue;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   lastMaxPacked.offset = bytesPerDim * dim;\n                                   lastMinPacked.offset = bytesPerDim * dim;\n                                   scratch.offset = bytesPerDim * dim;\n\n                                   if (scratch.compareTo(lastMinPacked) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (scratch.compareTo(lastMaxPacked) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public DimensionalValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, minPackedValue.length);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, maxPackedValue.length);\n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return DimensionalValues.Relation.QUERY_CROSSES_CELL;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != dimCount * bytesPerDim) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + (dimCount * bytesPerDim) + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDimensionalValues(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDimensionalValues(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the dimensional values index.\n   * @lucene.experimental\n   */\n  public static Status.DimensionalValuesStatus testDimensionalValues(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.DimensionalValuesStatus status = new Status.DimensionalValuesStatus();\n    try {\n      if (fieldInfos.hasDimensionalValues()) {\n        DimensionalReader values = reader.getDimensionalReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with dimensional values, but reader.getDimensionalRader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getDimensionCount();\n            int bytesPerDim = fieldInfo.getDimensionNumBytes();\n            byte[] lastMinPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMinPacked = new BytesRef(lastMinPackedValue);\n            byte[] lastMaxPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMaxPacked = new BytesRef(lastMaxPackedValue);\n            BytesRef scratch = new BytesRef();\n            lastMaxPacked.length = bytesPerDim;\n            lastMinPacked.length = bytesPerDim;\n            scratch.length = bytesPerDim;\n            values.intersect(fieldInfo.name,\n                             new DimensionalValues.IntersectVisitor() {\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 scratch.bytes = packedValue;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   lastMaxPacked.offset = bytesPerDim * dim;\n                                   lastMinPacked.offset = bytesPerDim * dim;\n                                   scratch.offset = bytesPerDim * dim;\n\n                                   if (scratch.compareTo(lastMinPacked) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (scratch.compareTo(lastMaxPacked) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public DimensionalValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, minPackedValue.length);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, maxPackedValue.length);\n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return DimensionalValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != dimCount * bytesPerDim) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + (dimCount * bytesPerDim) + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the dimensional values index.\n   * @lucene.experimental\n   */\n  public static Status.DimensionalValuesStatus testDimensionalValues(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.DimensionalValuesStatus status = new Status.DimensionalValuesStatus();\n    try {\n      if (fieldInfos.hasDimensionalValues()) {\n        DimensionalReader values = reader.getDimensionalReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with dimensional values, but reader.getDimensionalRader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getDimensionCount();\n            int bytesPerDim = fieldInfo.getDimensionNumBytes();\n            byte[] lastMinPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMinPacked = new BytesRef(lastMinPackedValue);\n            byte[] lastMaxPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMaxPacked = new BytesRef(lastMaxPackedValue);\n            BytesRef scratch = new BytesRef();\n            lastMaxPacked.length = bytesPerDim;\n            lastMinPacked.length = bytesPerDim;\n            scratch.length = bytesPerDim;\n            values.intersect(fieldInfo.name,\n                             new DimensionalValues.IntersectVisitor() {\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 scratch.bytes = packedValue;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   lastMaxPacked.offset = bytesPerDim * dim;\n                                   lastMinPacked.offset = bytesPerDim * dim;\n                                   scratch.offset = bytesPerDim * dim;\n\n                                   if (scratch.compareTo(lastMinPacked) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (scratch.compareTo(lastMaxPacked) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public DimensionalValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, minPackedValue.length);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, maxPackedValue.length);\n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return DimensionalValues.Relation.QUERY_CROSSES_CELL;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != dimCount * bytesPerDim) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + (dimCount * bytesPerDim) + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDimensionalValues(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            byte[] lastMinPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMinPacked = new BytesRef(lastMinPackedValue);\n            byte[] lastMaxPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMaxPacked = new BytesRef(lastMaxPackedValue);\n            BytesRef scratch = new BytesRef();\n            lastMaxPacked.length = bytesPerDim;\n            lastMinPacked.length = bytesPerDim;\n            scratch.length = bytesPerDim;\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 scratch.bytes = packedValue;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   lastMaxPacked.offset = bytesPerDim * dim;\n                                   lastMinPacked.offset = bytesPerDim * dim;\n                                   scratch.offset = bytesPerDim * dim;\n\n                                   if (scratch.compareTo(lastMinPacked) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (scratch.compareTo(lastMaxPacked) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, minPackedValue.length);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, maxPackedValue.length);\n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != dimCount * bytesPerDim) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + (dimCount * bytesPerDim) + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the dimensional values index.\n   * @lucene.experimental\n   */\n  public static Status.DimensionalValuesStatus testDimensionalValues(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.DimensionalValuesStatus status = new Status.DimensionalValuesStatus();\n    try {\n      if (fieldInfos.hasDimensionalValues()) {\n        DimensionalReader values = reader.getDimensionalReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with dimensional values, but reader.getDimensionalRader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getDimensionCount();\n            int bytesPerDim = fieldInfo.getDimensionNumBytes();\n            byte[] lastMinPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMinPacked = new BytesRef(lastMinPackedValue);\n            byte[] lastMaxPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMaxPacked = new BytesRef(lastMaxPackedValue);\n            BytesRef scratch = new BytesRef();\n            lastMaxPacked.length = bytesPerDim;\n            lastMinPacked.length = bytesPerDim;\n            scratch.length = bytesPerDim;\n            values.intersect(fieldInfo.name,\n                             new DimensionalValues.IntersectVisitor() {\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 scratch.bytes = packedValue;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   lastMaxPacked.offset = bytesPerDim * dim;\n                                   lastMinPacked.offset = bytesPerDim * dim;\n                                   scratch.offset = bytesPerDim * dim;\n\n                                   if (scratch.compareTo(lastMinPacked) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (scratch.compareTo(lastMaxPacked) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public DimensionalValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, minPackedValue.length);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, maxPackedValue.length);\n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return DimensionalValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != dimCount * bytesPerDim) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + (dimCount * bytesPerDim) + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}