{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    long bytesUsed = RamUsageEstimator.sizeOf(values);\n    instanceInfo.put(field.name, Accountables.namedAccountable(\"int array\", bytesUsed));\n    ramBytesUsed.addAndGet(bytesUsed);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize, input);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    long bytesUsed = RamUsageEstimator.sizeOf(values);\n    instanceInfo.put(field.name, Accountables.namedAccountable(\"int array\", bytesUsed));\n    ramBytesUsed.addAndGet(bytesUsed);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    long bytesUsed = RamUsageEstimator.sizeOf(values);\n    instanceInfo.put(field.name, Accountables.namedAccountable(\"int array\", bytesUsed));\n    ramBytesUsed.addAndGet(bytesUsed);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","bugFix":["4772ea9604873dc0b22ea724398008998afc8e41"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize, input);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    long bytesUsed = RamUsageEstimator.sizeOf(values);\n    if (!merging) {\n      instanceInfo.put(field.name, Accountables.namedAccountable(\"int array\", bytesUsed));\n      ramBytesUsed.addAndGet(bytesUsed);\n    }\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize, input);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    long bytesUsed = RamUsageEstimator.sizeOf(values);\n    instanceInfo.put(field.name, Accountables.namedAccountable(\"int array\", bytesUsed));\n    ramBytesUsed.addAndGet(bytesUsed);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","sourceNew":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize, input);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    long bytesUsed = RamUsageEstimator.sizeOf(values);\n    if (!merging) {\n      instanceInfo.put(field.name, Accountables.namedAccountable(\"int array\", bytesUsed));\n      ramBytesUsed.addAndGet(bytesUsed);\n    }\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize, input);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    long bytesUsed = RamUsageEstimator.sizeOf(values);\n    instanceInfo.put(field.name, Accountables.namedAccountable(\"int array\", bytesUsed));\n    ramBytesUsed.addAndGet(bytesUsed);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadIntField(FieldInfo,IndexInput).mjava","sourceNew":null,"sourceOld":"  private NumericDocValues loadIntField(FieldInfo field, IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, Lucene40DocValuesFormat.INTS_CODEC_NAME,\n                                 Lucene40DocValuesFormat.INTS_VERSION_START,\n                                 Lucene40DocValuesFormat.INTS_VERSION_CURRENT);\n    int valueSize = input.readInt();\n    if (valueSize != 4) {\n      throw new CorruptIndexException(\"invalid valueSize: \" + valueSize, input);\n    }\n    int maxDoc = state.segmentInfo.getDocCount();\n    final int values[] = new int[maxDoc];\n    for (int i = 0; i < values.length; i++) {\n      values[i] = input.readInt();\n    }\n    long bytesUsed = RamUsageEstimator.sizeOf(values);\n    if (!merging) {\n      instanceInfo.put(field.name, Accountables.namedAccountable(\"int array\", bytesUsed));\n      ramBytesUsed.addAndGet(bytesUsed);\n    }\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return values[docID];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"bc8f80fee115148a0e4a0574560be06b494de821":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"9bb9a29a5e71a90295f175df8919802993142c9a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}