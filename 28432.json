{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#initReader(AtomicReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#initReader(AtomicReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl#initReader(AtomicReader).mjava","sourceNew":"  private void initReader(AtomicReader reader) {\n    if (reader instanceof SegmentReader) {\n      ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n    } else {\n      // we have a slow reader of some sort, try to register a purge event\n      // rather than relying on gc:\n      Object key = reader.getCoreCacheKey();\n      if (key instanceof AtomicReader) {\n        ((AtomicReader)key).addReaderClosedListener(purgeReader); \n      } else {\n        // last chance\n        reader.addReaderClosedListener(purgeReader); \t\t\t\t\n      }\n    }\n  }\n\n","sourceOld":"  private void initReader(AtomicReader reader) {\n    if (reader instanceof SegmentReader) {\n      ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n    } else {\n      // we have a slow reader of some sort, try to register a purge event\n      // rather than relying on gc:\n      Object key = reader.getCoreCacheKey();\n      if (key instanceof AtomicReader) {\n        ((AtomicReader)key).addReaderClosedListener(purgeReader); \n      } else {\n        // last chance\n        reader.addReaderClosedListener(purgeReader); \t\t\t\t\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#initReader(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#initReader(AtomicReader).mjava","sourceNew":"  private void initReader(AtomicReader reader) {\n    if (reader instanceof SegmentReader) {\n      ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n    } else {\n      // we have a slow reader of some sort, try to register a purge event\n      // rather than relying on gc:\n      Object key = reader.getCoreCacheKey();\n      if (key instanceof AtomicReader) {\n        ((AtomicReader)key).addReaderClosedListener(purgeReader); \n      } else {\n        // last chance\n        reader.addReaderClosedListener(purgeReader);\n      }\n    }\n  }\n\n","sourceOld":"  private void initReader(AtomicReader reader) {\n    if (reader instanceof SegmentReader) {\n      ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n    } else {\n      // we have a slow reader of some sort, try to register a purge event\n      // rather than relying on gc:\n      Object key = reader.getCoreCacheKey();\n      if (key instanceof AtomicReader) {\n        ((AtomicReader)key).addReaderClosedListener(purgeReader); \n      } else {\n        // last chance\n        reader.addReaderClosedListener(purgeReader); \t\t\t\t\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#initReader(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#initReader(AtomicReader).mjava","sourceNew":"  private void initReader(AtomicReader reader) {\n    if (reader instanceof SegmentReader) {\n      ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n    } else {\n      // we have a slow reader of some sort, try to register a purge event\n      // rather than relying on gc:\n      Object key = reader.getCoreCacheKey();\n      if (key instanceof AtomicReader) {\n        ((AtomicReader)key).addReaderClosedListener(purgeReader); \n      } else {\n        // last chance\n        reader.addReaderClosedListener(purgeReader);\n      }\n    }\n  }\n\n","sourceOld":"  private void initReader(AtomicReader reader) {\n    if (reader instanceof SegmentReader) {\n      ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n    } else {\n      // we have a slow reader of some sort, try to register a purge event\n      // rather than relying on gc:\n      Object key = reader.getCoreCacheKey();\n      if (key instanceof AtomicReader) {\n        ((AtomicReader)key).addReaderClosedListener(purgeReader); \n      } else {\n        // last chance\n        reader.addReaderClosedListener(purgeReader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#initReader(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#initReader(AtomicReader).mjava","sourceNew":"  private void initReader(AtomicReader reader) {\n    if (reader instanceof SegmentReader) {\n      ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n    } else {\n      // we have a slow reader of some sort, try to register a purge event\n      // rather than relying on gc:\n      Object key = reader.getCoreCacheKey();\n      if (key instanceof AtomicReader) {\n        ((AtomicReader)key).addReaderClosedListener(purgeReader); \n      } else {\n        // last chance\n        reader.addReaderClosedListener(purgeReader);\n      }\n    }\n  }\n\n","sourceOld":"  private void initReader(AtomicReader reader) {\n    if (reader instanceof SegmentReader) {\n      ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n    } else {\n      // we have a slow reader of some sort, try to register a purge event\n      // rather than relying on gc:\n      Object key = reader.getCoreCacheKey();\n      if (key instanceof AtomicReader) {\n        ((AtomicReader)key).addReaderClosedListener(purgeReader); \n      } else {\n        // last chance\n        reader.addReaderClosedListener(purgeReader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#initReader(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#initReader(AtomicReader).mjava","sourceNew":"  private void initReader(AtomicReader reader) {\n    if (reader instanceof SegmentReader) {\n      ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n    } else {\n      // we have a slow reader of some sort, try to register a purge event\n      // rather than relying on gc:\n      Object key = reader.getCoreCacheKey();\n      if (key instanceof AtomicReader) {\n        ((AtomicReader)key).addReaderClosedListener(purgeReader); \n      } else {\n        // last chance\n        reader.addReaderClosedListener(purgeReader);\n      }\n    }\n  }\n\n","sourceOld":"  private void initReader(AtomicReader reader) {\n    if (reader instanceof SegmentReader) {\n      ((SegmentReader) reader).addCoreClosedListener(purgeCore);\n    } else {\n      // we have a slow reader of some sort, try to register a purge event\n      // rather than relying on gc:\n      Object key = reader.getCoreCacheKey();\n      if (key instanceof AtomicReader) {\n        ((AtomicReader)key).addReaderClosedListener(purgeReader); \n      } else {\n        // last chance\n        reader.addReaderClosedListener(purgeReader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"56572ec06f1407c066d6b7399413178b33176cd8":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}