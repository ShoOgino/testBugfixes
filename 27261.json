{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testWrongSortFieldType().mjava","commits":[{"id":"ea32f6d2e2c9c129b68b8e35c8276025343e1c48","date":1533140931,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testWrongSortFieldType().mjava","pathOld":"/dev/null","sourceNew":"  public void testWrongSortFieldType() throws Exception {\n    Directory dir = newDirectory();\n    List<Field> dvs = new ArrayList<>();\n    dvs.add(new SortedDocValuesField(\"field\", new BytesRef(\"\")));\n    dvs.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"\")));\n    dvs.add(new NumericDocValuesField(\"field\", 42));\n    dvs.add(new SortedNumericDocValuesField(\"field\", 42));\n\n    List<SortField> sortFields = new ArrayList<>();\n    sortFields.add(new SortField(\"field\", SortField.Type.STRING));\n    sortFields.add(new SortedSetSortField(\"field\", false));\n    sortFields.add(new SortField(\"field\", SortField.Type.INT));\n    sortFields.add(new SortedNumericSortField(\"field\", SortField.Type.INT));\n\n    for (int i = 0; i < sortFields.size(); i++) {\n      for (int j = 0; j < dvs.size(); j++) {\n        if (i == j) {\n          continue;\n        }\n        Sort indexSort = new Sort(sortFields.get(i));\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n        iwc.setIndexSort(indexSort);\n        IndexWriter w = new IndexWriter(dir, iwc);\n        Document doc = new Document();\n        doc.add(dvs.get(j));\n        IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> w.addDocument(doc));\n        assertThat(exc.getMessage(), containsString(\"invalid doc value type\"));\n        doc.clear();\n        doc.add(dvs.get(i));\n        w.addDocument(doc);\n        doc.add(dvs.get(j));\n        exc = expectThrows(IllegalArgumentException.class, () -> w.addDocument(doc));\n        assertThat(exc.getMessage(), containsString(\"cannot change DocValues type\"));\n        w.rollback();\n        IOUtils.close(w);\n      }\n    }\n    IOUtils.close(dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testWrongSortFieldType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testWrongSortFieldType().mjava","sourceNew":"  public void testWrongSortFieldType() throws Exception {\n    Directory dir = newDirectory();\n    List<Field> dvs = new ArrayList<>();\n    dvs.add(new SortedDocValuesField(\"field\", new BytesRef(\"\")));\n    dvs.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"\")));\n    dvs.add(new NumericDocValuesField(\"field\", 42));\n    dvs.add(new SortedNumericDocValuesField(\"field\", 42));\n\n    List<SortField> sortFields = new ArrayList<>();\n    sortFields.add(new SortField(\"field\", SortField.Type.STRING));\n    sortFields.add(new SortedSetSortField(\"field\", false));\n    sortFields.add(new SortField(\"field\", SortField.Type.INT));\n    sortFields.add(new SortedNumericSortField(\"field\", SortField.Type.INT));\n\n    for (int i = 0; i < sortFields.size(); i++) {\n      for (int j = 0; j < dvs.size(); j++) {\n        if (i == j) {\n          continue;\n        }\n        Sort indexSort = new Sort(sortFields.get(i));\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n        iwc.setIndexSort(indexSort);\n        IndexWriter w = new IndexWriter(dir, iwc);\n        Document doc = new Document();\n        doc.add(dvs.get(j));\n        IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> w.addDocument(doc));\n        assertThat(exc.getMessage(), containsString(\"expected field [field] to be \"));\n        doc.clear();\n        doc.add(dvs.get(i));\n        w.addDocument(doc);\n        doc.add(dvs.get(j));\n        exc = expectThrows(IllegalArgumentException.class, () -> w.addDocument(doc));\n        assertThat(exc.getMessage(), containsString(\"cannot change DocValues type\"));\n        w.rollback();\n        IOUtils.close(w);\n      }\n    }\n    IOUtils.close(dir);\n  }\n\n","sourceOld":"  public void testWrongSortFieldType() throws Exception {\n    Directory dir = newDirectory();\n    List<Field> dvs = new ArrayList<>();\n    dvs.add(new SortedDocValuesField(\"field\", new BytesRef(\"\")));\n    dvs.add(new SortedSetDocValuesField(\"field\", new BytesRef(\"\")));\n    dvs.add(new NumericDocValuesField(\"field\", 42));\n    dvs.add(new SortedNumericDocValuesField(\"field\", 42));\n\n    List<SortField> sortFields = new ArrayList<>();\n    sortFields.add(new SortField(\"field\", SortField.Type.STRING));\n    sortFields.add(new SortedSetSortField(\"field\", false));\n    sortFields.add(new SortField(\"field\", SortField.Type.INT));\n    sortFields.add(new SortedNumericSortField(\"field\", SortField.Type.INT));\n\n    for (int i = 0; i < sortFields.size(); i++) {\n      for (int j = 0; j < dvs.size(); j++) {\n        if (i == j) {\n          continue;\n        }\n        Sort indexSort = new Sort(sortFields.get(i));\n        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n        iwc.setIndexSort(indexSort);\n        IndexWriter w = new IndexWriter(dir, iwc);\n        Document doc = new Document();\n        doc.add(dvs.get(j));\n        IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> w.addDocument(doc));\n        assertThat(exc.getMessage(), containsString(\"invalid doc value type\"));\n        doc.clear();\n        doc.add(dvs.get(i));\n        w.addDocument(doc);\n        doc.add(dvs.get(j));\n        exc = expectThrows(IllegalArgumentException.class, () -> w.addDocument(doc));\n        assertThat(exc.getMessage(), containsString(\"cannot change DocValues type\"));\n        w.rollback();\n        IOUtils.close(w);\n      }\n    }\n    IOUtils.close(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"773bf150032d3ef6c95997a154fb914b82875cb8":["ea32f6d2e2c9c129b68b8e35c8276025343e1c48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea32f6d2e2c9c129b68b8e35c8276025343e1c48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"]},"commit2Childs":{"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea32f6d2e2c9c129b68b8e35c8276025343e1c48"],"ea32f6d2e2c9c129b68b8e35c8276025343e1c48":["773bf150032d3ef6c95997a154fb914b82875cb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}