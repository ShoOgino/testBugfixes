{"path":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testDoubleCollapse(String,String).mjava","commits":[{"id":"ece7e3f03c890461bce71fb45142b75807c28a4e","date":1583713564,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testDoubleCollapse(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /*\n  * SOLR-14073\n  * The double collapse causes a look ahead in the second collapse to a segment that was not visited by\n  * the by finally method of the first collapse. This specific test is meant to confirm that any feature\n  * that causes searches to not visit each segment (such as early query termination) doesn't break collapse.\n  */\n  private void testDoubleCollapse(String group, String hint) {\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"5\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc));\n    assertU(commit());\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"50\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc1));\n\n\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_i\", \"5000\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_i\", \"500\", \"test_l\", \"1000\", \"test_f\", \"2000\"};\n    assertU(adoc(doc3));\n\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYN\", group, \"2\", \"test_i\", \"4\", \"test_l\", \"10\", \"test_f\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_i\", \"10\", \"test_l\", \"100\", \"test_f\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_i\", \"8\", \"test_l\", \"50\", \"test_f\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"id:(1 2 5)\");\n    params.add(\"fq\", \"{!collapse cost=200 field=term_s \"+hint+\"}\");\n    params.add(\"fq\", \"{!collapse cost=400 field=\"+group+\"\"+hint+\"}\");\n\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"id:(1 2 5)\");\n    params.add(\"fq\", \"{!collapse cost=200 max=test_i field=term_s \"+hint+\"}\");\n    params.add(\"fq\", \"{!collapse cost=400 max=test_i field=\"+group+\"\"+hint+\"}\");\n\n    params.add(\"defType\", \"edismax\");\n    params.add(\"bf\", \"field(test_i)\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=1]\",\n        \"//result/doc[1]/str[@name='id'][.='2']\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ece7e3f03c890461bce71fb45142b75807c28a4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ece7e3f03c890461bce71fb45142b75807c28a4e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ece7e3f03c890461bce71fb45142b75807c28a4e"],"ece7e3f03c890461bce71fb45142b75807c28a4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}