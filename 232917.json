{"path":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, false, boost);\n    }\n\n","sourceOld":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, false, boost);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n\n","sourceOld":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, false, boost);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5edcfe497b66506424af5121776771c8ed2dfdd","date":1512719400,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n\n","sourceOld":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/HashQParserPlugin.HashQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n    }\n\n","sourceOld":"    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      String[] keys = keysParam.split(\",\");\n      SolrIndexSearcher solrIndexSearcher = (SolrIndexSearcher)searcher;\n      IndexReaderContext context = solrIndexSearcher.getTopReaderContext();\n\n      List<LeafReaderContext> leaves =  context.leaves();\n      FixedBitSet[] fixedBitSets = new FixedBitSet[leaves.size()];\n\n      for(LeafReaderContext leaf : leaves) {\n        try {\n          SegmentPartitioner segmentPartitioner = new SegmentPartitioner(leaf,worker,workers, keys, solrIndexSearcher);\n          segmentPartitioner.run();\n          fixedBitSets[segmentPartitioner.context.ord] = segmentPartitioner.docs;\n        } catch(Exception e) {\n          throw new IOException(e);\n        }\n      }\n\n      ConstantScoreQuery constantScoreQuery = new ConstantScoreQuery(new BitsFilter(fixedBitSets));\n      return searcher.rewrite(constantScoreQuery).createWeight(searcher, false, boost);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5edcfe497b66506424af5121776771c8ed2dfdd":["9fc47cb7b4346802411bb432f501ed0673d7119e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","a5edcfe497b66506424af5121776771c8ed2dfdd"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"a5edcfe497b66506424af5121776771c8ed2dfdd":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a5edcfe497b66506424af5121776771c8ed2dfdd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}