{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","commits":[{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  private SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = schema.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n    // register self\n    core.getInfoRegistry().put(this.name, this);\n  }\n\n","sourceOld":"  private SolrIndexSearcher(IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= filterCacheConfig==null ? null : filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = queryResultCacheConfig==null ? null : queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = documentCacheConfig==null ? null : documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n\n    // register self\n    SolrInfoRegistry.getRegistry().put(this.name, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b","date":1217355237,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  private SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = schema.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n  }\n\n","sourceOld":"  private SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = schema.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n    // register self\n    core.getInfoRegistry().put(this.name, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bf92a1372bedffa4074073bb4f63b9975371311","date":1219854446,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = schema.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n  }\n\n","sourceOld":"  private SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = schema.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29765e35c99654ed87e394d8bc13d8ab07b51092","date":1223889162,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = schema.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = schema.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"72cd269b00ce636078acda21f4b6f920b75dba13","date":1225131045,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = schema.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa89a35683d73665c61d7af1d16f41649c25e5a7","date":1228684315,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a11ec658894eed204e77ed47f9ff29c3356d8099","date":1230590887,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfa71be65cf17963fa727d8e5f35bb35b110aa16","date":1234319413,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n    log.info(\"Opening \" + this.name);\n\n    // wrap the reader\n    if (!(r instanceof SolrIndexReader)) {\n      reader = new SolrIndexReader(r, null, 0);\n      reader.associateInfo(null);\n    } else {\n      reader = (SolrIndexReader)r;\n    }\n    SolrIndexReader.setSearcher(reader, this);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    searcher = new IndexSearcher(reader);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n\n    log.info(\"Opening \" + this.name);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    reader = r;\n    searcher = new IndexSearcher(r);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","bugFix":["6d6338c87060be5f66757a94945975f3bbd377a9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ceb8ef10f044820fbd058f02d5a8e26539d255c","date":1242149378,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    super(r);\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n    log.info(\"Opening \" + this.name);\n\n    // wrap the reader\n    if (!(r instanceof SolrIndexReader)) {\n      reader = new SolrIndexReader(r, null, 0);\n      reader.associateInfo(null);\n    } else {\n      reader = (SolrIndexReader)r;\n    }\n    SolrIndexReader.setSearcher(reader, this);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    this.closeReader = closeReader;\n    setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n    log.info(\"Opening \" + this.name);\n\n    // wrap the reader\n    if (!(r instanceof SolrIndexReader)) {\n      reader = new SolrIndexReader(r, null, 0);\n      reader.associateInfo(null);\n    } else {\n      reader = (SolrIndexReader)r;\n    }\n    SolrIndexReader.setSearcher(reader, this);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    searcher = new IndexSearcher(reader);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30391436869a41b74d4ba7098c40d955b686a10c","date":1242835871,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    super(r);\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n    log.info(\"Opening \" + this.name);\n\n    // wrap the reader\n    if (!(r instanceof SolrIndexReader)) {\n      reader = new SolrIndexReader(r, null, 0);\n      reader.associateInfo(null);\n    } else {\n      reader = (SolrIndexReader)r;\n    }\n    SolrIndexReader.setSearcher(reader, this);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    this.closeReader = closeReader;\n    setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    super(r);\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n    log.info(\"Opening \" + this.name);\n\n    // wrap the reader\n    if (!(r instanceof SolrIndexReader)) {\n      reader = new SolrIndexReader(r, null, 0);\n      reader.associateInfo(null);\n    } else {\n      reader = (SolrIndexReader)r;\n    }\n    SolrIndexReader.setSearcher(reader, this);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    this.closeReader = closeReader;\n    setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    // for DocSets\n    HASHSET_INVERSE_LOAD_FACTOR = solrConfig.hashSetInverseLoadFactor;\n    HASHDOCSET_MAXSIZE = solrConfig.hashDocSetMaxSize;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"029ffe7502a7a8ff1f425020bc204311ade99687","date":1243301392,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n    log.info(\"Opening \" + this.name);\n\n    // wrap the reader\n    if (!(r instanceof SolrIndexReader)) {\n      reader = new SolrIndexReader(r, null, 0);\n      reader.associateInfo(null);\n    } else {\n      reader = (SolrIndexReader)r;\n    }\n    SolrIndexReader.setSearcher(reader, this);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    searcher = new IndexSearcher(reader);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    super(r);\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n    log.info(\"Opening \" + this.name);\n\n    // wrap the reader\n    if (!(r instanceof SolrIndexReader)) {\n      reader = new SolrIndexReader(r, null, 0);\n      reader.associateInfo(null);\n    } else {\n      reader = (SolrIndexReader)r;\n    }\n    SolrIndexReader.setSearcher(reader, this);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    this.closeReader = closeReader;\n    setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac3e6437547a34cce2b5405ce0cf9e3af578401e","date":1243373693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    super(wrap(r));\n    this.reader = (SolrIndexReader)super.getIndexReader();\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n    log.info(\"Opening \" + this.name);\n\n    SolrIndexReader.setSearcher(reader, this);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    this.closeReader = closeReader;\n    setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n    log.info(\"Opening \" + this.name);\n\n    // wrap the reader\n    if (!(r instanceof SolrIndexReader)) {\n      reader = new SolrIndexReader(r, null, 0);\n      reader.associateInfo(null);\n    } else {\n      reader = (SolrIndexReader)r;\n    }\n    SolrIndexReader.setSearcher(reader, this);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    searcher = new IndexSearcher(reader);\n    this.closeReader = closeReader;\n    searcher.setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean).mjava","sourceNew":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    super(wrap(r));\n    this.reader = (SolrIndexReader)super.getIndexReader();\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n    log.info(\"Opening \" + this.name);\n\n    SolrIndexReader.setSearcher(reader, this);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    this.closeReader = closeReader;\n    setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","sourceOld":"  public SolrIndexSearcher(SolrCore core, IndexSchema schema, String name, IndexReader r, boolean closeReader, boolean enableCache) {\n    super(wrap(r));\n    this.reader = (SolrIndexReader)super.getIndexReader();\n    this.core = core;\n    this.schema = schema;\n    this.name = \"Searcher@\" + Integer.toHexString(hashCode()) + (name!=null ? \" \"+name : \"\");\n    log.info(\"Opening \" + this.name);\n\n    SolrIndexReader.setSearcher(reader, this);\n\n    if (r.directory() instanceof FSDirectory) {\n      FSDirectory fsDirectory = (FSDirectory) r.directory();\n      indexDir = fsDirectory.getFile().getAbsolutePath();\n    }\n\n    this.closeReader = closeReader;\n    setSimilarity(schema.getSimilarity());\n\n    SolrConfig solrConfig = core.getSolrConfig();\n    queryResultWindowSize = solrConfig.queryResultWindowSize;\n    queryResultMaxDocsCached = solrConfig.queryResultMaxDocsCached;\n    useFilterForSortedQuery = solrConfig.useFilterForSortedQuery;\n    enableLazyFieldLoading = solrConfig.enableLazyFieldLoading;\n    \n    cachingEnabled=enableCache;\n    if (cachingEnabled) {\n      ArrayList<SolrCache> clist = new ArrayList<SolrCache>();\n      fieldValueCache = solrConfig.fieldValueCacheConfig==null ? null : solrConfig.fieldValueCacheConfig.newInstance();\n      if (fieldValueCache!=null) clist.add(fieldValueCache);\n      filterCache= solrConfig.filterCacheConfig==null ? null : solrConfig.filterCacheConfig.newInstance();\n      if (filterCache!=null) clist.add(filterCache);\n      queryResultCache = solrConfig.queryResultCacheConfig==null ? null : solrConfig.queryResultCacheConfig.newInstance();\n      if (queryResultCache!=null) clist.add(queryResultCache);\n      documentCache = solrConfig.documentCacheConfig==null ? null : solrConfig.documentCacheConfig.newInstance();\n      if (documentCache!=null) clist.add(documentCache);\n\n      if (solrConfig.userCacheConfigs == null) {\n        cacheMap = noGenericCaches;\n      } else {\n        cacheMap = new HashMap<String,SolrCache>(solrConfig.userCacheConfigs.length);\n        for (CacheConfig userCacheConfig : solrConfig.userCacheConfigs) {\n          SolrCache cache = null;\n          if (userCacheConfig != null) cache = userCacheConfig.newInstance();\n          if (cache != null) {\n            cacheMap.put(cache.name(), cache);\n            clist.add(cache);\n          }\n        }\n      }\n\n      cacheList = clist.toArray(new SolrCache[clist.size()]);\n    } else {\n      filterCache=null;\n      queryResultCache=null;\n      documentCache=null;\n      fieldValueCache=null;\n      cacheMap = noGenericCaches;\n      cacheList= noCaches;\n    }\n    optimizer = solrConfig.filtOptEnabled ? new LuceneQueryOptimizer(solrConfig.filtOptCacheSize,solrConfig.filtOptThreshold) : null;\n\n    fieldNames = r.getFieldNames(IndexReader.FieldOption.ALL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["029ffe7502a7a8ff1f425020bc204311ade99687"],"fa89a35683d73665c61d7af1d16f41649c25e5a7":["72cd269b00ce636078acda21f4b6f920b75dba13"],"6d6338c87060be5f66757a94945975f3bbd377a9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"029ffe7502a7a8ff1f425020bc204311ade99687":["30391436869a41b74d4ba7098c40d955b686a10c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"30391436869a41b74d4ba7098c40d955b686a10c":["7ceb8ef10f044820fbd058f02d5a8e26539d255c"],"6bf92a1372bedffa4074073bb4f63b9975371311":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"7ceb8ef10f044820fbd058f02d5a8e26539d255c":["bfa71be65cf17963fa727d8e5f35bb35b110aa16"],"72cd269b00ce636078acda21f4b6f920b75dba13":["29765e35c99654ed87e394d8bc13d8ab07b51092"],"a11ec658894eed204e77ed47f9ff29c3356d8099":["fa89a35683d73665c61d7af1d16f41649c25e5a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bfa71be65cf17963fa727d8e5f35bb35b110aa16":["a11ec658894eed204e77ed47f9ff29c3356d8099"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["6d6338c87060be5f66757a94945975f3bbd377a9"],"ad94625fb8d088209f46650c8097196fec67f00c":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"29765e35c99654ed87e394d8bc13d8ab07b51092":["6bf92a1372bedffa4074073bb4f63b9975371311"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["ad94625fb8d088209f46650c8097196fec67f00c"],"fa89a35683d73665c61d7af1d16f41649c25e5a7":["a11ec658894eed204e77ed47f9ff29c3356d8099"],"6d6338c87060be5f66757a94945975f3bbd377a9":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"029ffe7502a7a8ff1f425020bc204311ade99687":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6d6338c87060be5f66757a94945975f3bbd377a9"],"30391436869a41b74d4ba7098c40d955b686a10c":["029ffe7502a7a8ff1f425020bc204311ade99687"],"6bf92a1372bedffa4074073bb4f63b9975371311":["29765e35c99654ed87e394d8bc13d8ab07b51092"],"7ceb8ef10f044820fbd058f02d5a8e26539d255c":["30391436869a41b74d4ba7098c40d955b686a10c"],"72cd269b00ce636078acda21f4b6f920b75dba13":["fa89a35683d73665c61d7af1d16f41649c25e5a7"],"a11ec658894eed204e77ed47f9ff29c3356d8099":["bfa71be65cf17963fa727d8e5f35bb35b110aa16"],"bfa71be65cf17963fa727d8e5f35bb35b110aa16":["7ceb8ef10f044820fbd058f02d5a8e26539d255c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["6bf92a1372bedffa4074073bb4f63b9975371311"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"29765e35c99654ed87e394d8bc13d8ab07b51092":["72cd269b00ce636078acda21f4b6f920b75dba13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}