{"path":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n        TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n        TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num*_TestUtil.getRandomMultiplier(); i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n        TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n        TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num*_TestUtil.getRandomMultiplier(); i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num*_TestUtil.getRandomMultiplier(); i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n        TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    num *= RANDOM_MULTIPLIER;\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num*_TestUtil.getRandomMultiplier(); i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    num *= RANDOM_MULTIPLIER;\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    for (int i = 1; i < num*_TestUtil.getRandomMultiplier(); i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    // create random input\n    int num = 1024 + random.nextInt(1024);\n    num *= RANDOM_MULTIPLIER;\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    num *= RANDOM_MULTIPLIER;\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    // create random input\n    int num = 1024 + random.nextInt(1024);\n    num *= RANDOM_MULTIPLIER;\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    Random newRandom = newRandom();\n    // create random input\n    int num = 1024 + newRandom.nextInt(1024);\n    num *= RANDOM_MULTIPLIER;\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d6179f9c4237a7e5d423f4e4b439a94e967efc9","date":1304382587,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    // create random input\n    int num = 1024 + random.nextInt(1024);\n    num *= RANDOM_MULTIPLIER;\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    // create random input\n    int num = 1024 + random.nextInt(1024);\n    num *= RANDOM_MULTIPLIER;\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testReadSupplementaryChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    // create random input\n    int num = 1024 + random.nextInt(1024);\n    num *= RANDOM_MULTIPLIER;\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    // create random input\n    int num = 1024 + random.nextInt(1024);\n    num *= RANDOM_MULTIPLIER;\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testReadSupplementaryChars().mjava","sourceNew":null,"sourceOld":"  /*\n   * test to read surrogate pairs without loosing the pairing \n   * if the surrogate pair is at the border of the internal IO buffer\n   */\n  public void testReadSupplementaryChars() throws IOException {\n    StringBuilder builder = new StringBuilder();\n    // create random input\n    int num = 1024 + random.nextInt(1024);\n    num *= RANDOM_MULTIPLIER;\n    for (int i = 1; i < num; i++) {\n      builder.append(\"\\ud801\\udc1cabc\");\n      if((i % 10) == 0)\n        builder.append(\" \");\n    }\n    // internal buffer size is 1024 make sure we have a surrogate pair right at the border\n    builder.insert(1023, \"\\ud801\\udc1c\");\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n    assertTokenStreamContents(tokenizer, builder.toString().toLowerCase().split(\" \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["1f653cfcf159baeaafe5d01682a911e95bba4012","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"2aafd88401639311b0404e67c94e829e123a0e45":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["2aafd88401639311b0404e67c94e829e123a0e45"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"2aafd88401639311b0404e67c94e829e123a0e45":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","3242a09f703274d3b9283f2064a1a33064b53a1b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2aafd88401639311b0404e67c94e829e123a0e45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}