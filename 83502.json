{"path":"lucene/facet/src/java/org/apache/lucene/facet/sampling/RepeatableSampler#findNextPrimeAfter(int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/RepeatableSampler#findNextPrimeAfter(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#findNextPrimeAfter(int).mjava","sourceNew":"  /**\n   * Returns the first prime number that is larger than <code>n</code>.\n   * @param n A number less than the prime to be returned.\n   * @return The smallest prime larger than <code>n</code>.\n   */\n  private static int findNextPrimeAfter(int n) {\n    n += (n % 2 == 0) ? 1 : 2; // next odd\n    foundFactor: for (;; n += 2) { //TODO labels??!!\n      int sri = (int) (Math.sqrt(n));\n      for (int primeIndex = 0; primeIndex < N_PRIMES; primeIndex++) {\n        int p = primes[primeIndex];\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n      for (int p = primes[N_PRIMES - 1] + 2;; p += 2) {\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the first prime number that is larger than <code>n</code>.\n   * @param n A number less than the prime to be returned.\n   * @return The smallest prime larger than <code>n</code>.\n   */\n  private static int findNextPrimeAfter(int n) {\n    n += (n % 2 == 0) ? 1 : 2; // next odd\n    foundFactor: for (;; n += 2) { //TODO labels??!!\n      int sri = (int) (Math.sqrt(n));\n      for (int primeIndex = 0; primeIndex < N_PRIMES; primeIndex++) {\n        int p = primes[primeIndex];\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n      for (int p = primes[N_PRIMES - 1] + 2;; p += 2) {\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/RepeatableSampler#findNextPrimeAfter(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the first prime number that is larger than <code>n</code>.\n   * @param n A number less than the prime to be returned.\n   * @return The smallest prime larger than <code>n</code>.\n   */\n  private static int findNextPrimeAfter(int n) {\n    n += (n % 2 == 0) ? 1 : 2; // next odd\n    foundFactor: for (;; n += 2) { //TODO labels??!!\n      int sri = (int) (Math.sqrt(n));\n      for (int primeIndex = 0; primeIndex < N_PRIMES; primeIndex++) {\n        int p = primes[primeIndex];\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n      for (int p = primes[N_PRIMES - 1] + 2;; p += 2) {\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/RepeatableSampler#findNextPrimeAfter(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the first prime number that is larger than <code>n</code>.\n   * @param n A number less than the prime to be returned.\n   * @return The smallest prime larger than <code>n</code>.\n   */\n  private static int findNextPrimeAfter(int n) {\n    n += (n % 2 == 0) ? 1 : 2; // next odd\n    foundFactor: for (;; n += 2) { //TODO labels??!!\n      int sri = (int) (Math.sqrt(n));\n      for (int primeIndex = 0; primeIndex < N_PRIMES; primeIndex++) {\n        int p = primes[primeIndex];\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n      for (int p = primes[N_PRIMES - 1] + 2;; p += 2) {\n        if (p > sri) {\n          return n;\n        }\n        if (n % p == 0) {\n          continue foundFactor;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}