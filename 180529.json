{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","commits":[{"id":"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336","date":1457978905,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","pathOld":"/dev/null","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.61748421408186D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1056.1630445911035D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d210c7f333402b4828c1d10dfd5457c9fe312c7d","date":1457987131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.61748421408186D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1056.1630445911035D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.61748421408186D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1056.1630445911035D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.6174876948475D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1056.163041670945D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.61748421408186D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1056.1630445911035D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bd00e9af390947b2751706503ba0d2f0b28da6d","date":1459503650,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1004647449412D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9826700985088, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.6174876948475D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1056.163041670945D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8da4c29a4aed72a95d20b328cb2140a85621cdd","date":1459513936,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1028401330432D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9842850974826, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1004647449412D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9826700985088, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daf6e9d7d2b09412f97abae089a44cc03f5d5a14","date":1460042872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1028401330431D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9842850974826, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1028401330432D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9842850974826, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1028401330431D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9842850974826, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1028401330432D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9842850974826, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc75470f235495b4ac71f43bba9b503023f7f2d0","date":1461532530,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonDocValuesField(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonDocValuesField(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonDocValuesField.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1028401330431D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9842850974826, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1028401330431D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9842850974826, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonDocValuesField(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonDocValuesField(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonDocValuesField.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1028401330431D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9842850974826, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1028401330431D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9842850974826, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingLast().mjava","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonDocValuesField(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonDocValuesField(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonDocValuesField.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1028401330431D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9842850974826, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingLast() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonDocValuesField(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonDocValuesField(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Sort sort = new Sort(LatLonDocValuesField.newDistanceSort(\"location\", 40.7143528, -74.0059731));\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n    \n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(462.1028401330431D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(1054.9842850974826, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(Double.POSITIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["09f15823cf5eb6e807005579e875e117d8598f95","cc75470f235495b4ac71f43bba9b503023f7f2d0"],"d8da4c29a4aed72a95d20b328cb2140a85621cdd":["9bd00e9af390947b2751706503ba0d2f0b28da6d"],"9bd00e9af390947b2751706503ba0d2f0b28da6d":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"daf6e9d7d2b09412f97abae089a44cc03f5d5a14":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"cc75470f235495b4ac71f43bba9b503023f7f2d0":["09f15823cf5eb6e807005579e875e117d8598f95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"09f15823cf5eb6e807005579e875e117d8598f95":["d8da4c29a4aed72a95d20b328cb2140a85621cdd","daf6e9d7d2b09412f97abae089a44cc03f5d5a14"]},"commit2Childs":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["9bd00e9af390947b2751706503ba0d2f0b28da6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"d8da4c29a4aed72a95d20b328cb2140a85621cdd":["daf6e9d7d2b09412f97abae089a44cc03f5d5a14","09f15823cf5eb6e807005579e875e117d8598f95"],"cc75470f235495b4ac71f43bba9b503023f7f2d0":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"9bd00e9af390947b2751706503ba0d2f0b28da6d":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"daf6e9d7d2b09412f97abae089a44cc03f5d5a14":["09f15823cf5eb6e807005579e875e117d8598f95"],"09f15823cf5eb6e807005579e875e117d8598f95":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","cc75470f235495b4ac71f43bba9b503023f7f2d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}