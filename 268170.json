{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","sourceNew":"    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search (slice.leaves, weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search (slice.leaves, weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","sourceNew":"    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search(slice.leaves, weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search (slice.leaves, weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","sourceNew":"    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search(slice.leaves, weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search (slice.leaves, weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","sourceNew":"    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search(Arrays.asList(slice.leaves), weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search(slice.leaves, weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","sourceNew":"    @Override\n    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search(Arrays.asList(slice.leaves), weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search(Arrays.asList(slice.leaves), weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","sourceNew":"    @Override\n    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search(Arrays.asList(slice.leaves), weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search(Arrays.asList(slice.leaves), weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"023aa7229ae194442d2c4f36a9aaea1588760416","date":1421349700,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","sourceNew":"    @Override\n    public TopDocs call() throws IOException {\n      return searcher.search(Arrays.asList(slice.leaves), weight, after, nDocs);\n    }\n\n","sourceOld":"    @Override\n    public TopDocs call() throws IOException {\n      final TopDocs docs = searcher.search(Arrays.asList(slice.leaves), weight, after, nDocs);\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      //it would be so nice if we had a thread-safe insert \n      lock.lock();\n      try {\n        for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n          final ScoreDoc scoreDoc = scoreDocs[j];\n          if (scoreDoc == hq.insertWithOverflow(scoreDoc)) {\n            break;\n          }\n        }\n      } finally {\n        lock.unlock();\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableNoSort#call().mjava","sourceNew":null,"sourceOld":"    @Override\n    public TopDocs call() throws IOException {\n      return searcher.search(Arrays.asList(slice.leaves), weight, after, nDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","7530de27b87b961b51f01bd1299b7004d46e8823"],"fb17639909a369c1e64866842e5c213440acc17e":["023aa7229ae194442d2c4f36a9aaea1588760416"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"023aa7229ae194442d2c4f36a9aaea1588760416":["7530de27b87b961b51f01bd1299b7004d46e8823"],"ef0d8a69209261514c5739c770bba706c2308450":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ef0d8a69209261514c5739c770bba706c2308450"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","023aa7229ae194442d2c4f36a9aaea1588760416"],"023aa7229ae194442d2c4f36a9aaea1588760416":["fb17639909a369c1e64866842e5c213440acc17e"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}