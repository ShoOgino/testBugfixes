{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    // TODO: eable this assert once SolrIndexReader and friends are refactored to use ReaderContext\n    // We can't assert this here since SolrIndexReader will fail in some contexts - once solr is consistent we should be fine here\n    // Lucene instead passes all tests even with this assert!\n    // assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    if (context.isAtomic) {\n      assert context.leaves() == null : \"AtomicReaderContext must not have any leaves\";\n      this.leafContexts = new AtomicReaderContext[] { (AtomicReaderContext) context };\n    } else {\n      assert context.leaves() != null : \"non-atomic top-level context must have leaves\";\n      this.leafContexts = context.leaves();\n    }\n    subSearchers = new IndexSearcher[this.leafContexts.length];\n    for (int i = 0; i < subSearchers.length; i++) { // TODO do we need those IS if executor is null?\n      if (leafContexts[i].reader == context.reader) {\n        subSearchers[i] = this;\n      } else {\n        subSearchers[i] = new IndexSearcher(leafContexts[i].reader.getTopReaderContext()); // we need to get a TL context for sub searchers!\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0d20d680193af4e92047ec6367629f62fb81df8","date":1294275780,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","sourceNew":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    if (context.isAtomic) {\n      assert context.leaves() == null : \"AtomicReaderContext must not have any leaves\";\n      this.leafContexts = new AtomicReaderContext[] { (AtomicReaderContext) context };\n    } else {\n      assert context.leaves() != null : \"non-atomic top-level context must have leaves\";\n      this.leafContexts = context.leaves();\n    }\n    subSearchers = new IndexSearcher[this.leafContexts.length];\n    for (int i = 0; i < subSearchers.length; i++) { // TODO do we need those IS if executor is null?\n      if (leafContexts[i].reader == context.reader) {\n        subSearchers[i] = this;\n      } else {\n        subSearchers[i] = new IndexSearcher(leafContexts[i].reader.getTopReaderContext()); // we need to get a TL context for sub searchers!\n      }\n    }\n  }\n\n","sourceOld":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    // TODO: eable this assert once SolrIndexReader and friends are refactored to use ReaderContext\n    // We can't assert this here since SolrIndexReader will fail in some contexts - once solr is consistent we should be fine here\n    // Lucene instead passes all tests even with this assert!\n    // assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    if (context.isAtomic) {\n      assert context.leaves() == null : \"AtomicReaderContext must not have any leaves\";\n      this.leafContexts = new AtomicReaderContext[] { (AtomicReaderContext) context };\n    } else {\n      assert context.leaves() != null : \"non-atomic top-level context must have leaves\";\n      this.leafContexts = context.leaves();\n    }\n    subSearchers = new IndexSearcher[this.leafContexts.length];\n    for (int i = 0; i < subSearchers.length; i++) { // TODO do we need those IS if executor is null?\n      if (leafContexts[i].reader == context.reader) {\n        subSearchers[i] = this;\n      } else {\n        subSearchers[i] = new IndexSearcher(leafContexts[i].reader.getTopReaderContext()); // we need to get a TL context for sub searchers!\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0f02e67aa887b55e40181159521133bb3254283","date":1294348818,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","sourceNew":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    if (context.isAtomic) {\n      assert context.leaves() == null : \"AtomicReaderContext must not have any leaves\";\n      this.leafContexts = new AtomicReaderContext[] { (AtomicReaderContext) context };\n    } else {\n      assert context.leaves() != null : \"non-atomic top-level context must have leaves\";\n      this.leafContexts = context.leaves();\n    }\n\n    if (executor == null) {\n      subSearchers = null;\n    } else {\n      subSearchers = new IndexSearcher[this.leafContexts.length];\n      for (int i = 0; i < subSearchers.length; i++) {\n        if (leafContexts[i].reader == context.reader) {\n          subSearchers[i] = this;\n        } else {\n          subSearchers[i] = new IndexSearcher(leafContexts[i].reader.getTopReaderContext()); // we need to get a TL context for sub searchers!\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    if (context.isAtomic) {\n      assert context.leaves() == null : \"AtomicReaderContext must not have any leaves\";\n      this.leafContexts = new AtomicReaderContext[] { (AtomicReaderContext) context };\n    } else {\n      assert context.leaves() != null : \"non-atomic top-level context must have leaves\";\n      this.leafContexts = context.leaves();\n    }\n    subSearchers = new IndexSearcher[this.leafContexts.length];\n    for (int i = 0; i < subSearchers.length; i++) { // TODO do we need those IS if executor is null?\n      if (leafContexts[i].reader == context.reader) {\n        subSearchers[i] = this;\n      } else {\n        subSearchers[i] = new IndexSearcher(leafContexts[i].reader.getTopReaderContext()); // we need to get a TL context for sub searchers!\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","sourceNew":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    \n    if (executor == null) {\n      subSearchers = null;\n    } else {\n      subSearchers = new IndexSearcher[this.leafContexts.length];\n      for (int i = 0; i < subSearchers.length; i++) {\n        if (leafContexts[i].reader == context.reader) {\n          subSearchers[i] = this;\n        } else {\n          subSearchers[i] = new IndexSearcher(context, leafContexts[i]);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    if (context.isAtomic) {\n      assert context.leaves() == null : \"AtomicReaderContext must not have any leaves\";\n      this.leafContexts = new AtomicReaderContext[] { (AtomicReaderContext) context };\n    } else {\n      assert context.leaves() != null : \"non-atomic top-level context must have leaves\";\n      this.leafContexts = context.leaves();\n    }\n\n    if (executor == null) {\n      subSearchers = null;\n    } else {\n      subSearchers = new IndexSearcher[this.leafContexts.length];\n      for (int i = 0; i < subSearchers.length; i++) {\n        if (leafContexts[i].reader == context.reader) {\n          subSearchers[i] = this;\n        } else {\n          subSearchers[i] = new IndexSearcher(leafContexts[i].reader.getTopReaderContext()); // we need to get a TL context for sub searchers!\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    \n    if (executor == null) {\n      subSearchers = null;\n    } else {\n      subSearchers = new IndexSearcher[this.leafContexts.length];\n      for (int i = 0; i < subSearchers.length; i++) {\n        if (leafContexts[i].reader == context.reader) {\n          subSearchers[i] = this;\n        } else {\n          subSearchers[i] = new IndexSearcher(context, leafContexts[i]);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30da203d7de68a87a16025523a483a96c24f4291","date":1296686055,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","sourceNew":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    \n    if (executor == null) {\n      subSearchers = null;\n    } else {\n      subSearchers = new IndexSearcher[this.leafContexts.length];\n      for (int i = 0; i < subSearchers.length; i++) {\n        if (leafContexts[i].reader == context.reader) {\n          subSearchers[i] = this;\n        } else {\n          subSearchers[i] = new IndexSearcher(context, leafContexts[i]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","sourceNew":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    \n    if (executor == null) {\n      subSearchers = null;\n    } else {\n      subSearchers = new IndexSearcher[this.leafContexts.length];\n      for (int i = 0; i < subSearchers.length; i++) {\n        if (leafContexts[i].reader == context.reader) {\n          subSearchers[i] = this;\n        } else {\n          subSearchers[i] = new IndexSearcher(context, leafContexts[i]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,boolean,ExecutorService).mjava","sourceNew":null,"sourceOld":"  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.closeReader = closeReader;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0f02e67aa887b55e40181159521133bb3254283":["f0d20d680193af4e92047ec6367629f62fb81df8"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30da203d7de68a87a16025523a483a96c24f4291"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["30da203d7de68a87a16025523a483a96c24f4291"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0f02e67aa887b55e40181159521133bb3254283"],"30da203d7de68a87a16025523a483a96c24f4291":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"f0d20d680193af4e92047ec6367629f62fb81df8":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","30da203d7de68a87a16025523a483a96c24f4291"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"]},"commit2Childs":{"a0f02e67aa887b55e40181159521133bb3254283":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["f0d20d680193af4e92047ec6367629f62fb81df8"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["30da203d7de68a87a16025523a483a96c24f4291","868da859b43505d9d2a023bfeae6dd0c795f5295"],"30da203d7de68a87a16025523a483a96c24f4291":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3a0403b45dfe384fae4a1b6e96c3265d000c498","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f0d20d680193af4e92047ec6367629f62fb81df8":["a0f02e67aa887b55e40181159521133bb3254283"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}