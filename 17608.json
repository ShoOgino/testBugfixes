{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","commits":[{"id":"e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec","date":1358544193,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int,boolean).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs, boolean canUseIDV) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","sourceNew":"  private FirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    FirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","sourceNew":"  private FirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    FirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","sourceNew":"  private FirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FirstPassGroupingCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()), groupSort, topDocs);\n    } else {\n      return new FirstPassGroupingCollector<>(new TermGroupSelector(groupField), groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private FirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    FirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","sourceNew":"  private FirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FirstPassGroupingCollector<>(new ValueSourceGroupSelector(vs, new HashMap<>()), groupSort, topDocs);\n    } else {\n      return new FirstPassGroupingCollector<>(new TermGroupSelector(groupField), groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private FirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    FirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"20e94e61fe5291647346b70437617e6b6c370408":["97d4692d0c601ff773f0a2231967312428a904e4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec"],"97d4692d0c601ff773f0a2231967312428a904e4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["97d4692d0c601ff773f0a2231967312428a904e4","20e94e61fe5291647346b70437617e6b6c370408"],"e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["97d4692d0c601ff773f0a2231967312428a904e4"],"97d4692d0c601ff773f0a2231967312428a904e4":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}