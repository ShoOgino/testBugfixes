{"path":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","pathOld":"/dev/null","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","sourceNew":null,"sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","pathOld":"src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","pathOld":"/dev/null","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","date":1286157263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,IndexSearcher,int,Query[],Filter[]).mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","sourceNew":"  public TopDocs optimize(BooleanQuery original,\n                          IndexSearcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","sourceNew":null,"sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/LuceneQueryOptimizer#optimize(BooleanQuery,Searcher,int,Query[],Filter[]).mjava","sourceNew":null,"sourceOld":"  public TopDocs optimize(BooleanQuery original,\n                          Searcher searcher,\n                          int numHits,\n                          Query[] queryOut,\n                          Filter[] filterOut\n                          )\n    throws IOException {\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery filterQuery = null;\n\n    for (BooleanClause c : original.clauses()) {\n\n/***\nSystem.out.println(\"required=\"+c.required);\nSystem.out.println(\"boost=\"+c.query.getBoost());\nSystem.out.println(\"isTermQuery=\"+(c.query instanceof TermQuery));\nif (c.query instanceof TermQuery) {\n System.out.println(\"term=\"+((TermQuery)c.query).getTerm());\n System.out.println(\"docFreq=\"+searcher.docFreq(((TermQuery)c.query).getTerm()));\n}\n***/\n      Query q = c.getQuery();\n      if (c.isRequired()                              // required\n          && q.getBoost() == 0.0f           // boost is zero\n          && q instanceof TermQuery         // TermQuery\n          && (searcher.docFreq(((TermQuery)q).getTerm())\n              / (float)searcher.maxDoc()) >= threshold) { // check threshold\n        if (filterQuery == null)\n          filterQuery = new BooleanQuery();\n        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it\n//System.out.println(\"WooHoo... qualified to be hoisted to a filter!\");\n      } else {\n        query.add(c);                             // query it\n      }\n    }\n\n    Filter filter = null;\n    if (filterQuery != null) {\n      synchronized (cache) {                      // check cache\n        filter = (Filter)cache.get(filterQuery);\n      }\n      if (filter == null) {                       // miss\n        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry\n        synchronized (cache) {\n          cache.put(filterQuery, filter);         // cache it\n        }\n      }        \n    }\n\n    // YCS: added code to pass out optimized query and filter\n    // so they can be used with Hits\n    if (queryOut != null && filterOut != null) {\n      queryOut[0] = query; filterOut[0] = filter;\n      return null;\n    } else {\n      return searcher.search(query, filter, numHits);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"]},"commit2Childs":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1da8d55113b689b06716246649de6f62430f15c0":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}