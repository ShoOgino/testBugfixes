{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsGroupingManager#createOldResponse(Map[String,Object]).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsGroupingManager#createOldResponse(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the response for this grouping, but in the old style of response.\n   * This response has a bucket for the following if they are contained in the grouping:\n   * FieldFacets, RangeFacets and QueryFacets.\n   * Each facet's name and response are put into the bucket corresponding to its type.\n   * <p>\n   * Since groupings in the old notation must also return overall results, the overall results are\n   * passed in and the values are used to populate the grouping response.\n   * \n   * @param overallResults of the expressions to add to the grouping response\n   * @return the named list representation of the response\n   */\n  public NamedList<Object> createOldResponse(Map<String,Object> overallResults) {\n    NamedList<Object> response = new NamedList<>();\n    \n    topLevelExpressions.forEach( expression -> response.add(expression.getName(), overallResults.get(name + expression.getName())));\n\n    NamedList<Object> fieldFacetResults = new NamedList<>();\n    NamedList<Object> rangeFacetResults = new NamedList<>();\n    NamedList<Object> queryFacetResults = new NamedList<>();\n    // Add the field facet buckets to the output\n    facets.forEach( (name, facet) -> {\n      // The old style of request only accepts field facets\n      // So we can assume that all value facets are field facets\n      if (facet instanceof ValueFacet) {\n        fieldFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof RangeFacet) {\n        rangeFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof QueryFacet) {\n        queryFacetResults.add(name, facet.createOldResponse());\n      }\n    });\n    if (fieldFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.FIELD_FACETS, fieldFacetResults);\n    }\n    if (rangeFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.RANGE_FACETS, rangeFacetResults);\n    }\n    if (queryFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.QUERY_FACETS, queryFacetResults);\n    }\n    return response;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsGroupingManager#createOldResponse(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the response for this grouping, but in the old style of response.\n   * This response has a bucket for the following if they are contained in the grouping:\n   * FieldFacets, RangeFacets and QueryFacets.\n   * Each facet's name and response are put into the bucket corresponding to its type.\n   * <p>\n   * Since groupings in the old notation must also return overall results, the overall results are\n   * passed in and the values are used to populate the grouping response.\n   * \n   * @param overallResults of the expressions to add to the grouping response\n   * @return the named list representation of the response\n   */\n  public NamedList<Object> createOldResponse(Map<String,Object> overallResults) {\n    NamedList<Object> response = new NamedList<>();\n    \n    topLevelExpressions.forEach( expression -> response.add(expression.getName(), overallResults.get(name + expression.getName())));\n\n    NamedList<Object> fieldFacetResults = new NamedList<>();\n    NamedList<Object> rangeFacetResults = new NamedList<>();\n    NamedList<Object> queryFacetResults = new NamedList<>();\n    // Add the field facet buckets to the output\n    facets.forEach( (name, facet) -> {\n      // The old style of request only accepts field facets\n      // So we can assume that all value facets are field facets\n      if (facet instanceof ValueFacet) {\n        fieldFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof RangeFacet) {\n        rangeFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof QueryFacet) {\n        queryFacetResults.add(name, facet.createOldResponse());\n      }\n    });\n    if (fieldFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.FIELD_FACETS, fieldFacetResults);\n    }\n    if (rangeFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.RANGE_FACETS, rangeFacetResults);\n    }\n    if (queryFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.QUERY_FACETS, queryFacetResults);\n    }\n    return response;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsGroupingManager#createOldResponse(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the response for this grouping, but in the old style of response.\n   * This response has a bucket for the following if they are contained in the grouping:\n   * FieldFacets, RangeFacets and QueryFacets.\n   * Each facet's name and response are put into the bucket corresponding to its type.\n   * <p>\n   * Since groupings in the old notation must also return overall results, the overall results are\n   * passed in and the values are used to populate the grouping response.\n   * \n   * @param overallResults of the expressions to add to the grouping response\n   * @return the named list representation of the response\n   */\n  public NamedList<Object> createOldResponse(Map<String,Object> overallResults) {\n    NamedList<Object> response = new NamedList<>();\n    \n    topLevelExpressions.forEach( expression -> response.add(expression.getName(), overallResults.get(name + expression.getName())));\n\n    NamedList<Object> fieldFacetResults = new NamedList<>();\n    NamedList<Object> rangeFacetResults = new NamedList<>();\n    NamedList<Object> queryFacetResults = new NamedList<>();\n    // Add the field facet buckets to the output\n    facets.forEach( (name, facet) -> {\n      // The old style of request only accepts field facets\n      // So we can assume that all value facets are field facets\n      if (facet instanceof ValueFacet) {\n        fieldFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof RangeFacet) {\n        rangeFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof QueryFacet) {\n        queryFacetResults.add(name, facet.createOldResponse());\n      }\n    });\n    if (fieldFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.FIELD_FACETS, fieldFacetResults);\n    }\n    if (rangeFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.RANGE_FACETS, rangeFacetResults);\n    }\n    if (queryFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.QUERY_FACETS, queryFacetResults);\n    }\n    return response;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsGroupingManager#createOldResponse(Map[String,Object]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsGroupingManager#createOldResponse(Map[String,Object]).mjava","sourceNew":"  /**\n   * Create the response for this grouping, but in the old style of response.\n   * This response has a bucket for the following if they are contained in the grouping:\n   * FieldFacets, RangeFacets and QueryFacets.\n   * Each facet's name and response are put into the bucket corresponding to its type.\n   * <p>\n   * Since groupings in the old notation must also return overall results, the overall results are\n   * passed in and the values are used to populate the grouping response.\n   *\n   * @param overallResults of the expressions to add to the grouping response\n   * @return the named list representation of the response\n   */\n  public NamedList<Object> createOldResponse(Map<String,Object> overallResults) {\n    NamedList<Object> response = new NamedList<>();\n\n    topLevelExpressions.forEach( expression -> response.add(expression.getName(), overallResults.get(name + expression.getName())));\n\n    NamedList<Object> fieldFacetResults = new NamedList<>();\n    NamedList<Object> rangeFacetResults = new NamedList<>();\n    NamedList<Object> queryFacetResults = new NamedList<>();\n    // Add the field facet buckets to the output\n    facets.forEach( (name, facet) -> {\n      // The old style of request only accepts field facets\n      // So we can assume that all value facets are field facets\n      if (facet instanceof ValueFacet) {\n        fieldFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof RangeFacet) {\n        rangeFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof QueryFacet) {\n        queryFacetResults.add(name, facet.createOldResponse());\n      }\n    });\n    if (fieldFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.FIELD_FACETS, fieldFacetResults);\n    }\n    if (rangeFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.RANGE_FACETS, rangeFacetResults);\n    }\n    if (queryFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.QUERY_FACETS, queryFacetResults);\n    }\n    return response;\n  }\n\n","sourceOld":"  /**\n   * Create the response for this grouping, but in the old style of response.\n   * This response has a bucket for the following if they are contained in the grouping:\n   * FieldFacets, RangeFacets and QueryFacets.\n   * Each facet's name and response are put into the bucket corresponding to its type.\n   * <p>\n   * Since groupings in the old notation must also return overall results, the overall results are\n   * passed in and the values are used to populate the grouping response.\n   * \n   * @param overallResults of the expressions to add to the grouping response\n   * @return the named list representation of the response\n   */\n  public NamedList<Object> createOldResponse(Map<String,Object> overallResults) {\n    NamedList<Object> response = new NamedList<>();\n    \n    topLevelExpressions.forEach( expression -> response.add(expression.getName(), overallResults.get(name + expression.getName())));\n\n    NamedList<Object> fieldFacetResults = new NamedList<>();\n    NamedList<Object> rangeFacetResults = new NamedList<>();\n    NamedList<Object> queryFacetResults = new NamedList<>();\n    // Add the field facet buckets to the output\n    facets.forEach( (name, facet) -> {\n      // The old style of request only accepts field facets\n      // So we can assume that all value facets are field facets\n      if (facet instanceof ValueFacet) {\n        fieldFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof RangeFacet) {\n        rangeFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof QueryFacet) {\n        queryFacetResults.add(name, facet.createOldResponse());\n      }\n    });\n    if (fieldFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.FIELD_FACETS, fieldFacetResults);\n    }\n    if (rangeFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.RANGE_FACETS, rangeFacetResults);\n    }\n    if (queryFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.QUERY_FACETS, queryFacetResults);\n    }\n    return response;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsGroupingManager#createOldResponse(Map[String,Object]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsGroupingManager#createOldResponse(Map[String,Object]).mjava","sourceNew":"  /**\n   * Create the response for this grouping, but in the old style of response.\n   * This response has a bucket for the following if they are contained in the grouping:\n   * FieldFacets, RangeFacets and QueryFacets.\n   * Each facet's name and response are put into the bucket corresponding to its type.\n   * <p>\n   * Since groupings in the old notation must also return overall results, the overall results are\n   * passed in and the values are used to populate the grouping response.\n   *\n   * @param overallResults of the expressions to add to the grouping response\n   * @return the named list representation of the response\n   */\n  public NamedList<Object> createOldResponse(Map<String,Object> overallResults) {\n    NamedList<Object> response = new NamedList<>();\n\n    topLevelExpressions.forEach( expression -> response.add(expression.getName(), overallResults.get(name + expression.getName())));\n\n    NamedList<Object> fieldFacetResults = new NamedList<>();\n    NamedList<Object> rangeFacetResults = new NamedList<>();\n    NamedList<Object> queryFacetResults = new NamedList<>();\n    // Add the field facet buckets to the output\n    facets.forEach( (name, facet) -> {\n      // The old style of request only accepts field facets\n      // So we can assume that all value facets are field facets\n      if (facet instanceof ValueFacet) {\n        fieldFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof RangeFacet) {\n        rangeFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof QueryFacet) {\n        queryFacetResults.add(name, facet.createOldResponse());\n      }\n    });\n    if (fieldFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.FIELD_FACETS, fieldFacetResults);\n    }\n    if (rangeFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.RANGE_FACETS, rangeFacetResults);\n    }\n    if (queryFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.QUERY_FACETS, queryFacetResults);\n    }\n    return response;\n  }\n\n","sourceOld":"  /**\n   * Create the response for this grouping, but in the old style of response.\n   * This response has a bucket for the following if they are contained in the grouping:\n   * FieldFacets, RangeFacets and QueryFacets.\n   * Each facet's name and response are put into the bucket corresponding to its type.\n   * <p>\n   * Since groupings in the old notation must also return overall results, the overall results are\n   * passed in and the values are used to populate the grouping response.\n   * \n   * @param overallResults of the expressions to add to the grouping response\n   * @return the named list representation of the response\n   */\n  public NamedList<Object> createOldResponse(Map<String,Object> overallResults) {\n    NamedList<Object> response = new NamedList<>();\n    \n    topLevelExpressions.forEach( expression -> response.add(expression.getName(), overallResults.get(name + expression.getName())));\n\n    NamedList<Object> fieldFacetResults = new NamedList<>();\n    NamedList<Object> rangeFacetResults = new NamedList<>();\n    NamedList<Object> queryFacetResults = new NamedList<>();\n    // Add the field facet buckets to the output\n    facets.forEach( (name, facet) -> {\n      // The old style of request only accepts field facets\n      // So we can assume that all value facets are field facets\n      if (facet instanceof ValueFacet) {\n        fieldFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof RangeFacet) {\n        rangeFacetResults.add(name, facet.createOldResponse());\n      } else if (facet instanceof QueryFacet) {\n        queryFacetResults.add(name, facet.createOldResponse());\n      }\n    });\n    if (fieldFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.FIELD_FACETS, fieldFacetResults);\n    }\n    if (rangeFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.RANGE_FACETS, rangeFacetResults);\n    }\n    if (queryFacetResults.size() > 0) {\n      response.add(AnalyticsResponseHeadings.QUERY_FACETS, queryFacetResults);\n    }\n    return response;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}