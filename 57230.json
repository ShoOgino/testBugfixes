{"path":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","pathOld":"/dev/null","sourceNew":"  /** Scores and collects all matching documents.\n   * @param collector The collector to which all matching documents are passed through.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(Collector collector) throws IOException {\n    if (allowDocsOutOfOrder && requiredScorers.size() == 0\n            && prohibitedScorers.size() < 32) {\n      // fall back to BooleanScorer, scores documents somewhat out of order\n      BooleanScorer bs = new BooleanScorer(getSimilarity(), minNrShouldMatch);\n      Iterator si = optionalScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, false /* prohibited */);\n      }\n      si = prohibitedScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, true /* prohibited */);\n      }\n      bs.score(collector);\n    } else {\n      if (countingSumScorer == null) {\n        initCountingSumScorer();\n      }\n      collector.setScorer(this);\n      while (countingSumScorer.next()) {\n        collector.collect(countingSumScorer.doc());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","sourceNew":"  /** Scores and collects all matching documents.\n   * @param collector The collector to which all matching documents are passed through.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(Collector collector) throws IOException {\n    if (allowDocsOutOfOrder && requiredScorers.size() == 0\n            && prohibitedScorers.size() < 32) {\n      new BooleanScorer(getSimilarity(), minNrShouldMatch, optionalScorers,\n          prohibitedScorers).score(collector);\n    } else {\n      if (countingSumScorer == null) {\n        initCountingSumScorer();\n      }\n      collector.setScorer(this);\n      int doc;\n      while ((doc = countingSumScorer.nextDoc()) != NO_MORE_DOCS) {\n        collector.collect(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Scores and collects all matching documents.\n   * @param collector The collector to which all matching documents are passed through.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(Collector collector) throws IOException {\n    if (allowDocsOutOfOrder && requiredScorers.size() == 0\n            && prohibitedScorers.size() < 32) {\n      // fall back to BooleanScorer, scores documents somewhat out of order\n      BooleanScorer bs = new BooleanScorer(getSimilarity(), minNrShouldMatch);\n      Iterator si = optionalScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, false /* prohibited */);\n      }\n      si = prohibitedScorers.iterator();\n      while (si.hasNext()) {\n        bs.add((Scorer) si.next(), false /* required */, true /* prohibited */);\n      }\n      bs.score(collector);\n    } else {\n      if (countingSumScorer == null) {\n        initCountingSumScorer();\n      }\n      collector.setScorer(this);\n      while (countingSumScorer.next()) {\n        collector.collect(countingSumScorer.doc());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","sourceNew":"  /** Scores and collects all matching documents.\n   * @param collector The collector to which all matching documents are passed through.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(Collector collector) throws IOException {\n    collector.setScorer(this);\n    int doc;\n    while ((doc = countingSumScorer.nextDoc()) != NO_MORE_DOCS) {\n      collector.collect(doc);\n    }\n  }\n\n","sourceOld":"  /** Scores and collects all matching documents.\n   * @param collector The collector to which all matching documents are passed through.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(Collector collector) throws IOException {\n    if (allowDocsOutOfOrder && requiredScorers.size() == 0\n            && prohibitedScorers.size() < 32) {\n      new BooleanScorer(getSimilarity(), minNrShouldMatch, optionalScorers,\n          prohibitedScorers).score(collector);\n    } else {\n      if (countingSumScorer == null) {\n        initCountingSumScorer();\n      }\n      collector.setScorer(this);\n      int doc;\n      while ((doc = countingSumScorer.nextDoc()) != NO_MORE_DOCS) {\n        collector.collect(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["c7e70cecc56c33998f8f16cd1fbbc5a58de17f28"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7e70cecc56c33998f8f16cd1fbbc5a58de17f28","date":1247656558,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","sourceNew":"  /** Scores and collects all matching documents.\n   * @param collector The collector to which all matching documents are passed through.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(Collector collector) throws IOException {\n    collector.setScorer(this);\n    while ((doc = countingSumScorer.nextDoc()) != NO_MORE_DOCS) {\n      collector.collect(doc);\n    }\n  }\n\n","sourceOld":"  /** Scores and collects all matching documents.\n   * @param collector The collector to which all matching documents are passed through.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(Collector collector) throws IOException {\n    collector.setScorer(this);\n    int doc;\n    while ((doc = countingSumScorer.nextDoc()) != NO_MORE_DOCS) {\n      collector.collect(doc);\n    }\n  }\n\n","bugFix":["052fac7830290bd38a04cddee1a121ee07656b56"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","sourceNew":"  /** Scores and collects all matching documents.\n   * @param collector The collector to which all matching documents are passed through.\n   */\n  @Override\n  public void score(Collector collector) throws IOException {\n    collector.setScorer(this);\n    while ((doc = countingSumScorer.nextDoc()) != NO_MORE_DOCS) {\n      collector.collect(doc);\n    }\n  }\n\n","sourceOld":"  /** Scores and collects all matching documents.\n   * @param collector The collector to which all matching documents are passed through.\n   * <br>When this method is used the {@link #explain(int)} method should not be used.\n   */\n  public void score(Collector collector) throws IOException {\n    collector.setScorer(this);\n    while ((doc = countingSumScorer.nextDoc()) != NO_MORE_DOCS) {\n      collector.collect(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector).mjava","sourceNew":"  /** Scores and collects all matching documents.\n   * @param collector The collector to which all matching documents are passed through.\n   */\n  @Override\n  public void score(Collector collector) throws IOException {\n    collector.setScorer(this);\n    while ((doc = countingSumScorer.nextDoc()) != NO_MORE_DOCS) {\n      collector.collect(doc);\n    }\n  }\n\n","sourceOld":"  /** Scores and collects all matching documents.\n   * @param collector The collector to which all matching documents are passed through.\n   */\n  @Override\n  public void score(Collector collector) throws IOException {\n    collector.setScorer(this);\n    while ((doc = countingSumScorer.nextDoc()) != NO_MORE_DOCS) {\n      collector.collect(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["c7e70cecc56c33998f8f16cd1fbbc5a58de17f28"],"c7e70cecc56c33998f8f16cd1fbbc5a58de17f28":["052fac7830290bd38a04cddee1a121ee07656b56"],"30a558487f2298c2c19ceca9103c1b6865d64708":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"052fac7830290bd38a04cddee1a121ee07656b56":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c7e70cecc56c33998f8f16cd1fbbc5a58de17f28":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"30a558487f2298c2c19ceca9103c1b6865d64708":["052fac7830290bd38a04cddee1a121ee07656b56"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"052fac7830290bd38a04cddee1a121ee07656b56":["c7e70cecc56c33998f8f16cd1fbbc5a58de17f28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}