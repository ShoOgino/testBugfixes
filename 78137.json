{"path":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#test0().mjava","commits":[{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#test0().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test0() {\n    IntToFloatMap map = new IntToFloatMap();\n\n    assertGround(map.get(0));\n    \n    for (int i = 0; i < 100; ++i) {\n      int value = 100 + i;\n      assertFalse(map.containsValue(value));\n      map.put(i, value);\n      assertTrue(map.containsValue(value));\n      assertNotNull(map.get(i));\n    }\n\n    assertEquals(100, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(map.containsKey(i));\n      assertEquals(100 + i, map.get(i), Float.MAX_VALUE);\n\n    }\n\n    for (int i = 10; i < 90; ++i) {\n      map.remove(i);\n      assertGround(map.get(i));\n    }\n\n    assertEquals(20, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertEquals(map.containsKey(i), !(i >= 10 && i < 90));\n    }\n\n    for (int i = 5; i < 85; ++i) {\n      map.put(i, Integer.valueOf(5 + i));\n    }\n    assertEquals(95, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertEquals(map.containsKey(i), !(i >= 85 && i < 90));\n    }\n    for (int i = 0; i < 5; ++i) {\n      assertEquals(map.get(i), (100 + i), Float.MAX_VALUE);\n    }\n    for (int i = 5; i < 85; ++i) {\n      assertEquals(map.get(i), (5 + i), Float.MAX_VALUE);\n    }\n    for (int i = 90; i < 100; ++i) {\n      assertEquals(map.get(i), (100 + i), Float.MAX_VALUE);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#test0().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test0() {\n    IntToFloatMap map = new IntToFloatMap();\n\n    assertGround(map.get(0));\n    \n    for (int i = 0; i < 100; ++i) {\n      int value = 100 + i;\n      assertFalse(map.containsValue(value));\n      map.put(i, value);\n      assertTrue(map.containsValue(value));\n      assertNotNull(map.get(i));\n    }\n\n    assertEquals(100, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(map.containsKey(i));\n      assertEquals(100 + i, map.get(i), Float.MAX_VALUE);\n\n    }\n\n    for (int i = 10; i < 90; ++i) {\n      map.remove(i);\n      assertGround(map.get(i));\n    }\n\n    assertEquals(20, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertEquals(map.containsKey(i), !(i >= 10 && i < 90));\n    }\n\n    for (int i = 5; i < 85; ++i) {\n      map.put(i, Integer.valueOf(5 + i));\n    }\n    assertEquals(95, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertEquals(map.containsKey(i), !(i >= 85 && i < 90));\n    }\n    for (int i = 0; i < 5; ++i) {\n      assertEquals(map.get(i), (100 + i), Float.MAX_VALUE);\n    }\n    for (int i = 5; i < 85; ++i) {\n      assertEquals(map.get(i), (5 + i), Float.MAX_VALUE);\n    }\n    for (int i = 90; i < 100; ++i) {\n      assertEquals(map.get(i), (100 + i), Float.MAX_VALUE);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/collections/IntToFloatMapTest#test0().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#test0().mjava","sourceNew":"  @Test\n  public void test0() {\n    IntToFloatMap map = new IntToFloatMap();\n\n    assertGround(map.get(0));\n    \n    for (int i = 0; i < 100; ++i) {\n      int value = 100 + i;\n      assertFalse(map.containsValue(value));\n      map.put(i, value);\n      assertTrue(map.containsValue(value));\n      assertNotNull(map.get(i));\n    }\n\n    assertEquals(100, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(map.containsKey(i));\n      assertEquals(100 + i, map.get(i), Float.MAX_VALUE);\n\n    }\n\n    for (int i = 10; i < 90; ++i) {\n      map.remove(i);\n      assertGround(map.get(i));\n    }\n\n    assertEquals(20, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertEquals(map.containsKey(i), !(i >= 10 && i < 90));\n    }\n\n    for (int i = 5; i < 85; ++i) {\n      map.put(i, Integer.valueOf(5 + i));\n    }\n    assertEquals(95, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertEquals(map.containsKey(i), !(i >= 85 && i < 90));\n    }\n    for (int i = 0; i < 5; ++i) {\n      assertEquals(map.get(i), (100 + i), Float.MAX_VALUE);\n    }\n    for (int i = 5; i < 85; ++i) {\n      assertEquals(map.get(i), (5 + i), Float.MAX_VALUE);\n    }\n    for (int i = 90; i < 100; ++i) {\n      assertEquals(map.get(i), (100 + i), Float.MAX_VALUE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test0() {\n    IntToFloatMap map = new IntToFloatMap();\n\n    assertGround(map.get(0));\n    \n    for (int i = 0; i < 100; ++i) {\n      int value = 100 + i;\n      assertFalse(map.containsValue(value));\n      map.put(i, value);\n      assertTrue(map.containsValue(value));\n      assertNotNull(map.get(i));\n    }\n\n    assertEquals(100, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(map.containsKey(i));\n      assertEquals(100 + i, map.get(i), Float.MAX_VALUE);\n\n    }\n\n    for (int i = 10; i < 90; ++i) {\n      map.remove(i);\n      assertGround(map.get(i));\n    }\n\n    assertEquals(20, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertEquals(map.containsKey(i), !(i >= 10 && i < 90));\n    }\n\n    for (int i = 5; i < 85; ++i) {\n      map.put(i, Integer.valueOf(5 + i));\n    }\n    assertEquals(95, map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertEquals(map.containsKey(i), !(i >= 85 && i < 90));\n    }\n    for (int i = 0; i < 5; ++i) {\n      assertEquals(map.get(i), (100 + i), Float.MAX_VALUE);\n    }\n    for (int i = 5; i < 85; ++i) {\n      assertEquals(map.get(i), (5 + i), Float.MAX_VALUE);\n    }\n    for (int i = 90; i < 100; ++i) {\n      assertEquals(map.get(i), (100 + i), Float.MAX_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"607428da722dcb3e86bbd11c63de8986e6275c36":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","607428da722dcb3e86bbd11c63de8986e6275c36"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}