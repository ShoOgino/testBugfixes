{"path":"src/java/org/apache/lucene/search/ReqExclScorer#toNonExcluded().mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ReqExclScorer#toNonExcluded().mjava","pathOld":"/dev/null","sourceNew":"  /** Advance to non excluded doc.\n   * <br>On entry:\n   * <ul>\n   * <li>reqScorer != null,\n   * <li>exclScorer != null,\n   * <li>reqScorer was advanced once via next() or skipTo()\n   *      and reqScorer.doc() may still be excluded.\n   * </ul>\n   * Advances reqScorer a non excluded required doc, if any.\n   * @return true iff there is a non excluded required doc.\n   */\n  private boolean toNonExcluded() throws IOException {\n    int exclDoc = exclScorer.doc();\n    do {  \n      int reqDoc = reqScorer.doc(); // may be excluded\n      if (reqDoc < exclDoc) {\n        return true; // reqScorer advanced to before exclScorer, ie. not excluded\n      } else if (reqDoc > exclDoc) {\n        if (! exclScorer.skipTo(reqDoc)) {\n          exclScorer = null; // exhausted, no more exclusions\n          return true;\n        }\n        exclDoc = exclScorer.doc();\n        if (exclDoc > reqDoc) {\n          return true; // not excluded\n        }\n      }\n    } while (reqScorer.next());\n    reqScorer = null; // exhausted, nothing left\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf316477647e2f6c544243e0cbb5f41ae2a3226e","date":1243370514,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ReqExclScorer#toNonExcluded().mjava","pathOld":"src/java/org/apache/lucene/search/ReqExclScorer#toNonExcluded().mjava","sourceNew":"  /** Advance to non excluded doc.\n   * <br>On entry:\n   * <ul>\n   * <li>reqScorer != null,\n   * <li>exclDisi != null,\n   * <li>reqScorer was advanced once via next() or skipTo()\n   *      and reqScorer.doc() may still be excluded.\n   * </ul>\n   * Advances reqScorer a non excluded required doc, if any.\n   * @return true iff there is a non excluded required doc.\n   */\n  private boolean toNonExcluded() throws IOException {\n    int exclDoc = exclDisi.doc();\n    do {  \n      int reqDoc = reqScorer.doc(); // may be excluded\n      if (reqDoc < exclDoc) {\n        return true; // reqScorer advanced to before exclScorer, ie. not excluded\n      } else if (reqDoc > exclDoc) {\n        if (! exclDisi.skipTo(reqDoc)) {\n          exclDisi = null; // exhausted, no more exclusions\n          return true;\n        }\n        exclDoc = exclDisi.doc();\n        if (exclDoc > reqDoc) {\n          return true; // not excluded\n        }\n      }\n    } while (reqScorer.next());\n    reqScorer = null; // exhausted, nothing left\n    return false;\n  }\n\n","sourceOld":"  /** Advance to non excluded doc.\n   * <br>On entry:\n   * <ul>\n   * <li>reqScorer != null,\n   * <li>exclScorer != null,\n   * <li>reqScorer was advanced once via next() or skipTo()\n   *      and reqScorer.doc() may still be excluded.\n   * </ul>\n   * Advances reqScorer a non excluded required doc, if any.\n   * @return true iff there is a non excluded required doc.\n   */\n  private boolean toNonExcluded() throws IOException {\n    int exclDoc = exclScorer.doc();\n    do {  \n      int reqDoc = reqScorer.doc(); // may be excluded\n      if (reqDoc < exclDoc) {\n        return true; // reqScorer advanced to before exclScorer, ie. not excluded\n      } else if (reqDoc > exclDoc) {\n        if (! exclScorer.skipTo(reqDoc)) {\n          exclScorer = null; // exhausted, no more exclusions\n          return true;\n        }\n        exclDoc = exclScorer.doc();\n        if (exclDoc > reqDoc) {\n          return true; // not excluded\n        }\n      }\n    } while (reqScorer.next());\n    reqScorer = null; // exhausted, nothing left\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ReqExclScorer#toNonExcluded().mjava","pathOld":"src/java/org/apache/lucene/search/ReqExclScorer#toNonExcluded().mjava","sourceNew":"  /** Advance to non excluded doc.\n   * <br>On entry:\n   * <ul>\n   * <li>reqScorer != null,\n   * <li>exclScorer != null,\n   * <li>reqScorer was advanced once via next() or skipTo()\n   *      and reqScorer.doc() may still be excluded.\n   * </ul>\n   * Advances reqScorer a non excluded required doc, if any.\n   * @return true iff there is a non excluded required doc.\n   */\n  private int toNonExcluded() throws IOException {\n    int exclDoc = exclDisi.docID();\n    int reqDoc = reqScorer.docID(); // may be excluded\n    do {  \n      if (reqDoc < exclDoc) {\n        return reqDoc; // reqScorer advanced to before exclScorer, ie. not excluded\n      } else if (reqDoc > exclDoc) {\n        exclDoc = exclDisi.advance(reqDoc);\n        if (exclDoc == NO_MORE_DOCS) {\n          exclDisi = null; // exhausted, no more exclusions\n          return reqDoc;\n        }\n        if (exclDoc > reqDoc) {\n          return reqDoc; // not excluded\n        }\n      }\n    } while ((reqDoc = reqScorer.nextDoc()) != NO_MORE_DOCS);\n    reqScorer = null; // exhausted, nothing left\n    return NO_MORE_DOCS;\n  }\n\n","sourceOld":"  /** Advance to non excluded doc.\n   * <br>On entry:\n   * <ul>\n   * <li>reqScorer != null,\n   * <li>exclDisi != null,\n   * <li>reqScorer was advanced once via next() or skipTo()\n   *      and reqScorer.doc() may still be excluded.\n   * </ul>\n   * Advances reqScorer a non excluded required doc, if any.\n   * @return true iff there is a non excluded required doc.\n   */\n  private boolean toNonExcluded() throws IOException {\n    int exclDoc = exclDisi.doc();\n    do {  \n      int reqDoc = reqScorer.doc(); // may be excluded\n      if (reqDoc < exclDoc) {\n        return true; // reqScorer advanced to before exclScorer, ie. not excluded\n      } else if (reqDoc > exclDoc) {\n        if (! exclDisi.skipTo(reqDoc)) {\n          exclDisi = null; // exhausted, no more exclusions\n          return true;\n        }\n        exclDoc = exclDisi.doc();\n        if (exclDoc > reqDoc) {\n          return true; // not excluded\n        }\n      }\n    } while (reqScorer.next());\n    reqScorer = null; // exhausted, nothing left\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ReqExclScorer#toNonExcluded().mjava","pathOld":"src/java/org/apache/lucene/search/ReqExclScorer#toNonExcluded().mjava","sourceNew":"  /** Advance to non excluded doc.\n   * <br>On entry:\n   * <ul>\n   * <li>reqScorer != null,\n   * <li>exclScorer != null,\n   * <li>reqScorer was advanced once via next() or skipTo()\n   *      and reqScorer.doc() may still be excluded.\n   * </ul>\n   * Advances reqScorer a non excluded required doc, if any.\n   * @return true iff there is a non excluded required doc.\n   */\n  private int toNonExcluded() throws IOException {\n    int exclDoc = exclDisi.docID();\n    int reqDoc = reqScorer.docID(); // may be excluded\n    do {  \n      if (reqDoc < exclDoc) {\n        return reqDoc; // reqScorer advanced to before exclScorer, ie. not excluded\n      } else if (reqDoc > exclDoc) {\n        exclDoc = exclDisi.advance(reqDoc);\n        if (exclDoc == NO_MORE_DOCS) {\n          exclDisi = null; // exhausted, no more exclusions\n          return reqDoc;\n        }\n        if (exclDoc > reqDoc) {\n          return reqDoc; // not excluded\n        }\n      }\n    } while ((reqDoc = reqScorer.nextDoc()) != NO_MORE_DOCS);\n    reqScorer = null; // exhausted, nothing left\n    return NO_MORE_DOCS;\n  }\n\n","sourceOld":"  /** Advance to non excluded doc.\n   * <br>On entry:\n   * <ul>\n   * <li>reqScorer != null,\n   * <li>exclScorer != null,\n   * <li>reqScorer was advanced once via next() or skipTo()\n   *      and reqScorer.doc() may still be excluded.\n   * </ul>\n   * Advances reqScorer a non excluded required doc, if any.\n   * @return true iff there is a non excluded required doc.\n   */\n  private int toNonExcluded() throws IOException {\n    int exclDoc = exclDisi.docID();\n    int reqDoc = reqScorer.docID(); // may be excluded\n    do {  \n      if (reqDoc < exclDoc) {\n        return reqDoc; // reqScorer advanced to before exclScorer, ie. not excluded\n      } else if (reqDoc > exclDoc) {\n        exclDoc = exclDisi.advance(reqDoc);\n        if (exclDoc == NO_MORE_DOCS) {\n          exclDisi = null; // exhausted, no more exclusions\n          return reqDoc;\n        }\n        if (exclDoc > reqDoc) {\n          return reqDoc; // not excluded\n        }\n      }\n    } while ((reqDoc = reqScorer.nextDoc()) != NO_MORE_DOCS);\n    reqScorer = null; // exhausted, nothing left\n    return NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["bf316477647e2f6c544243e0cbb5f41ae2a3226e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bf316477647e2f6c544243e0cbb5f41ae2a3226e":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["30a558487f2298c2c19ceca9103c1b6865d64708"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"bf316477647e2f6c544243e0cbb5f41ae2a3226e":["30a558487f2298c2c19ceca9103c1b6865d64708"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["bf316477647e2f6c544243e0cbb5f41ae2a3226e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}