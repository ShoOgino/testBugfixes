{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","commits":[{"id":"e50f0da93c6dcee20d8792637b1786e2c34975e9","date":1400182475,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void seekExact(BytesRef target, TermState otherState) {\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n    // }\n    assert clearEOF();\n    if (target.compareTo(term) != 0 || !termExists) {\n      assert otherState != null && otherState instanceof BlockTermState;\n      currentFrame = staticFrame;\n      currentFrame.state.copyFrom(otherState);\n      term.copyBytes(target);\n      currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n      assert currentFrame.metaDataUpto > 0;\n      validIndexPrefix = 0;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n      // }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void seekExact(BytesRef target, TermState otherState) {\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n    // }\n    assert clearEOF();\n    if (target.compareTo(term) != 0 || !termExists) {\n      assert otherState != null && otherState instanceof BlockTermState;\n      currentFrame = staticFrame;\n      currentFrame.state.copyFrom(otherState);\n      term.copyBytes(target);\n      currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n      assert currentFrame.metaDataUpto > 0;\n      validIndexPrefix = 0;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n      // }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":"  @Override\n  public void seekExact(BytesRef target, TermState otherState) {\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n    // }\n    assert clearEOF();\n    if (target.compareTo(term.get()) != 0 || !termExists) {\n      assert otherState != null && otherState instanceof BlockTermState;\n      currentFrame = staticFrame;\n      currentFrame.state.copyFrom(otherState);\n      term.copyBytes(target);\n      currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n      assert currentFrame.metaDataUpto > 0;\n      validIndexPrefix = 0;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n      // }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void seekExact(BytesRef target, TermState otherState) {\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR.seekExact termState seg=\" + segment + \" target=\" + target.utf8ToString() + \" \" + target + \" state=\" + otherState);\n    // }\n    assert clearEOF();\n    if (target.compareTo(term) != 0 || !termExists) {\n      assert otherState != null && otherState instanceof BlockTermState;\n      currentFrame = staticFrame;\n      currentFrame.state.copyFrom(otherState);\n      term.copyBytes(target);\n      currentFrame.metaDataUpto = currentFrame.getTermBlockOrd();\n      assert currentFrame.metaDataUpto > 0;\n      validIndexPrefix = 0;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"  skip seek: already on target state=\" + currentFrame.state);\n      // }\n    }\n  }\n\n","bugFix":["e50f0da93c6dcee20d8792637b1786e2c34975e9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e50f0da93c6dcee20d8792637b1786e2c34975e9"],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","e50f0da93c6dcee20d8792637b1786e2c34975e9"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}