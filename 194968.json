{"path":"src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseString(String).mjava","commits":[{"id":"00c1e7284eb0e728903446dd05972acc9905dd53","date":1226627781,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseString(String).mjava","pathOld":"/dev/null","sourceNew":"  protected String parseString( String s ){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case '\"' : c = '\"'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseString(String).mjava","pathOld":"src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseString(String).mjava","sourceNew":"  protected String parseString( String s ){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case '\"' : c = '\"'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":"  protected String parseString( String s ){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case '\"' : c = '\"'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new RuntimeException( \"Invalid escaped char in [\" + s + \"]\" );\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"00c1e7284eb0e728903446dd05972acc9905dd53":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["00c1e7284eb0e728903446dd05972acc9905dd53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["00c1e7284eb0e728903446dd05972acc9905dd53"],"00c1e7284eb0e728903446dd05972acc9905dd53":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}