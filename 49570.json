{"path":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testFacetRangeOfAsymetricRates().mjava","commits":[{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testFacetRangeOfAsymetricRates().mjava","pathOld":"/dev/null","sourceNew":"  public void testFacetRangeOfAsymetricRates() throws Exception {\n    // facet.range: exchange rates relative to EUR...\n    //\n    // because of the asymetric echange rate, the counts for these buckets will be different\n    // then if we just converted the EUR values to USD\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                                \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                                \"f.\" + FIELD + \".facet.range.start\", \"8,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.gap\", \"2,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.end\", \"22,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.other\", \"all\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n        final List<RangeFacet> range_facets = rsp.getFacetRanges();\n        assertEquals(1, range_facets.size());\n        final RangeFacet result = range_facets.get(0);\n        assertEquals(FIELD, result.getName());\n        assertEquals(\"8.00,EUR\", result.getStart());\n        assertEquals(\"2.00,EUR\", result.getGap());\n        assertEquals(\"22.00,EUR\", result.getEnd());\n        assertEquals(6, result.getBefore());\n        assertEquals(3, result.getAfter());\n        assertEquals(6, result.getBetween());\n        \n        List<RangeFacet.Count> counts = result.getCounts();\n        if (use_mincount) {\n          assertEquals(2, counts.size());\n          for (int i = 0; i < 2; i++) {\n            RangeFacet.Count bucket = counts.get(i);\n            assertEquals((12 + (i * 2)) + \".00,EUR\", bucket.getValue());\n            assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n          }\n        } else {\n          assertEquals(7, counts.size());\n          for (int i = 0; i < 7; i++) {\n            RangeFacet.Count bucket = counts.get(i);\n            assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.getValue());\n            assertEquals(\"bucket #\" + i, (i == 2 || i == 3) ? 3 : 0, bucket.getCount());\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testFacetRangeOfAsymetricRates().mjava","pathOld":"/dev/null","sourceNew":"  public void testFacetRangeOfAsymetricRates() throws Exception {\n    // facet.range: exchange rates relative to EUR...\n    //\n    // because of the asymetric echange rate, the counts for these buckets will be different\n    // then if we just converted the EUR values to USD\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                                \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                                \"f.\" + FIELD + \".facet.range.start\", \"8,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.gap\", \"2,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.end\", \"22,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.other\", \"all\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n        final List<RangeFacet> range_facets = rsp.getFacetRanges();\n        assertEquals(1, range_facets.size());\n        final RangeFacet result = range_facets.get(0);\n        assertEquals(FIELD, result.getName());\n        assertEquals(\"8.00,EUR\", result.getStart());\n        assertEquals(\"2.00,EUR\", result.getGap());\n        assertEquals(\"22.00,EUR\", result.getEnd());\n        assertEquals(6, result.getBefore());\n        assertEquals(3, result.getAfter());\n        assertEquals(6, result.getBetween());\n        \n        List<RangeFacet.Count> counts = result.getCounts();\n        if (use_mincount) {\n          assertEquals(2, counts.size());\n          for (int i = 0; i < 2; i++) {\n            RangeFacet.Count bucket = counts.get(i);\n            assertEquals((12 + (i * 2)) + \".00,EUR\", bucket.getValue());\n            assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n          }\n        } else {\n          assertEquals(7, counts.size());\n          for (int i = 0; i < 7; i++) {\n            RangeFacet.Count bucket = counts.get(i);\n            assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.getValue());\n            assertEquals(\"bucket #\" + i, (i == 2 || i == 3) ? 3 : 0, bucket.getCount());\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testFacetRangeOfAsymetricRates().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#testFacetRangeOfAsymetricRates().mjava","sourceNew":"  public void testFacetRangeOfAsymetricRates() throws Exception {\n    // facet.range: exchange rates relative to EUR...\n    //\n    // because of the asymetric echange rate, the counts for these buckets will be different\n    // then if we just converted the EUR values to USD\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                                \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                                \"f.\" + FIELD + \".facet.range.start\", \"8,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.gap\", \"2,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.end\", \"22,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.other\", \"all\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n        @SuppressWarnings({\"rawtypes\"})\n        final List<RangeFacet> range_facets = rsp.getFacetRanges();\n        assertEquals(1, range_facets.size());\n        @SuppressWarnings({\"rawtypes\"})\n        final RangeFacet result = range_facets.get(0);\n        assertEquals(FIELD, result.getName());\n        assertEquals(\"8.00,EUR\", result.getStart());\n        assertEquals(\"2.00,EUR\", result.getGap());\n        assertEquals(\"22.00,EUR\", result.getEnd());\n        assertEquals(6, result.getBefore());\n        assertEquals(3, result.getAfter());\n        assertEquals(6, result.getBetween());\n        \n        @SuppressWarnings({\"unchecked\"})\n        List<RangeFacet.Count> counts = result.getCounts();\n        if (use_mincount) {\n          assertEquals(2, counts.size());\n          for (int i = 0; i < 2; i++) {\n            RangeFacet.Count bucket = counts.get(i);\n            assertEquals((12 + (i * 2)) + \".00,EUR\", bucket.getValue());\n            assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n          }\n        } else {\n          assertEquals(7, counts.size());\n          for (int i = 0; i < 7; i++) {\n            RangeFacet.Count bucket = counts.get(i);\n            assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.getValue());\n            assertEquals(\"bucket #\" + i, (i == 2 || i == 3) ? 3 : 0, bucket.getCount());\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":"  public void testFacetRangeOfAsymetricRates() throws Exception {\n    // facet.range: exchange rates relative to EUR...\n    //\n    // because of the asymetric echange rate, the counts for these buckets will be different\n    // then if we just converted the EUR values to USD\n    for (boolean use_mincount : Arrays.asList(true, false)) {\n      final SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.range\", FIELD,\n                                                \"facet.mincount\", (use_mincount ? \"3\" : \"0\"),\n                                                \"f.\" + FIELD + \".facet.range.start\", \"8,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.gap\", \"2,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.end\", \"22,EUR\",\n                                                \"f.\" + FIELD + \".facet.range.other\", \"all\");\n      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());\n        final List<RangeFacet> range_facets = rsp.getFacetRanges();\n        assertEquals(1, range_facets.size());\n        final RangeFacet result = range_facets.get(0);\n        assertEquals(FIELD, result.getName());\n        assertEquals(\"8.00,EUR\", result.getStart());\n        assertEquals(\"2.00,EUR\", result.getGap());\n        assertEquals(\"22.00,EUR\", result.getEnd());\n        assertEquals(6, result.getBefore());\n        assertEquals(3, result.getAfter());\n        assertEquals(6, result.getBetween());\n        \n        List<RangeFacet.Count> counts = result.getCounts();\n        if (use_mincount) {\n          assertEquals(2, counts.size());\n          for (int i = 0; i < 2; i++) {\n            RangeFacet.Count bucket = counts.get(i);\n            assertEquals((12 + (i * 2)) + \".00,EUR\", bucket.getValue());\n            assertEquals(\"bucket #\" + i, 3, bucket.getCount());\n          }\n        } else {\n          assertEquals(7, counts.size());\n          for (int i = 0; i < 7; i++) {\n            RangeFacet.Count bucket = counts.get(i);\n            assertEquals((8 + (i * 2)) + \".00,EUR\", bucket.getValue());\n            assertEquals(\"bucket #\" + i, (i == 2 || i == 3) ? 3 : 0, bucket.getCount());\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}