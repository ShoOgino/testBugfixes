{"path":"lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties#main(String[]).mjava","commits":[{"id":"61a7cdcdcc2cb2867472e1cfc130786166636143","date":1525692131,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String [] args) {\n    {\n      Map<String, String> props = new LinkedHashMap<>();\n      props.put(\"a\", \"${b}\");\n      props.put(\"b\", \"${c}\");\n      props.put(\"c\", \"foo\");\n      props.put(\"d\", \"${a}/${b}/${c}\");\n      assertEquals(resolve(props), \"a=foo\", \"b=foo\", \"c=foo\", \"d=foo/foo/foo\");\n    }\n\n    {\n      Map<String, String> props = new LinkedHashMap<>();\n      props.put(\"a\", \"foo\");\n      props.put(\"b\", \"${a}\");\n      assertEquals(resolve(props), \"a=foo\", \"b=foo\");\n    }\n\n    {\n      Map<String, String> props = new LinkedHashMap<>();\n      props.put(\"a\", \"${b}\");\n      props.put(\"b\", \"${c}\");\n      props.put(\"c\", \"${a}\");\n      try {\n        resolve(props);\n      } catch (IllegalArgumentException e) {\n        // Expected, circular reference.\n        if (!e.getMessage().contains(\"Circular recursive\")) {\n          throw new AssertionError();\n        }\n      }\n    }\n\n    {\n      Map<String, String> props = new LinkedHashMap<>();\n      props.put(\"a\", \"${b}\");\n      try {\n        resolve(props);\n      } catch (IllegalArgumentException e) {\n        // Expected, no referenced value.\n        if (!e.getMessage().contains(\"Missing replaced\")) {\n          throw new AssertionError();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String [] args) {\n    {\n      Map<String, String> props = new LinkedHashMap<>();\n      props.put(\"a\", \"${b}\");\n      props.put(\"b\", \"${c}\");\n      props.put(\"c\", \"foo\");\n      props.put(\"d\", \"${a}/${b}/${c}\");\n      assertEquals(resolve(props), \"a=foo\", \"b=foo\", \"c=foo\", \"d=foo/foo/foo\");\n    }\n\n    {\n      Map<String, String> props = new LinkedHashMap<>();\n      props.put(\"a\", \"foo\");\n      props.put(\"b\", \"${a}\");\n      assertEquals(resolve(props), \"a=foo\", \"b=foo\");\n    }\n\n    {\n      Map<String, String> props = new LinkedHashMap<>();\n      props.put(\"a\", \"${b}\");\n      props.put(\"b\", \"${c}\");\n      props.put(\"c\", \"${a}\");\n      try {\n        resolve(props);\n      } catch (IllegalArgumentException e) {\n        // Expected, circular reference.\n        if (!e.getMessage().contains(\"Circular recursive\")) {\n          throw new AssertionError();\n        }\n      }\n    }\n\n    {\n      Map<String, String> props = new LinkedHashMap<>();\n      props.put(\"a\", \"${b}\");\n      try {\n        resolve(props);\n      } catch (IllegalArgumentException e) {\n        // Expected, no referenced value.\n        if (!e.getMessage().contains(\"Missing replaced\")) {\n          throw new AssertionError();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e025cf1c07150c8db28879d785db17eb3a66ca9f":["61a7cdcdcc2cb2867472e1cfc130786166636143"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61a7cdcdcc2cb2867472e1cfc130786166636143":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61a7cdcdcc2cb2867472e1cfc130786166636143"],"61a7cdcdcc2cb2867472e1cfc130786166636143":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}