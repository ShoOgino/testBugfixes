{"path":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","commits":[{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = 2000;\n    final int MAX_FIELDS = 50;\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.indexed(), fi.isIndexed);\n        assertEquals(expected.storeTermVectors(), fi.storeTermVector);\n        assertEquals(expected.storeTermVectorPositions(), fi.storePositionWithTermVector);\n        assertEquals(expected.storeTermVectorOffsets(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.isIndexed(), fi.isIndexed);\n        assertEquals(expected.isTermVectorStored(), fi.storeTermVector);\n        assertEquals(expected.isStorePositionWithTermVector(), fi.storePositionWithTermVector);\n        assertEquals(expected.isStoreOffsetWithTermVector(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n        assertEquals(expected.fieldType().storeTermVectorPositions(), fi.storePositionWithTermVector);\n        assertEquals(expected.fieldType().storeTermVectorOffsets(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.indexed(), fi.isIndexed);\n        assertEquals(expected.storeTermVectors(), fi.storeTermVector);\n        assertEquals(expected.storeTermVectorPositions(), fi.storePositionWithTermVector);\n        assertEquals(expected.storeTermVectorOffsets(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n        assertEquals(expected.fieldType().storeTermVectorPositions(), fi.storePositionWithTermVector);\n        assertEquals(expected.fieldType().storeTermVectorOffsets(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.optimize();\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n        assertEquals(expected.fieldType().storeTermVectorPositions(), fi.storePositionWithTermVector);\n        assertEquals(expected.fieldType().storeTermVectorOffsets(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n        assertEquals(expected.fieldType().storeTermVectorPositions(), fi.storePositionWithTermVector);\n        assertEquals(expected.fieldType().storeTermVectorOffsets(), fi.storeOffsetWithTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","0762b640e0d0d12b6edb96db68986e13145c3484"],"0762b640e0d0d12b6edb96db68986e13145c3484":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1224a4027481acce15495b03bce9b48b93b42722"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","0762b640e0d0d12b6edb96db68986e13145c3484"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["0762b640e0d0d12b6edb96db68986e13145c3484"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"962d04139994fce5193143ef35615499a9a96d78":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["0762b640e0d0d12b6edb96db68986e13145c3484","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d619839baa8ce5503e496b94a9e42ad6f079293f","b0c7a8f7304b75b1528814c5820fa23a96816c27","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"1224a4027481acce15495b03bce9b48b93b42722":["f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}