{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores, TermContext termStates)\n        throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(collectionStats, termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce8de354eb40085752030725cb2bee2b0ae536c","date":1469029371,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc and ttf=-1\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), maxDoc, -1);\n      }\n     \n      this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n    }\n\n","bugFix":null,"bugIntro":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35d7ed691d627802acc5be44a639b67b1360467b","date":1469032270,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc and ttf=-1\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), maxDoc, -1);\n      }\n     \n      this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      this.needsScores = needsScores;\n      assert termStates != null : \"TermContext must not be null\";\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // do not bother computing actual stats, scores are not needed\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        final int docFreq = termStates.docFreq();\n        final long totalTermFreq = termStates.totalTermFreq();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), docFreq, totalTermFreq);\n      }\n     \n      this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","pathOld":"/dev/null","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc and ttf=-1\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), maxDoc, -1);\n      }\n     \n      this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=1 and ttf=-1\n        collectionStats = new CollectionStatistics(term.field(), 1, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), 1, -1);\n      }\n     \n      if (termStats == null) {\n        this.stats = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n      }\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc and ttf=-1\n        final int maxDoc = searcher.getIndexReader().maxDoc();\n        collectionStats = new CollectionStatistics(term.field(), maxDoc, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), maxDoc, -1);\n      }\n     \n      this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n    }\n\n","bugFix":["0ce8de354eb40085752030725cb2bee2b0ae536c","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.stats = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n      }\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=1 and ttf=-1\n        collectionStats = new CollectionStatistics(term.field(), 1, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), 1, -1);\n      }\n     \n      if (termStats == null) {\n        this.stats = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.stats = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n      }\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=1 and ttf=-1\n        collectionStats = new CollectionStatistics(term.field(), 1, -1, -1, -1);\n        termStats = new TermStatistics(term.bytes(), 1, -1);\n      }\n     \n      if (termStats == null) {\n        this.stats = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.simScorer = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.simScorer = similarity.scorer(boost, collectionStats, termStats);\n      }\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.stats = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermStates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermStates termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.simScorer = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.simScorer = similarity.scorer(boost, collectionStats, termStats);\n      }\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.simScorer = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.simScorer = similarity.scorer(boost, collectionStats, termStats);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","sourceNew":null,"sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(needsScores);\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.stats = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.stats = similarity.computeWeight(boost, collectionStats, termStats);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","a6e9f769521480a623f897c0d59089b919fa4239"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"086ffe31d8fba0110227db122974163709ecc1b4":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"a6e9f769521480a623f897c0d59089b919fa4239":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"0ce8de354eb40085752030725cb2bee2b0ae536c":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"35d7ed691d627802acc5be44a639b67b1360467b":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","0ce8de354eb40085752030725cb2bee2b0ae536c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35d7ed691d627802acc5be44a639b67b1360467b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["35d7ed691d627802acc5be44a639b67b1360467b"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"0ce8de354eb40085752030725cb2bee2b0ae536c":["35d7ed691d627802acc5be44a639b67b1360467b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["0ce8de354eb40085752030725cb2bee2b0ae536c","35d7ed691d627802acc5be44a639b67b1360467b"],"35d7ed691d627802acc5be44a639b67b1360467b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}