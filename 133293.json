{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/NormalizeEvaluatorTest#test().mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/NormalizeEvaluatorTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws IOException {\n    \n    int[] ints = new int[]{ 3, 5, 6, 7, 8 };\n    long[] longs = new long[]{ 2L, 3L, 5L, 8L };\n    double[] doubles = new double[]{ 3.4, 4.5, 6.7 };\n    int[] singleInt = new int[]{ 6 };\n    \n    values.clear();\n    values.put(\"ints\", ints);\n    values.put(\"longs\", longs);\n    values.put(\"doubles\", doubles);\n    values.put(\"singleInt\", singleInt);\n    Tuple tuple = new Tuple(values);\n\n    assertSimilar(StatUtils.normalize(Arrays.stream(ints).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(ints)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(longs).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(longs)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(doubles), factory.constructEvaluator(\"norm(doubles)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(singleInt).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(singleInt)\").evaluate(tuple));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/NormalizeEvaluatorTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws IOException {\n    \n    int[] ints = new int[]{ 3, 5, 6, 7, 8 };\n    long[] longs = new long[]{ 2L, 3L, 5L, 8L };\n    double[] doubles = new double[]{ 3.4, 4.5, 6.7 };\n    int[] singleInt = new int[]{ 6 };\n    \n    values.clear();\n    values.put(\"ints\", ints);\n    values.put(\"longs\", longs);\n    values.put(\"doubles\", doubles);\n    values.put(\"singleInt\", singleInt);\n    Tuple tuple = new Tuple(values);\n\n    assertSimilar(StatUtils.normalize(Arrays.stream(ints).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(ints)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(longs).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(longs)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(doubles), factory.constructEvaluator(\"norm(doubles)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(singleInt).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(singleInt)\").evaluate(tuple));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/NormalizeEvaluatorTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws IOException {\n    \n    int[] ints = new int[]{ 3, 5, 6, 7, 8 };\n    long[] longs = new long[]{ 2L, 3L, 5L, 8L };\n    double[] doubles = new double[]{ 3.4, 4.5, 6.7 };\n    int[] singleInt = new int[]{ 6 };\n    \n    values.clear();\n    values.put(\"ints\", ints);\n    values.put(\"longs\", longs);\n    values.put(\"doubles\", doubles);\n    values.put(\"singleInt\", singleInt);\n    Tuple tuple = new Tuple(values);\n\n    assertSimilar(StatUtils.normalize(Arrays.stream(ints).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(ints)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(longs).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(longs)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(doubles), factory.constructEvaluator(\"norm(doubles)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(singleInt).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(singleInt)\").evaluate(tuple));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/NormalizeEvaluatorTest#test().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/NormalizeEvaluatorTest#test().mjava","sourceNew":"  @Test\n  public void test() throws IOException {\n    \n    int[] ints = new int[]{ 3, 5, 6, 7, 8 };\n    long[] longs = new long[]{ 2L, 3L, 5L, 8L };\n    double[] doubles = new double[]{ 3.4, 4.5, 6.7 };\n    int[] singleInt = new int[]{ 6 };\n    \n    values.clear();\n    values.put(\"ints\", ints);\n    values.put(\"longs\", longs);\n    values.put(\"doubles\", doubles);\n    values.put(\"singleInt\", singleInt);\n    Tuple tuple = new Tuple(values);\n\n    assertSimilar(StatUtils.normalize(Arrays.stream(ints).mapToDouble(Double::valueOf).toArray()), factory.constructEvaluator(\"norm(ints)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(longs).mapToDouble(Double::valueOf).toArray()), factory.constructEvaluator(\"norm(longs)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(doubles), factory.constructEvaluator(\"norm(doubles)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(singleInt).mapToDouble(Double::valueOf).toArray()), factory.constructEvaluator(\"norm(singleInt)\").evaluate(tuple));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws IOException {\n    \n    int[] ints = new int[]{ 3, 5, 6, 7, 8 };\n    long[] longs = new long[]{ 2L, 3L, 5L, 8L };\n    double[] doubles = new double[]{ 3.4, 4.5, 6.7 };\n    int[] singleInt = new int[]{ 6 };\n    \n    values.clear();\n    values.put(\"ints\", ints);\n    values.put(\"longs\", longs);\n    values.put(\"doubles\", doubles);\n    values.put(\"singleInt\", singleInt);\n    Tuple tuple = new Tuple(values);\n\n    assertSimilar(StatUtils.normalize(Arrays.stream(ints).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(ints)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(longs).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(longs)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(doubles), factory.constructEvaluator(\"norm(doubles)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(singleInt).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(singleInt)\").evaluate(tuple));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/NormalizeEvaluatorTest#test().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/NormalizeEvaluatorTest#test().mjava","sourceNew":"  @Test\n  public void test() throws IOException {\n    \n    int[] ints = new int[]{ 3, 5, 6, 7, 8 };\n    long[] longs = new long[]{ 2L, 3L, 5L, 8L };\n    double[] doubles = new double[]{ 3.4, 4.5, 6.7 };\n    int[] singleInt = new int[]{ 6 };\n    \n    values.clear();\n    values.put(\"ints\", ints);\n    values.put(\"longs\", longs);\n    values.put(\"doubles\", doubles);\n    values.put(\"singleInt\", singleInt);\n    Tuple tuple = new Tuple(values);\n\n    assertSimilar(StatUtils.normalize(Arrays.stream(ints).mapToDouble(Double::valueOf).toArray()), factory.constructEvaluator(\"norm(ints)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(longs).mapToDouble(Double::valueOf).toArray()), factory.constructEvaluator(\"norm(longs)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(doubles), factory.constructEvaluator(\"norm(doubles)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(singleInt).mapToDouble(Double::valueOf).toArray()), factory.constructEvaluator(\"norm(singleInt)\").evaluate(tuple));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws IOException {\n    \n    int[] ints = new int[]{ 3, 5, 6, 7, 8 };\n    long[] longs = new long[]{ 2L, 3L, 5L, 8L };\n    double[] doubles = new double[]{ 3.4, 4.5, 6.7 };\n    int[] singleInt = new int[]{ 6 };\n    \n    values.clear();\n    values.put(\"ints\", ints);\n    values.put(\"longs\", longs);\n    values.put(\"doubles\", doubles);\n    values.put(\"singleInt\", singleInt);\n    Tuple tuple = new Tuple(values);\n\n    assertSimilar(StatUtils.normalize(Arrays.stream(ints).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(ints)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(longs).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(longs)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(doubles), factory.constructEvaluator(\"norm(doubles)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(singleInt).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(singleInt)\").evaluate(tuple));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/NormalizeEvaluatorTest#test().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/NormalizeEvaluatorTest#test().mjava","sourceNew":"  @Test\n  public void test() throws IOException {\n    \n    int[] ints = new int[]{ 3, 5, 6, 7, 8 };\n    long[] longs = new long[]{ 2L, 3L, 5L, 8L };\n    double[] doubles = new double[]{ 3.4, 4.5, 6.7 };\n    int[] singleInt = new int[]{ 6 };\n    \n    values.clear();\n    values.put(\"ints\", ints);\n    values.put(\"longs\", longs);\n    values.put(\"doubles\", doubles);\n    values.put(\"singleInt\", singleInt);\n    Tuple tuple = new Tuple(values);\n\n    assertSimilar(StatUtils.normalize(Arrays.stream(ints).mapToDouble(Double::valueOf).toArray()), factory.constructEvaluator(\"norm(ints)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(longs).mapToDouble(Double::valueOf).toArray()), factory.constructEvaluator(\"norm(longs)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(doubles), factory.constructEvaluator(\"norm(doubles)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(singleInt).mapToDouble(Double::valueOf).toArray()), factory.constructEvaluator(\"norm(singleInt)\").evaluate(tuple));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws IOException {\n    \n    int[] ints = new int[]{ 3, 5, 6, 7, 8 };\n    long[] longs = new long[]{ 2L, 3L, 5L, 8L };\n    double[] doubles = new double[]{ 3.4, 4.5, 6.7 };\n    int[] singleInt = new int[]{ 6 };\n    \n    values.clear();\n    values.put(\"ints\", ints);\n    values.put(\"longs\", longs);\n    values.put(\"doubles\", doubles);\n    values.put(\"singleInt\", singleInt);\n    Tuple tuple = new Tuple(values);\n\n    assertSimilar(StatUtils.normalize(Arrays.stream(ints).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(ints)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(longs).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(longs)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(doubles), factory.constructEvaluator(\"norm(doubles)\").evaluate(tuple));\n    assertSimilar(StatUtils.normalize(Arrays.stream(singleInt).mapToDouble(Double::new).toArray()), factory.constructEvaluator(\"norm(singleInt)\").evaluate(tuple));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}