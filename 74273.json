{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedMultiTermQuery().mjava","commits":[{"id":"d7794d602bf46c88ffe5e063c033ce2fbbb7cb97","date":1492643011,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedMultiTermQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedMultiTermQuery(List[String]).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedMultiTermQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getMultiTermQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n        if (makeDismax) {\n          Query firstQuery = lst.get(0);\n          if ((firstQuery instanceof BooleanQuery\n              || (firstQuery instanceof BoostQuery && ((BoostQuery)firstQuery).getQuery() instanceof BooleanQuery))\n              && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            BooleanQuery firstBooleanQuery = firstQuery instanceof BoostQuery\n                ? (BooleanQuery)((BoostQuery)firstQuery).getQuery() : (BooleanQuery)firstQuery;\n            for (int c = 0 ; c < firstBooleanQuery.clauses().size() ; ++c) {\n              subs.clear();\n              // Make a dismax query for each clause position in the boolean per-field queries.\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                if (lst.get(n) instanceof BoostQuery) {\n                  BoostQuery boostQuery = (BoostQuery)lst.get(n);\n                  BooleanQuery booleanQuery = (BooleanQuery)boostQuery.getQuery();\n                  subs.add(new BoostQuery(booleanQuery.clauses().get(c).getQuery(), boostQuery.getBoost()));\n                } else {\n                  subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n                }\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return q.build();\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedMultiTermQuery(List<String> queryTerms) throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n        if (makeDismax) {\n          if (lst.get(0) instanceof BooleanQuery && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            for (int c = 0 ; c < ((BooleanQuery)lst.get(0)).clauses().size() ; ++c) {\n              subs.clear();\n              // Make a dismax query for each clause position in the boolean per-field queries.\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return q.build();\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedMultiTermQuery().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedMultiTermQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getMultiTermQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n        if (makeDismax) {\n          Query firstQuery = lst.get(0);\n          if ((firstQuery instanceof BooleanQuery\n              || (firstQuery instanceof BoostQuery && ((BoostQuery)firstQuery).getQuery() instanceof BooleanQuery))\n              && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            BooleanQuery firstBooleanQuery = firstQuery instanceof BoostQuery\n                ? (BooleanQuery)((BoostQuery)firstQuery).getQuery() : (BooleanQuery)firstQuery;\n            for (int c = 0 ; c < firstBooleanQuery.clauses().size() ; ++c) {\n              subs.clear();\n              // Make a dismax query for each clause position in the boolean per-field queries.\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                if (lst.get(n) instanceof BoostQuery) {\n                  BoostQuery boostQuery = (BoostQuery)lst.get(n);\n                  BooleanQuery booleanQuery = (BooleanQuery)boostQuery.getQuery();\n                  subs.add(new BoostQuery(booleanQuery.clauses().get(c).getQuery(), boostQuery.getBoost()));\n                } else {\n                  subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n                }\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return q.build();\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39fdbc59d893f5a211736e861fe145798a40b9ff","date":1498161919,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedMultiTermQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedMultiTermQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedMultiTermQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getMultiTermQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n        if (makeDismax) {\n          Query firstQuery = lst.get(0);\n          if ((firstQuery instanceof BooleanQuery\n              || (firstQuery instanceof BoostQuery && ((BoostQuery)firstQuery).getQuery() instanceof BooleanQuery))\n              && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            BooleanQuery firstBooleanQuery = firstQuery instanceof BoostQuery\n                ? (BooleanQuery)((BoostQuery)firstQuery).getQuery() : (BooleanQuery)firstQuery;\n            for (int c = 0 ; c < firstBooleanQuery.clauses().size() ; ++c) {\n              subs.clear();\n              // Make a dismax query for each clause position in the boolean per-field queries.\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                if (lst.get(n) instanceof BoostQuery) {\n                  BoostQuery boostQuery = (BoostQuery)lst.get(n);\n                  BooleanQuery booleanQuery = (BooleanQuery)boostQuery.getQuery();\n                  subs.add(new BoostQuery(booleanQuery.clauses().get(c).getQuery(), boostQuery.getBoost()));\n                } else {\n                  subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n                }\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return QueryUtils.build(q, parser);\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return QueryUtils.build(q, parser);\n        }\n      } else {\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedMultiTermQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getMultiTermQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n        if (makeDismax) {\n          Query firstQuery = lst.get(0);\n          if ((firstQuery instanceof BooleanQuery\n              || (firstQuery instanceof BoostQuery && ((BoostQuery)firstQuery).getQuery() instanceof BooleanQuery))\n              && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            BooleanQuery firstBooleanQuery = firstQuery instanceof BoostQuery\n                ? (BooleanQuery)((BoostQuery)firstQuery).getQuery() : (BooleanQuery)firstQuery;\n            for (int c = 0 ; c < firstBooleanQuery.clauses().size() ; ++c) {\n              subs.clear();\n              // Make a dismax query for each clause position in the boolean per-field queries.\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                if (lst.get(n) instanceof BoostQuery) {\n                  BoostQuery boostQuery = (BoostQuery)lst.get(n);\n                  BooleanQuery booleanQuery = (BooleanQuery)boostQuery.getQuery();\n                  subs.add(new BoostQuery(booleanQuery.clauses().get(c).getQuery(), boostQuery.getBoost()));\n                } else {\n                  subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n                }\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return q.build();\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedMultiTermQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedMultiTermQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedMultiTermQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getMultiTermQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n        if (makeDismax) {\n          Query firstQuery = lst.get(0);\n          if ((firstQuery instanceof BooleanQuery\n              || (firstQuery instanceof BoostQuery && ((BoostQuery)firstQuery).getQuery() instanceof BooleanQuery))\n              && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            BooleanQuery firstBooleanQuery = firstQuery instanceof BoostQuery\n                ? (BooleanQuery)((BoostQuery)firstQuery).getQuery() : (BooleanQuery)firstQuery;\n            for (int c = 0 ; c < firstBooleanQuery.clauses().size() ; ++c) {\n              subs.clear();\n              // Make a dismax query for each clause position in the boolean per-field queries.\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                if (lst.get(n) instanceof BoostQuery) {\n                  BoostQuery boostQuery = (BoostQuery)lst.get(n);\n                  BooleanQuery booleanQuery = (BooleanQuery)boostQuery.getQuery();\n                  subs.add(new BoostQuery(booleanQuery.clauses().get(c).getQuery(), boostQuery.getBoost()));\n                } else {\n                  subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n                }\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return QueryUtils.build(q, parser);\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return QueryUtils.build(q, parser);\n        }\n      } else {\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedMultiTermQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getMultiTermQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n        if (makeDismax) {\n          Query firstQuery = lst.get(0);\n          if ((firstQuery instanceof BooleanQuery\n              || (firstQuery instanceof BoostQuery && ((BoostQuery)firstQuery).getQuery() instanceof BooleanQuery))\n              && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            BooleanQuery firstBooleanQuery = firstQuery instanceof BoostQuery\n                ? (BooleanQuery)((BoostQuery)firstQuery).getQuery() : (BooleanQuery)firstQuery;\n            for (int c = 0 ; c < firstBooleanQuery.clauses().size() ; ++c) {\n              subs.clear();\n              // Make a dismax query for each clause position in the boolean per-field queries.\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                if (lst.get(n) instanceof BoostQuery) {\n                  BoostQuery boostQuery = (BoostQuery)lst.get(n);\n                  BooleanQuery booleanQuery = (BooleanQuery)boostQuery.getQuery();\n                  subs.add(new BoostQuery(booleanQuery.clauses().get(c).getQuery(), boostQuery.getBoost()));\n                } else {\n                  subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n                }\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return q.build();\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedMultiTermQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getAliasedMultiTermQuery().mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedMultiTermQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getMultiTermQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n        if (makeDismax) {\n          Query firstQuery = lst.get(0);\n          if ((firstQuery instanceof BooleanQuery\n              || (firstQuery instanceof BoostQuery && ((BoostQuery)firstQuery).getQuery() instanceof BooleanQuery))\n              && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            BooleanQuery firstBooleanQuery = firstQuery instanceof BoostQuery\n                ? (BooleanQuery)((BoostQuery)firstQuery).getQuery() : (BooleanQuery)firstQuery;\n            for (int c = 0 ; c < firstBooleanQuery.clauses().size() ; ++c) {\n              subs.clear();\n              // Make a dismax query for each clause position in the boolean per-field queries.\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                if (lst.get(n) instanceof BoostQuery) {\n                  BoostQuery boostQuery = (BoostQuery)lst.get(n);\n                  BooleanQuery booleanQuery = (BooleanQuery)boostQuery.getQuery();\n                  subs.add(new BoostQuery(booleanQuery.clauses().get(c).getQuery(), boostQuery.getBoost()));\n                } else {\n                  subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n                }\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return QueryUtils.build(q, parser);\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return QueryUtils.build(q, parser);\n        }\n      } else {\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    protected Query getAliasedMultiTermQuery() throws SyntaxError {\n      Alias a = aliases.get(field);\n      this.validateCyclicAliasing(field);\n      if (a != null) {\n        List<Query> lst = getMultiTermQueries(a);\n        if (lst == null || lst.size() == 0) {\n          return getQuery();\n        }\n        \n        // make a DisjunctionMaxQuery in this case too... it will stop\n        // the \"mm\" processing from making everything required in the case\n        // that the query expanded to multiple clauses.\n        // DisMaxQuery.rewrite() removes itself if there is just a single clause anyway.\n        // if (lst.size()==1) return lst.get(0);\n        if (makeDismax) {\n          Query firstQuery = lst.get(0);\n          if ((firstQuery instanceof BooleanQuery\n              || (firstQuery instanceof BoostQuery && ((BoostQuery)firstQuery).getQuery() instanceof BooleanQuery))\n              && allSameQueryStructure(lst)) {\n            BooleanQuery.Builder q = new BooleanQuery.Builder();\n            List<Query> subs = new ArrayList<>(lst.size());\n            BooleanQuery firstBooleanQuery = firstQuery instanceof BoostQuery\n                ? (BooleanQuery)((BoostQuery)firstQuery).getQuery() : (BooleanQuery)firstQuery;\n            for (int c = 0 ; c < firstBooleanQuery.clauses().size() ; ++c) {\n              subs.clear();\n              // Make a dismax query for each clause position in the boolean per-field queries.\n              for (int n = 0 ; n < lst.size() ; ++n) {\n                if (lst.get(n) instanceof BoostQuery) {\n                  BoostQuery boostQuery = (BoostQuery)lst.get(n);\n                  BooleanQuery booleanQuery = (BooleanQuery)boostQuery.getQuery();\n                  subs.add(new BoostQuery(booleanQuery.clauses().get(c).getQuery(), boostQuery.getBoost()));\n                } else {\n                  subs.add(((BooleanQuery)lst.get(n)).clauses().get(c).getQuery());\n                }\n              }\n              q.add(newBooleanClause(new DisjunctionMaxQuery(subs, a.tie), BooleanClause.Occur.SHOULD));\n            }\n            return q.build();\n          } else {\n            return new DisjunctionMaxQuery(lst, a.tie); \n          }\n        } else {\n          BooleanQuery.Builder q = new BooleanQuery.Builder();\n          for (Query sub : lst) {\n            q.add(sub, BooleanClause.Occur.SHOULD);\n          }\n          return q.build();\n        }\n      } else {\n        // verify that a fielded query is actually on a field that exists... if not,\n        // then throw an exception to get us out of here, and we'll treat it like a\n        // literal when we try the escape+re-parse.\n        if (exceptions) {\n          FieldType ft = schema.getFieldTypeNoEx(field);\n          if (ft == null && null == MagicFieldName.get(field)) {\n            throw unknownField;\n          }\n        }\n        return getQuery();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d7794d602bf46c88ffe5e063c033ce2fbbb7cb97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39fdbc59d893f5a211736e861fe145798a40b9ff":["d7794d602bf46c88ffe5e063c033ce2fbbb7cb97"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","39fdbc59d893f5a211736e861fe145798a40b9ff"],"28288370235ed02234a64753cdbf0c6ec096304a":["d7794d602bf46c88ffe5e063c033ce2fbbb7cb97","39fdbc59d893f5a211736e861fe145798a40b9ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"d7794d602bf46c88ffe5e063c033ce2fbbb7cb97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","d7794d602bf46c88ffe5e063c033ce2fbbb7cb97"],"39fdbc59d893f5a211736e861fe145798a40b9ff":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7794d602bf46c88ffe5e063c033ce2fbbb7cb97":["e9017cf144952056066919f1ebc7897ff9bd71b1","39fdbc59d893f5a211736e861fe145798a40b9ff","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}