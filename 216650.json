{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testArray().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testArray().mjava","sourceNew":"  @Test\n  public void testArray() throws Exception {\n    String cexpr = \"array(1, 2, 3, 300, 2, 500)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).intValue() == 1);\n    assertTrue(out.get(1).intValue() == 2);\n    assertTrue(out.get(2).intValue() == 3);\n    assertTrue(out.get(3).intValue() == 300);\n    assertTrue(out.get(4).intValue() == 2);\n    assertTrue(out.get(5).intValue() == 500);\n\n    cexpr = \"array(1.122, 2.222, 3.333, 300.1, 2.13, 500.23)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).doubleValue() == 1.122D);\n    assertTrue(out.get(1).doubleValue() == 2.222D);\n    assertTrue(out.get(2).doubleValue() == 3.333D);\n    assertTrue(out.get(3).doubleValue() == 300.1D);\n    assertTrue(out.get(4).doubleValue() == 2.13D);\n    assertTrue(out.get(5).doubleValue() == 500.23D);\n  }\n\n","sourceOld":"  @Test\n  public void testArray() throws Exception {\n    String cexpr = \"array(1, 2, 3, 300, 2, 500)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).intValue() == 1);\n    assertTrue(out.get(1).intValue() == 2);\n    assertTrue(out.get(2).intValue() == 3);\n    assertTrue(out.get(3).intValue() == 300);\n    assertTrue(out.get(4).intValue() == 2);\n    assertTrue(out.get(5).intValue() == 500);\n\n    cexpr = \"array(1.122, 2.222, 3.333, 300.1, 2.13, 500.23)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).doubleValue() == 1.122D);\n    assertTrue(out.get(1).doubleValue() == 2.222D);\n    assertTrue(out.get(2).doubleValue() == 3.333D);\n    assertTrue(out.get(3).doubleValue() == 300.1D);\n    assertTrue(out.get(4).doubleValue() == 2.13D);\n    assertTrue(out.get(5).doubleValue() == 500.23D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testArray().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testArray() throws Exception {\n    String cexpr = \"array(1, 2, 3, 300, 2, 500)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).intValue() == 1);\n    assertTrue(out.get(1).intValue() == 2);\n    assertTrue(out.get(2).intValue() == 3);\n    assertTrue(out.get(3).intValue() == 300);\n    assertTrue(out.get(4).intValue() == 2);\n    assertTrue(out.get(5).intValue() == 500);\n\n    cexpr = \"array(1.122, 2.222, 3.333, 300.1, 2.13, 500.23)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).doubleValue() == 1.122D);\n    assertTrue(out.get(1).doubleValue() == 2.222D);\n    assertTrue(out.get(2).doubleValue() == 3.333D);\n    assertTrue(out.get(3).doubleValue() == 300.1D);\n    assertTrue(out.get(4).doubleValue() == 2.13D);\n    assertTrue(out.get(5).doubleValue() == 500.23D);\n  }\n\n","sourceOld":"  @Test\n  public void testArray() throws Exception {\n    String cexpr = \"array(1, 2, 3, 300, 2, 500)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).intValue() == 1);\n    assertTrue(out.get(1).intValue() == 2);\n    assertTrue(out.get(2).intValue() == 3);\n    assertTrue(out.get(3).intValue() == 300);\n    assertTrue(out.get(4).intValue() == 2);\n    assertTrue(out.get(5).intValue() == 500);\n\n    cexpr = \"array(1.122, 2.222, 3.333, 300.1, 2.13, 500.23)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size() == 6);\n    assertTrue(out.get(0).doubleValue() == 1.122D);\n    assertTrue(out.get(1).doubleValue() == 2.222D);\n    assertTrue(out.get(2).doubleValue() == 3.333D);\n    assertTrue(out.get(3).doubleValue() == 300.1D);\n    assertTrue(out.get(4).doubleValue() == 2.13D);\n    assertTrue(out.get(5).doubleValue() == 500.23D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}