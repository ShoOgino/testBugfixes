{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"25833e37398c5210d7bddaca9d14de45e194439a","date":1294165371,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n        \n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n        \n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n        \n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n        \n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(reader, query.field);\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n        \n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.fastSet(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.fastGet(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25833e37398c5210d7bddaca9d14de45e194439a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["25833e37398c5210d7bddaca9d14de45e194439a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25833e37398c5210d7bddaca9d14de45e194439a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","25833e37398c5210d7bddaca9d14de45e194439a"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25833e37398c5210d7bddaca9d14de45e194439a":["70ad682703b8585f5d0a637efec044d57ec05efb","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}