{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(DistribStateManager,String).mjava","commits":[{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(DistribStateManager,String).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<String, Object> getJson(DistribStateManager distribStateManager, String path) throws InterruptedException, IOException, KeeperException {\n    VersionedData data = null;\n    try {\n      data = distribStateManager.getData(path);\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    if (data == null || data.getData() == null || data.getData().length == 0) return Collections.emptyMap();\n    return (Map<String, Object>) Utils.fromJSON(data.getData());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(DistribStateManager,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(DistribStateManager,String).mjava","sourceNew":"  public static Map<String, Object> getJson(DistribStateManager distribStateManager, String path) throws InterruptedException, IOException, KeeperException {\n    VersionedData data = null;\n    try {\n      data = distribStateManager.getData(path);\n    } catch (KeeperException.NoNodeException | NoSuchElementException e) {\n      return Collections.emptyMap();\n    }\n    if (data == null || data.getData() == null || data.getData().length == 0) return Collections.emptyMap();\n    return (Map<String, Object>) Utils.fromJSON(data.getData());\n  }\n\n","sourceOld":"  public static Map<String, Object> getJson(DistribStateManager distribStateManager, String path) throws InterruptedException, IOException, KeeperException {\n    VersionedData data = null;\n    try {\n      data = distribStateManager.getData(path);\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    }\n    if (data == null || data.getData() == null || data.getData().length == 0) return Collections.emptyMap();\n    return (Map<String, Object>) Utils.fromJSON(data.getData());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(DistribStateManager,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getJson(DistribStateManager,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static Map<String, Object> getJson(DistribStateManager distribStateManager, String path) throws InterruptedException, IOException, KeeperException {\n    VersionedData data = null;\n    try {\n      data = distribStateManager.getData(path);\n    } catch (KeeperException.NoNodeException | NoSuchElementException e) {\n      return Collections.emptyMap();\n    }\n    if (data == null || data.getData() == null || data.getData().length == 0) return Collections.emptyMap();\n    return (Map<String, Object>) Utils.fromJSON(data.getData());\n  }\n\n","sourceOld":"  public static Map<String, Object> getJson(DistribStateManager distribStateManager, String path) throws InterruptedException, IOException, KeeperException {\n    VersionedData data = null;\n    try {\n      data = distribStateManager.getData(path);\n    } catch (KeeperException.NoNodeException | NoSuchElementException e) {\n      return Collections.emptyMap();\n    }\n    if (data == null || data.getData() == null || data.getData().length == 0) return Collections.emptyMap();\n    return (Map<String, Object>) Utils.fromJSON(data.getData());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}