{"path":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Path,XmlConfigFile).mjava","commits":[{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Path,XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(XmlConfigFile).mjava","sourceNew":"  public static NodeConfig fromConfig(Path solrHome, XmlConfigFile config) {\n\n    checkForIllegalConfig(config);\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, solrHome);\n    configBuilder.setSolrResourceLoader(config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setTracerConfig(getTracerPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricsConfig(getMetricsConfig(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(XmlConfigFile config) {\n\n    checkForIllegalConfig(config);\n\n    config.substituteProperties();\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setTracerConfig(getTracerPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricsConfig(getMetricsConfig(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4ad7cb63f081454a1fa1e599d1cac95034f0b8","date":1584125777,"type":5,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Path,XmlConfigFile,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#fromConfig(Path,XmlConfigFile).mjava","sourceNew":"  public static NodeConfig fromConfig(Path solrHome, XmlConfigFile config, boolean fromZookeeper) {\n\n    checkForIllegalConfig(config);\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, solrHome);\n    configBuilder.setSolrResourceLoader(config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setTracerConfig(getTracerPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricsConfig(getMetricsConfig(config));\n    configBuilder.setFromZookeeper(fromZookeeper);\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","sourceOld":"  public static NodeConfig fromConfig(Path solrHome, XmlConfigFile config) {\n\n    checkForIllegalConfig(config);\n\n    CloudConfig cloudConfig = null;\n    UpdateShardHandlerConfig deprecatedUpdateConfig = null;\n\n    if (config.getNodeList(\"solr/solrcloud\", false).getLength() > 0) {\n      NamedList<Object> cloudSection = readNodeListAsNamedList(config, \"solr/solrcloud/*[@name]\", \"<solrcloud>\");\n      deprecatedUpdateConfig = loadUpdateConfig(cloudSection, false);\n      cloudConfig = fillSolrCloudSection(cloudSection);\n    }\n\n    NamedList<Object> entries = readNodeListAsNamedList(config, \"solr/*[@name]\", \"<solr>\");\n    String nodeName = (String) entries.remove(\"nodeName\");\n    if (Strings.isNullOrEmpty(nodeName) && cloudConfig != null)\n      nodeName = cloudConfig.getHost();\n\n    UpdateShardHandlerConfig updateConfig;\n    if (deprecatedUpdateConfig == null) {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), true);\n    }\n    else {\n      updateConfig = loadUpdateConfig(readNodeListAsNamedList(config, \"solr/updateshardhandler/*[@name]\", \"<updateshardhandler>\"), false);\n      if (updateConfig != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"UpdateShardHandler configuration defined twice in solr.xml\");\n      }\n      updateConfig = deprecatedUpdateConfig;\n    }\n\n    NodeConfig.NodeConfigBuilder configBuilder = new NodeConfig.NodeConfigBuilder(nodeName, solrHome);\n    configBuilder.setSolrResourceLoader(config.getResourceLoader());\n    configBuilder.setUpdateShardHandlerConfig(updateConfig);\n    configBuilder.setShardHandlerFactoryConfig(getShardHandlerFactoryPluginInfo(config));\n    configBuilder.setSolrCoreCacheFactoryConfig(getTransientCoreCacheFactoryPluginInfo(config));\n    configBuilder.setTracerConfig(getTracerPluginInfo(config));\n    configBuilder.setLogWatcherConfig(loadLogWatcherConfig(config, \"solr/logging/*[@name]\", \"solr/logging/watcher/*[@name]\"));\n    configBuilder.setSolrProperties(loadProperties(config));\n    if (cloudConfig != null)\n      configBuilder.setCloudConfig(cloudConfig);\n    configBuilder.setBackupRepositoryPlugins(getBackupRepositoryPluginInfos(config));\n    configBuilder.setMetricsConfig(getMetricsConfig(config));\n    return fillSolrSection(configBuilder, entries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4ad7cb63f081454a1fa1e599d1cac95034f0b8":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff4ad7cb63f081454a1fa1e599d1cac95034f0b8"]},"commit2Childs":{"ff4ad7cb63f081454a1fa1e599d1cac95034f0b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["ff4ad7cb63f081454a1fa1e599d1cac95034f0b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}