{"path":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","commits":[{"id":"d3d6229c48c0cbc7849950f7a240f07739812b2f","date":1199345558,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n\n    RAMDirectory ram = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ram, new StandardAnalyzer(), true);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(ram);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n\n    RAMDirectory ram = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ram, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(ram);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n\n    RAMDirectory ram = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ram, new StandardAnalyzer(), true);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(ram);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n\n    RAMDirectory ram = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ram, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    IndexReader reader = IndexReader.open(ram);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n\n    RAMDirectory ram = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ram, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(ram);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    RAMDirectory ram = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ram, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    IndexReader reader = IndexReader.open(ram);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.UN_TOKENIZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.UN_TOKENIZED, TermVector.NO));\n\n    RAMDirectory ram = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ram, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    IndexReader reader = IndexReader.open(ram);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42f6b4065cdaf7d1be530c926dc327494bee4ffa","date":1239273470,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    RAMDirectory ram = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ram, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    IndexReader reader = IndexReader.open(ram);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":["5350389bf83287111f7760b9e3db3af8e3648474","d3d6229c48c0cbc7849950f7a240f07739812b2f","0018e7a0579df5d3de71d0bd878322a7abef04d9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testMixedTermVectorSettingsSameField().mjava","sourceNew":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","sourceOld":"  /**\n   * Test adding two fields with the same name, but \n   * with different term vector setting (LUCENE-766).\n   */\n  public void testMixedTermVectorSettingsSameField() throws Exception {\n    Document doc = new Document();\n    // f1 first without tv then with tv\n    doc.add(new Field(\"f1\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n    doc.add(new Field(\"f1\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    // f2 first with tv then without tv\n    doc.add(new Field(\"f2\", \"v1\", Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"f2\", \"v2\", Store.YES, Index.NOT_ANALYZED, TermVector.NO));\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    _TestUtil.checkIndex(dir);\n\n    IndexReader reader = IndexReader.open(dir, true);\n    // f1\n    TermFreqVector tfv1 = reader.getTermFreqVector(0, \"f1\");\n    assertNotNull(tfv1);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv1.getTerms().length);\n    // f2\n    TermFreqVector tfv2 = reader.getTermFreqVector(0, \"f2\");\n    assertNotNull(tfv2);\n    assertEquals(\"the 'with_tv' setting should rule!\",2,tfv2.getTerms().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["42f6b4065cdaf7d1be530c926dc327494bee4ffa","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5350389bf83287111f7760b9e3db3af8e3648474"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["d3d6229c48c0cbc7849950f7a240f07739812b2f"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"5350389bf83287111f7760b9e3db3af8e3648474":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"d3d6229c48c0cbc7849950f7a240f07739812b2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["42f6b4065cdaf7d1be530c926dc327494bee4ffa"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5350389bf83287111f7760b9e3db3af8e3648474"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"42f6b4065cdaf7d1be530c926dc327494bee4ffa":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3d6229c48c0cbc7849950f7a240f07739812b2f"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"5350389bf83287111f7760b9e3db3af8e3648474":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"d3d6229c48c0cbc7849950f7a240f07739812b2f":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}