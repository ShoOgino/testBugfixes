{"path":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","sourceNew":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","sourceOld":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","sourceNew":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","sourceOld":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","sourceNew":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","sourceOld":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), psdp));\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a207624ce3e468bca1819861084438d936e3b1c","date":1367514967,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","sourceNew":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots);\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n      fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n     fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n    \n    // Reading the snapshots info should succeed though\n    Map<String, String> snapshots = PersistentSnapshotDeletionPolicy.readSnapshotsInfo(snapshotDir);\n    assertEquals(\"expected \" + numSnapshots + \" snapshots, got \" + snapshots.size(), numSnapshots, snapshots.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dce99db8590cdd065839ae4e6b228b66eeee8f38","date":1367579599,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testStaticRead().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testStaticRead() throws Exception {\n    // While PSDP is open, it keeps a lock on the snapshots directory and thus\n    // prevents reading the snapshots information. This test checks that the \n    // static read method works.\n    int numSnapshots = 1;\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(psdp, writer, numSnapshots);\n    writer.close();\n    dir.close();\n    \n    try {\n      // This should fail, since the snapshots directory is locked - we didn't close it !\n      new PersistentSnapshotDeletionPolicy(\n          new KeepOnlyLastCommitDeletionPolicy(), snapshotDir, OpenMode.APPEND,\n          TEST_VERSION_CURRENT);\n      fail(\"should not have reached here - the snapshots directory should be locked!\");\n    } catch (LockObtainFailedException e) {\n      // expected\n    } finally {\n      psdp.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["8a207624ce3e468bca1819861084438d936e3b1c"],"8a207624ce3e468bca1819861084438d936e3b1c":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dce99db8590cdd065839ae4e6b228b66eeee8f38"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["8a207624ce3e468bca1819861084438d936e3b1c"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a207624ce3e468bca1819861084438d936e3b1c":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}