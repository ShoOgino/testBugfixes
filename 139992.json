{"path":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = newFSDirectory(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = newFSDirectory(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      dir1.close();\n      dir2.close();\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = newFSDirectory(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = newFSDirectory(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      dir1.close();\n      dir2.close();\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = newFSDirectory(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = newFSDirectory(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      dir1.close();\n      dir2.close();\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = newFSDirectory(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = newFSDirectory(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      dir1.close();\n      dir2.close();\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = newFSDirectory(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = newFSDirectory(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      dir1.close();\n      dir2.close();\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9454a6510e2db155fb01faa5c049b06ece95fab9","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}