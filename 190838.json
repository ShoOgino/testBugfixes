{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(JettySolrRunner).mjava","commits":[{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(JettySolrRunner).mjava","pathOld":"/dev/null","sourceNew":"  public static void kill(JettySolrRunner jetty) throws Exception {\n    FilterHolder filterHolder = jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          int zklocalport = ((InetSocketAddress) cores.getZkController()\n              .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n          IpTables.blockPort(zklocalport);\n        }\n      }\n    }\n\n    IpTables.blockPort(jetty.getLocalPort());\n    \n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(JettySolrRunner).mjava","sourceNew":"  public static void kill(JettySolrRunner jetty) throws Exception {\n    FilterHolder filterHolder = jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          if (cores.isZooKeeperAware()) {\n            int zklocalport = ((InetSocketAddress) cores.getZkController()\n                .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n            IpTables.blockPort(zklocalport);\n          }\n        }\n      }\n    }\n\n    IpTables.blockPort(jetty.getLocalPort());\n    \n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":"  public static void kill(JettySolrRunner jetty) throws Exception {\n    FilterHolder filterHolder = jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          int zklocalport = ((InetSocketAddress) cores.getZkController()\n              .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n          IpTables.blockPort(zklocalport);\n        }\n      }\n    }\n\n    IpTables.blockPort(jetty.getLocalPort());\n    \n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(JettySolrRunner).mjava","sourceNew":"  public static void kill(JettySolrRunner jetty) throws Exception {\n\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.blockPort(zklocalport);\n      }\n    }\n\n    IpTables.blockPort(jetty.getLocalPort());\n    \n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":"  public static void kill(JettySolrRunner jetty) throws Exception {\n    FilterHolder filterHolder = jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          if (cores.isZooKeeperAware()) {\n            int zklocalport = ((InetSocketAddress) cores.getZkController()\n                .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n            IpTables.blockPort(zklocalport);\n          }\n        }\n      }\n    }\n\n    IpTables.blockPort(jetty.getLocalPort());\n    \n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(JettySolrRunner).mjava","sourceNew":"  public static void kill(JettySolrRunner jetty) throws Exception {\n\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.blockPort(zklocalport);\n      }\n    }\n\n    IpTables.blockPort(jetty.getLocalPort());\n    \n    monkeyLog(\"kill jetty! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":"  public static void kill(JettySolrRunner jetty) throws Exception {\n\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.blockPort(zklocalport);\n      }\n    }\n\n    IpTables.blockPort(jetty.getLocalPort());\n    \n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(JettySolrRunner).mjava","sourceNew":"  public static void kill(JettySolrRunner jetty) throws Exception {\n\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.blockPort(zklocalport);\n      }\n    }\n\n    IpTables.blockPort(jetty.getLocalPort());\n    \n    monkeyLog(\"kill jetty! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","sourceOld":"  public static void kill(JettySolrRunner jetty) throws Exception {\n\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.blockPort(zklocalport);\n      }\n    }\n\n    IpTables.blockPort(jetty.getLocalPort());\n    \n    monkeyLog(\"kill shard! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#kill(JettySolrRunner).mjava","sourceNew":null,"sourceOld":"  public static void kill(JettySolrRunner jetty) throws Exception {\n\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.blockPort(zklocalport);\n      }\n    }\n\n    IpTables.blockPort(jetty.getLocalPort());\n    \n    monkeyLog(\"kill jetty! \" + jetty.getLocalPort());\n    \n    jetty.stop();\n    \n    stop(jetty);\n    \n    if (!jetty.isStopped()) {\n      throw new RuntimeException(\"could not kill jetty\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["1088b72b3b4cc45316b7595bd09023c859cd2327","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["61c45e99cf6676da48f19d7511c73712ad39402b"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}