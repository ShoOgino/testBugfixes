{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#verifyPolygon(PlanetModel,Polygon,GeoPolygon).mjava","commits":[{"id":"01f1a345a808c3a24ce12b4540ab4847c0dac9b0","date":1459948931,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#verifyPolygon(PlanetModel,Polygon,GeoPolygon).mjava","pathOld":"/dev/null","sourceNew":"  protected static boolean verifyPolygon(final PlanetModel pm, final Polygon polygon, final GeoPolygon outsidePolygon) {\n    // Each point in the new poly should be inside the outside poly, and each edge should not intersect the outside poly edge\n    final double[] lats = polygon.getPolyLats();\n    final double[] lons = polygon.getPolyLons();\n    final List<GeoPoint> polyPoints = new ArrayList<>(lats.length-1);\n    for (int i = 0; i < lats.length - 1; i++) {\n      final GeoPoint newPoint = new GeoPoint(pm, Math.toRadians(lats[i]), Math.toRadians(lons[i]));\n      if (!outsidePolygon.isWithin(newPoint)) {\n        return false;\n      }\n      polyPoints.add(newPoint);\n    }\n    // We don't need to construct the world to find intersections -- just the bordering planes. \n    for (int planeIndex = 0; planeIndex < polyPoints.size(); planeIndex++) {\n      final GeoPoint startPoint = polyPoints.get(planeIndex);\n      final GeoPoint endPoint = polyPoints.get(legalIndex(planeIndex + 1, polyPoints.size()));\n      final GeoPoint beforeStartPoint = polyPoints.get(legalIndex(planeIndex - 1, polyPoints.size()));\n      final GeoPoint afterEndPoint = polyPoints.get(legalIndex(planeIndex + 2, polyPoints.size()));\n      final SidedPlane beforePlane = new SidedPlane(endPoint, beforeStartPoint, startPoint);\n      final SidedPlane afterPlane = new SidedPlane(startPoint, endPoint, afterEndPoint);\n      final Plane plane = new Plane(startPoint, endPoint);\n      \n      // Check for intersections!!\n      if (outsidePolygon.intersects(plane, null, beforePlane, afterPlane)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6edf4e73fba5b40b042f1f2dda5752e95a10b393","date":1460279472,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#verifyPolygon(PlanetModel,Polygon,GeoPolygon).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#verifyPolygon(PlanetModel,Polygon,GeoPolygon).mjava","sourceNew":"  protected static boolean verifyPolygon(final PlanetModel pm, final Polygon polygon, final GeoPolygon outsidePolygon) {\n    // Each point in the new poly should be inside the outside poly, and each edge should not intersect the outside poly edge\n    final double[] lats = polygon.getPolyLats();\n    final double[] lons = polygon.getPolyLons();\n    final List<GeoPoint> polyPoints = new ArrayList<>(lats.length-1);\n    for (int i = 0; i < lats.length - 1; i++) {\n      final GeoPoint newPoint = new GeoPoint(pm, toRadians(lats[i]), toRadians(lons[i]));\n      if (!outsidePolygon.isWithin(newPoint)) {\n        return false;\n      }\n      polyPoints.add(newPoint);\n    }\n    // We don't need to construct the world to find intersections -- just the bordering planes. \n    for (int planeIndex = 0; planeIndex < polyPoints.size(); planeIndex++) {\n      final GeoPoint startPoint = polyPoints.get(planeIndex);\n      final GeoPoint endPoint = polyPoints.get(legalIndex(planeIndex + 1, polyPoints.size()));\n      final GeoPoint beforeStartPoint = polyPoints.get(legalIndex(planeIndex - 1, polyPoints.size()));\n      final GeoPoint afterEndPoint = polyPoints.get(legalIndex(planeIndex + 2, polyPoints.size()));\n      final SidedPlane beforePlane = new SidedPlane(endPoint, beforeStartPoint, startPoint);\n      final SidedPlane afterPlane = new SidedPlane(startPoint, endPoint, afterEndPoint);\n      final Plane plane = new Plane(startPoint, endPoint);\n      \n      // Check for intersections!!\n      if (outsidePolygon.intersects(plane, null, beforePlane, afterPlane)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  protected static boolean verifyPolygon(final PlanetModel pm, final Polygon polygon, final GeoPolygon outsidePolygon) {\n    // Each point in the new poly should be inside the outside poly, and each edge should not intersect the outside poly edge\n    final double[] lats = polygon.getPolyLats();\n    final double[] lons = polygon.getPolyLons();\n    final List<GeoPoint> polyPoints = new ArrayList<>(lats.length-1);\n    for (int i = 0; i < lats.length - 1; i++) {\n      final GeoPoint newPoint = new GeoPoint(pm, Math.toRadians(lats[i]), Math.toRadians(lons[i]));\n      if (!outsidePolygon.isWithin(newPoint)) {\n        return false;\n      }\n      polyPoints.add(newPoint);\n    }\n    // We don't need to construct the world to find intersections -- just the bordering planes. \n    for (int planeIndex = 0; planeIndex < polyPoints.size(); planeIndex++) {\n      final GeoPoint startPoint = polyPoints.get(planeIndex);\n      final GeoPoint endPoint = polyPoints.get(legalIndex(planeIndex + 1, polyPoints.size()));\n      final GeoPoint beforeStartPoint = polyPoints.get(legalIndex(planeIndex - 1, polyPoints.size()));\n      final GeoPoint afterEndPoint = polyPoints.get(legalIndex(planeIndex + 2, polyPoints.size()));\n      final SidedPlane beforePlane = new SidedPlane(endPoint, beforeStartPoint, startPoint);\n      final SidedPlane afterPlane = new SidedPlane(startPoint, endPoint, afterEndPoint);\n      final Plane plane = new Plane(startPoint, endPoint);\n      \n      // Check for intersections!!\n      if (outsidePolygon.intersects(plane, null, beforePlane, afterPlane)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01f1a345a808c3a24ce12b4540ab4847c0dac9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6edf4e73fba5b40b042f1f2dda5752e95a10b393":["01f1a345a808c3a24ce12b4540ab4847c0dac9b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6edf4e73fba5b40b042f1f2dda5752e95a10b393"]},"commit2Childs":{"01f1a345a808c3a24ce12b4540ab4847c0dac9b0":["6edf4e73fba5b40b042f1f2dda5752e95a10b393"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f1a345a808c3a24ce12b4540ab4847c0dac9b0"],"6edf4e73fba5b40b042f1f2dda5752e95a10b393":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}