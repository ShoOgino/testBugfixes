{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#checkFileNames(Collection[String]).mjava","commits":[{"id":"0ff6d29b386d9d2fe7848cf6a9175ba42276a00b","date":1343584789,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#checkFileNames(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkFileNames(Collection<String> files) {\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n    for (String file : files) {\n      m.reset(file);\n      if (!m.matches()) {\n        throw new IllegalArgumentException(\"invalid codec filename '\" + file + \"', must match: \" + IndexFileNames.CODEC_FILE_PATTERN.pattern());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#checkFileNames(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkFileNames(Collection<String> files) {\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n    for (String file : files) {\n      m.reset(file);\n      if (!m.matches()) {\n        throw new IllegalArgumentException(\"invalid codec filename '\" + file + \"', must match: \" + IndexFileNames.CODEC_FILE_PATTERN.pattern());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#checkFileNames(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkFileNames(Collection<String> files) {\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n    for (String file : files) {\n      m.reset(file);\n      if (!m.matches()) {\n        throw new IllegalArgumentException(\"invalid codec filename '\" + file + \"', must match: \" + IndexFileNames.CODEC_FILE_PATTERN.pattern());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57deae53907a4ece55c7e78d3aab19592ad083a5","date":1446894468,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#checkFileNames(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#checkFileNames(Collection[String]).mjava","sourceNew":"  private void checkFileNames(Collection<String> files) {\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n    for (String file : files) {\n      m.reset(file);\n      if (!m.matches()) {\n        throw new IllegalArgumentException(\"invalid codec filename '\" + file + \"', must match: \" + IndexFileNames.CODEC_FILE_PATTERN.pattern());\n      }\n      if (file.toLowerCase(Locale.ROOT).endsWith(\".tmp\")) {\n        throw new IllegalArgumentException(\"invalid codec filename '\" + file + \"', cannot end with .tmp extension\");\n      }\n    }\n  }\n\n","sourceOld":"  private void checkFileNames(Collection<String> files) {\n    Matcher m = IndexFileNames.CODEC_FILE_PATTERN.matcher(\"\");\n    for (String file : files) {\n      m.reset(file);\n      if (!m.matches()) {\n        throw new IllegalArgumentException(\"invalid codec filename '\" + file + \"', must match: \" + IndexFileNames.CODEC_FILE_PATTERN.pattern());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ff6d29b386d9d2fe7848cf6a9175ba42276a00b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57deae53907a4ece55c7e78d3aab19592ad083a5":["0ff6d29b386d9d2fe7848cf6a9175ba42276a00b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ff6d29b386d9d2fe7848cf6a9175ba42276a00b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ff6d29b386d9d2fe7848cf6a9175ba42276a00b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57deae53907a4ece55c7e78d3aab19592ad083a5"]},"commit2Childs":{"0ff6d29b386d9d2fe7848cf6a9175ba42276a00b":["57deae53907a4ece55c7e78d3aab19592ad083a5","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"57deae53907a4ece55c7e78d3aab19592ad083a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ff6d29b386d9d2fe7848cf6a9175ba42276a00b","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}