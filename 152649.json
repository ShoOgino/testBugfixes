{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7768541e2346b5def32bdf3ae20869498755403","date":1330487921,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';' || c == '/'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';' || c == '/'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"212912761d471e5bfe06cf8027bad27e60a37695","date":1335188643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: {@link org.apache.lucene.queryparser.classic queryparser syntax} \n   * for more information on Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';' || c == '/'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: <a href=\"http://lucene.apache.org/java/docs/nightly/queryparsersyntax.html#Escaping%20Special%20Characters\">Escaping Special Characters</a>\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';' || c == '/'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/util/ClientUtils#escapeQueryChars(String).mjava","sourceNew":"  /**\n   * See: <a href=\"https://www.google.com/?gws_rd=ssl#q=lucene+query+parser+syntax\">Lucene query parser syntax</a>\n   * for more information on Escaping Special Characters\n   */\n  // NOTE: its broken to link to any lucene-queryparser.jar docs, not in classpath!!!!!\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';' || c == '/'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * See: {@link org.apache.lucene.queryparser.classic queryparser syntax} \n   * for more information on Escaping Special Characters\n   */\n  public static String escapeQueryChars(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'\n        || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~'\n        || c == '*' || c == '?' || c == '|' || c == '&'  || c == ';' || c == '/'\n        || Character.isWhitespace(c)) {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":["212912761d471e5bfe06cf8027bad27e60a37695"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7768541e2346b5def32bdf3ae20869498755403":["c26f00b574427b55127e869b935845554afde1fa"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","d7768541e2346b5def32bdf3ae20869498755403"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"212912761d471e5bfe06cf8027bad27e60a37695":["d7768541e2346b5def32bdf3ae20869498755403"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["212912761d471e5bfe06cf8027bad27e60a37695"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"]},"commit2Childs":{"d7768541e2346b5def32bdf3ae20869498755403":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","212912761d471e5bfe06cf8027bad27e60a37695"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d7768541e2346b5def32bdf3ae20869498755403","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"212912761d471e5bfe06cf8027bad27e60a37695":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}