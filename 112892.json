{"path":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = null;\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<Object>(arr));\n      }\n\n      if (info == null) {\n        info = new SimpleOrderedMap<Object>();\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = null;\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<Object>(arr));\n      }\n\n      if (info == null) {\n        info = new SimpleOrderedMap<Object>();\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = null;\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<Object>(arr));\n      }\n\n      if (info == null) {\n        info = new SimpleOrderedMap<Object>();\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = null;\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<Object>(arr));\n      }\n\n      if (info == null) {\n        info = new SimpleOrderedMap<Object>();\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = null;\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<Object>(arr));\n      }\n\n      if (info == null) {\n        info = new SimpleOrderedMap<Object>();\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = null;\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<Object>(arr));\n      }\n\n      if (info == null) {\n        info = new SimpleOrderedMap<Object>();\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4d1401af44658b2fa7b2e026b111d82ee8c2989","date":1347578533,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = null;\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<Object>(arr));\n      }\n\n      if (info == null) {\n        // No responses were received from shards. Show local query info.\n        info = new SimpleOrderedMap<Object>();\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.getQuery(), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = null;\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<Object>(arr));\n      }\n\n      if (info == null) {\n        info = new SimpleOrderedMap<Object>();\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9d424bd039937b4125152b454b3a32754b06f6c","date":1384391321,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<Object>(arr));\n      }\n\n      if (info == null) {\n        // No responses were received from shards. Show local query info.\n        info = new SimpleOrderedMap<Object>();\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.getQuery(), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = null;\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<Object>(arr));\n      }\n\n      if (info == null) {\n        // No responses were received from shards. Show local query info.\n        info = new SimpleOrderedMap<Object>();\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.getQuery(), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<>(arr));\n      }\n\n      if (info == null) {\n        // No responses were received from shards. Show local query info.\n        info = new SimpleOrderedMap<>();\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.getQuery(), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<Object>(arr));\n      }\n\n      if (info == null) {\n        // No responses were received from shards. Show local query info.\n        info = new SimpleOrderedMap<Object>();\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.getQuery(), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e","c1af881a1691e32ac2275b4008656709aa96e369"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e","date":1399316048,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              for (int i = 0; i < sexplain.size(); i++) {\n                String id = sexplain.getName(i);\n                // TODO: lookup won't work for non-string ids... String vs Float\n                ShardDoc sdoc = rb.resultIds.get(id);\n                int idx = sdoc.positionInResponse;\n                arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n              }\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<>(arr));\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.getQuery(), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList explain = new SimpleOrderedMap();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, excludeSet);\n\n          if (rb.isDebugResults()) {\n            NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n            for (int i = 0; i < sexplain.size(); i++) {\n              String id = sexplain.getName(i);\n              // TODO: lookup won't work for non-string ids... String vs Float\n              ShardDoc sdoc = rb.resultIds.get(id);\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<>(arr));\n      }\n\n      if (info == null) {\n        // No responses were received from shards. Show local query info.\n        info = new SimpleOrderedMap<>();\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.getQuery(), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );      \n    }\n    \n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","92005ead3266d7b3283282717d5ecffba1594136","a65fafd2cd022da518bb7ee43dcef8d80014c57d","5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","date":1401992910,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              for (int i = 0; i < sexplain.size(); i++) {\n                String id = sexplain.getName(i);\n                // TODO: lookup won't work for non-string ids... String vs Float\n                ShardDoc sdoc = rb.resultIds.get(id);\n                int idx = sdoc.positionInResponse;\n                arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n              }\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<>(arr));\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.wrap(rb.getQuery()), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              for (int i = 0; i < sexplain.size(); i++) {\n                String id = sexplain.getName(i);\n                // TODO: lookup won't work for non-string ids... String vs Float\n                ShardDoc sdoc = rb.resultIds.get(id);\n                int idx = sdoc.positionInResponse;\n                arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n              }\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<>(arr));\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.getQuery(), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417003906b2e5a3c80420ffe968890cd3da3e8fd","date":1402983907,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the debug content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              for (int i = 0; i < sexplain.size(); i++) {\n                String id = sexplain.getName(i);\n                // TODO: lookup won't work for non-string ids... String vs Float\n                ShardDoc sdoc = rb.resultIds.get(id);\n                int idx = sdoc.positionInResponse;\n                arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n              }\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<>(arr));\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.wrap(rb.getQuery()), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              for (int i = 0; i < sexplain.size(); i++) {\n                String id = sexplain.getName(i);\n                // TODO: lookup won't work for non-string ids... String vs Float\n                ShardDoc sdoc = rb.resultIds.get(id);\n                int idx = sdoc.positionInResponse;\n                arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n              }\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<>(arr));\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.wrap(rb.getQuery()), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","date":1402998114,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the debug content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              for (int i = 0; i < sexplain.size(); i++) {\n                String id = sexplain.getName(i);\n                // TODO: lookup won't work for non-string ids... String vs Float\n                ShardDoc sdoc = rb.resultIds.get(id);\n                int idx = sdoc.positionInResponse;\n                arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n              }\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<>(arr));\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.wrap(rb.getQuery()), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              for (int i = 0; i < sexplain.size(); i++) {\n                String id = sexplain.getName(i);\n                // TODO: lookup won't work for non-string ids... String vs Float\n                ShardDoc sdoc = rb.resultIds.get(id);\n                int idx = sdoc.positionInResponse;\n                arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n              }\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<>(arr));\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.wrap(rb.getQuery()), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1af881a1691e32ac2275b4008656709aa96e369","date":1404496493,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the debug content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              for (int i = 0; i < sexplain.size(); i++) {\n                String id = sexplain.getName(i);\n                // TODO: lookup won't work for non-string ids... String vs Float\n                ShardDoc sdoc = rb.resultIds.get(id);\n                int idx = sdoc.positionInResponse;\n                arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n              }\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n         explain = SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<>());\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.wrap(rb.getQuery()), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the debug content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              for (int i = 0; i < sexplain.size(); i++) {\n                String id = sexplain.getName(i);\n                // TODO: lookup won't work for non-string ids... String vs Float\n                ShardDoc sdoc = rb.resultIds.get(id);\n                int idx = sdoc.positionInResponse;\n                arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n              }\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n        explain = SolrPluginUtils.removeNulls(new SimpleOrderedMap<>(arr));\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.wrap(rb.getQuery()), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fbf043f7a109d13b86b6fc6fee3953b0c103c24","date":1450713625,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the debug content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              SolrPluginUtils.copyNamedListIntoArrayByDocPosInResponse(sexplain, rb.resultIds, arr);\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n         explain = SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<>());\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.wrap(rb.getQuery()), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the debug content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              for (int i = 0; i < sexplain.size(); i++) {\n                String id = sexplain.getName(i);\n                // TODO: lookup won't work for non-string ids... String vs Float\n                ShardDoc sdoc = rb.resultIds.get(id);\n                int idx = sdoc.positionInResponse;\n                arr[idx] = new NamedList.NamedListEntry<>(id, sexplain.getVal(i));\n              }\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n         explain = SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<>());\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.wrap(rb.getQuery()), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the debug content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          @SuppressWarnings({\"rawtypes\"})\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              @SuppressWarnings({\"rawtypes\"})\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              SolrPluginUtils.copyNamedListIntoArrayByDocPosInResponse(sexplain, rb.resultIds, arr);\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n         explain = SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<>());\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.wrap(rb.getQuery()), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.isDebug() && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      NamedList<Object> info = rb.getDebugInfo();\n      NamedList<Object> explain = new SimpleOrderedMap<>();\n\n      Map.Entry<String, Object>[]  arr =  new NamedList.NamedListEntry[rb.resultIds.size()];\n      // Will be set to true if there is at least one response with PURPOSE_GET_DEBUG\n      boolean hasGetDebugResponses = false;\n\n      for (ShardRequest sreq : rb.finished) {\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the debug content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList sdebug = (NamedList)srsp.getSolrResponse().getResponse().get(\"debug\");\n          info = (NamedList)merge(sdebug, info, EXCLUDE_SET);\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_DEBUG) != 0) {\n            hasGetDebugResponses = true;\n            if (rb.isDebugResults()) {\n              NamedList sexplain = (NamedList)sdebug.get(\"explain\");\n              SolrPluginUtils.copyNamedListIntoArrayByDocPosInResponse(sexplain, rb.resultIds, arr);\n            }\n          }\n        }\n      }\n\n      if (rb.isDebugResults()) {\n         explain = SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<>());\n      }\n\n      if (!hasGetDebugResponses) {\n        if (info == null) {\n          info = new SimpleOrderedMap<>();\n        }\n        // No responses were received from shards. Show local query info.\n        SolrPluginUtils.doStandardQueryDebug(\n                rb.req, rb.getQueryString(),  rb.wrap(rb.getQuery()), rb.isDebugQuery(), info);\n        if (rb.isDebugQuery() && rb.getQparser() != null) {\n          rb.getQparser().addDebugInfo(info);\n        }\n      }\n      if (rb.isDebugResults()) {\n        int idx = info.indexOf(\"explain\",0);\n        if (idx>=0) {\n          info.setVal(idx, explain);\n        } else {\n          info.add(\"explain\", explain);\n        }\n      }\n\n      rb.setDebugInfo(info);\n      rb.rsp.add(\"debug\", rb.getDebugInfo() );\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d9d424bd039937b4125152b454b3a32754b06f6c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["6fbf043f7a109d13b86b6fc6fee3953b0c103c24"],"d9d424bd039937b4125152b454b3a32754b06f6c":["e4d1401af44658b2fa7b2e026b111d82ee8c2989"],"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","417003906b2e5a3c80420ffe968890cd3da3e8fd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"417003906b2e5a3c80420ffe968890cd3da3e8fd":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6fbf043f7a109d13b86b6fc6fee3953b0c103c24":["c1af881a1691e32ac2275b4008656709aa96e369"],"e4d1401af44658b2fa7b2e026b111d82ee8c2989":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"c1af881a1691e32ac2275b4008656709aa96e369":["417003906b2e5a3c80420ffe968890cd3da3e8fd"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"c26f00b574427b55127e869b935845554afde1fa":["e4d1401af44658b2fa7b2e026b111d82ee8c2989"],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","417003906b2e5a3c80420ffe968890cd3da3e8fd"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9d424bd039937b4125152b454b3a32754b06f6c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"417003906b2e5a3c80420ffe968890cd3da3e8fd":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","c1af881a1691e32ac2275b4008656709aa96e369"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6fbf043f7a109d13b86b6fc6fee3953b0c103c24":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"e4d1401af44658b2fa7b2e026b111d82ee8c2989":["d9d424bd039937b4125152b454b3a32754b06f6c"],"c1af881a1691e32ac2275b4008656709aa96e369":["6fbf043f7a109d13b86b6fc6fee3953b0c103c24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}