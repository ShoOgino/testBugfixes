{"path":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#getApis(Object).mjava","commits":[{"id":"0cdbfc1e5714aafb41cabb055936a38ba4db5362","date":1587983533,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#getApis(Object).mjava","pathOld":"/dev/null","sourceNew":"  public static List<Api> getApis(Object obj) {\n    Class<? extends Object> klas = obj.getClass();\n    if (!Modifier.isPublic(klas.getModifiers())) {\n      throw new RuntimeException(obj.getClass().getName() + \" is not public\");\n    }\n    if (klas.getAnnotation(EndPoint.class) != null) {\n      EndPoint endPoint = klas.getAnnotation(EndPoint.class);\n      List<Method> methods = new ArrayList<>();\n      Map<String, Cmd> commands = new HashMap<>();\n      for (Method m : klas.getDeclaredMethods()) {\n        Command command = m.getAnnotation(Command.class);\n        if (command != null) {\n          methods.add(m);\n          if (commands.containsKey(command.name())) {\n            throw new RuntimeException(\"Duplicate commands \" + command.name());\n          }\n          commands.put(command.name(), new Cmd(command.name(), obj, m));\n        }\n      }\n      if (commands.isEmpty()) {\n        throw new RuntimeException(\"No method with @Command in class: \" + obj.getClass().getName());\n      }\n      SpecProvider specProvider = readSpec(endPoint, methods);\n      return Collections.singletonList(new AnnotatedApi(specProvider, endPoint, commands, null));\n    } else {\n      List<Api> apis = new ArrayList<>();\n      for (Method m : klas.getDeclaredMethods()) {\n        EndPoint endPoint = m.getAnnotation(EndPoint.class);\n        if (endPoint == null) continue;\n        if (!Modifier.isPublic(m.getModifiers())) {\n          throw new RuntimeException(\"Non public method \" + m.toGenericString());\n        }\n        Cmd cmd = new Cmd(\"\", obj, m);\n        SpecProvider specProvider = readSpec(endPoint, Collections.singletonList(m));\n        apis.add(new AnnotatedApi(specProvider, endPoint, Collections.singletonMap(\"\", cmd), null));\n      }\n      if (apis.isEmpty()) {\n        throw new RuntimeException(\"Invalid Class : \" + obj.getClass().getName() + \" No @EndPoints\");\n      }\n      return apis;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650b520f2a4daa4b0712e2393dc29ae7f21f10ac","date":1593054531,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#getApis(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#getApis(Object).mjava","sourceNew":"  public static List<Api> getApis(Object obj) {\n    return getApis(obj.getClass(), obj);\n  }\n\n","sourceOld":"  public static List<Api> getApis(Object obj) {\n    Class<? extends Object> klas = obj.getClass();\n    if (!Modifier.isPublic(klas.getModifiers())) {\n      throw new RuntimeException(obj.getClass().getName() + \" is not public\");\n    }\n    if (klas.getAnnotation(EndPoint.class) != null) {\n      EndPoint endPoint = klas.getAnnotation(EndPoint.class);\n      List<Method> methods = new ArrayList<>();\n      Map<String, Cmd> commands = new HashMap<>();\n      for (Method m : klas.getDeclaredMethods()) {\n        Command command = m.getAnnotation(Command.class);\n        if (command != null) {\n          methods.add(m);\n          if (commands.containsKey(command.name())) {\n            throw new RuntimeException(\"Duplicate commands \" + command.name());\n          }\n          commands.put(command.name(), new Cmd(command.name(), obj, m));\n        }\n      }\n      if (commands.isEmpty()) {\n        throw new RuntimeException(\"No method with @Command in class: \" + obj.getClass().getName());\n      }\n      SpecProvider specProvider = readSpec(endPoint, methods);\n      return Collections.singletonList(new AnnotatedApi(specProvider, endPoint, commands, null));\n    } else {\n      List<Api> apis = new ArrayList<>();\n      for (Method m : klas.getDeclaredMethods()) {\n        EndPoint endPoint = m.getAnnotation(EndPoint.class);\n        if (endPoint == null) continue;\n        if (!Modifier.isPublic(m.getModifiers())) {\n          throw new RuntimeException(\"Non public method \" + m.toGenericString());\n        }\n        Cmd cmd = new Cmd(\"\", obj, m);\n        SpecProvider specProvider = readSpec(endPoint, Collections.singletonList(m));\n        apis.add(new AnnotatedApi(specProvider, endPoint, Collections.singletonMap(\"\", cmd), null));\n      }\n      if (apis.isEmpty()) {\n        throw new RuntimeException(\"Invalid Class : \" + obj.getClass().getName() + \" No @EndPoints\");\n      }\n      return apis;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["0cdbfc1e5714aafb41cabb055936a38ba4db5362"],"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"]},"commit2Childs":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdbfc1e5714aafb41cabb055936a38ba4db5362"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}