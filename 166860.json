{"path":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","commits":[{"id":"d656bfb8102419b4568f368a9606efc4f059912e","date":1217031644,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load the request processors configured in solrconfig.xml\n   */\n  private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains() {\n    final Map<String,UpdateRequestProcessorChain> map = new HashMap<String, UpdateRequestProcessorChain>();\n    \n    final String parsingErrorText = \"Parsing Update Request Processor Chain\";\n    UpdateRequestProcessorChain def = null;\n    \n    // This is kinda ugly, but at least it keeps the xpath logic in one place\n    // away from the Processors themselves.  \n    XPath xpath = solrConfig.getXPath();\n    NodeList nodes = (NodeList)solrConfig.evaluate(\"updateRequestProcessorChain\", XPathConstants.NODESET);\n    boolean requireName = nodes.getLength() > 1;\n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        String name       = DOMUtil.getAttr(node,\"name\", requireName?parsingErrorText:null);\n        boolean isDefault = \"true\".equals( DOMUtil.getAttr(node,\"default\", null ) );\n        \n        NodeList links = null;\n        try {\n          links = (NodeList)xpath.evaluate(\"processor\", node, XPathConstants.NODESET);\n        } \n        catch (XPathExpressionException e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error reading processors\",e,false);\n        }\n        if( links == null || links.getLength() < 1 ) {\n          throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n        }\n        \n        // keep a list of the factories...\n        final ArrayList<UpdateRequestProcessorFactory> factories = new ArrayList<UpdateRequestProcessorFactory>(links.getLength());\n        // Load and initialize the plugin chain\n        AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n            = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"processor chain\", false, false ) {\n          @Override\n          protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n            plugin.init( (node==null)?null:DOMUtil.childNodesToNamedList(node) );\n          }\n    \n          @Override\n          protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n            factories.add( plugin );\n            return null;\n          }\n        };\n        loader.load( solrConfig.getResourceLoader(), links );\n        \n        \n        UpdateRequestProcessorChain chain = new UpdateRequestProcessorChain( \n            factories.toArray( new UpdateRequestProcessorFactory[factories.size()] ) );\n        if( isDefault || nodes.getLength()==1 ) {\n          def = chain;\n        }\n        if( name != null ) {\n          map.put(name, chain);\n        }\n      }\n    }\n    \n    if( def == null ) {\n      // construct the default chain\n      UpdateRequestProcessorFactory[] factories = new UpdateRequestProcessorFactory[] {\n        new RunUpdateProcessorFactory(),\n        new LogUpdateProcessorFactory()\n      };\n      def = new UpdateRequestProcessorChain( factories );\n    }\n    map.put( null, def );\n    map.put( \"\", def );\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb","date":1244526657,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","sourceNew":"  /**\n   * Load the request processors\n   */\n   private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains() {\n    final Map<String, UpdateRequestProcessorChain> map = new HashMap<String, UpdateRequestProcessorChain>();\n    UpdateRequestProcessorChain def = null;\n    Map<String, List<SolrConfig.PluginInfo>> infos = solrConfig.getUpdateProcessorChainInfo();\n    System.out.println(infos);\n    if (!infos.isEmpty()) {\n      boolean defaultProcessed = false;\n      List<SolrConfig.PluginInfo> defProcessorChainInfo = infos.get(null);// this is the default one\n      for (Map.Entry<String, List<SolrConfig.PluginInfo>> e : solrConfig.getUpdateProcessorChainInfo().entrySet()) {\n        List<SolrConfig.PluginInfo> processorsInfo = e.getValue();\n        if (processorsInfo == defProcessorChainInfo && defaultProcessed) {\n          map.put(e.getKey(), def);\n          continue;\n        }\n        UpdateRequestProcessorFactory[] chain = new UpdateRequestProcessorFactory[processorsInfo.size()];\n        for (int i = 0; i < processorsInfo.size(); i++) {\n          SolrConfig.PluginInfo info = processorsInfo.get(i);\n          chain[i] = createInstance(info.className, UpdateRequestProcessorFactory.class, null);\n          chain[i].init(info.initArgs);\n        }\n        UpdateRequestProcessorChain processorChain = new UpdateRequestProcessorChain(chain);\n        map.put(e.getKey(), processorChain);\n        if (e.getKey() == null || processorsInfo == defProcessorChainInfo) { //this is the default one\n          defaultProcessed = true;\n          def = processorChain;\n        }\n      }\n    }\n\n    if (def == null) {\n      // construct the default chain\n      UpdateRequestProcessorFactory[] factories = new UpdateRequestProcessorFactory[]{\n              new RunUpdateProcessorFactory(),\n              new LogUpdateProcessorFactory()\n      };\n      def = new UpdateRequestProcessorChain(factories);\n    }\n    map.put(null, def);\n    map.put(\"\", def);\n    return map;\n  }\n\n","sourceOld":"  /**\n   * Load the request processors configured in solrconfig.xml\n   */\n  private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains() {\n    final Map<String,UpdateRequestProcessorChain> map = new HashMap<String, UpdateRequestProcessorChain>();\n    \n    final String parsingErrorText = \"Parsing Update Request Processor Chain\";\n    UpdateRequestProcessorChain def = null;\n    \n    // This is kinda ugly, but at least it keeps the xpath logic in one place\n    // away from the Processors themselves.  \n    XPath xpath = solrConfig.getXPath();\n    NodeList nodes = (NodeList)solrConfig.evaluate(\"updateRequestProcessorChain\", XPathConstants.NODESET);\n    boolean requireName = nodes.getLength() > 1;\n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        String name       = DOMUtil.getAttr(node,\"name\", requireName?parsingErrorText:null);\n        boolean isDefault = \"true\".equals( DOMUtil.getAttr(node,\"default\", null ) );\n        \n        NodeList links = null;\n        try {\n          links = (NodeList)xpath.evaluate(\"processor\", node, XPathConstants.NODESET);\n        } \n        catch (XPathExpressionException e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error reading processors\",e,false);\n        }\n        if( links == null || links.getLength() < 1 ) {\n          throw new RuntimeException( \"updateRequestProcessorChain require at least one processor\");\n        }\n        \n        // keep a list of the factories...\n        final ArrayList<UpdateRequestProcessorFactory> factories = new ArrayList<UpdateRequestProcessorFactory>(links.getLength());\n        // Load and initialize the plugin chain\n        AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n            = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"processor chain\", false, false ) {\n          @Override\n          protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n            plugin.init( (node==null)?null:DOMUtil.childNodesToNamedList(node) );\n          }\n    \n          @Override\n          protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n            factories.add( plugin );\n            return null;\n          }\n        };\n        loader.load( solrConfig.getResourceLoader(), links );\n        \n        \n        UpdateRequestProcessorChain chain = new UpdateRequestProcessorChain( \n            factories.toArray( new UpdateRequestProcessorFactory[factories.size()] ) );\n        if( isDefault || nodes.getLength()==1 ) {\n          def = chain;\n        }\n        if( name != null ) {\n          map.put(name, chain);\n        }\n      }\n    }\n    \n    if( def == null ) {\n      // construct the default chain\n      UpdateRequestProcessorFactory[] factories = new UpdateRequestProcessorFactory[] {\n        new RunUpdateProcessorFactory(),\n        new LogUpdateProcessorFactory()\n      };\n      def = new UpdateRequestProcessorChain( factories );\n    }\n    map.put( null, def );\n    map.put( \"\", def );\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b11ca3200556357425e9c7ee2c3977909dcff5b","date":1244545820,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","sourceNew":"  /**\n   * Load the request processors\n   */\n   private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains() {\n    final Map<String, UpdateRequestProcessorChain> map = new HashMap<String, UpdateRequestProcessorChain>();\n    UpdateRequestProcessorChain def = null;\n    Map<String, List<SolrConfig.PluginInfo>> infos = solrConfig.getUpdateProcessorChainInfo();\n    if (!infos.isEmpty()) {\n      boolean defaultProcessed = false;\n      List<SolrConfig.PluginInfo> defProcessorChainInfo = infos.get(null);// this is the default one\n      for (Map.Entry<String, List<SolrConfig.PluginInfo>> e : solrConfig.getUpdateProcessorChainInfo().entrySet()) {\n        List<SolrConfig.PluginInfo> processorsInfo = e.getValue();\n        if (processorsInfo == defProcessorChainInfo && defaultProcessed) {\n          map.put(e.getKey(), def);\n          continue;\n        }\n        UpdateRequestProcessorFactory[] chain = new UpdateRequestProcessorFactory[processorsInfo.size()];\n        for (int i = 0; i < processorsInfo.size(); i++) {\n          SolrConfig.PluginInfo info = processorsInfo.get(i);\n          chain[i] = createInstance(info.className, UpdateRequestProcessorFactory.class, null);\n          chain[i].init(info.initArgs);\n        }\n        UpdateRequestProcessorChain processorChain = new UpdateRequestProcessorChain(chain);\n        map.put(e.getKey(), processorChain);\n        if (e.getKey() == null || processorsInfo == defProcessorChainInfo) { //this is the default one\n          defaultProcessed = true;\n          def = processorChain;\n        }\n      }\n    }\n\n    if (def == null) {\n      // construct the default chain\n      UpdateRequestProcessorFactory[] factories = new UpdateRequestProcessorFactory[]{\n              new RunUpdateProcessorFactory(),\n              new LogUpdateProcessorFactory()\n      };\n      def = new UpdateRequestProcessorChain(factories);\n    }\n    map.put(null, def);\n    map.put(\"\", def);\n    return map;\n  }\n\n","sourceOld":"  /**\n   * Load the request processors\n   */\n   private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains() {\n    final Map<String, UpdateRequestProcessorChain> map = new HashMap<String, UpdateRequestProcessorChain>();\n    UpdateRequestProcessorChain def = null;\n    Map<String, List<SolrConfig.PluginInfo>> infos = solrConfig.getUpdateProcessorChainInfo();\n    System.out.println(infos);\n    if (!infos.isEmpty()) {\n      boolean defaultProcessed = false;\n      List<SolrConfig.PluginInfo> defProcessorChainInfo = infos.get(null);// this is the default one\n      for (Map.Entry<String, List<SolrConfig.PluginInfo>> e : solrConfig.getUpdateProcessorChainInfo().entrySet()) {\n        List<SolrConfig.PluginInfo> processorsInfo = e.getValue();\n        if (processorsInfo == defProcessorChainInfo && defaultProcessed) {\n          map.put(e.getKey(), def);\n          continue;\n        }\n        UpdateRequestProcessorFactory[] chain = new UpdateRequestProcessorFactory[processorsInfo.size()];\n        for (int i = 0; i < processorsInfo.size(); i++) {\n          SolrConfig.PluginInfo info = processorsInfo.get(i);\n          chain[i] = createInstance(info.className, UpdateRequestProcessorFactory.class, null);\n          chain[i].init(info.initArgs);\n        }\n        UpdateRequestProcessorChain processorChain = new UpdateRequestProcessorChain(chain);\n        map.put(e.getKey(), processorChain);\n        if (e.getKey() == null || processorsInfo == defProcessorChainInfo) { //this is the default one\n          defaultProcessed = true;\n          def = processorChain;\n        }\n      }\n    }\n\n    if (def == null) {\n      // construct the default chain\n      UpdateRequestProcessorFactory[] factories = new UpdateRequestProcessorFactory[]{\n              new RunUpdateProcessorFactory(),\n              new LogUpdateProcessorFactory()\n      };\n      def = new UpdateRequestProcessorChain(factories);\n    }\n    map.put(null, def);\n    map.put(\"\", def);\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d10311dc892eac490ca97851d5764dfe32d86759","date":1251102986,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","sourceNew":"  /**\n   * Load the request processors\n   */\n   private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains() {\n    final Map<String, UpdateRequestProcessorChain> map = new HashMap<String, UpdateRequestProcessorChain>();\n    UpdateRequestProcessorChain def = null;\n    Map<String, List<PluginInfo>> infos = solrConfig.getUpdateProcessorChainInfo();\n    if (!infos.isEmpty()) {\n      boolean defaultProcessed = false;\n      List<PluginInfo> defProcessorChainInfo = infos.get(null);// this is the default one\n      for (Map.Entry<String, List<PluginInfo>> e : solrConfig.getUpdateProcessorChainInfo().entrySet()) {\n        List<PluginInfo> processorsInfo = e.getValue();\n        if (processorsInfo == defProcessorChainInfo && defaultProcessed) {\n          map.put(e.getKey(), def);\n          continue;\n        }\n        UpdateRequestProcessorFactory[] chain = new UpdateRequestProcessorFactory[processorsInfo.size()];\n        for (int i = 0; i < processorsInfo.size(); i++) {\n          PluginInfo info = processorsInfo.get(i);\n          chain[i] = createInstance(info.className, UpdateRequestProcessorFactory.class, null);\n          chain[i].init(info.initArgs);\n        }\n        UpdateRequestProcessorChain processorChain = new UpdateRequestProcessorChain(chain);\n        map.put(e.getKey(), processorChain);\n        if (e.getKey() == null || processorsInfo == defProcessorChainInfo) { //this is the default one\n          defaultProcessed = true;\n          def = processorChain;\n        }\n      }\n    }\n\n    if (def == null) {\n      // construct the default chain\n      UpdateRequestProcessorFactory[] factories = new UpdateRequestProcessorFactory[]{\n              new RunUpdateProcessorFactory(),\n              new LogUpdateProcessorFactory()\n      };\n      def = new UpdateRequestProcessorChain(factories);\n    }\n    map.put(null, def);\n    map.put(\"\", def);\n    return map;\n  }\n\n","sourceOld":"  /**\n   * Load the request processors\n   */\n   private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains() {\n    final Map<String, UpdateRequestProcessorChain> map = new HashMap<String, UpdateRequestProcessorChain>();\n    UpdateRequestProcessorChain def = null;\n    Map<String, List<SolrConfig.PluginInfo>> infos = solrConfig.getUpdateProcessorChainInfo();\n    if (!infos.isEmpty()) {\n      boolean defaultProcessed = false;\n      List<SolrConfig.PluginInfo> defProcessorChainInfo = infos.get(null);// this is the default one\n      for (Map.Entry<String, List<SolrConfig.PluginInfo>> e : solrConfig.getUpdateProcessorChainInfo().entrySet()) {\n        List<SolrConfig.PluginInfo> processorsInfo = e.getValue();\n        if (processorsInfo == defProcessorChainInfo && defaultProcessed) {\n          map.put(e.getKey(), def);\n          continue;\n        }\n        UpdateRequestProcessorFactory[] chain = new UpdateRequestProcessorFactory[processorsInfo.size()];\n        for (int i = 0; i < processorsInfo.size(); i++) {\n          SolrConfig.PluginInfo info = processorsInfo.get(i);\n          chain[i] = createInstance(info.className, UpdateRequestProcessorFactory.class, null);\n          chain[i].init(info.initArgs);\n        }\n        UpdateRequestProcessorChain processorChain = new UpdateRequestProcessorChain(chain);\n        map.put(e.getKey(), processorChain);\n        if (e.getKey() == null || processorsInfo == defProcessorChainInfo) { //this is the default one\n          defaultProcessed = true;\n          def = processorChain;\n        }\n      }\n    }\n\n    if (def == null) {\n      // construct the default chain\n      UpdateRequestProcessorFactory[] factories = new UpdateRequestProcessorFactory[]{\n              new RunUpdateProcessorFactory(),\n              new LogUpdateProcessorFactory()\n      };\n      def = new UpdateRequestProcessorChain(factories);\n    }\n    map.put(null, def);\n    map.put(\"\", def);\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a7153c5cd4b2cd8054f8e46101442030d8a3c37","date":1253512682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","sourceNew":"  /**\n   * Load the request processors\n   */\n   private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains() {\n    Map<String, UpdateRequestProcessorChain> map = new HashMap<String, UpdateRequestProcessorChain>();\n    UpdateRequestProcessorChain def = initPlugins(map,UpdateRequestProcessorChain.class, UpdateRequestProcessorChain.class.getName());\n    if(def == null){\n      def = map.get(null);\n    } \n    if (def == null) {\n      // construct the default chain\n      UpdateRequestProcessorFactory[] factories = new UpdateRequestProcessorFactory[]{\n              new RunUpdateProcessorFactory(),\n              new LogUpdateProcessorFactory()\n      };\n      def = new UpdateRequestProcessorChain(factories, this);\n    }\n    map.put(null, def);\n    map.put(\"\", def);\n    return map;\n  }\n\n","sourceOld":"  /**\n   * Load the request processors\n   */\n   private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains() {\n    final Map<String, UpdateRequestProcessorChain> map = new HashMap<String, UpdateRequestProcessorChain>();\n    UpdateRequestProcessorChain def = null;\n    Map<String, List<PluginInfo>> infos = solrConfig.getUpdateProcessorChainInfo();\n    if (!infos.isEmpty()) {\n      boolean defaultProcessed = false;\n      List<PluginInfo> defProcessorChainInfo = infos.get(null);// this is the default one\n      for (Map.Entry<String, List<PluginInfo>> e : solrConfig.getUpdateProcessorChainInfo().entrySet()) {\n        List<PluginInfo> processorsInfo = e.getValue();\n        if (processorsInfo == defProcessorChainInfo && defaultProcessed) {\n          map.put(e.getKey(), def);\n          continue;\n        }\n        UpdateRequestProcessorFactory[] chain = new UpdateRequestProcessorFactory[processorsInfo.size()];\n        for (int i = 0; i < processorsInfo.size(); i++) {\n          PluginInfo info = processorsInfo.get(i);\n          chain[i] = createInstance(info.className, UpdateRequestProcessorFactory.class, null);\n          chain[i].init(info.initArgs);\n        }\n        UpdateRequestProcessorChain processorChain = new UpdateRequestProcessorChain(chain);\n        map.put(e.getKey(), processorChain);\n        if (e.getKey() == null || processorsInfo == defProcessorChainInfo) { //this is the default one\n          defaultProcessed = true;\n          def = processorChain;\n        }\n      }\n    }\n\n    if (def == null) {\n      // construct the default chain\n      UpdateRequestProcessorFactory[] factories = new UpdateRequestProcessorFactory[]{\n              new RunUpdateProcessorFactory(),\n              new LogUpdateProcessorFactory()\n      };\n      def = new UpdateRequestProcessorChain(factories);\n    }\n    map.put(null, def);\n    map.put(\"\", def);\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessorChains().mjava","sourceNew":"  /**\n   * Load the request processors\n   */\n   private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains() {\n    Map<String, UpdateRequestProcessorChain> map = new HashMap<String, UpdateRequestProcessorChain>();\n    UpdateRequestProcessorChain def = initPlugins(map,UpdateRequestProcessorChain.class, UpdateRequestProcessorChain.class.getName());\n    if(def == null){\n      def = map.get(null);\n    } \n    if (def == null) {\n      // construct the default chain\n      UpdateRequestProcessorFactory[] factories = new UpdateRequestProcessorFactory[]{\n              new RunUpdateProcessorFactory(),\n              new LogUpdateProcessorFactory()\n      };\n      def = new UpdateRequestProcessorChain(factories, this);\n    }\n    map.put(null, def);\n    map.put(\"\", def);\n    return map;\n  }\n\n","sourceOld":"  /**\n   * Load the request processors\n   */\n   private Map<String,UpdateRequestProcessorChain> loadUpdateProcessorChains() {\n    Map<String, UpdateRequestProcessorChain> map = new HashMap<String, UpdateRequestProcessorChain>();\n    UpdateRequestProcessorChain def = initPlugins(map,UpdateRequestProcessorChain.class, UpdateRequestProcessorChain.class.getName());\n    if(def == null){\n      def = map.get(null);\n    } \n    if (def == null) {\n      // construct the default chain\n      UpdateRequestProcessorFactory[] factories = new UpdateRequestProcessorFactory[]{\n              new RunUpdateProcessorFactory(),\n              new LogUpdateProcessorFactory()\n      };\n      def = new UpdateRequestProcessorChain(factories, this);\n    }\n    map.put(null, def);\n    map.put(\"\", def);\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b11ca3200556357425e9c7ee2c3977909dcff5b":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["d656bfb8102419b4568f368a9606efc4f059912e"],"d10311dc892eac490ca97851d5764dfe32d86759":["5b11ca3200556357425e9c7ee2c3977909dcff5b"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["d10311dc892eac490ca97851d5764dfe32d86759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d656bfb8102419b4568f368a9606efc4f059912e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5b11ca3200556357425e9c7ee2c3977909dcff5b":["d10311dc892eac490ca97851d5764dfe32d86759"],"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["5b11ca3200556357425e9c7ee2c3977909dcff5b"],"d10311dc892eac490ca97851d5764dfe32d86759":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d656bfb8102419b4568f368a9606efc4f059912e"],"d656bfb8102419b4568f368a9606efc4f059912e":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}