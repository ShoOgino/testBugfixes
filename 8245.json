{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","sourceNew":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        if (pp1.offset == pp2.offset) {\n          return pp1.ord < pp2.ord;\n        } else {\n          return pp1.offset < pp2.offset;\n        }\n      else {\n        return pp1.position < pp2.position;\n      }\n    else {\n      return pp1.doc < pp2.doc;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        if (pp1.offset == pp2.offset) {\n          return pp1.ord < pp2.ord;\n        } else {\n          return pp1.offset < pp2.offset;\n        }\n      else {\n        return pp1.position < pp2.position;\n      }\n    else {\n      return pp1.doc < pp2.doc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54562c0e8e43530c289ddd16a9d75bc1901fd7b0","date":1424714129,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQueue#lessThan(PhrasePositions,PhrasePositions).mjava","sourceNew":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.position == pp2.position)\n      // same doc and pp.position, so decide by actual term positions. \n      // rely on: pp.position == tp.position - offset. \n      if (pp1.offset == pp2.offset) {\n        return pp1.ord < pp2.ord;\n      } else {\n        return pp1.offset < pp2.offset;\n      }\n    else {\n      return pp1.position < pp2.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected final boolean lessThan(PhrasePositions pp1, PhrasePositions pp2) {\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // same doc and pp.position, so decide by actual term positions. \n        // rely on: pp.position == tp.position - offset. \n        if (pp1.offset == pp2.offset) {\n          return pp1.ord < pp2.ord;\n        } else {\n          return pp1.offset < pp2.offset;\n        }\n      else {\n        return pp1.position < pp2.position;\n      }\n    else {\n      return pp1.doc < pp2.doc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54562c0e8e43530c289ddd16a9d75bc1901fd7b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54562c0e8e43530c289ddd16a9d75bc1901fd7b0"]},"commit2Childs":{"54562c0e8e43530c289ddd16a9d75bc1901fd7b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["54562c0e8e43530c289ddd16a9d75bc1901fd7b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}