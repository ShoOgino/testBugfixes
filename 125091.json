{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ClusterDataProvider,List[String]).mjava","commits":[{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ClusterDataProvider,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ClusterDataProvider cdp,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cdp.getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cdp,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ClusterDataProvider,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ClusterDataProvider cdp,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    SolrClientDataProvider clientDataProvider = null;\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cdp.getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cdp,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (clientDataProvider != null) log.trace(\"CLUSTER_DATA_PROVIDER: \" + Utils.toJSONString(clientDataProvider));\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b869898f50ca80263bac2e3ae0949f7700e5c977","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}