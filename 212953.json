{"path":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#applyDeletes(IndexWriter.ReaderPool,SegmentInfo,SegmentDeletes,SegmentDeletes).mjava","commits":[{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#applyDeletes(IndexWriter.ReaderPool,SegmentInfo,SegmentDeletes,SegmentDeletes).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized boolean applyDeletes(IndexWriter.ReaderPool readerPool,\n                                            SegmentInfo info, \n                                            SegmentDeletes coalescedDeletes,\n                                            SegmentDeletes segmentDeletes) throws IOException {    \n    assert readerPool.infoIsLive(info);\n    \n    assert coalescedDeletes == null || coalescedDeletes.docIDs.size() == 0;\n    \n    boolean any = false;\n\n    // Lock order: IW -> BD -> RP\n    SegmentReader reader = readerPool.get(info, false);\n    try {\n      if (coalescedDeletes != null) {\n        any |= applyDeletes(coalescedDeletes, reader);\n      }\n      if (segmentDeletes != null) {\n        any |= applyDeletes(segmentDeletes, reader);\n      }\n    } finally {\n      readerPool.release(reader);\n    }\n    return any;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e175058b6aef7c3f9971e918edcc7ae7ef4347d1","date":1292497297,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#applyDeletes(IndexWriter.ReaderPool,SegmentInfo,SegmentDeletes,SegmentDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#applyDeletes(IndexWriter.ReaderPool,SegmentInfo,SegmentDeletes,SegmentDeletes).mjava","sourceNew":"  private synchronized long applyDeletes(IndexWriter.ReaderPool readerPool,\n                                            SegmentInfo info, \n                                            SegmentDeletes coalescedDeletes,\n                                            SegmentDeletes segmentDeletes) throws IOException {    \n    assert readerPool.infoIsLive(info);\n    \n    assert coalescedDeletes == null || coalescedDeletes.docIDs.size() == 0;\n    \n    long delCount = 0;\n\n    // Lock order: IW -> BD -> RP\n    SegmentReader reader = readerPool.get(info, false);\n    try {\n      if (coalescedDeletes != null) {\n        delCount += applyDeletes(coalescedDeletes, reader);\n      }\n      if (segmentDeletes != null) {\n        delCount += applyDeletes(segmentDeletes, reader);\n      }\n    } finally {\n      readerPool.release(reader);\n    }\n    return delCount;\n  }\n\n","sourceOld":"  private synchronized boolean applyDeletes(IndexWriter.ReaderPool readerPool,\n                                            SegmentInfo info, \n                                            SegmentDeletes coalescedDeletes,\n                                            SegmentDeletes segmentDeletes) throws IOException {    \n    assert readerPool.infoIsLive(info);\n    \n    assert coalescedDeletes == null || coalescedDeletes.docIDs.size() == 0;\n    \n    boolean any = false;\n\n    // Lock order: IW -> BD -> RP\n    SegmentReader reader = readerPool.get(info, false);\n    try {\n      if (coalescedDeletes != null) {\n        any |= applyDeletes(coalescedDeletes, reader);\n      }\n      if (segmentDeletes != null) {\n        any |= applyDeletes(segmentDeletes, reader);\n      }\n    } finally {\n      readerPool.release(reader);\n    }\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#applyDeletes(IndexWriter.ReaderPool,SegmentInfo,SegmentDeletes,SegmentDeletes).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized long applyDeletes(IndexWriter.ReaderPool readerPool,\n                                            SegmentInfo info, \n                                            SegmentDeletes coalescedDeletes,\n                                            SegmentDeletes segmentDeletes) throws IOException {    \n    assert readerPool.infoIsLive(info);\n    \n    assert coalescedDeletes == null || coalescedDeletes.docIDs.size() == 0;\n    \n    long delCount = 0;\n\n    // Lock order: IW -> BD -> RP\n    SegmentReader reader = readerPool.get(info, false);\n    try {\n      if (coalescedDeletes != null) {\n        delCount += applyDeletes(coalescedDeletes, reader);\n      }\n      if (segmentDeletes != null) {\n        delCount += applyDeletes(segmentDeletes, reader);\n      }\n    } finally {\n      readerPool.release(reader);\n    }\n    return delCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#applyDeletes(IndexWriter.ReaderPool,SegmentInfo,SegmentDeletes,SegmentDeletes).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized long applyDeletes(IndexWriter.ReaderPool readerPool,\n                                            SegmentInfo info,\n                                            SegmentDeletes coalescedDeletes,\n                                            SegmentDeletes segmentDeletes) throws IOException {\n    assert readerPool.infoIsLive(info);\n\n    assert coalescedDeletes == null || coalescedDeletes.docIDs.size() == 0;\n\n    long delCount = 0;\n\n    // Lock order: IW -> BD -> RP\n    SegmentReader reader = readerPool.get(info, false);\n    try {\n      if (coalescedDeletes != null) {\n        delCount += applyDeletes(coalescedDeletes, reader);\n      }\n      if (segmentDeletes != null) {\n        delCount += applyDeletes(segmentDeletes, reader);\n      }\n    } finally {\n      readerPool.release(reader);\n    }\n    return delCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#applyDeletes(IndexWriter.ReaderPool,SegmentInfo,SegmentDeletes,SegmentDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#applyDeletes(IndexWriter.ReaderPool,SegmentInfo,SegmentDeletes,SegmentDeletes).mjava","sourceNew":"  private synchronized long applyDeletes(IndexWriter.ReaderPool readerPool,\n                                         SegmentInfo info, \n                                         SegmentDeletes coalescedDeletes,\n                                         SegmentDeletes segmentDeletes) throws IOException {    \n    assert readerPool.infoIsLive(info);\n    \n    assert coalescedDeletes == null || coalescedDeletes.docIDs.size() == 0;\n    \n    long delCount = 0;\n\n    // Lock order: IW -> BD -> RP\n    SegmentReader reader = readerPool.get(info, false);\n    try {\n      if (coalescedDeletes != null) {\n        delCount += applyDeletes(coalescedDeletes, reader);\n      }\n      if (segmentDeletes != null) {\n        delCount += applyDeletes(segmentDeletes, reader);\n      }\n    } finally {\n      readerPool.release(reader);\n    }\n    return delCount;\n  }\n\n","sourceOld":"  private synchronized long applyDeletes(IndexWriter.ReaderPool readerPool,\n                                            SegmentInfo info, \n                                            SegmentDeletes coalescedDeletes,\n                                            SegmentDeletes segmentDeletes) throws IOException {    \n    assert readerPool.infoIsLive(info);\n    \n    assert coalescedDeletes == null || coalescedDeletes.docIDs.size() == 0;\n    \n    long delCount = 0;\n\n    // Lock order: IW -> BD -> RP\n    SegmentReader reader = readerPool.get(info, false);\n    try {\n      if (coalescedDeletes != null) {\n        delCount += applyDeletes(coalescedDeletes, reader);\n      }\n      if (segmentDeletes != null) {\n        delCount += applyDeletes(segmentDeletes, reader);\n      }\n    } finally {\n      readerPool.release(reader);\n    }\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#applyDeletes(IndexWriter.ReaderPool,SegmentInfo,SegmentDeletes,SegmentDeletes).mjava","sourceNew":null,"sourceOld":"  private synchronized long applyDeletes(IndexWriter.ReaderPool readerPool,\n                                         SegmentInfo info, \n                                         SegmentDeletes coalescedDeletes,\n                                         SegmentDeletes segmentDeletes) throws IOException {    \n    assert readerPool.infoIsLive(info);\n    \n    assert coalescedDeletes == null || coalescedDeletes.docIDs.size() == 0;\n    \n    long delCount = 0;\n\n    // Lock order: IW -> BD -> RP\n    SegmentReader reader = readerPool.get(info, false);\n    try {\n      if (coalescedDeletes != null) {\n        delCount += applyDeletes(coalescedDeletes, reader);\n      }\n      if (segmentDeletes != null) {\n        delCount += applyDeletes(segmentDeletes, reader);\n      }\n    } finally {\n      readerPool.release(reader);\n    }\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#applyDeletes(IndexWriter.ReaderPool,SegmentInfo,SegmentDeletes,SegmentDeletes).mjava","sourceNew":null,"sourceOld":"  private synchronized long applyDeletes(IndexWriter.ReaderPool readerPool,\n                                            SegmentInfo info, \n                                            SegmentDeletes coalescedDeletes,\n                                            SegmentDeletes segmentDeletes) throws IOException {    \n    assert readerPool.infoIsLive(info);\n    \n    assert coalescedDeletes == null || coalescedDeletes.docIDs.size() == 0;\n    \n    long delCount = 0;\n\n    // Lock order: IW -> BD -> RP\n    SegmentReader reader = readerPool.get(info, false);\n    try {\n      if (coalescedDeletes != null) {\n        delCount += applyDeletes(coalescedDeletes, reader);\n      }\n      if (segmentDeletes != null) {\n        delCount += applyDeletes(segmentDeletes, reader);\n      }\n    } finally {\n      readerPool.release(reader);\n    }\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#applyDeletes(IndexWriter.ReaderPool,SegmentInfo,SegmentDeletes,SegmentDeletes).mjava","sourceNew":null,"sourceOld":"  private synchronized long applyDeletes(IndexWriter.ReaderPool readerPool,\n                                            SegmentInfo info,\n                                            SegmentDeletes coalescedDeletes,\n                                            SegmentDeletes segmentDeletes) throws IOException {\n    assert readerPool.infoIsLive(info);\n\n    assert coalescedDeletes == null || coalescedDeletes.docIDs.size() == 0;\n\n    long delCount = 0;\n\n    // Lock order: IW -> BD -> RP\n    SegmentReader reader = readerPool.get(info, false);\n    try {\n      if (coalescedDeletes != null) {\n        delCount += applyDeletes(coalescedDeletes, reader);\n      }\n      if (segmentDeletes != null) {\n        delCount += applyDeletes(segmentDeletes, reader);\n      }\n    } finally {\n      readerPool.release(reader);\n    }\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"cfd641edd796340315609425e9f70819e6d9ef0e":["e175058b6aef7c3f9971e918edcc7ae7ef4347d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e175058b6aef7c3f9971e918edcc7ae7ef4347d1"],"e175058b6aef7c3f9971e918edcc7ae7ef4347d1":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e175058b6aef7c3f9971e918edcc7ae7ef4347d1"],"c19f985e36a65cc969e8e564fe337a0d41512075":["cfd641edd796340315609425e9f70819e6d9ef0e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c19f985e36a65cc969e8e564fe337a0d41512075"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["e175058b6aef7c3f9971e918edcc7ae7ef4347d1"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cfd641edd796340315609425e9f70819e6d9ef0e":["c19f985e36a65cc969e8e564fe337a0d41512075"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"e175058b6aef7c3f9971e918edcc7ae7ef4347d1":["cfd641edd796340315609425e9f70819e6d9ef0e","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}